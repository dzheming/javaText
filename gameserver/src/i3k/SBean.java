// modified by ket.kio.RPCGen at Sat May 06 16:52:15 CST 2017.

package i3k;

import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Set;
import java.util.TreeSet;
import java.util.HashSet;
import java.util.Map;
import java.util.TreeMap;
import java.util.HashMap;
import java.nio.ByteBuffer;

import ket.util.Stream;
import ket.util.SStream;

public final class SBean
{

	public static class GameDataCFGS implements Stream.IStreamable
	{

		public GameDataCFGS() { }

		public GameDataCFGS(int version, List<MapLocation> performanceSpawns, Set<String> badstrs, Map<Integer, Short> headIcons, 
		                    Map<Integer, PropertyCFGS> properties, Map<Integer, BuffCFGS> buffs, Map<Integer, AiTrigerCFGS> aitrigers, Map<Integer, TrigEventCFGS> trigEvents, 
		                    Map<Integer, TrigBehaviorCFGS> trigBehaviors, Map<Integer, StateCFGS> states, Map<Integer, MapBuffCFGS> mapbuffs, Map<Integer, BaseDummyItemCFGS> base, 
		                    Map<Integer, ItemCFGS> items, Map<Integer, EquipCFGS> equips, Map<Integer, EquipRefineGroupCFGS> equipRefines, LegendsCFGS legend, 
		                    Map<Integer, GemCFGS> gems, Map<Integer, BookCFGS> books, Map<Integer, GiftCFGS> gifts, List<CheckInCFGS> checkins, 
		                    Map<Integer, SkillCFGS> skills, List<SkillBournCFGS> skillBourns, Map<Integer, SkillSpecialCFGS> skillSpecial, Map<Integer, SpiritCFGS> spirits, 
		                    Map<Integer, SpiritEffectCFGS> spiritEffects, List<ClassRoleCFGS> classRoles, Map<Integer, ClassRoleFashionCFGS> classRoleFashions, Map<Integer, MonsterCFGS> monsters, 
		                    Map<Integer, NpcCFGS> npcs, Map<Integer, MineralCFGS> minerals, Map<Integer, TrapExpandedCFGS> traps, MonsterDamageCFGS monsterDamages, 
		                    Map<Integer, MapClusterCFGS> mapClusters, Map<Integer, WorldMapCFGS> worldMaps, Map<Integer, MapCopyCFGS> mapcopys, Map<Integer, SectMapCFGS> sectmaps, 
		                    Map<Integer, ArenaMapCFGS> arenamaps, Map<Integer, SuperArenaMapCFGS> superArenaMaps, Map<Integer, BWArenaMapCFGS> bwarenamaps, Map<Integer, ClanOreMapCFGS> clanOreMaps, 
		                    Map<Integer, ClanTaskMapCFGS> clanTaskMaps, Map<Integer, ClanBattleMapCFGS> clanBattleMaps, Map<Integer, ClanBattleHelpMapCFGS> clanBattleHelpMaps, Map<Integer, ActivityMapCFGS> activitymaps, 
		                    Map<Integer, PetLifeMapCFGS> petlifeMaps, Map<Integer, ClimbTowerMapCFGS> climbTowerMaps, Map<Integer, ForceWarMapCFGS> forcewarMaps, Map<Integer, WeaponMapCFGS> weaponMaps, 
		                    List<WeaponMapGradeCFGS> weaponMapGrades, Map<Integer, DemonHoleMapCFGS> demonHoleMaps, Map<Integer, JusticeMapCopyCFGS> justiceMaps, Map<Integer, FightNpcMapCFGS> fightNpcMaps, 
		                    Map<Integer, SpawnAreaCFGS> spawnAreas, Map<Integer, SpawnPointCFGS> spawnPoints, Map<Integer, NpcPointCFGS> npcPoints, Map<Integer, MineralPointCFGS> mineralPoints, 
		                    Map<Integer, WayPointCFGS> wayPoints, Map<Integer, MapBuffPointCFGS> mapBuffPoints, List<PropAwardCFGS> propaward, Map<Integer, ActivityMapGroupCFGS> actMapGroups, 
		                    List<EquipPurgatoryCFGS> purgatory, List<EquipUpStarCFGS> upStar, List<EquipToughenCFGS> toughen, List<LevelCFGS> levels, 
		                    LevelLimitCFGS levelLimit, Map<Integer, FixedDropTableCFGS> fixedDropTbl, Map<Integer, RandomDropTableCFGS> randomDropTbl, Map<Integer, NoDuplicateDropTableCFGS> noDuplicateDropTbl, 
		                    Map<Integer, BuffDropTableCFGS> buffDropTbl, List<MainTaskCFGS> mainTasks, Map<Integer, MainTaskBWTypeCFGS> bwTypeMaintasks, List<WeaponGroupTaskCFGS> weaponTasks, 
		                    List<PetTaskCFGS> petTasks, Map<Integer, PetLifeTaskGroupCFGS> petLifeTasks, List<SectTaskCFGS> sectTasks, Map<Integer, AlterCFGS> alters, 
		                    Map<Integer, MrgSeriesTaskGroupCFGS> mrgSeriesTaskGroups, List<MrgLoopTaskCFGS> mrgLoopTasks, Map<Integer, DailyTaskCFGS> dailyTasks, Map<Integer, DailyTaskCFGS> dailyActivities, 
		                    Map<Integer, ChallengeTaskGroupCFGS> challengeTaskGroups, FameCFGS fames, List<QuestionCFGS> activityQuestionsBank, List<QuestionCFGS> taskQuestionsBank, 
		                    Map<Integer, DailyOnlineGiftCFGS> dailyOnlineGift, OfflineExpCFGS offlineExp, DailyQuizGiftCFGS dailyQuizGift, LuckyWheelCFGS luckyWheel, 
		                    RedEnvelopeCFGS redEnvelope, List<ActivityChallengeTypeCFGS> activityChallengeType, List<EquipSlotCFGS> slots, List<EquipStarAddPropCFGS> starAdditionProp, 
		                    Map<Integer, WeaponCFGS> weapons, Map<Integer, WeaponUniqueSkillCFGS> weaponUSkills, List<PetCFGS> pets, List<PetLvlCFGS> petLvls, 
		                    Map<Integer, PetCoPracticeGroupCFGS> petCoPractices, List<PetTransformCFGS> petTransforms, Map<Integer, PetBreakSkillCFGS> petBreakSkills, Map<Integer, PetSpiritGroupCFGS> petSpiritGroups, 
		                    Map<Integer, PetExploitCFGS> petExploit, List<CLassTransformCFGS> transforms, Map<Integer, SuiteCFGS> suites, List<SectAuthorityCFGS> sectAuthority, 
		                    List<SectUpLevelCFGS> sectUpLevel, List<SectGroupSkillCFGS> sectSkill, List<SectWorshipCFGS> sectWorship, List<SectWorshipExpCFGS> sectWorshipExp, 
		                    List<FightSPCFGS> fightSP, List<BlurCFGS> blurs, List<SectBanquetCFGS> sectBanquet, List<SectIconCFGS> sectIcons, 
		                    List<DIYSkillBaseCFGS> diySkills, DIYSkillUniqueCFGS diySkillUnique, List<DIYSkillGradeCFGS> diySkillGrades, List<DIYSkillActionCFGS> diySkillActions, 
		                    List<DiySkillSlotUnblockCFGS> diySkillSlotUnblock, List<DIYBUFFCFGS> diybuffs, List<VipCFGS> vips, int payId, 
		                    Map<Integer, PayCFGS> pays, List<SpecialCardCFGS> specialCards, Map<String, ChannelCFGS> channels, List<RoleRankCFGS> roleRanks, 
		                    List<SectRankCFGS> sectRanks, ClanCFGS clan, ClanValueCFGS clanValue, Map<Integer, ClanTaskCFGS> clanTask, 
		                    Map<Integer, ClanTaskGroupCFGS> clanGroupTask, List<ClanDiscipleNameCFGS> clanDiscipleName, ArenaCFGS arena, Map<Integer, ArenaRobotCFGS> arenaRobots, 
		                    Map<Integer, ArenaRobotGroupCFGS> arenaRobotGroup, SuperArenaCFGS superarena, Map<Integer, SuperArenaTypeCFGS> superarenaTypes, BWArenaCFGS bwarena, 
		                    Map<Integer, ForceWarCFGS> forcewar, ForceWarBaseCFGS forcewarbase, RandomNameCFGS randomNames, PKCFGS pkSystem, 
		                    ProduceCFGS produce, Map<Integer, ProduceRecipeCFGS> prodeceRecipes, FusionCFGS fusion, List<ShopCFGS> shops, 
		                    List<GambleShopCFGS> gambleShops, CommonCFGS common, Map<Integer, WorldBossCFGS> worldBosses, Map<Integer, WorldMonsterCFGS> worldSuperMonsters, 
		                    Map<Integer, WorldMineralCFGS> worldMinerals, FightFactorCFGS spiritFactors, FightFactorCFGS weaponFactors, Map<Integer, StoreCFGS> stores, 
		                    Map<Integer, HorseCFGS> horses, Map<Integer, HorseEnHanceCFGS> horseEnHances, Map<Integer, HorseEnHanceLvlCFGS> horseEnhanceLvls, Map<Integer, HorseShowCFGS> horseShows, 
		                    Map<Integer, HorseSkillCFGS> horseSkills, Map<Integer, HorseSkillUpdateDataCFGS> horseSkillUpdate, Map<Integer, HorseEffectCFGS> horseEffects, HorseCommonCFGS horseCommon, 
		                    List<HorseEnHanceLvlCommonCFGS> horseEnhanceLvlcommons, Map<Integer, HorseEnHanceTypeCFGS> horseEnhanceTypes, List<HorseEnHanceWeightCFGS> horseEnhanceWeights, TreasureBaseCFGS treasureBase, 
		                    Map<Integer, InfoPointCFGS> infoPoints, Map<Integer, MedalCFGS> medals, Map<Integer, TreasureMapCFGS> treasureMaps, Map<Integer, TreasurePieceCFGS> treasurePieces, 
		                    Map<Integer, TreasureNpcCFGS> treasureNpcs, List<FriendGiveRewardCFGS> friendGive, List<CharmCFGS> charms, Map<Integer, FriendHeadCFGS> friendHead, 
		                    Map<Integer, FashionCFGS> fashions, Map<Integer, SocialActionCFGS> socialActions, SealBaseCFGS sealBase, List<SealGradeCFGS> sealGrades, 
		                    Map<Integer, SealEnhanceTypeCFGS> sealEnhanceTypes, Map<Integer, LeadGroupCFGS> leadGroups, ExpCoinBaseCFGS expCoinBase, Map<Integer, RareBookGroupCFGS> rarebookGroups, 
		                    Map<Integer, GraspGroupCFGS> graspGroups, Map<Integer, DMGTransferLevelCFGS> dmgTransfers, List<DMGTransferBuyCFGS> dmgTransferBuys, Map<Integer, TitleCFGS> titles, 
		                    BetaActivityCFGS betaActivity, Map<Integer, BranchTaskCFGS> branchTask, Map<Integer, PetAchieveGroupCFGS> petAchieveGroups, Map<Integer, UniqueSkillCFG> uniqueSkills, 
		                    Map<Integer, ClimbTowerFloorCFGS> climbTowerFloor, Map<Integer, ClimbTowerFameCFGS> climbTowerFame, ClimbTowerBaseDataCFGS climbTowerBaseData, List<SecretAreaTaskCFGS> secretAreaData, 
		                    SectDeliverCFGS sectDeliver, SectDeliverTaskCFGS sectDeliverTask, SectDeliverVehicleCFGS sectDeliverVehicle, SectDeliverRouteCFGS sectDeliverRoute, 
		                    SectDeliverWishCFGS sectDeliverWish, RollNoticeCFGS rollNotice, List<RemainActivityCFGS> remainActivitys, List<ComposeCFGS> composes, 
		                    Map<Integer, MessageBoardSide> messageBoards, MessageBoardCommonCFGS messageBoardCommon, Map<Integer, ScheduleDataCFGS> scheduleData, Map<Integer, ScheduleRewardsCFGS> scheduleRewards, 
		                    ArmorCFGS armor, Map<Integer, SceneTrigCFGS> sceneTrigs, Map<Integer, SceneSpawnPointCFGS> sceneSpawnPoint, MarriageCFGS marriage, 
		                    List<ExchangeCFGS> exchange, Map<Integer, SectGroupMapCFGS> sectGroupMaps, Map<Integer, SectGroupMapPersonRewardCFGS> sectGroupMapRankRewards, WeaponTalentCommonCFGS weaponTalent, 
		                    FlagBattleCFGS flagBattle, Map<Integer, MonsterProcess> activityMapProcess, HeirloomCFGS heirloom, RobotCFGS robot, 
		                    AuctionCFGS auction, Set<Integer> flashsaleresource, Set<Integer> adversresource, List<ActivityLastCFGS> activityLast, 
		                    SteleCFGS stele, JusticeMapCFGS justice, DemonHoleCFGS demonHole, BattleMapCFGS battleMap, 
		                    EmergencyCFGS emergency, LucklyStarCFGS lucklyStar, List<FightNpcGroupCFGS> fightNpcGroups, List<WizardPetCFGS> wizardPet, 
		                    List<NpcTransfromFuncCFGS> npcTransfromFunc, List<NpcMapCFGS> npcMaps, Map<Integer, TowerDefenceMapCFGS> towerDefenceMaps, Map<Integer, TowerDefenceCFGS> towerDefences, 
		                    List<NpcPrayCFGS> npcPrays, List<PrayDropCFGS> prayDrops, MasterCFGS master, List<MapSkillCFGS> mapSkills)
		{
			this.version = version;
			this.performanceSpawns = performanceSpawns;
			this.badstrs = badstrs;
			this.headIcons = headIcons;
			this.properties = properties;
			this.buffs = buffs;
			this.aitrigers = aitrigers;
			this.trigEvents = trigEvents;
			this.trigBehaviors = trigBehaviors;
			this.states = states;
			this.mapbuffs = mapbuffs;
			this.base = base;
			this.items = items;
			this.equips = equips;
			this.equipRefines = equipRefines;
			this.legend = legend;
			this.gems = gems;
			this.books = books;
			this.gifts = gifts;
			this.checkins = checkins;
			this.skills = skills;
			this.skillBourns = skillBourns;
			this.skillSpecial = skillSpecial;
			this.spirits = spirits;
			this.spiritEffects = spiritEffects;
			this.classRoles = classRoles;
			this.classRoleFashions = classRoleFashions;
			this.monsters = monsters;
			this.npcs = npcs;
			this.minerals = minerals;
			this.traps = traps;
			this.monsterDamages = monsterDamages;
			this.mapClusters = mapClusters;
			this.worldMaps = worldMaps;
			this.mapcopys = mapcopys;
			this.sectmaps = sectmaps;
			this.arenamaps = arenamaps;
			this.superArenaMaps = superArenaMaps;
			this.bwarenamaps = bwarenamaps;
			this.clanOreMaps = clanOreMaps;
			this.clanTaskMaps = clanTaskMaps;
			this.clanBattleMaps = clanBattleMaps;
			this.clanBattleHelpMaps = clanBattleHelpMaps;
			this.activitymaps = activitymaps;
			this.petlifeMaps = petlifeMaps;
			this.climbTowerMaps = climbTowerMaps;
			this.forcewarMaps = forcewarMaps;
			this.weaponMaps = weaponMaps;
			this.weaponMapGrades = weaponMapGrades;
			this.demonHoleMaps = demonHoleMaps;
			this.justiceMaps = justiceMaps;
			this.fightNpcMaps = fightNpcMaps;
			this.spawnAreas = spawnAreas;
			this.spawnPoints = spawnPoints;
			this.npcPoints = npcPoints;
			this.mineralPoints = mineralPoints;
			this.wayPoints = wayPoints;
			this.mapBuffPoints = mapBuffPoints;
			this.propaward = propaward;
			this.actMapGroups = actMapGroups;
			this.purgatory = purgatory;
			this.upStar = upStar;
			this.toughen = toughen;
			this.levels = levels;
			this.levelLimit = levelLimit;
			this.fixedDropTbl = fixedDropTbl;
			this.randomDropTbl = randomDropTbl;
			this.noDuplicateDropTbl = noDuplicateDropTbl;
			this.buffDropTbl = buffDropTbl;
			this.mainTasks = mainTasks;
			this.bwTypeMaintasks = bwTypeMaintasks;
			this.weaponTasks = weaponTasks;
			this.petTasks = petTasks;
			this.petLifeTasks = petLifeTasks;
			this.sectTasks = sectTasks;
			this.alters = alters;
			this.mrgSeriesTaskGroups = mrgSeriesTaskGroups;
			this.mrgLoopTasks = mrgLoopTasks;
			this.dailyTasks = dailyTasks;
			this.dailyActivities = dailyActivities;
			this.challengeTaskGroups = challengeTaskGroups;
			this.fames = fames;
			this.activityQuestionsBank = activityQuestionsBank;
			this.taskQuestionsBank = taskQuestionsBank;
			this.dailyOnlineGift = dailyOnlineGift;
			this.offlineExp = offlineExp;
			this.dailyQuizGift = dailyQuizGift;
			this.luckyWheel = luckyWheel;
			this.redEnvelope = redEnvelope;
			this.activityChallengeType = activityChallengeType;
			this.slots = slots;
			this.starAdditionProp = starAdditionProp;
			this.weapons = weapons;
			this.weaponUSkills = weaponUSkills;
			this.pets = pets;
			this.petLvls = petLvls;
			this.petCoPractices = petCoPractices;
			this.petTransforms = petTransforms;
			this.petBreakSkills = petBreakSkills;
			this.petSpiritGroups = petSpiritGroups;
			this.petExploit = petExploit;
			this.transforms = transforms;
			this.suites = suites;
			this.sectAuthority = sectAuthority;
			this.sectUpLevel = sectUpLevel;
			this.sectSkill = sectSkill;
			this.sectWorship = sectWorship;
			this.sectWorshipExp = sectWorshipExp;
			this.fightSP = fightSP;
			this.blurs = blurs;
			this.sectBanquet = sectBanquet;
			this.sectIcons = sectIcons;
			this.diySkills = diySkills;
			this.diySkillUnique = diySkillUnique;
			this.diySkillGrades = diySkillGrades;
			this.diySkillActions = diySkillActions;
			this.diySkillSlotUnblock = diySkillSlotUnblock;
			this.diybuffs = diybuffs;
			this.vips = vips;
			this.payId = payId;
			this.pays = pays;
			this.specialCards = specialCards;
			this.channels = channels;
			this.roleRanks = roleRanks;
			this.sectRanks = sectRanks;
			this.clan = clan;
			this.clanValue = clanValue;
			this.clanTask = clanTask;
			this.clanGroupTask = clanGroupTask;
			this.clanDiscipleName = clanDiscipleName;
			this.arena = arena;
			this.arenaRobots = arenaRobots;
			this.arenaRobotGroup = arenaRobotGroup;
			this.superarena = superarena;
			this.superarenaTypes = superarenaTypes;
			this.bwarena = bwarena;
			this.forcewar = forcewar;
			this.forcewarbase = forcewarbase;
			this.randomNames = randomNames;
			this.pkSystem = pkSystem;
			this.produce = produce;
			this.prodeceRecipes = prodeceRecipes;
			this.fusion = fusion;
			this.shops = shops;
			this.gambleShops = gambleShops;
			this.common = common;
			this.worldBosses = worldBosses;
			this.worldSuperMonsters = worldSuperMonsters;
			this.worldMinerals = worldMinerals;
			this.spiritFactors = spiritFactors;
			this.weaponFactors = weaponFactors;
			this.stores = stores;
			this.horses = horses;
			this.horseEnHances = horseEnHances;
			this.horseEnhanceLvls = horseEnhanceLvls;
			this.horseShows = horseShows;
			this.horseSkills = horseSkills;
			this.horseSkillUpdate = horseSkillUpdate;
			this.horseEffects = horseEffects;
			this.horseCommon = horseCommon;
			this.horseEnhanceLvlcommons = horseEnhanceLvlcommons;
			this.horseEnhanceTypes = horseEnhanceTypes;
			this.horseEnhanceWeights = horseEnhanceWeights;
			this.treasureBase = treasureBase;
			this.infoPoints = infoPoints;
			this.medals = medals;
			this.treasureMaps = treasureMaps;
			this.treasurePieces = treasurePieces;
			this.treasureNpcs = treasureNpcs;
			this.friendGive = friendGive;
			this.charms = charms;
			this.friendHead = friendHead;
			this.fashions = fashions;
			this.socialActions = socialActions;
			this.sealBase = sealBase;
			this.sealGrades = sealGrades;
			this.sealEnhanceTypes = sealEnhanceTypes;
			this.leadGroups = leadGroups;
			this.expCoinBase = expCoinBase;
			this.rarebookGroups = rarebookGroups;
			this.graspGroups = graspGroups;
			this.dmgTransfers = dmgTransfers;
			this.dmgTransferBuys = dmgTransferBuys;
			this.titles = titles;
			this.betaActivity = betaActivity;
			this.branchTask = branchTask;
			this.petAchieveGroups = petAchieveGroups;
			this.uniqueSkills = uniqueSkills;
			this.climbTowerFloor = climbTowerFloor;
			this.climbTowerFame = climbTowerFame;
			this.climbTowerBaseData = climbTowerBaseData;
			this.secretAreaData = secretAreaData;
			this.sectDeliver = sectDeliver;
			this.sectDeliverTask = sectDeliverTask;
			this.sectDeliverVehicle = sectDeliverVehicle;
			this.sectDeliverRoute = sectDeliverRoute;
			this.sectDeliverWish = sectDeliverWish;
			this.rollNotice = rollNotice;
			this.remainActivitys = remainActivitys;
			this.composes = composes;
			this.messageBoards = messageBoards;
			this.messageBoardCommon = messageBoardCommon;
			this.scheduleData = scheduleData;
			this.scheduleRewards = scheduleRewards;
			this.armor = armor;
			this.sceneTrigs = sceneTrigs;
			this.sceneSpawnPoint = sceneSpawnPoint;
			this.marriage = marriage;
			this.exchange = exchange;
			this.sectGroupMaps = sectGroupMaps;
			this.sectGroupMapRankRewards = sectGroupMapRankRewards;
			this.weaponTalent = weaponTalent;
			this.flagBattle = flagBattle;
			this.activityMapProcess = activityMapProcess;
			this.heirloom = heirloom;
			this.robot = robot;
			this.auction = auction;
			this.flashsaleresource = flashsaleresource;
			this.adversresource = adversresource;
			this.activityLast = activityLast;
			this.stele = stele;
			this.justice = justice;
			this.demonHole = demonHole;
			this.battleMap = battleMap;
			this.emergency = emergency;
			this.lucklyStar = lucklyStar;
			this.fightNpcGroups = fightNpcGroups;
			this.wizardPet = wizardPet;
			this.npcTransfromFunc = npcTransfromFunc;
			this.npcMaps = npcMaps;
			this.towerDefenceMaps = towerDefenceMaps;
			this.towerDefences = towerDefences;
			this.npcPrays = npcPrays;
			this.prayDrops = prayDrops;
			this.master = master;
			this.mapSkills = mapSkills;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			version = is.popInteger();
			performanceSpawns = is.popList(MapLocation.class);
			badstrs = is.popStringHashSet();
			headIcons = is.popIntegerShortTreeMap();
			properties = is.popIntegerHashMap(PropertyCFGS.class);
			buffs = is.popIntegerHashMap(BuffCFGS.class);
			aitrigers = is.popIntegerHashMap(AiTrigerCFGS.class);
			trigEvents = is.popIntegerHashMap(TrigEventCFGS.class);
			trigBehaviors = is.popIntegerHashMap(TrigBehaviorCFGS.class);
			states = is.popIntegerHashMap(StateCFGS.class);
			mapbuffs = is.popIntegerHashMap(MapBuffCFGS.class);
			base = is.popIntegerHashMap(BaseDummyItemCFGS.class);
			items = is.popIntegerHashMap(ItemCFGS.class);
			equips = is.popIntegerHashMap(EquipCFGS.class);
			equipRefines = is.popIntegerTreeMap(EquipRefineGroupCFGS.class);
			if( legend == null )
				legend = new LegendsCFGS();
			is.pop(legend);
			gems = is.popIntegerHashMap(GemCFGS.class);
			books = is.popIntegerHashMap(BookCFGS.class);
			gifts = is.popIntegerHashMap(GiftCFGS.class);
			checkins = is.popList(CheckInCFGS.class);
			skills = is.popIntegerHashMap(SkillCFGS.class);
			skillBourns = is.popList(SkillBournCFGS.class);
			skillSpecial = is.popIntegerHashMap(SkillSpecialCFGS.class);
			spirits = is.popIntegerHashMap(SpiritCFGS.class);
			spiritEffects = is.popIntegerHashMap(SpiritEffectCFGS.class);
			classRoles = is.popList(ClassRoleCFGS.class);
			classRoleFashions = is.popIntegerHashMap(ClassRoleFashionCFGS.class);
			monsters = is.popIntegerHashMap(MonsterCFGS.class);
			npcs = is.popIntegerHashMap(NpcCFGS.class);
			minerals = is.popIntegerHashMap(MineralCFGS.class);
			traps = is.popIntegerHashMap(TrapExpandedCFGS.class);
			if( monsterDamages == null )
				monsterDamages = new MonsterDamageCFGS();
			is.pop(monsterDamages);
			mapClusters = is.popIntegerHashMap(MapClusterCFGS.class);
			worldMaps = is.popIntegerHashMap(WorldMapCFGS.class);
			mapcopys = is.popIntegerHashMap(MapCopyCFGS.class);
			sectmaps = is.popIntegerHashMap(SectMapCFGS.class);
			arenamaps = is.popIntegerHashMap(ArenaMapCFGS.class);
			superArenaMaps = is.popIntegerHashMap(SuperArenaMapCFGS.class);
			bwarenamaps = is.popIntegerHashMap(BWArenaMapCFGS.class);
			clanOreMaps = is.popIntegerHashMap(ClanOreMapCFGS.class);
			clanTaskMaps = is.popIntegerHashMap(ClanTaskMapCFGS.class);
			clanBattleMaps = is.popIntegerHashMap(ClanBattleMapCFGS.class);
			clanBattleHelpMaps = is.popIntegerHashMap(ClanBattleHelpMapCFGS.class);
			activitymaps = is.popIntegerHashMap(ActivityMapCFGS.class);
			petlifeMaps = is.popIntegerTreeMap(PetLifeMapCFGS.class);
			climbTowerMaps = is.popIntegerTreeMap(ClimbTowerMapCFGS.class);
			forcewarMaps = is.popIntegerTreeMap(ForceWarMapCFGS.class);
			weaponMaps = is.popIntegerTreeMap(WeaponMapCFGS.class);
			weaponMapGrades = is.popList(WeaponMapGradeCFGS.class);
			demonHoleMaps = is.popIntegerTreeMap(DemonHoleMapCFGS.class);
			justiceMaps = is.popIntegerTreeMap(JusticeMapCopyCFGS.class);
			fightNpcMaps = is.popIntegerTreeMap(FightNpcMapCFGS.class);
			spawnAreas = is.popIntegerHashMap(SpawnAreaCFGS.class);
			spawnPoints = is.popIntegerHashMap(SpawnPointCFGS.class);
			npcPoints = is.popIntegerHashMap(NpcPointCFGS.class);
			mineralPoints = is.popIntegerHashMap(MineralPointCFGS.class);
			wayPoints = is.popIntegerHashMap(WayPointCFGS.class);
			mapBuffPoints = is.popIntegerHashMap(MapBuffPointCFGS.class);
			propaward = is.popList(PropAwardCFGS.class);
			actMapGroups = is.popIntegerTreeMap(ActivityMapGroupCFGS.class);
			purgatory = is.popList(EquipPurgatoryCFGS.class);
			upStar = is.popList(EquipUpStarCFGS.class);
			toughen = is.popList(EquipToughenCFGS.class);
			levels = is.popList(LevelCFGS.class);
			if( levelLimit == null )
				levelLimit = new LevelLimitCFGS();
			is.pop(levelLimit);
			fixedDropTbl = is.popIntegerHashMap(FixedDropTableCFGS.class);
			randomDropTbl = is.popIntegerHashMap(RandomDropTableCFGS.class);
			noDuplicateDropTbl = is.popIntegerHashMap(NoDuplicateDropTableCFGS.class);
			buffDropTbl = is.popIntegerHashMap(BuffDropTableCFGS.class);
			mainTasks = is.popList(MainTaskCFGS.class);
			bwTypeMaintasks = is.popIntegerTreeMap(MainTaskBWTypeCFGS.class);
			weaponTasks = is.popList(WeaponGroupTaskCFGS.class);
			petTasks = is.popList(PetTaskCFGS.class);
			petLifeTasks = is.popIntegerTreeMap(PetLifeTaskGroupCFGS.class);
			sectTasks = is.popList(SectTaskCFGS.class);
			alters = is.popIntegerTreeMap(AlterCFGS.class);
			mrgSeriesTaskGroups = is.popIntegerTreeMap(MrgSeriesTaskGroupCFGS.class);
			mrgLoopTasks = is.popList(MrgLoopTaskCFGS.class);
			dailyTasks = is.popIntegerTreeMap(DailyTaskCFGS.class);
			dailyActivities = is.popIntegerTreeMap(DailyTaskCFGS.class);
			challengeTaskGroups = is.popIntegerTreeMap(ChallengeTaskGroupCFGS.class);
			if( fames == null )
				fames = new FameCFGS();
			is.pop(fames);
			activityQuestionsBank = is.popList(QuestionCFGS.class);
			taskQuestionsBank = is.popList(QuestionCFGS.class);
			dailyOnlineGift = is.popIntegerTreeMap(DailyOnlineGiftCFGS.class);
			if( offlineExp == null )
				offlineExp = new OfflineExpCFGS();
			is.pop(offlineExp);
			if( dailyQuizGift == null )
				dailyQuizGift = new DailyQuizGiftCFGS();
			is.pop(dailyQuizGift);
			if( luckyWheel == null )
				luckyWheel = new LuckyWheelCFGS();
			is.pop(luckyWheel);
			if( redEnvelope == null )
				redEnvelope = new RedEnvelopeCFGS();
			is.pop(redEnvelope);
			activityChallengeType = is.popList(ActivityChallengeTypeCFGS.class);
			slots = is.popList(EquipSlotCFGS.class);
			starAdditionProp = is.popList(EquipStarAddPropCFGS.class);
			weapons = is.popIntegerHashMap(WeaponCFGS.class);
			weaponUSkills = is.popIntegerTreeMap(WeaponUniqueSkillCFGS.class);
			pets = is.popList(PetCFGS.class);
			petLvls = is.popList(PetLvlCFGS.class);
			petCoPractices = is.popIntegerHashMap(PetCoPracticeGroupCFGS.class);
			petTransforms = is.popList(PetTransformCFGS.class);
			petBreakSkills = is.popIntegerHashMap(PetBreakSkillCFGS.class);
			petSpiritGroups = is.popIntegerTreeMap(PetSpiritGroupCFGS.class);
			petExploit = is.popIntegerTreeMap(PetExploitCFGS.class);
			transforms = is.popList(CLassTransformCFGS.class);
			suites = is.popIntegerHashMap(SuiteCFGS.class);
			sectAuthority = is.popList(SectAuthorityCFGS.class);
			sectUpLevel = is.popList(SectUpLevelCFGS.class);
			sectSkill = is.popList(SectGroupSkillCFGS.class);
			sectWorship = is.popList(SectWorshipCFGS.class);
			sectWorshipExp = is.popList(SectWorshipExpCFGS.class);
			fightSP = is.popList(FightSPCFGS.class);
			blurs = is.popList(BlurCFGS.class);
			sectBanquet = is.popList(SectBanquetCFGS.class);
			sectIcons = is.popList(SectIconCFGS.class);
			diySkills = is.popList(DIYSkillBaseCFGS.class);
			if( diySkillUnique == null )
				diySkillUnique = new DIYSkillUniqueCFGS();
			is.pop(diySkillUnique);
			diySkillGrades = is.popList(DIYSkillGradeCFGS.class);
			diySkillActions = is.popList(DIYSkillActionCFGS.class);
			diySkillSlotUnblock = is.popList(DiySkillSlotUnblockCFGS.class);
			diybuffs = is.popList(DIYBUFFCFGS.class);
			vips = is.popList(VipCFGS.class);
			payId = is.popInteger();
			pays = is.popIntegerTreeMap(PayCFGS.class);
			specialCards = is.popList(SpecialCardCFGS.class);
			channels = is.popStringHashMap(ChannelCFGS.class);
			roleRanks = is.popList(RoleRankCFGS.class);
			sectRanks = is.popList(SectRankCFGS.class);
			if( clan == null )
				clan = new ClanCFGS();
			is.pop(clan);
			if( clanValue == null )
				clanValue = new ClanValueCFGS();
			is.pop(clanValue);
			clanTask = is.popIntegerTreeMap(ClanTaskCFGS.class);
			clanGroupTask = is.popIntegerTreeMap(ClanTaskGroupCFGS.class);
			clanDiscipleName = is.popList(ClanDiscipleNameCFGS.class);
			if( arena == null )
				arena = new ArenaCFGS();
			is.pop(arena);
			arenaRobots = is.popIntegerTreeMap(ArenaRobotCFGS.class);
			arenaRobotGroup = is.popIntegerTreeMap(ArenaRobotGroupCFGS.class);
			if( superarena == null )
				superarena = new SuperArenaCFGS();
			is.pop(superarena);
			superarenaTypes = is.popIntegerTreeMap(SuperArenaTypeCFGS.class);
			if( bwarena == null )
				bwarena = new BWArenaCFGS();
			is.pop(bwarena);
			forcewar = is.popIntegerTreeMap(ForceWarCFGS.class);
			if( forcewarbase == null )
				forcewarbase = new ForceWarBaseCFGS();
			is.pop(forcewarbase);
			if( randomNames == null )
				randomNames = new RandomNameCFGS();
			is.pop(randomNames);
			if( pkSystem == null )
				pkSystem = new PKCFGS();
			is.pop(pkSystem);
			if( produce == null )
				produce = new ProduceCFGS();
			is.pop(produce);
			prodeceRecipes = is.popIntegerTreeMap(ProduceRecipeCFGS.class);
			if( fusion == null )
				fusion = new FusionCFGS();
			is.pop(fusion);
			shops = is.popList(ShopCFGS.class);
			gambleShops = is.popList(GambleShopCFGS.class);
			if( common == null )
				common = new CommonCFGS();
			is.pop(common);
			worldBosses = is.popIntegerTreeMap(WorldBossCFGS.class);
			worldSuperMonsters = is.popIntegerTreeMap(WorldMonsterCFGS.class);
			worldMinerals = is.popIntegerTreeMap(WorldMineralCFGS.class);
			if( spiritFactors == null )
				spiritFactors = new FightFactorCFGS();
			is.pop(spiritFactors);
			if( weaponFactors == null )
				weaponFactors = new FightFactorCFGS();
			is.pop(weaponFactors);
			stores = is.popIntegerTreeMap(StoreCFGS.class);
			horses = is.popIntegerTreeMap(HorseCFGS.class);
			horseEnHances = is.popIntegerTreeMap(HorseEnHanceCFGS.class);
			horseEnhanceLvls = is.popIntegerTreeMap(HorseEnHanceLvlCFGS.class);
			horseShows = is.popIntegerTreeMap(HorseShowCFGS.class);
			horseSkills = is.popIntegerTreeMap(HorseSkillCFGS.class);
			horseSkillUpdate = is.popIntegerTreeMap(HorseSkillUpdateDataCFGS.class);
			horseEffects = is.popIntegerTreeMap(HorseEffectCFGS.class);
			if( horseCommon == null )
				horseCommon = new HorseCommonCFGS();
			is.pop(horseCommon);
			horseEnhanceLvlcommons = is.popList(HorseEnHanceLvlCommonCFGS.class);
			horseEnhanceTypes = is.popIntegerTreeMap(HorseEnHanceTypeCFGS.class);
			horseEnhanceWeights = is.popList(HorseEnHanceWeightCFGS.class);
			if( treasureBase == null )
				treasureBase = new TreasureBaseCFGS();
			is.pop(treasureBase);
			infoPoints = is.popIntegerTreeMap(InfoPointCFGS.class);
			medals = is.popIntegerTreeMap(MedalCFGS.class);
			treasureMaps = is.popIntegerTreeMap(TreasureMapCFGS.class);
			treasurePieces = is.popIntegerTreeMap(TreasurePieceCFGS.class);
			treasureNpcs = is.popIntegerTreeMap(TreasureNpcCFGS.class);
			friendGive = is.popList(FriendGiveRewardCFGS.class);
			charms = is.popList(CharmCFGS.class);
			friendHead = is.popIntegerTreeMap(FriendHeadCFGS.class);
			fashions = is.popIntegerTreeMap(FashionCFGS.class);
			socialActions = is.popIntegerTreeMap(SocialActionCFGS.class);
			if( sealBase == null )
				sealBase = new SealBaseCFGS();
			is.pop(sealBase);
			sealGrades = is.popList(SealGradeCFGS.class);
			sealEnhanceTypes = is.popIntegerTreeMap(SealEnhanceTypeCFGS.class);
			leadGroups = is.popIntegerTreeMap(LeadGroupCFGS.class);
			if( expCoinBase == null )
				expCoinBase = new ExpCoinBaseCFGS();
			is.pop(expCoinBase);
			rarebookGroups = is.popIntegerTreeMap(RareBookGroupCFGS.class);
			graspGroups = is.popIntegerTreeMap(GraspGroupCFGS.class);
			dmgTransfers = is.popIntegerTreeMap(DMGTransferLevelCFGS.class);
			dmgTransferBuys = is.popList(DMGTransferBuyCFGS.class);
			titles = is.popIntegerTreeMap(TitleCFGS.class);
			if( betaActivity == null )
				betaActivity = new BetaActivityCFGS();
			is.pop(betaActivity);
			branchTask = is.popIntegerTreeMap(BranchTaskCFGS.class);
			petAchieveGroups = is.popIntegerTreeMap(PetAchieveGroupCFGS.class);
			uniqueSkills = is.popIntegerTreeMap(UniqueSkillCFG.class);
			climbTowerFloor = is.popIntegerTreeMap(ClimbTowerFloorCFGS.class);
			climbTowerFame = is.popIntegerTreeMap(ClimbTowerFameCFGS.class);
			if( climbTowerBaseData == null )
				climbTowerBaseData = new ClimbTowerBaseDataCFGS();
			is.pop(climbTowerBaseData);
			secretAreaData = is.popLinkedList(SecretAreaTaskCFGS.class);
			if( sectDeliver == null )
				sectDeliver = new SectDeliverCFGS();
			is.pop(sectDeliver);
			if( sectDeliverTask == null )
				sectDeliverTask = new SectDeliverTaskCFGS();
			is.pop(sectDeliverTask);
			if( sectDeliverVehicle == null )
				sectDeliverVehicle = new SectDeliverVehicleCFGS();
			is.pop(sectDeliverVehicle);
			if( sectDeliverRoute == null )
				sectDeliverRoute = new SectDeliverRouteCFGS();
			is.pop(sectDeliverRoute);
			if( sectDeliverWish == null )
				sectDeliverWish = new SectDeliverWishCFGS();
			is.pop(sectDeliverWish);
			if( rollNotice == null )
				rollNotice = new RollNoticeCFGS();
			is.pop(rollNotice);
			remainActivitys = is.popList(RemainActivityCFGS.class);
			composes = is.popList(ComposeCFGS.class);
			messageBoards = is.popIntegerTreeMap(MessageBoardSide.class);
			if( messageBoardCommon == null )
				messageBoardCommon = new MessageBoardCommonCFGS();
			is.pop(messageBoardCommon);
			scheduleData = is.popIntegerTreeMap(ScheduleDataCFGS.class);
			scheduleRewards = is.popIntegerTreeMap(ScheduleRewardsCFGS.class);
			if( armor == null )
				armor = new ArmorCFGS();
			is.pop(armor);
			sceneTrigs = is.popIntegerTreeMap(SceneTrigCFGS.class);
			sceneSpawnPoint = is.popIntegerTreeMap(SceneSpawnPointCFGS.class);
			if( marriage == null )
				marriage = new MarriageCFGS();
			is.pop(marriage);
			exchange = is.popList(ExchangeCFGS.class);
			sectGroupMaps = is.popIntegerHashMap(SectGroupMapCFGS.class);
			sectGroupMapRankRewards = is.popIntegerTreeMap(SectGroupMapPersonRewardCFGS.class);
			if( weaponTalent == null )
				weaponTalent = new WeaponTalentCommonCFGS();
			is.pop(weaponTalent);
			if( flagBattle == null )
				flagBattle = new FlagBattleCFGS();
			is.pop(flagBattle);
			activityMapProcess = is.popIntegerTreeMap(MonsterProcess.class);
			if( heirloom == null )
				heirloom = new HeirloomCFGS();
			is.pop(heirloom);
			if( robot == null )
				robot = new RobotCFGS();
			is.pop(robot);
			if( auction == null )
				auction = new AuctionCFGS();
			is.pop(auction);
			flashsaleresource = is.popIntegerTreeSet();
			adversresource = is.popIntegerTreeSet();
			activityLast = is.popList(ActivityLastCFGS.class);
			if( stele == null )
				stele = new SteleCFGS();
			is.pop(stele);
			if( justice == null )
				justice = new JusticeMapCFGS();
			is.pop(justice);
			if( demonHole == null )
				demonHole = new DemonHoleCFGS();
			is.pop(demonHole);
			if( battleMap == null )
				battleMap = new BattleMapCFGS();
			is.pop(battleMap);
			if( emergency == null )
				emergency = new EmergencyCFGS();
			is.pop(emergency);
			if( lucklyStar == null )
				lucklyStar = new LucklyStarCFGS();
			is.pop(lucklyStar);
			fightNpcGroups = is.popList(FightNpcGroupCFGS.class);
			wizardPet = is.popList(WizardPetCFGS.class);
			npcTransfromFunc = is.popList(NpcTransfromFuncCFGS.class);
			npcMaps = is.popList(NpcMapCFGS.class);
			towerDefenceMaps = is.popIntegerTreeMap(TowerDefenceMapCFGS.class);
			towerDefences = is.popIntegerTreeMap(TowerDefenceCFGS.class);
			npcPrays = is.popList(NpcPrayCFGS.class);
			prayDrops = is.popList(PrayDropCFGS.class);
			if( master == null )
				master = new MasterCFGS();
			is.pop(master);
			mapSkills = is.popList(MapSkillCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(version);
			os.pushList(performanceSpawns);
			os.pushStringSet(badstrs);
			os.pushIntegerShortMap(headIcons);
			os.pushIntegerMap(properties);
			os.pushIntegerMap(buffs);
			os.pushIntegerMap(aitrigers);
			os.pushIntegerMap(trigEvents);
			os.pushIntegerMap(trigBehaviors);
			os.pushIntegerMap(states);
			os.pushIntegerMap(mapbuffs);
			os.pushIntegerMap(base);
			os.pushIntegerMap(items);
			os.pushIntegerMap(equips);
			os.pushIntegerMap(equipRefines);
			os.push(legend);
			os.pushIntegerMap(gems);
			os.pushIntegerMap(books);
			os.pushIntegerMap(gifts);
			os.pushList(checkins);
			os.pushIntegerMap(skills);
			os.pushList(skillBourns);
			os.pushIntegerMap(skillSpecial);
			os.pushIntegerMap(spirits);
			os.pushIntegerMap(spiritEffects);
			os.pushList(classRoles);
			os.pushIntegerMap(classRoleFashions);
			os.pushIntegerMap(monsters);
			os.pushIntegerMap(npcs);
			os.pushIntegerMap(minerals);
			os.pushIntegerMap(traps);
			os.push(monsterDamages);
			os.pushIntegerMap(mapClusters);
			os.pushIntegerMap(worldMaps);
			os.pushIntegerMap(mapcopys);
			os.pushIntegerMap(sectmaps);
			os.pushIntegerMap(arenamaps);
			os.pushIntegerMap(superArenaMaps);
			os.pushIntegerMap(bwarenamaps);
			os.pushIntegerMap(clanOreMaps);
			os.pushIntegerMap(clanTaskMaps);
			os.pushIntegerMap(clanBattleMaps);
			os.pushIntegerMap(clanBattleHelpMaps);
			os.pushIntegerMap(activitymaps);
			os.pushIntegerMap(petlifeMaps);
			os.pushIntegerMap(climbTowerMaps);
			os.pushIntegerMap(forcewarMaps);
			os.pushIntegerMap(weaponMaps);
			os.pushList(weaponMapGrades);
			os.pushIntegerMap(demonHoleMaps);
			os.pushIntegerMap(justiceMaps);
			os.pushIntegerMap(fightNpcMaps);
			os.pushIntegerMap(spawnAreas);
			os.pushIntegerMap(spawnPoints);
			os.pushIntegerMap(npcPoints);
			os.pushIntegerMap(mineralPoints);
			os.pushIntegerMap(wayPoints);
			os.pushIntegerMap(mapBuffPoints);
			os.pushList(propaward);
			os.pushIntegerMap(actMapGroups);
			os.pushList(purgatory);
			os.pushList(upStar);
			os.pushList(toughen);
			os.pushList(levels);
			os.push(levelLimit);
			os.pushIntegerMap(fixedDropTbl);
			os.pushIntegerMap(randomDropTbl);
			os.pushIntegerMap(noDuplicateDropTbl);
			os.pushIntegerMap(buffDropTbl);
			os.pushList(mainTasks);
			os.pushIntegerMap(bwTypeMaintasks);
			os.pushList(weaponTasks);
			os.pushList(petTasks);
			os.pushIntegerMap(petLifeTasks);
			os.pushList(sectTasks);
			os.pushIntegerMap(alters);
			os.pushIntegerMap(mrgSeriesTaskGroups);
			os.pushList(mrgLoopTasks);
			os.pushIntegerMap(dailyTasks);
			os.pushIntegerMap(dailyActivities);
			os.pushIntegerMap(challengeTaskGroups);
			os.push(fames);
			os.pushList(activityQuestionsBank);
			os.pushList(taskQuestionsBank);
			os.pushIntegerMap(dailyOnlineGift);
			os.push(offlineExp);
			os.push(dailyQuizGift);
			os.push(luckyWheel);
			os.push(redEnvelope);
			os.pushList(activityChallengeType);
			os.pushList(slots);
			os.pushList(starAdditionProp);
			os.pushIntegerMap(weapons);
			os.pushIntegerMap(weaponUSkills);
			os.pushList(pets);
			os.pushList(petLvls);
			os.pushIntegerMap(petCoPractices);
			os.pushList(petTransforms);
			os.pushIntegerMap(petBreakSkills);
			os.pushIntegerMap(petSpiritGroups);
			os.pushIntegerMap(petExploit);
			os.pushList(transforms);
			os.pushIntegerMap(suites);
			os.pushList(sectAuthority);
			os.pushList(sectUpLevel);
			os.pushList(sectSkill);
			os.pushList(sectWorship);
			os.pushList(sectWorshipExp);
			os.pushList(fightSP);
			os.pushList(blurs);
			os.pushList(sectBanquet);
			os.pushList(sectIcons);
			os.pushList(diySkills);
			os.push(diySkillUnique);
			os.pushList(diySkillGrades);
			os.pushList(diySkillActions);
			os.pushList(diySkillSlotUnblock);
			os.pushList(diybuffs);
			os.pushList(vips);
			os.pushInteger(payId);
			os.pushIntegerMap(pays);
			os.pushList(specialCards);
			os.pushStringMap(channels);
			os.pushList(roleRanks);
			os.pushList(sectRanks);
			os.push(clan);
			os.push(clanValue);
			os.pushIntegerMap(clanTask);
			os.pushIntegerMap(clanGroupTask);
			os.pushList(clanDiscipleName);
			os.push(arena);
			os.pushIntegerMap(arenaRobots);
			os.pushIntegerMap(arenaRobotGroup);
			os.push(superarena);
			os.pushIntegerMap(superarenaTypes);
			os.push(bwarena);
			os.pushIntegerMap(forcewar);
			os.push(forcewarbase);
			os.push(randomNames);
			os.push(pkSystem);
			os.push(produce);
			os.pushIntegerMap(prodeceRecipes);
			os.push(fusion);
			os.pushList(shops);
			os.pushList(gambleShops);
			os.push(common);
			os.pushIntegerMap(worldBosses);
			os.pushIntegerMap(worldSuperMonsters);
			os.pushIntegerMap(worldMinerals);
			os.push(spiritFactors);
			os.push(weaponFactors);
			os.pushIntegerMap(stores);
			os.pushIntegerMap(horses);
			os.pushIntegerMap(horseEnHances);
			os.pushIntegerMap(horseEnhanceLvls);
			os.pushIntegerMap(horseShows);
			os.pushIntegerMap(horseSkills);
			os.pushIntegerMap(horseSkillUpdate);
			os.pushIntegerMap(horseEffects);
			os.push(horseCommon);
			os.pushList(horseEnhanceLvlcommons);
			os.pushIntegerMap(horseEnhanceTypes);
			os.pushList(horseEnhanceWeights);
			os.push(treasureBase);
			os.pushIntegerMap(infoPoints);
			os.pushIntegerMap(medals);
			os.pushIntegerMap(treasureMaps);
			os.pushIntegerMap(treasurePieces);
			os.pushIntegerMap(treasureNpcs);
			os.pushList(friendGive);
			os.pushList(charms);
			os.pushIntegerMap(friendHead);
			os.pushIntegerMap(fashions);
			os.pushIntegerMap(socialActions);
			os.push(sealBase);
			os.pushList(sealGrades);
			os.pushIntegerMap(sealEnhanceTypes);
			os.pushIntegerMap(leadGroups);
			os.push(expCoinBase);
			os.pushIntegerMap(rarebookGroups);
			os.pushIntegerMap(graspGroups);
			os.pushIntegerMap(dmgTransfers);
			os.pushList(dmgTransferBuys);
			os.pushIntegerMap(titles);
			os.push(betaActivity);
			os.pushIntegerMap(branchTask);
			os.pushIntegerMap(petAchieveGroups);
			os.pushIntegerMap(uniqueSkills);
			os.pushIntegerMap(climbTowerFloor);
			os.pushIntegerMap(climbTowerFame);
			os.push(climbTowerBaseData);
			os.pushList(secretAreaData);
			os.push(sectDeliver);
			os.push(sectDeliverTask);
			os.push(sectDeliverVehicle);
			os.push(sectDeliverRoute);
			os.push(sectDeliverWish);
			os.push(rollNotice);
			os.pushList(remainActivitys);
			os.pushList(composes);
			os.pushIntegerMap(messageBoards);
			os.push(messageBoardCommon);
			os.pushIntegerMap(scheduleData);
			os.pushIntegerMap(scheduleRewards);
			os.push(armor);
			os.pushIntegerMap(sceneTrigs);
			os.pushIntegerMap(sceneSpawnPoint);
			os.push(marriage);
			os.pushList(exchange);
			os.pushIntegerMap(sectGroupMaps);
			os.pushIntegerMap(sectGroupMapRankRewards);
			os.push(weaponTalent);
			os.push(flagBattle);
			os.pushIntegerMap(activityMapProcess);
			os.push(heirloom);
			os.push(robot);
			os.push(auction);
			os.pushIntegerSet(flashsaleresource);
			os.pushIntegerSet(adversresource);
			os.pushList(activityLast);
			os.push(stele);
			os.push(justice);
			os.push(demonHole);
			os.push(battleMap);
			os.push(emergency);
			os.push(lucklyStar);
			os.pushList(fightNpcGroups);
			os.pushList(wizardPet);
			os.pushList(npcTransfromFunc);
			os.pushList(npcMaps);
			os.pushIntegerMap(towerDefenceMaps);
			os.pushIntegerMap(towerDefences);
			os.pushList(npcPrays);
			os.pushList(prayDrops);
			os.push(master);
			os.pushList(mapSkills);
		}

		public int version = 1;
		public List<MapLocation> performanceSpawns;
		public Set<String> badstrs;
		public Map<Integer, Short> headIcons;
		public Map<Integer, PropertyCFGS> properties;
		public Map<Integer, BuffCFGS> buffs;
		public Map<Integer, AiTrigerCFGS> aitrigers;
		public Map<Integer, TrigEventCFGS> trigEvents;
		public Map<Integer, TrigBehaviorCFGS> trigBehaviors;
		public Map<Integer, StateCFGS> states;
		public Map<Integer, MapBuffCFGS> mapbuffs;
		public Map<Integer, BaseDummyItemCFGS> base;
		public Map<Integer, ItemCFGS> items;
		public Map<Integer, EquipCFGS> equips;
		public Map<Integer, EquipRefineGroupCFGS> equipRefines;
		public LegendsCFGS legend;
		public Map<Integer, GemCFGS> gems;
		public Map<Integer, BookCFGS> books;
		public Map<Integer, GiftCFGS> gifts;
		public List<CheckInCFGS> checkins;
		public Map<Integer, SkillCFGS> skills;
		public List<SkillBournCFGS> skillBourns;
		public Map<Integer, SkillSpecialCFGS> skillSpecial;
		public Map<Integer, SpiritCFGS> spirits;
		public Map<Integer, SpiritEffectCFGS> spiritEffects;
		public List<ClassRoleCFGS> classRoles;
		public Map<Integer, ClassRoleFashionCFGS> classRoleFashions;
		public Map<Integer, MonsterCFGS> monsters;
		public Map<Integer, NpcCFGS> npcs;
		public Map<Integer, MineralCFGS> minerals;
		public Map<Integer, TrapExpandedCFGS> traps;
		public MonsterDamageCFGS monsterDamages;
		public Map<Integer, MapClusterCFGS> mapClusters;
		public Map<Integer, WorldMapCFGS> worldMaps;
		public Map<Integer, MapCopyCFGS> mapcopys;
		public Map<Integer, SectMapCFGS> sectmaps;
		public Map<Integer, ArenaMapCFGS> arenamaps;
		public Map<Integer, SuperArenaMapCFGS> superArenaMaps;
		public Map<Integer, BWArenaMapCFGS> bwarenamaps;
		public Map<Integer, ClanOreMapCFGS> clanOreMaps;
		public Map<Integer, ClanTaskMapCFGS> clanTaskMaps;
		public Map<Integer, ClanBattleMapCFGS> clanBattleMaps;
		public Map<Integer, ClanBattleHelpMapCFGS> clanBattleHelpMaps;
		public Map<Integer, ActivityMapCFGS> activitymaps;
		public Map<Integer, PetLifeMapCFGS> petlifeMaps;
		public Map<Integer, ClimbTowerMapCFGS> climbTowerMaps;
		public Map<Integer, ForceWarMapCFGS> forcewarMaps;
		public Map<Integer, WeaponMapCFGS> weaponMaps;
		public List<WeaponMapGradeCFGS> weaponMapGrades;
		public Map<Integer, DemonHoleMapCFGS> demonHoleMaps;
		public Map<Integer, JusticeMapCopyCFGS> justiceMaps;
		public Map<Integer, FightNpcMapCFGS> fightNpcMaps;
		public Map<Integer, SpawnAreaCFGS> spawnAreas;
		public Map<Integer, SpawnPointCFGS> spawnPoints;
		public Map<Integer, NpcPointCFGS> npcPoints;
		public Map<Integer, MineralPointCFGS> mineralPoints;
		public Map<Integer, WayPointCFGS> wayPoints;
		public Map<Integer, MapBuffPointCFGS> mapBuffPoints;
		public List<PropAwardCFGS> propaward;
		public Map<Integer, ActivityMapGroupCFGS> actMapGroups;
		public List<EquipPurgatoryCFGS> purgatory;
		public List<EquipUpStarCFGS> upStar;
		public List<EquipToughenCFGS> toughen;
		public List<LevelCFGS> levels;
		public LevelLimitCFGS levelLimit;
		public Map<Integer, FixedDropTableCFGS> fixedDropTbl;
		public Map<Integer, RandomDropTableCFGS> randomDropTbl;
		public Map<Integer, NoDuplicateDropTableCFGS> noDuplicateDropTbl;
		public Map<Integer, BuffDropTableCFGS> buffDropTbl;
		public List<MainTaskCFGS> mainTasks;
		public Map<Integer, MainTaskBWTypeCFGS> bwTypeMaintasks;
		public List<WeaponGroupTaskCFGS> weaponTasks;
		public List<PetTaskCFGS> petTasks;
		public Map<Integer, PetLifeTaskGroupCFGS> petLifeTasks;
		public List<SectTaskCFGS> sectTasks;
		public Map<Integer, AlterCFGS> alters;
		public Map<Integer, MrgSeriesTaskGroupCFGS> mrgSeriesTaskGroups;
		public List<MrgLoopTaskCFGS> mrgLoopTasks;
		public Map<Integer, DailyTaskCFGS> dailyTasks;
		public Map<Integer, DailyTaskCFGS> dailyActivities;
		public Map<Integer, ChallengeTaskGroupCFGS> challengeTaskGroups;
		public FameCFGS fames;
		public List<QuestionCFGS> activityQuestionsBank;
		public List<QuestionCFGS> taskQuestionsBank;
		public Map<Integer, DailyOnlineGiftCFGS> dailyOnlineGift;
		public OfflineExpCFGS offlineExp;
		public DailyQuizGiftCFGS dailyQuizGift;
		public LuckyWheelCFGS luckyWheel;
		public RedEnvelopeCFGS redEnvelope;
		public List<ActivityChallengeTypeCFGS> activityChallengeType;
		public List<EquipSlotCFGS> slots;
		public List<EquipStarAddPropCFGS> starAdditionProp;
		public Map<Integer, WeaponCFGS> weapons;
		public Map<Integer, WeaponUniqueSkillCFGS> weaponUSkills;
		public List<PetCFGS> pets;
		public List<PetLvlCFGS> petLvls;
		public Map<Integer, PetCoPracticeGroupCFGS> petCoPractices;
		public List<PetTransformCFGS> petTransforms;
		public Map<Integer, PetBreakSkillCFGS> petBreakSkills;
		public Map<Integer, PetSpiritGroupCFGS> petSpiritGroups;
		public Map<Integer, PetExploitCFGS> petExploit;
		public List<CLassTransformCFGS> transforms;
		public Map<Integer, SuiteCFGS> suites;
		public List<SectAuthorityCFGS> sectAuthority;
		public List<SectUpLevelCFGS> sectUpLevel;
		public List<SectGroupSkillCFGS> sectSkill;
		public List<SectWorshipCFGS> sectWorship;
		public List<SectWorshipExpCFGS> sectWorshipExp;
		public List<FightSPCFGS> fightSP;
		public List<BlurCFGS> blurs;
		public List<SectBanquetCFGS> sectBanquet;
		public List<SectIconCFGS> sectIcons;
		public List<DIYSkillBaseCFGS> diySkills;
		public DIYSkillUniqueCFGS diySkillUnique;
		public List<DIYSkillGradeCFGS> diySkillGrades;
		public List<DIYSkillActionCFGS> diySkillActions;
		public List<DiySkillSlotUnblockCFGS> diySkillSlotUnblock;
		public List<DIYBUFFCFGS> diybuffs;
		public List<VipCFGS> vips;
		public int payId;
		public Map<Integer, PayCFGS> pays;
		public List<SpecialCardCFGS> specialCards;
		public Map<String, ChannelCFGS> channels;
		public List<RoleRankCFGS> roleRanks;
		public List<SectRankCFGS> sectRanks;
		public ClanCFGS clan;
		public ClanValueCFGS clanValue;
		public Map<Integer, ClanTaskCFGS> clanTask;
		public Map<Integer, ClanTaskGroupCFGS> clanGroupTask;
		public List<ClanDiscipleNameCFGS> clanDiscipleName;
		public ArenaCFGS arena;
		public Map<Integer, ArenaRobotCFGS> arenaRobots;
		public Map<Integer, ArenaRobotGroupCFGS> arenaRobotGroup;
		public SuperArenaCFGS superarena;
		public Map<Integer, SuperArenaTypeCFGS> superarenaTypes;
		public BWArenaCFGS bwarena;
		public Map<Integer, ForceWarCFGS> forcewar;
		public ForceWarBaseCFGS forcewarbase;
		public RandomNameCFGS randomNames;
		public PKCFGS pkSystem;
		public ProduceCFGS produce;
		public Map<Integer, ProduceRecipeCFGS> prodeceRecipes;
		public FusionCFGS fusion;
		public List<ShopCFGS> shops;
		public List<GambleShopCFGS> gambleShops;
		public CommonCFGS common;
		public Map<Integer, WorldBossCFGS> worldBosses;
		public Map<Integer, WorldMonsterCFGS> worldSuperMonsters;
		public Map<Integer, WorldMineralCFGS> worldMinerals;
		public FightFactorCFGS spiritFactors;
		public FightFactorCFGS weaponFactors;
		public Map<Integer, StoreCFGS> stores;
		public Map<Integer, HorseCFGS> horses;
		public Map<Integer, HorseEnHanceCFGS> horseEnHances;
		public Map<Integer, HorseEnHanceLvlCFGS> horseEnhanceLvls;
		public Map<Integer, HorseShowCFGS> horseShows;
		public Map<Integer, HorseSkillCFGS> horseSkills;
		public Map<Integer, HorseSkillUpdateDataCFGS> horseSkillUpdate;
		public Map<Integer, HorseEffectCFGS> horseEffects;
		public HorseCommonCFGS horseCommon;
		public List<HorseEnHanceLvlCommonCFGS> horseEnhanceLvlcommons;
		public Map<Integer, HorseEnHanceTypeCFGS> horseEnhanceTypes;
		public List<HorseEnHanceWeightCFGS> horseEnhanceWeights;
		public TreasureBaseCFGS treasureBase;
		public Map<Integer, InfoPointCFGS> infoPoints;
		public Map<Integer, MedalCFGS> medals;
		public Map<Integer, TreasureMapCFGS> treasureMaps;
		public Map<Integer, TreasurePieceCFGS> treasurePieces;
		public Map<Integer, TreasureNpcCFGS> treasureNpcs;
		public List<FriendGiveRewardCFGS> friendGive;
		public List<CharmCFGS> charms;
		public Map<Integer, FriendHeadCFGS> friendHead;
		public Map<Integer, FashionCFGS> fashions;
		public Map<Integer, SocialActionCFGS> socialActions;
		public SealBaseCFGS sealBase;
		public List<SealGradeCFGS> sealGrades;
		public Map<Integer, SealEnhanceTypeCFGS> sealEnhanceTypes;
		public Map<Integer, LeadGroupCFGS> leadGroups;
		public ExpCoinBaseCFGS expCoinBase;
		public Map<Integer, RareBookGroupCFGS> rarebookGroups;
		public Map<Integer, GraspGroupCFGS> graspGroups;
		public Map<Integer, DMGTransferLevelCFGS> dmgTransfers;
		public List<DMGTransferBuyCFGS> dmgTransferBuys;
		public Map<Integer, TitleCFGS> titles;
		public BetaActivityCFGS betaActivity;
		public Map<Integer, BranchTaskCFGS> branchTask;
		public Map<Integer, PetAchieveGroupCFGS> petAchieveGroups;
		public Map<Integer, UniqueSkillCFG> uniqueSkills;
		public Map<Integer, ClimbTowerFloorCFGS> climbTowerFloor;
		public Map<Integer, ClimbTowerFameCFGS> climbTowerFame;
		public ClimbTowerBaseDataCFGS climbTowerBaseData;
		public List<SecretAreaTaskCFGS> secretAreaData;
		public SectDeliverCFGS sectDeliver;
		public SectDeliverTaskCFGS sectDeliverTask;
		public SectDeliverVehicleCFGS sectDeliverVehicle;
		public SectDeliverRouteCFGS sectDeliverRoute;
		public SectDeliverWishCFGS sectDeliverWish;
		public RollNoticeCFGS rollNotice;
		public List<RemainActivityCFGS> remainActivitys;
		public List<ComposeCFGS> composes;
		public Map<Integer, MessageBoardSide> messageBoards;
		public MessageBoardCommonCFGS messageBoardCommon;
		public Map<Integer, ScheduleDataCFGS> scheduleData;
		public Map<Integer, ScheduleRewardsCFGS> scheduleRewards;
		public ArmorCFGS armor;
		public Map<Integer, SceneTrigCFGS> sceneTrigs;
		public Map<Integer, SceneSpawnPointCFGS> sceneSpawnPoint;
		public MarriageCFGS marriage;
		public List<ExchangeCFGS> exchange;
		public Map<Integer, SectGroupMapCFGS> sectGroupMaps;
		public Map<Integer, SectGroupMapPersonRewardCFGS> sectGroupMapRankRewards;
		public WeaponTalentCommonCFGS weaponTalent;
		public FlagBattleCFGS flagBattle;
		public Map<Integer, MonsterProcess> activityMapProcess;
		public HeirloomCFGS heirloom;
		public RobotCFGS robot;
		public AuctionCFGS auction;
		public Set<Integer> flashsaleresource;
		public Set<Integer> adversresource;
		public List<ActivityLastCFGS> activityLast;
		public SteleCFGS stele;
		public JusticeMapCFGS justice;
		public DemonHoleCFGS demonHole;
		public BattleMapCFGS battleMap;
		public EmergencyCFGS emergency;
		public LucklyStarCFGS lucklyStar;
		public List<FightNpcGroupCFGS> fightNpcGroups;
		public List<WizardPetCFGS> wizardPet;
		public List<NpcTransfromFuncCFGS> npcTransfromFunc;
		public List<NpcMapCFGS> npcMaps;
		public Map<Integer, TowerDefenceMapCFGS> towerDefenceMaps;
		public Map<Integer, TowerDefenceCFGS> towerDefences;
		public List<NpcPrayCFGS> npcPrays;
		public List<PrayDropCFGS> prayDrops;
		public MasterCFGS master;
		public List<MapSkillCFGS> mapSkills;
	}

	public static class CommonCFGS implements Stream.IStreamable
	{

		public CommonCFGS() { }

		public CommonCFGS(CommonEngineCFGS engine, CommonBagCFGS bag, CommonInputCFGS input, CommonChatCFGS chat, 
		                  CommonMedicineCFGS medicine, CommonEquipCFGS equip, CommonSkillCFGS skill, CommonArmorCFGS armor, 
		                  CommonMapCFGS map, CommonGeneralCFGS general, CommonMineralCFGS mineral, CommonFightPowerCFGS fightPower, 
		                  CommonPetCFGS pet, CommonTeamCFGS team, CommonVitCFGS vit, CommonSectCFGS sect, 
		                  CommonRevivesCFGS revives, CommonPKCFGS pk, CommonCoinCFGS coin, CommonActivityCFGS activity, 
		                  CommonWeaponTaskCFGS weaponTask, CommonSpiritCFGS spirits, CommonAuctionCFGS auction, CommonSectMailCFGS sectMail, 
		                  CommonFriendCFGS friend, CommonGameSetCFGS gameset, CommonTaskCFGS task, CommonFlowerCFGS flower, 
		                  CommonTitleCFGS title, CommonMonsterExpCFGS monsterExp, Set<Integer> produce, CommonRenameCFGS rename, 
		                  int activityMax, CommonWarehouseCFGS warehouse, VipMissVitGetCFGS vipMissVitGet, CommonFuncOpenCFGS funcOpen, 
		                  CommonSocialActionCFGS socialAction, CommonPacketRewardCFGS packetReward, CommonSocialCommentCFGS socialComment, BagSizeNeedCFGS bagSizeNeed)
		{
			this.engine = engine;
			this.bag = bag;
			this.input = input;
			this.chat = chat;
			this.medicine = medicine;
			this.equip = equip;
			this.skill = skill;
			this.armor = armor;
			this.map = map;
			this.general = general;
			this.mineral = mineral;
			this.fightPower = fightPower;
			this.pet = pet;
			this.team = team;
			this.vit = vit;
			this.sect = sect;
			this.revives = revives;
			this.pk = pk;
			this.coin = coin;
			this.activity = activity;
			this.weaponTask = weaponTask;
			this.spirits = spirits;
			this.auction = auction;
			this.sectMail = sectMail;
			this.friend = friend;
			this.gameset = gameset;
			this.task = task;
			this.flower = flower;
			this.title = title;
			this.monsterExp = monsterExp;
			this.produce = produce;
			this.rename = rename;
			this.activityMax = activityMax;
			this.warehouse = warehouse;
			this.vipMissVitGet = vipMissVitGet;
			this.funcOpen = funcOpen;
			this.socialAction = socialAction;
			this.packetReward = packetReward;
			this.socialComment = socialComment;
			this.bagSizeNeed = bagSizeNeed;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( engine == null )
				engine = new CommonEngineCFGS();
			is.pop(engine);
			if( bag == null )
				bag = new CommonBagCFGS();
			is.pop(bag);
			if( input == null )
				input = new CommonInputCFGS();
			is.pop(input);
			if( chat == null )
				chat = new CommonChatCFGS();
			is.pop(chat);
			if( medicine == null )
				medicine = new CommonMedicineCFGS();
			is.pop(medicine);
			if( equip == null )
				equip = new CommonEquipCFGS();
			is.pop(equip);
			if( skill == null )
				skill = new CommonSkillCFGS();
			is.pop(skill);
			if( armor == null )
				armor = new CommonArmorCFGS();
			is.pop(armor);
			if( map == null )
				map = new CommonMapCFGS();
			is.pop(map);
			if( general == null )
				general = new CommonGeneralCFGS();
			is.pop(general);
			if( mineral == null )
				mineral = new CommonMineralCFGS();
			is.pop(mineral);
			if( fightPower == null )
				fightPower = new CommonFightPowerCFGS();
			is.pop(fightPower);
			if( pet == null )
				pet = new CommonPetCFGS();
			is.pop(pet);
			if( team == null )
				team = new CommonTeamCFGS();
			is.pop(team);
			if( vit == null )
				vit = new CommonVitCFGS();
			is.pop(vit);
			if( sect == null )
				sect = new CommonSectCFGS();
			is.pop(sect);
			if( revives == null )
				revives = new CommonRevivesCFGS();
			is.pop(revives);
			if( pk == null )
				pk = new CommonPKCFGS();
			is.pop(pk);
			if( coin == null )
				coin = new CommonCoinCFGS();
			is.pop(coin);
			if( activity == null )
				activity = new CommonActivityCFGS();
			is.pop(activity);
			if( weaponTask == null )
				weaponTask = new CommonWeaponTaskCFGS();
			is.pop(weaponTask);
			if( spirits == null )
				spirits = new CommonSpiritCFGS();
			is.pop(spirits);
			if( auction == null )
				auction = new CommonAuctionCFGS();
			is.pop(auction);
			if( sectMail == null )
				sectMail = new CommonSectMailCFGS();
			is.pop(sectMail);
			if( friend == null )
				friend = new CommonFriendCFGS();
			is.pop(friend);
			if( gameset == null )
				gameset = new CommonGameSetCFGS();
			is.pop(gameset);
			if( task == null )
				task = new CommonTaskCFGS();
			is.pop(task);
			if( flower == null )
				flower = new CommonFlowerCFGS();
			is.pop(flower);
			if( title == null )
				title = new CommonTitleCFGS();
			is.pop(title);
			if( monsterExp == null )
				monsterExp = new CommonMonsterExpCFGS();
			is.pop(monsterExp);
			produce = is.popIntegerTreeSet();
			if( rename == null )
				rename = new CommonRenameCFGS();
			is.pop(rename);
			activityMax = is.popInteger();
			if( warehouse == null )
				warehouse = new CommonWarehouseCFGS();
			is.pop(warehouse);
			if( vipMissVitGet == null )
				vipMissVitGet = new VipMissVitGetCFGS();
			is.pop(vipMissVitGet);
			if( funcOpen == null )
				funcOpen = new CommonFuncOpenCFGS();
			is.pop(funcOpen);
			if( socialAction == null )
				socialAction = new CommonSocialActionCFGS();
			is.pop(socialAction);
			if( packetReward == null )
				packetReward = new CommonPacketRewardCFGS();
			is.pop(packetReward);
			if( socialComment == null )
				socialComment = new CommonSocialCommentCFGS();
			is.pop(socialComment);
			if( bagSizeNeed == null )
				bagSizeNeed = new BagSizeNeedCFGS();
			is.pop(bagSizeNeed);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(engine);
			os.push(bag);
			os.push(input);
			os.push(chat);
			os.push(medicine);
			os.push(equip);
			os.push(skill);
			os.push(armor);
			os.push(map);
			os.push(general);
			os.push(mineral);
			os.push(fightPower);
			os.push(pet);
			os.push(team);
			os.push(vit);
			os.push(sect);
			os.push(revives);
			os.push(pk);
			os.push(coin);
			os.push(activity);
			os.push(weaponTask);
			os.push(spirits);
			os.push(auction);
			os.push(sectMail);
			os.push(friend);
			os.push(gameset);
			os.push(task);
			os.push(flower);
			os.push(title);
			os.push(monsterExp);
			os.pushIntegerSet(produce);
			os.push(rename);
			os.pushInteger(activityMax);
			os.push(warehouse);
			os.push(vipMissVitGet);
			os.push(funcOpen);
			os.push(socialAction);
			os.push(packetReward);
			os.push(socialComment);
			os.push(bagSizeNeed);
		}

		public CommonEngineCFGS engine;
		public CommonBagCFGS bag;
		public CommonInputCFGS input;
		public CommonChatCFGS chat;
		public CommonMedicineCFGS medicine;
		public CommonEquipCFGS equip;
		public CommonSkillCFGS skill;
		public CommonArmorCFGS armor;
		public CommonMapCFGS map;
		public CommonGeneralCFGS general;
		public CommonMineralCFGS mineral;
		public CommonFightPowerCFGS fightPower;
		public CommonPetCFGS pet;
		public CommonTeamCFGS team;
		public CommonVitCFGS vit;
		public CommonSectCFGS sect;
		public CommonRevivesCFGS revives;
		public CommonPKCFGS pk;
		public CommonCoinCFGS coin;
		public CommonActivityCFGS activity;
		public CommonWeaponTaskCFGS weaponTask;
		public CommonSpiritCFGS spirits;
		public CommonAuctionCFGS auction;
		public CommonSectMailCFGS sectMail;
		public CommonFriendCFGS friend;
		public CommonGameSetCFGS gameset;
		public CommonTaskCFGS task;
		public CommonFlowerCFGS flower;
		public CommonTitleCFGS title;
		public CommonMonsterExpCFGS monsterExp;
		public Set<Integer> produce;
		public CommonRenameCFGS rename;
		public int activityMax;
		public CommonWarehouseCFGS warehouse;
		public VipMissVitGetCFGS vipMissVitGet;
		public CommonFuncOpenCFGS funcOpen;
		public CommonSocialActionCFGS socialAction;
		public CommonPacketRewardCFGS packetReward;
		public CommonSocialCommentCFGS socialComment;
		public BagSizeNeedCFGS bagSizeNeed;
	}

	public static class BagSizeNeedCFGS implements Stream.IStreamable
	{

		public BagSizeNeedCFGS() { }

		public BagSizeNeedCFGS(int wheelNeeds, int prayNeeds, int gambleShopNeeds)
		{
			this.wheelNeeds = wheelNeeds;
			this.prayNeeds = prayNeeds;
			this.gambleShopNeeds = gambleShopNeeds;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			wheelNeeds = is.popInteger();
			prayNeeds = is.popInteger();
			gambleShopNeeds = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(wheelNeeds);
			os.pushInteger(prayNeeds);
			os.pushInteger(gambleShopNeeds);
		}

		public int wheelNeeds;
		public int prayNeeds;
		public int gambleShopNeeds;
	}

	public static class CommonPacketRewardCFGS implements Stream.IStreamable
	{

		public CommonPacketRewardCFGS() { }

		public CommonPacketRewardCFGS(List<Integer> levelNeeds, List<DummyGoods> rewards)
		{
			this.levelNeeds = levelNeeds;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			levelNeeds = is.popIntegerList();
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(levelNeeds);
			os.pushList(rewards);
		}

		public List<Integer> levelNeeds;
		public List<DummyGoods> rewards;
	}

	public static class CommonSocialCommentCFGS implements Stream.IStreamable
	{

		public CommonSocialCommentCFGS() { }

		public CommonSocialCommentCFGS(int lvlReq, int latestCount, int likeCount, int dislikeCount, 
		                               int minWords, int maxWords, int dayLikeTimes, int dayDislikeTimes, 
		                               int daySendTimes)
		{
			this.lvlReq = lvlReq;
			this.latestCount = latestCount;
			this.likeCount = likeCount;
			this.dislikeCount = dislikeCount;
			this.minWords = minWords;
			this.maxWords = maxWords;
			this.dayLikeTimes = dayLikeTimes;
			this.dayDislikeTimes = dayDislikeTimes;
			this.daySendTimes = daySendTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvlReq = is.popInteger();
			latestCount = is.popInteger();
			likeCount = is.popInteger();
			dislikeCount = is.popInteger();
			minWords = is.popInteger();
			maxWords = is.popInteger();
			dayLikeTimes = is.popInteger();
			dayDislikeTimes = is.popInteger();
			daySendTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvlReq);
			os.pushInteger(latestCount);
			os.pushInteger(likeCount);
			os.pushInteger(dislikeCount);
			os.pushInteger(minWords);
			os.pushInteger(maxWords);
			os.pushInteger(dayLikeTimes);
			os.pushInteger(dayDislikeTimes);
			os.pushInteger(daySendTimes);
		}

		public int lvlReq;
		public int latestCount;
		public int likeCount;
		public int dislikeCount;
		public int minWords;
		public int maxWords;
		public int dayLikeTimes;
		public int dayDislikeTimes;
		public int daySendTimes;
	}

	public static class VipMissVitGetCFGS implements Stream.IStreamable
	{

		public VipMissVitGetCFGS() { }

		public VipMissVitGetCFGS(int itemId, int itemOfferVit, int getMaxTimes, int morningNum, 
		                         int noonNum, int nightNum)
		{
			this.itemId = itemId;
			this.itemOfferVit = itemOfferVit;
			this.getMaxTimes = getMaxTimes;
			this.morningNum = morningNum;
			this.noonNum = noonNum;
			this.nightNum = nightNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
			itemOfferVit = is.popInteger();
			getMaxTimes = is.popInteger();
			morningNum = is.popInteger();
			noonNum = is.popInteger();
			nightNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
			os.pushInteger(itemOfferVit);
			os.pushInteger(getMaxTimes);
			os.pushInteger(morningNum);
			os.pushInteger(noonNum);
			os.pushInteger(nightNum);
		}

		public int itemId;
		public int itemOfferVit;
		public int getMaxTimes;
		public int morningNum;
		public int noonNum;
		public int nightNum;
	}

	public static class TaskRewardCFGS implements Stream.IStreamable
	{

		public TaskRewardCFGS() { }

		public TaskRewardCFGS(int exp, List<DummyGoods> items)
		{
			this.exp = exp;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			exp = is.popInteger();
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(exp);
			os.pushList(items);
		}

		public int exp;
		public List<DummyGoods> items;
	}

	public static class TaskCondCFGS implements Stream.IStreamable
	{

		public TaskCondCFGS() { }

		public TaskCondCFGS(int type, int param1, int param2, int param3, 
		                    int param4, int param5, int param6)
		{
			this.type = type;
			this.param1 = param1;
			this.param2 = param2;
			this.param3 = param3;
			this.param4 = param4;
			this.param5 = param5;
			this.param6 = param6;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			param1 = is.popInteger();
			param2 = is.popInteger();
			param3 = is.popInteger();
			param4 = is.popInteger();
			param5 = is.popInteger();
			param6 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(param1);
			os.pushInteger(param2);
			os.pushInteger(param3);
			os.pushInteger(param4);
			os.pushInteger(param5);
			os.pushInteger(param6);
		}

		public int type;
		public int param1;
		public int param2;
		public int param3;
		public int param4;
		public int param5;
		public int param6;
	}

	public static class TaskCFGS implements Stream.IStreamable
	{

		public TaskCFGS() { }

		public TaskCFGS(int taskId, int group, int rearId, List<Integer> rearIds, 
		                int chapter, int lvlUp, int lvlDown, List<TaskCondCFGS> taskCond, 
		                int recvNpcId, int doneNpcId, int isFastReward, TaskRewardCFGS taskReward)
		{
			this.taskId = taskId;
			this.group = group;
			this.rearId = rearId;
			this.rearIds = rearIds;
			this.chapter = chapter;
			this.lvlUp = lvlUp;
			this.lvlDown = lvlDown;
			this.taskCond = taskCond;
			this.recvNpcId = recvNpcId;
			this.doneNpcId = doneNpcId;
			this.isFastReward = isFastReward;
			this.taskReward = taskReward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskId = is.popInteger();
			group = is.popInteger();
			rearId = is.popInteger();
			rearIds = is.popIntegerList();
			chapter = is.popInteger();
			lvlUp = is.popInteger();
			lvlDown = is.popInteger();
			taskCond = is.popList(TaskCondCFGS.class);
			recvNpcId = is.popInteger();
			doneNpcId = is.popInteger();
			isFastReward = is.popInteger();
			if( taskReward == null )
				taskReward = new TaskRewardCFGS();
			is.pop(taskReward);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskId);
			os.pushInteger(group);
			os.pushInteger(rearId);
			os.pushIntegerList(rearIds);
			os.pushInteger(chapter);
			os.pushInteger(lvlUp);
			os.pushInteger(lvlDown);
			os.pushList(taskCond);
			os.pushInteger(recvNpcId);
			os.pushInteger(doneNpcId);
			os.pushInteger(isFastReward);
			os.push(taskReward);
		}

		public int taskId;
		public int group;
		public int rearId;
		public List<Integer> rearIds;
		public int chapter;
		public int lvlUp;
		public int lvlDown;
		public List<TaskCondCFGS> taskCond;
		public int recvNpcId;
		public int doneNpcId;
		public int isFastReward;
		public TaskRewardCFGS taskReward;
	}

	public static class MainTaskBWTypeCFGS implements Stream.IStreamable
	{

		public MainTaskBWTypeCFGS() { }

		public MainTaskBWTypeCFGS(List<MainTaskGradeCFGS> taskGrades)
		{
			this.taskGrades = taskGrades;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskGrades = is.popList(MainTaskGradeCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(taskGrades);
		}

		public List<MainTaskGradeCFGS> taskGrades;
	}

	public static class MainTaskGradeCFGS implements Stream.IStreamable
	{

		public MainTaskGradeCFGS() { }

		public MainTaskGradeCFGS(int head, Set<Integer> tasks)
		{
			this.head = head;
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			head = is.popInteger();
			tasks = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(head);
			os.pushIntegerSet(tasks);
		}

		public int head;
		public Set<Integer> tasks;
	}

	public static class MainTaskCFGS implements Stream.IStreamable
	{

		public MainTaskCFGS() { }

		public MainTaskCFGS(int id, int nextId, int nextWhiteId, int nextBlackId, 
		                    int startNPC, TaskCondCFGS cond, int endNPC, List<ClassTypeReward> rewardItems, 
		                    int rewardExp, int title, List<Integer> senceTrigIDs, byte canQuit)
		{
			this.id = id;
			this.nextId = nextId;
			this.nextWhiteId = nextWhiteId;
			this.nextBlackId = nextBlackId;
			this.startNPC = startNPC;
			this.cond = cond;
			this.endNPC = endNPC;
			this.rewardItems = rewardItems;
			this.rewardExp = rewardExp;
			this.title = title;
			this.senceTrigIDs = senceTrigIDs;
			this.canQuit = canQuit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			nextId = is.popInteger();
			nextWhiteId = is.popInteger();
			nextBlackId = is.popInteger();
			startNPC = is.popInteger();
			if( cond == null )
				cond = new TaskCondCFGS();
			is.pop(cond);
			endNPC = is.popInteger();
			rewardItems = is.popList(ClassTypeReward.class);
			rewardExp = is.popInteger();
			title = is.popInteger();
			senceTrigIDs = is.popIntegerList();
			canQuit = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(nextId);
			os.pushInteger(nextWhiteId);
			os.pushInteger(nextBlackId);
			os.pushInteger(startNPC);
			os.push(cond);
			os.pushInteger(endNPC);
			os.pushList(rewardItems);
			os.pushInteger(rewardExp);
			os.pushInteger(title);
			os.pushIntegerList(senceTrigIDs);
			os.pushByte(canQuit);
		}

		public int id;
		public int nextId;
		public int nextWhiteId;
		public int nextBlackId;
		public int startNPC;
		public TaskCondCFGS cond;
		public int endNPC;
		public List<ClassTypeReward> rewardItems;
		public int rewardExp;
		public int title;
		public List<Integer> senceTrigIDs;
		public byte canQuit;
	}

	public static class AlterCFGS implements Stream.IStreamable
	{

		public AlterCFGS() { }

		public AlterCFGS(int id, List<Integer> attacks, List<SkillBriefCFGS> skills, List<AttrCFGS> attrs, 
		                 int loopTime, int speed, Set<Integer> buffs, int dodge)
		{
			this.id = id;
			this.attacks = attacks;
			this.skills = skills;
			this.attrs = attrs;
			this.loopTime = loopTime;
			this.speed = speed;
			this.buffs = buffs;
			this.dodge = dodge;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			attacks = is.popIntegerList();
			skills = is.popList(SkillBriefCFGS.class);
			attrs = is.popList(AttrCFGS.class);
			loopTime = is.popInteger();
			speed = is.popInteger();
			buffs = is.popIntegerTreeSet();
			dodge = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerList(attacks);
			os.pushList(skills);
			os.pushList(attrs);
			os.pushInteger(loopTime);
			os.pushInteger(speed);
			os.pushIntegerSet(buffs);
			os.pushInteger(dodge);
		}

		public int id;
		public List<Integer> attacks;
		public List<SkillBriefCFGS> skills;
		public List<AttrCFGS> attrs;
		public int loopTime;
		public int speed;
		public Set<Integer> buffs;
		public int dodge;
	}

	public static class WeaponGroupTaskCFGS implements Stream.IStreamable
	{

		public WeaponGroupTaskCFGS() { }

		public WeaponGroupTaskCFGS(int type, List<WeaponTaskCFGS> tasks)
		{
			this.type = type;
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			tasks = is.popList(WeaponTaskCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushList(tasks);
		}

		public int type;
		public List<WeaponTaskCFGS> tasks;
	}

	public static class WeaponTaskCFGS implements Stream.IStreamable
	{

		public WeaponTaskCFGS() { }

		public WeaponTaskCFGS(int type, int id, List<TaskCondCFGS> conds, DummyGoods reward)
		{
			this.type = type;
			this.id = id;
			this.conds = conds;
			this.reward = reward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			id = is.popInteger();
			conds = is.popList(TaskCondCFGS.class);
			if( reward == null )
				reward = new DummyGoods();
			is.pop(reward);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(id);
			os.pushList(conds);
			os.push(reward);
		}

		public int type;
		public int id;
		public List<TaskCondCFGS> conds;
		public DummyGoods reward;
	}

	public static class PetTaskCFGS implements Stream.IStreamable
	{

		public PetTaskCFGS() { }

		public PetTaskCFGS(int id, TaskCondCFGS cond, int friendliness, int coinnum, 
		                   int quickfinishdiamond)
		{
			this.id = id;
			this.cond = cond;
			this.friendliness = friendliness;
			this.coinnum = coinnum;
			this.quickfinishdiamond = quickfinishdiamond;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( cond == null )
				cond = new TaskCondCFGS();
			is.pop(cond);
			friendliness = is.popInteger();
			coinnum = is.popInteger();
			quickfinishdiamond = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(cond);
			os.pushInteger(friendliness);
			os.pushInteger(coinnum);
			os.pushInteger(quickfinishdiamond);
		}

		public int id;
		public TaskCondCFGS cond;
		public int friendliness;
		public int coinnum;
		public int quickfinishdiamond;
	}

	public static class PetLifeTaskGroupCFGS implements Stream.IStreamable
	{

		public PetLifeTaskGroupCFGS() { }

		public PetLifeTaskGroupCFGS(List<PetLifeTaskCFGS> petLifeTasks)
		{
			this.petLifeTasks = petLifeTasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petLifeTasks = is.popList(PetLifeTaskCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(petLifeTasks);
		}

		public List<PetLifeTaskCFGS> petLifeTasks;
	}

	public static class PetLifeTaskCFGS implements Stream.IStreamable
	{

		public PetLifeTaskCFGS() { }

		public PetLifeTaskCFGS(int petid, int id, int nextId, TaskCondCFGS cond, 
		                       int startNpcId, int endNpcId, List<DummyGoods> rewardItems, int mapCopyId)
		{
			this.petid = petid;
			this.id = id;
			this.nextId = nextId;
			this.cond = cond;
			this.startNpcId = startNpcId;
			this.endNpcId = endNpcId;
			this.rewardItems = rewardItems;
			this.mapCopyId = mapCopyId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petid = is.popInteger();
			id = is.popInteger();
			nextId = is.popInteger();
			if( cond == null )
				cond = new TaskCondCFGS();
			is.pop(cond);
			startNpcId = is.popInteger();
			endNpcId = is.popInteger();
			rewardItems = is.popList(DummyGoods.class);
			mapCopyId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petid);
			os.pushInteger(id);
			os.pushInteger(nextId);
			os.push(cond);
			os.pushInteger(startNpcId);
			os.pushInteger(endNpcId);
			os.pushList(rewardItems);
			os.pushInteger(mapCopyId);
		}

		public int petid;
		public int id;
		public int nextId;
		public TaskCondCFGS cond;
		public int startNpcId;
		public int endNpcId;
		public List<DummyGoods> rewardItems;
		public int mapCopyId;
	}

	public static class SectTaskCFGS implements Stream.IStreamable
	{

		public SectTaskCFGS() { }

		public SectTaskCFGS(int id, int star, TaskCondCFGS cond, int finisheNPC, 
		                    int rewardCon, float rewardExpFactor, List<DummyGoods> taskRewards, int sharedRewardCon, 
		                    float sharedRewardExpFactor, List<DummyGoods> shareRewards)
		{
			this.id = id;
			this.star = star;
			this.cond = cond;
			this.finisheNPC = finisheNPC;
			this.rewardCon = rewardCon;
			this.rewardExpFactor = rewardExpFactor;
			this.taskRewards = taskRewards;
			this.sharedRewardCon = sharedRewardCon;
			this.sharedRewardExpFactor = sharedRewardExpFactor;
			this.shareRewards = shareRewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			star = is.popInteger();
			if( cond == null )
				cond = new TaskCondCFGS();
			is.pop(cond);
			finisheNPC = is.popInteger();
			rewardCon = is.popInteger();
			rewardExpFactor = is.popFloat();
			taskRewards = is.popList(DummyGoods.class);
			sharedRewardCon = is.popInteger();
			sharedRewardExpFactor = is.popFloat();
			shareRewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(star);
			os.push(cond);
			os.pushInteger(finisheNPC);
			os.pushInteger(rewardCon);
			os.pushFloat(rewardExpFactor);
			os.pushList(taskRewards);
			os.pushInteger(sharedRewardCon);
			os.pushFloat(sharedRewardExpFactor);
			os.pushList(shareRewards);
		}

		public int id;
		public int star;
		public TaskCondCFGS cond;
		public int finisheNPC;
		public int rewardCon;
		public float rewardExpFactor;
		public List<DummyGoods> taskRewards;
		public int sharedRewardCon;
		public float sharedRewardExpFactor;
		public List<DummyGoods> shareRewards;
	}

	public static class MrgSeriesTaskGroupCFGS implements Stream.IStreamable
	{

		public MrgSeriesTaskGroupCFGS() { }

		public MrgSeriesTaskGroupCFGS(List<MrgSeriesTaskCFGS> tasks)
		{
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tasks = is.popList(MrgSeriesTaskCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(tasks);
		}

		public List<MrgSeriesTaskCFGS> tasks;
	}

	public static class MrgSeriesTaskCFGS implements Stream.IStreamable
	{

		public MrgSeriesTaskCFGS() { }

		public MrgSeriesTaskCFGS(int groupID, int taskID, int nextID, int nextGroup, 
		                         TaskCondCFGS cond, int startNPC, int endNPC, int mrgExp, 
		                         List<Integer> sceneTrigIDs, float expFactor, List<DummyGoods> rewards)
		{
			this.groupID = groupID;
			this.taskID = taskID;
			this.nextID = nextID;
			this.nextGroup = nextGroup;
			this.cond = cond;
			this.startNPC = startNPC;
			this.endNPC = endNPC;
			this.mrgExp = mrgExp;
			this.sceneTrigIDs = sceneTrigIDs;
			this.expFactor = expFactor;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupID = is.popInteger();
			taskID = is.popInteger();
			nextID = is.popInteger();
			nextGroup = is.popInteger();
			if( cond == null )
				cond = new TaskCondCFGS();
			is.pop(cond);
			startNPC = is.popInteger();
			endNPC = is.popInteger();
			mrgExp = is.popInteger();
			sceneTrigIDs = is.popIntegerList();
			expFactor = is.popFloat();
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupID);
			os.pushInteger(taskID);
			os.pushInteger(nextID);
			os.pushInteger(nextGroup);
			os.push(cond);
			os.pushInteger(startNPC);
			os.pushInteger(endNPC);
			os.pushInteger(mrgExp);
			os.pushIntegerList(sceneTrigIDs);
			os.pushFloat(expFactor);
			os.pushList(rewards);
		}

		public int groupID;
		public int taskID;
		public int nextID;
		public int nextGroup;
		public TaskCondCFGS cond;
		public int startNPC;
		public int endNPC;
		public int mrgExp;
		public List<Integer> sceneTrigIDs;
		public float expFactor;
		public List<DummyGoods> rewards;
	}

	public static class MrgLoopTaskCFGS implements Stream.IStreamable
	{

		public MrgLoopTaskCFGS() { }

		public MrgLoopTaskCFGS(int id, TaskCondCFGS cond, List<Integer> sceneTrigIDs, int mrgExp, 
		                       float expFactor, int startNPC, int endNPC, List<DummyGoods> rewards)
		{
			this.id = id;
			this.cond = cond;
			this.sceneTrigIDs = sceneTrigIDs;
			this.mrgExp = mrgExp;
			this.expFactor = expFactor;
			this.startNPC = startNPC;
			this.endNPC = endNPC;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( cond == null )
				cond = new TaskCondCFGS();
			is.pop(cond);
			sceneTrigIDs = is.popIntegerList();
			mrgExp = is.popInteger();
			expFactor = is.popFloat();
			startNPC = is.popInteger();
			endNPC = is.popInteger();
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(cond);
			os.pushIntegerList(sceneTrigIDs);
			os.pushInteger(mrgExp);
			os.pushFloat(expFactor);
			os.pushInteger(startNPC);
			os.pushInteger(endNPC);
			os.pushList(rewards);
		}

		public int id;
		public TaskCondCFGS cond;
		public List<Integer> sceneTrigIDs;
		public int mrgExp;
		public float expFactor;
		public int startNPC;
		public int endNPC;
		public List<DummyGoods> rewards;
	}

	public static class EquipSlotCFGS implements Stream.IStreamable
	{

		public EquipSlotCFGS() { }

		public EquipSlotCFGS(int id, List<Integer> slot)
		{
			this.id = id;
			this.slot = slot;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			slot = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerList(slot);
		}

		public int id;
		public List<Integer> slot;
	}

	public static class SpiritCFGS implements Stream.IStreamable
	{

		public SpiritCFGS() { }

		public SpiritCFGS(int id, int type, int maxLayer, int index, 
		                  int studyUse, Map<Integer, SpiritGrowUpCFGS> growups)
		{
			this.id = id;
			this.type = type;
			this.maxLayer = maxLayer;
			this.index = index;
			this.studyUse = studyUse;
			this.growups = growups;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			maxLayer = is.popInteger();
			index = is.popInteger();
			studyUse = is.popInteger();
			growups = is.popIntegerTreeMap(SpiritGrowUpCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(maxLayer);
			os.pushInteger(index);
			os.pushInteger(studyUse);
			os.pushIntegerMap(growups);
		}

		public int id;
		public int type;
		public int maxLayer;
		public int index;
		public int studyUse;
		public Map<Integer, SpiritGrowUpCFGS> growups;
	}

	public static class SpiritGrowUpCFGS implements Stream.IStreamable
	{

		public SpiritGrowUpCFGS() { }

		public SpiritGrowUpCFGS(int id, int level, int bookInspiration, List<DummyGoods> items, 
		                        List<AttrCFGS> attrs, List<Integer> effectsIds, int effectsType, int addPower)
		{
			this.id = id;
			this.level = level;
			this.bookInspiration = bookInspiration;
			this.items = items;
			this.attrs = attrs;
			this.effectsIds = effectsIds;
			this.effectsType = effectsType;
			this.addPower = addPower;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			bookInspiration = is.popInteger();
			items = is.popList(DummyGoods.class);
			attrs = is.popList(AttrCFGS.class);
			effectsIds = is.popIntegerList();
			effectsType = is.popInteger();
			addPower = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(bookInspiration);
			os.pushList(items);
			os.pushList(attrs);
			os.pushIntegerList(effectsIds);
			os.pushInteger(effectsType);
			os.pushInteger(addPower);
		}

		public int id;
		public int level;
		public int bookInspiration;
		public List<DummyGoods> items;
		public List<AttrCFGS> attrs;
		public List<Integer> effectsIds;
		public int effectsType;
		public int addPower;
	}

	public static class SpiritEffectCFGS implements Stream.IStreamable
	{

		public SpiritEffectCFGS() { }

		public SpiritEffectCFGS(int id, int type, Set<Integer> param1, int param2, 
		                        int param3, int param4, int param5)
		{
			this.id = id;
			this.type = type;
			this.param1 = param1;
			this.param2 = param2;
			this.param3 = param3;
			this.param4 = param4;
			this.param5 = param5;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			param1 = is.popIntegerTreeSet();
			param2 = is.popInteger();
			param3 = is.popInteger();
			param4 = is.popInteger();
			param5 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushIntegerSet(param1);
			os.pushInteger(param2);
			os.pushInteger(param3);
			os.pushInteger(param4);
			os.pushInteger(param5);
		}

		public int id;
		public int type;
		public Set<Integer> param1;
		public int param2;
		public int param3;
		public int param4;
		public int param5;
	}

	public static class SkillBournCFGS implements Stream.IStreamable
	{

		public SkillBournCFGS() { }

		public SkillBournCFGS(int lvl, List<DummyGoods> items)
		{
			this.lvl = lvl;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvl = is.popInteger();
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvl);
			os.pushList(items);
		}

		public int lvl;
		public List<DummyGoods> items;
	}

	public static class PropertyCFGS implements Stream.IStreamable
	{

		public PropertyCFGS() { }

		public PropertyCFGS(int id, String desc, byte canNegative, byte valueType, 
		                    double rolePower, double petPower)
		{
			this.id = id;
			this.desc = desc;
			this.canNegative = canNegative;
			this.valueType = valueType;
			this.rolePower = rolePower;
			this.petPower = petPower;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			desc = is.popString();
			canNegative = is.popByte();
			valueType = is.popByte();
			rolePower = is.popDouble();
			petPower = is.popDouble();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(desc);
			os.pushByte(canNegative);
			os.pushByte(valueType);
			os.pushDouble(rolePower);
			os.pushDouble(petPower);
		}

		public int id;
		public String desc;
		public byte canNegative;
		public byte valueType;
		public double rolePower;
		public double petPower;
	}

	public static class ConsumeCFGS implements Stream.IStreamable
	{

		public ConsumeCFGS() { }

		public ConsumeCFGS(int id, int reqID, List<Integer> reqCount)
		{
			this.id = id;
			this.reqID = reqID;
			this.reqCount = reqCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			reqID = is.popInteger();
			reqCount = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(reqID);
			os.pushIntegerList(reqCount);
		}

		public int id;
		public int reqID;
		public List<Integer> reqCount;
	}

	public static class GiftCFGS implements Stream.IStreamable
	{

		public GiftCFGS() { }

		public GiftCFGS(int id, String name, List<DummyGoods> gifts)
		{
			this.id = id;
			this.name = name;
			this.gifts = gifts;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushList(gifts);
		}

		public int id;
		public String name;
		public List<DummyGoods> gifts;
	}

	public static class CheckInCFGS implements Stream.IStreamable
	{

		public CheckInCFGS() { }

		public CheckInCFGS(int id, int startTime, List<CheckInRewardCFGS> rewards)
		{
			this.id = id;
			this.startTime = startTime;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			startTime = is.popInteger();
			rewards = is.popList(CheckInRewardCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(startTime);
			os.pushList(rewards);
		}

		public int id;
		public int startTime;
		public List<CheckInRewardCFGS> rewards;
	}

	public static class CheckInRewardCFGS implements Stream.IStreamable
	{

		public CheckInRewardCFGS() { }

		public CheckInRewardCFGS(DummyGoods reward, int doubleVip)
		{
			this.reward = reward;
			this.doubleVip = doubleVip;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( reward == null )
				reward = new DummyGoods();
			is.pop(reward);
			doubleVip = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(reward);
			os.pushInteger(doubleVip);
		}

		public DummyGoods reward;
		public int doubleVip;
	}

	public static class BaseDummyItemCFGS implements Stream.IStreamable
	{

		public BaseDummyItemCFGS() { }

		public BaseDummyItemCFGS(int id, String name, int rank, int quickBuyCostItem, 
		                         int quickBuyCostNum, int quickBuyGetNum)
		{
			this.id = id;
			this.name = name;
			this.rank = rank;
			this.quickBuyCostItem = quickBuyCostItem;
			this.quickBuyCostNum = quickBuyCostNum;
			this.quickBuyGetNum = quickBuyGetNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			rank = is.popInteger();
			quickBuyCostItem = is.popInteger();
			quickBuyCostNum = is.popInteger();
			quickBuyGetNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(rank);
			os.pushInteger(quickBuyCostItem);
			os.pushInteger(quickBuyCostNum);
			os.pushInteger(quickBuyGetNum);
		}

		public int id;
		public String name;
		public int rank;
		public int quickBuyCostItem;
		public int quickBuyCostNum;
		public int quickBuyGetNum;
	}

	public static class EquipBasePropCFGS implements Stream.IStreamable
	{

		public EquipBasePropCFGS() { }

		public EquipBasePropCFGS(int type, int value, List<Integer> growUp, byte advEffect)
		{
			this.type = type;
			this.value = value;
			this.growUp = growUp;
			this.advEffect = advEffect;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			value = is.popInteger();
			growUp = is.popIntegerList();
			advEffect = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(value);
			os.pushIntegerList(growUp);
			os.pushByte(advEffect);
		}

		public int type;
		public int value;
		public List<Integer> growUp;
		public byte advEffect;
	}

	public static class EquipAdditPropCFGS implements Stream.IStreamable
	{

		public EquipAdditPropCFGS() { }

		public EquipAdditPropCFGS(int type, int arg, int valMax, int valMin)
		{
			this.type = type;
			this.arg = arg;
			this.valMax = valMax;
			this.valMin = valMin;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			arg = is.popInteger();
			valMax = is.popInteger();
			valMin = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(arg);
			os.pushInteger(valMax);
			os.pushInteger(valMin);
		}

		public int type;
		public int arg;
		public int valMax;
		public int valMin;
	}

	public static class EquipCFGS implements Stream.IStreamable
	{

		public EquipCFGS() { }

		public EquipCFGS(int id, String name, int type, int rank, 
		                 int lvlReq, int tlvlReq, int bwTypeReq, int saleEnergy, 
		                 byte canTrade, int classType, List<EquipBasePropCFGS> baseProp, List<EquipAdditPropCFGS> additProp, 
		                 byte canSplit, int splitNeedSP, List<DummyGoods> splitOutput, DummyGoods refineFixCost, 
		                 Set<Integer> refineCosts, int auctionPrice)
		{
			this.id = id;
			this.name = name;
			this.type = type;
			this.rank = rank;
			this.lvlReq = lvlReq;
			this.tlvlReq = tlvlReq;
			this.bwTypeReq = bwTypeReq;
			this.saleEnergy = saleEnergy;
			this.canTrade = canTrade;
			this.classType = classType;
			this.baseProp = baseProp;
			this.additProp = additProp;
			this.canSplit = canSplit;
			this.splitNeedSP = splitNeedSP;
			this.splitOutput = splitOutput;
			this.refineFixCost = refineFixCost;
			this.refineCosts = refineCosts;
			this.auctionPrice = auctionPrice;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			type = is.popInteger();
			rank = is.popInteger();
			lvlReq = is.popInteger();
			tlvlReq = is.popInteger();
			bwTypeReq = is.popInteger();
			saleEnergy = is.popInteger();
			canTrade = is.popByte();
			classType = is.popInteger();
			baseProp = is.popList(EquipBasePropCFGS.class);
			additProp = is.popList(EquipAdditPropCFGS.class);
			canSplit = is.popByte();
			splitNeedSP = is.popInteger();
			splitOutput = is.popList(DummyGoods.class);
			if( refineFixCost == null )
				refineFixCost = new DummyGoods();
			is.pop(refineFixCost);
			refineCosts = is.popIntegerTreeSet();
			auctionPrice = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(type);
			os.pushInteger(rank);
			os.pushInteger(lvlReq);
			os.pushInteger(tlvlReq);
			os.pushInteger(bwTypeReq);
			os.pushInteger(saleEnergy);
			os.pushByte(canTrade);
			os.pushInteger(classType);
			os.pushList(baseProp);
			os.pushList(additProp);
			os.pushByte(canSplit);
			os.pushInteger(splitNeedSP);
			os.pushList(splitOutput);
			os.push(refineFixCost);
			os.pushIntegerSet(refineCosts);
			os.pushInteger(auctionPrice);
		}

		public int id;
		public String name;
		public int type;
		public int rank;
		public int lvlReq;
		public int tlvlReq;
		public int bwTypeReq;
		public int saleEnergy;
		public byte canTrade;
		public int classType;
		public List<EquipBasePropCFGS> baseProp;
		public List<EquipAdditPropCFGS> additProp;
		public byte canSplit;
		public int splitNeedSP;
		public List<DummyGoods> splitOutput;
		public DummyGoods refineFixCost;
		public Set<Integer> refineCosts;
		public int auctionPrice;
	}

	public static class EquipRefineGroupCFGS implements Stream.IStreamable
	{

		public EquipRefineGroupCFGS() { }

		public EquipRefineGroupCFGS(List<EquipRefineCFGS> refines)
		{
			this.refines = refines;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			refines = is.popList(EquipRefineCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(refines);
		}

		public List<EquipRefineCFGS> refines;
	}

	public static class EquipRefineCFGS implements Stream.IStreamable
	{

		public EquipRefineCFGS() { }

		public EquipRefineCFGS(float weight, int propID, int minValue, int maxValue, 
		                       List<Integer> levels, List<Float> multiples)
		{
			this.weight = weight;
			this.propID = propID;
			this.minValue = minValue;
			this.maxValue = maxValue;
			this.levels = levels;
			this.multiples = multiples;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weight = is.popFloat();
			propID = is.popInteger();
			minValue = is.popInteger();
			maxValue = is.popInteger();
			levels = is.popIntegerList();
			multiples = is.popFloatList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(weight);
			os.pushInteger(propID);
			os.pushInteger(minValue);
			os.pushInteger(maxValue);
			os.pushIntegerList(levels);
			os.pushFloatList(multiples);
		}

		public float weight;
		public int propID;
		public int minValue;
		public int maxValue;
		public List<Integer> levels;
		public List<Float> multiples;
	}

	public static class LegendsCFGS implements Stream.IStreamable
	{

		public LegendsCFGS() { }

		public LegendsCFGS(List<LegendEquipRandCFGS> rands, List<LegendOneCFGS> legendOnes, List<LegendTwoCFGS> legendTwos, Map<Integer, LegendThreePartCFGS> legendThreeParts, 
		                   LegendMakeCFGS make)
		{
			this.rands = rands;
			this.legendOnes = legendOnes;
			this.legendTwos = legendTwos;
			this.legendThreeParts = legendThreeParts;
			this.make = make;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rands = is.popList(LegendEquipRandCFGS.class);
			legendOnes = is.popList(LegendOneCFGS.class);
			legendTwos = is.popList(LegendTwoCFGS.class);
			legendThreeParts = is.popIntegerTreeMap(LegendThreePartCFGS.class);
			if( make == null )
				make = new LegendMakeCFGS();
			is.pop(make);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(rands);
			os.pushList(legendOnes);
			os.pushList(legendTwos);
			os.pushIntegerMap(legendThreeParts);
			os.push(make);
		}

		public List<LegendEquipRandCFGS> rands;
		public List<LegendOneCFGS> legendOnes;
		public List<LegendTwoCFGS> legendTwos;
		public Map<Integer, LegendThreePartCFGS> legendThreeParts;
		public LegendMakeCFGS make;
	}

	public static class LegendEquipRandCFGS implements Stream.IStreamable
	{

		public LegendEquipRandCFGS() { }

		public LegendEquipRandCFGS(List<Byte> values, float weight, float makeWeight)
		{
			this.values = values;
			this.weight = weight;
			this.makeWeight = makeWeight;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			values = is.popByteList();
			weight = is.popFloat();
			makeWeight = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByteList(values);
			os.pushFloat(weight);
			os.pushFloat(makeWeight);
		}

		public List<Byte> values;
		public float weight;
		public float makeWeight;
	}

	public static class LegendOneCFGS implements Stream.IStreamable
	{

		public LegendOneCFGS() { }

		public LegendOneCFGS(float weight, double baseAdd)
		{
			this.weight = weight;
			this.baseAdd = baseAdd;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weight = is.popFloat();
			baseAdd = is.popDouble();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(weight);
			os.pushDouble(baseAdd);
		}

		public float weight;
		public double baseAdd;
	}

	public static class LegendTwoCFGS implements Stream.IStreamable
	{

		public LegendTwoCFGS() { }

		public LegendTwoCFGS(float weight, double addtionAdd)
		{
			this.weight = weight;
			this.addtionAdd = addtionAdd;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weight = is.popFloat();
			addtionAdd = is.popDouble();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(weight);
			os.pushDouble(addtionAdd);
		}

		public float weight;
		public double addtionAdd;
	}

	public static class LegendThreeCFGS implements Stream.IStreamable
	{

		public LegendThreeCFGS() { }

		public LegendThreeCFGS(int type, List<Integer> params)
		{
			this.type = type;
			this.params = params;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			params = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushIntegerList(params);
		}

		public int type;
		public List<Integer> params;
	}

	public static class LegendThreePartCFGS implements Stream.IStreamable
	{

		public LegendThreePartCFGS() { }

		public LegendThreePartCFGS(List<LegendThreeCFGS> effects)
		{
			this.effects = effects;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effects = is.popList(LegendThreeCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(effects);
		}

		public List<LegendThreeCFGS> effects;
	}

	public static class LegendMakeCFGS implements Stream.IStreamable
	{

		public LegendMakeCFGS() { }

		public LegendMakeCFGS(int rollNoticeInterval, List<Integer> lvlReqs, Map<Integer, LegendMakeCostCFGS> makeCost)
		{
			this.rollNoticeInterval = rollNoticeInterval;
			this.lvlReqs = lvlReqs;
			this.makeCost = makeCost;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rollNoticeInterval = is.popInteger();
			lvlReqs = is.popIntegerList();
			makeCost = is.popIntegerTreeMap(LegendMakeCostCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rollNoticeInterval);
			os.pushIntegerList(lvlReqs);
			os.pushIntegerMap(makeCost);
		}

		public int rollNoticeInterval;
		public List<Integer> lvlReqs;
		public Map<Integer, LegendMakeCostCFGS> makeCost;
	}

	public static class LegendMakeCostCFGS implements Stream.IStreamable
	{

		public LegendMakeCostCFGS() { }

		public LegendMakeCostCFGS(List<IntSet> lvls)
		{
			this.lvls = lvls;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvls = is.popList(IntSet.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(lvls);
		}

		public List<IntSet> lvls;
	}

	public static class ItemCFGS implements Stream.IStreamable
	{

		public ItemCFGS() { }

		public ItemCFGS(int id, String name, int type, int rank, 
		                int lvlReq, int viplvlReq, int saleGold, byte canTrade, 
		                int maxStack, int composeId, int composeCntReq, int arg1, 
		                int arg2, int arg3, int arg4, int arg5, 
		                int auctionPrice, int auctiontype, List<Integer> dayUseTimes, byte canGift, 
		                int roleCanUseTimes, int canFusion, int fusionPoint, int fusionHint)
		{
			this.id = id;
			this.name = name;
			this.type = type;
			this.rank = rank;
			this.lvlReq = lvlReq;
			this.viplvlReq = viplvlReq;
			this.saleGold = saleGold;
			this.canTrade = canTrade;
			this.maxStack = maxStack;
			this.composeId = composeId;
			this.composeCntReq = composeCntReq;
			this.arg1 = arg1;
			this.arg2 = arg2;
			this.arg3 = arg3;
			this.arg4 = arg4;
			this.arg5 = arg5;
			this.auctionPrice = auctionPrice;
			this.auctiontype = auctiontype;
			this.dayUseTimes = dayUseTimes;
			this.canGift = canGift;
			this.roleCanUseTimes = roleCanUseTimes;
			this.canFusion = canFusion;
			this.fusionPoint = fusionPoint;
			this.fusionHint = fusionHint;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			type = is.popInteger();
			rank = is.popInteger();
			lvlReq = is.popInteger();
			viplvlReq = is.popInteger();
			saleGold = is.popInteger();
			canTrade = is.popByte();
			maxStack = is.popInteger();
			composeId = is.popInteger();
			composeCntReq = is.popInteger();
			arg1 = is.popInteger();
			arg2 = is.popInteger();
			arg3 = is.popInteger();
			arg4 = is.popInteger();
			arg5 = is.popInteger();
			auctionPrice = is.popInteger();
			auctiontype = is.popInteger();
			dayUseTimes = is.popIntegerList();
			canGift = is.popByte();
			roleCanUseTimes = is.popInteger();
			canFusion = is.popInteger();
			fusionPoint = is.popInteger();
			fusionHint = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(type);
			os.pushInteger(rank);
			os.pushInteger(lvlReq);
			os.pushInteger(viplvlReq);
			os.pushInteger(saleGold);
			os.pushByte(canTrade);
			os.pushInteger(maxStack);
			os.pushInteger(composeId);
			os.pushInteger(composeCntReq);
			os.pushInteger(arg1);
			os.pushInteger(arg2);
			os.pushInteger(arg3);
			os.pushInteger(arg4);
			os.pushInteger(arg5);
			os.pushInteger(auctionPrice);
			os.pushInteger(auctiontype);
			os.pushIntegerList(dayUseTimes);
			os.pushByte(canGift);
			os.pushInteger(roleCanUseTimes);
			os.pushInteger(canFusion);
			os.pushInteger(fusionPoint);
			os.pushInteger(fusionHint);
		}

		public int id;
		public String name;
		public int type;
		public int rank;
		public int lvlReq;
		public int viplvlReq;
		public int saleGold;
		public byte canTrade;
		public int maxStack;
		public int composeId;
		public int composeCntReq;
		public int arg1;
		public int arg2;
		public int arg3;
		public int arg4;
		public int arg5;
		public int auctionPrice;
		public int auctiontype;
		public List<Integer> dayUseTimes;
		public byte canGift;
		public int roleCanUseTimes;
		public int canFusion;
		public int fusionPoint;
		public int fusionHint;
	}

	public static class GemCFGS implements Stream.IStreamable
	{

		public GemCFGS() { }

		public GemCFGS(int id, String name, int type, int rank, 
		               int level, int saleEnergy, byte canTrade, int maxStack, 
		               int propID, int propVal, Map<Integer, GemLevelUpCostCFGS> lvlupcosts, int auctionPrice)
		{
			this.id = id;
			this.name = name;
			this.type = type;
			this.rank = rank;
			this.level = level;
			this.saleEnergy = saleEnergy;
			this.canTrade = canTrade;
			this.maxStack = maxStack;
			this.propID = propID;
			this.propVal = propVal;
			this.lvlupcosts = lvlupcosts;
			this.auctionPrice = auctionPrice;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			type = is.popInteger();
			rank = is.popInteger();
			level = is.popInteger();
			saleEnergy = is.popInteger();
			canTrade = is.popByte();
			maxStack = is.popInteger();
			propID = is.popInteger();
			propVal = is.popInteger();
			lvlupcosts = is.popIntegerHashMap(GemLevelUpCostCFGS.class);
			auctionPrice = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(type);
			os.pushInteger(rank);
			os.pushInteger(level);
			os.pushInteger(saleEnergy);
			os.pushByte(canTrade);
			os.pushInteger(maxStack);
			os.pushInteger(propID);
			os.pushInteger(propVal);
			os.pushIntegerMap(lvlupcosts);
			os.pushInteger(auctionPrice);
		}

		public int id;
		public String name;
		public int type;
		public int rank;
		public int level;
		public int saleEnergy;
		public byte canTrade;
		public int maxStack;
		public int propID;
		public int propVal;
		public Map<Integer, GemLevelUpCostCFGS> lvlupcosts;
		public int auctionPrice;
	}

	public static class BookCFGS implements Stream.IStreamable
	{

		public BookCFGS() { }

		public BookCFGS(int id, String name, int rank, int saleSpirit, 
		                byte canTrade, int maxStack, int spiritID, int auctionPrice, 
		                int classType)
		{
			this.id = id;
			this.name = name;
			this.rank = rank;
			this.saleSpirit = saleSpirit;
			this.canTrade = canTrade;
			this.maxStack = maxStack;
			this.spiritID = spiritID;
			this.auctionPrice = auctionPrice;
			this.classType = classType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			rank = is.popInteger();
			saleSpirit = is.popInteger();
			canTrade = is.popByte();
			maxStack = is.popInteger();
			spiritID = is.popInteger();
			auctionPrice = is.popInteger();
			classType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(rank);
			os.pushInteger(saleSpirit);
			os.pushByte(canTrade);
			os.pushInteger(maxStack);
			os.pushInteger(spiritID);
			os.pushInteger(auctionPrice);
			os.pushInteger(classType);
		}

		public int id;
		public String name;
		public int rank;
		public int saleSpirit;
		public byte canTrade;
		public int maxStack;
		public int spiritID;
		public int auctionPrice;
		public int classType;
	}

	public static class GemLevelUpCostCFGS implements Stream.IStreamable
	{

		public GemLevelUpCostCFGS() { }

		public GemLevelUpCostCFGS(int fromId, int toId, int energy, List<DummyGoods> items)
		{
			this.fromId = fromId;
			this.toId = toId;
			this.energy = energy;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fromId = is.popInteger();
			toId = is.popInteger();
			energy = is.popInteger();
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(fromId);
			os.pushInteger(toId);
			os.pushInteger(energy);
			os.pushList(items);
		}

		public int fromId;
		public int toId;
		public int energy;
		public List<DummyGoods> items;
	}

	public static class EquipLevelUpCostCFGS implements Stream.IStreamable
	{

		public EquipLevelUpCostCFGS() { }

		public EquipLevelUpCostCFGS(int energy, List<DummyGoods> items)
		{
			this.energy = energy;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			energy = is.popInteger();
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(energy);
			os.pushList(items);
		}

		public int energy;
		public List<DummyGoods> items;
	}

	public static class EquipToughenCFGS implements Stream.IStreamable
	{

		public EquipToughenCFGS() { }

		public EquipToughenCFGS(int lvl, List<EquipLevelUpCostCFGS> cost)
		{
			this.lvl = lvl;
			this.cost = cost;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvl = is.popInteger();
			cost = is.popList(EquipLevelUpCostCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvl);
			os.pushList(cost);
		}

		public int lvl;
		public List<EquipLevelUpCostCFGS> cost;
	}

	public static class EquipPurgatoryCFGS implements Stream.IStreamable
	{

		public EquipPurgatoryCFGS() { }

		public EquipPurgatoryCFGS(byte lvl, byte quality, List<DummyGoods> goods)
		{
			this.lvl = lvl;
			this.quality = quality;
			this.goods = goods;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvl = is.popByte();
			quality = is.popByte();
			goods = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(lvl);
			os.pushByte(quality);
			os.pushList(goods);
		}

		public byte lvl;
		public byte quality;
		public List<DummyGoods> goods;
	}

	public static class EquipStarUpCostCFGS implements Stream.IStreamable
	{

		public EquipStarUpCostCFGS() { }

		public EquipStarUpCostCFGS(List<DummyGoods> items)
		{
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(items);
		}

		public List<DummyGoods> items;
	}

	public static class EquipUpStarCFGS implements Stream.IStreamable
	{

		public EquipUpStarCFGS() { }

		public EquipUpStarCFGS(int lvl, double atkNUp, double defNUp, double maxHpUp, 
		                       int atkFixedUp, int defFixedUp, int maxHpFixedUp, int sucMin, 
		                       int sucMax, int sucRate, List<EquipStarUpCostCFGS> cost)
		{
			this.lvl = lvl;
			this.atkNUp = atkNUp;
			this.defNUp = defNUp;
			this.maxHpUp = maxHpUp;
			this.atkFixedUp = atkFixedUp;
			this.defFixedUp = defFixedUp;
			this.maxHpFixedUp = maxHpFixedUp;
			this.sucMin = sucMin;
			this.sucMax = sucMax;
			this.sucRate = sucRate;
			this.cost = cost;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvl = is.popInteger();
			atkNUp = is.popDouble();
			defNUp = is.popDouble();
			maxHpUp = is.popDouble();
			atkFixedUp = is.popInteger();
			defFixedUp = is.popInteger();
			maxHpFixedUp = is.popInteger();
			sucMin = is.popInteger();
			sucMax = is.popInteger();
			sucRate = is.popInteger();
			cost = is.popList(EquipStarUpCostCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvl);
			os.pushDouble(atkNUp);
			os.pushDouble(defNUp);
			os.pushDouble(maxHpUp);
			os.pushInteger(atkFixedUp);
			os.pushInteger(defFixedUp);
			os.pushInteger(maxHpFixedUp);
			os.pushInteger(sucMin);
			os.pushInteger(sucMax);
			os.pushInteger(sucRate);
			os.pushList(cost);
		}

		public int lvl;
		public double atkNUp;
		public double defNUp;
		public double maxHpUp;
		public int atkFixedUp;
		public int defFixedUp;
		public int maxHpFixedUp;
		public int sucMin;
		public int sucMax;
		public int sucRate;
		public List<EquipStarUpCostCFGS> cost;
	}

	public static class EquipStarAddPropCFGS implements Stream.IStreamable
	{

		public EquipStarAddPropCFGS() { }

		public EquipStarAddPropCFGS(Map<Integer, StarAdditionProp> additionProp)
		{
			this.additionProp = additionProp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			additionProp = is.popIntegerTreeMap(StarAdditionProp.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(additionProp);
		}

		public Map<Integer, StarAdditionProp> additionProp;
	}

	public static class StarAdditionProp implements Stream.IStreamable
	{

		public StarAdditionProp() { }

		public StarAdditionProp(List<AttrCFGS> prop)
		{
			this.prop = prop;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			prop = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(prop);
		}

		public List<AttrCFGS> prop;
	}

	public static class BagItemCFGS implements Stream.IStreamable
	{

		public BagItemCFGS() { }

		public BagItemCFGS(int id, int maxStack)
		{
			this.id = id;
			this.maxStack = maxStack;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			maxStack = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(maxStack);
		}

		public int id;
		public int maxStack;
	}

	public static class LevelCFGS implements Stream.IStreamable
	{

		public LevelCFGS() { }

		public LevelCFGS(int level, long exp, List<Integer> weaponRingTaskIds, int maxVit, 
		                 int addVit, int dailyTaskBaseExp, int sectTaskBaseExp, int quizBaseExp, 
		                 int offlineBaseExp, List<Integer> secretAreaTasks, int sectDeliverBaseGold, int sectDeliverBaseExp, 
		                 int maxSnatchRedEnvelopeTimes, int mrgTaskBaseExp, List<Integer> mrgLoopTasks, int demonHoleBaseExp, 
		                 int credit)
		{
			this.level = level;
			this.exp = exp;
			this.weaponRingTaskIds = weaponRingTaskIds;
			this.maxVit = maxVit;
			this.addVit = addVit;
			this.dailyTaskBaseExp = dailyTaskBaseExp;
			this.sectTaskBaseExp = sectTaskBaseExp;
			this.quizBaseExp = quizBaseExp;
			this.offlineBaseExp = offlineBaseExp;
			this.secretAreaTasks = secretAreaTasks;
			this.sectDeliverBaseGold = sectDeliverBaseGold;
			this.sectDeliverBaseExp = sectDeliverBaseExp;
			this.maxSnatchRedEnvelopeTimes = maxSnatchRedEnvelopeTimes;
			this.mrgTaskBaseExp = mrgTaskBaseExp;
			this.mrgLoopTasks = mrgLoopTasks;
			this.demonHoleBaseExp = demonHoleBaseExp;
			this.credit = credit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			exp = is.popLong();
			weaponRingTaskIds = is.popIntegerList();
			maxVit = is.popInteger();
			addVit = is.popInteger();
			dailyTaskBaseExp = is.popInteger();
			sectTaskBaseExp = is.popInteger();
			quizBaseExp = is.popInteger();
			offlineBaseExp = is.popInteger();
			secretAreaTasks = is.popIntegerList();
			sectDeliverBaseGold = is.popInteger();
			sectDeliverBaseExp = is.popInteger();
			maxSnatchRedEnvelopeTimes = is.popInteger();
			mrgTaskBaseExp = is.popInteger();
			mrgLoopTasks = is.popIntegerList();
			demonHoleBaseExp = is.popInteger();
			credit = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushLong(exp);
			os.pushIntegerList(weaponRingTaskIds);
			os.pushInteger(maxVit);
			os.pushInteger(addVit);
			os.pushInteger(dailyTaskBaseExp);
			os.pushInteger(sectTaskBaseExp);
			os.pushInteger(quizBaseExp);
			os.pushInteger(offlineBaseExp);
			os.pushIntegerList(secretAreaTasks);
			os.pushInteger(sectDeliverBaseGold);
			os.pushInteger(sectDeliverBaseExp);
			os.pushInteger(maxSnatchRedEnvelopeTimes);
			os.pushInteger(mrgTaskBaseExp);
			os.pushIntegerList(mrgLoopTasks);
			os.pushInteger(demonHoleBaseExp);
			os.pushInteger(credit);
		}

		public int level;
		public long exp;
		public List<Integer> weaponRingTaskIds;
		public int maxVit;
		public int addVit;
		public int dailyTaskBaseExp;
		public int sectTaskBaseExp;
		public int quizBaseExp;
		public int offlineBaseExp;
		public List<Integer> secretAreaTasks;
		public int sectDeliverBaseGold;
		public int sectDeliverBaseExp;
		public int maxSnatchRedEnvelopeTimes;
		public int mrgTaskBaseExp;
		public List<Integer> mrgLoopTasks;
		public int demonHoleBaseExp;
		public int credit;
	}

	public static class LevelLimitCFGS implements Stream.IStreamable
	{

		public LevelLimitCFGS() { }

		public LevelLimitCFGS(LevelLimitBaseCFGS base, SpeedUpCFGS speedUp)
		{
			this.base = base;
			this.speedUp = speedUp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new LevelLimitBaseCFGS();
			is.pop(base);
			if( speedUp == null )
				speedUp = new SpeedUpCFGS();
			is.pop(speedUp);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.push(speedUp);
		}

		public LevelLimitBaseCFGS base;
		public SpeedUpCFGS speedUp;
	}

	public static class LevelLimitBaseCFGS implements Stream.IStreamable
	{

		public LevelLimitBaseCFGS() { }

		public LevelLimitBaseCFGS(int limitLvl, float expRate, long expVolume)
		{
			this.limitLvl = limitLvl;
			this.expRate = expRate;
			this.expVolume = expVolume;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			limitLvl = is.popInteger();
			expRate = is.popFloat();
			expVolume = is.popLong();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(limitLvl);
			os.pushFloat(expRate);
			os.pushLong(expVolume);
		}

		public int limitLvl;
		public float expRate;
		public long expVolume;
	}

	public static class SpeedUpCFGS implements Stream.IStreamable
	{

		public SpeedUpCFGS() { }

		public SpeedUpCFGS(List<Integer> lvls, int rank, List<SpeedUpAdd> adds)
		{
			this.lvls = lvls;
			this.rank = rank;
			this.adds = adds;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvls = is.popIntegerList();
			rank = is.popInteger();
			adds = is.popList(SpeedUpAdd.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(lvls);
			os.pushInteger(rank);
			os.pushList(adds);
		}

		public List<Integer> lvls;
		public int rank;
		public List<SpeedUpAdd> adds;
	}

	public static class SpeedUpAdd implements Stream.IStreamable
	{

		public SpeedUpAdd() { }

		public SpeedUpAdd(int diff, float add)
		{
			this.diff = diff;
			this.add = add;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			diff = is.popInteger();
			add = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(diff);
			os.pushFloat(add);
		}

		public int diff;
		public float add;
	}

	public static class SuiteCFGS implements Stream.IStreamable
	{

		public SuiteCFGS() { }

		public SuiteCFGS(int id, int classType, int reduce, int buyCost, 
		                 List<Integer> parts, List<AttrCFGS> attris)
		{
			this.id = id;
			this.classType = classType;
			this.reduce = reduce;
			this.buyCost = buyCost;
			this.parts = parts;
			this.attris = attris;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			classType = is.popInteger();
			reduce = is.popInteger();
			buyCost = is.popInteger();
			parts = is.popIntegerList();
			attris = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(classType);
			os.pushInteger(reduce);
			os.pushInteger(buyCost);
			os.pushIntegerList(parts);
			os.pushList(attris);
		}

		public int id;
		public int classType;
		public int reduce;
		public int buyCost;
		public List<Integer> parts;
		public List<AttrCFGS> attris;
	}

	public static class ShopGoodsCFGS implements Stream.IStreamable
	{

		public ShopGoodsCFGS() { }

		public ShopGoodsCFGS(int id, int curUnit, int price, float pro, 
		                     int startdate, DummyGoods item)
		{
			this.id = id;
			this.curUnit = curUnit;
			this.price = price;
			this.pro = pro;
			this.startdate = startdate;
			this.item = item;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curUnit = is.popInteger();
			price = is.popInteger();
			pro = is.popFloat();
			startdate = is.popInteger();
			if( item == null )
				item = new DummyGoods();
			is.pop(item);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curUnit);
			os.pushInteger(price);
			os.pushFloat(pro);
			os.pushInteger(startdate);
			os.push(item);
		}

		public int id;
		public int curUnit;
		public int price;
		public float pro;
		public int startdate;
		public DummyGoods item;
	}

	public static class ShopGoodsGroupCFGS implements Stream.IStreamable
	{

		public ShopGoodsGroupCFGS() { }

		public ShopGoodsGroupCFGS(List<ShopGoodsCFGS> goods)
		{
			this.goods = goods;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			goods = is.popList(ShopGoodsCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(goods);
		}

		public List<ShopGoodsCFGS> goods;
	}

	public static class ShopGoodsLevelCFGS implements Stream.IStreamable
	{

		public ShopGoodsLevelCFGS() { }

		public ShopGoodsLevelCFGS(List<ShopGoodsGroupCFGS> groups)
		{
			this.groups = groups;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groups = is.popList(ShopGoodsGroupCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(groups);
		}

		public List<ShopGoodsGroupCFGS> groups;
	}

	public static class ShopCFGS implements Stream.IStreamable
	{

		public ShopCFGS() { }

		public ShopCFGS(int refreshCount, int refreshCurUnit, List<Integer> refreshPrice, int refreshCurUnit2, 
		                List<Integer> refreshPrice2, List<Integer> refreshTime, Map<Integer, ShopGoodsLevelCFGS> levels, Map<Integer, ShopGoodsCFGS> allGoods)
		{
			this.refreshCount = refreshCount;
			this.refreshCurUnit = refreshCurUnit;
			this.refreshPrice = refreshPrice;
			this.refreshCurUnit2 = refreshCurUnit2;
			this.refreshPrice2 = refreshPrice2;
			this.refreshTime = refreshTime;
			this.levels = levels;
			this.allGoods = allGoods;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			refreshCount = is.popInteger();
			refreshCurUnit = is.popInteger();
			refreshPrice = is.popIntegerList();
			refreshCurUnit2 = is.popInteger();
			refreshPrice2 = is.popIntegerList();
			refreshTime = is.popIntegerList();
			levels = is.popIntegerTreeMap(ShopGoodsLevelCFGS.class);
			allGoods = is.popIntegerTreeMap(ShopGoodsCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(refreshCount);
			os.pushInteger(refreshCurUnit);
			os.pushIntegerList(refreshPrice);
			os.pushInteger(refreshCurUnit2);
			os.pushIntegerList(refreshPrice2);
			os.pushIntegerList(refreshTime);
			os.pushIntegerMap(levels);
			os.pushIntegerMap(allGoods);
		}

		public int refreshCount;
		public int refreshCurUnit;
		public List<Integer> refreshPrice;
		public int refreshCurUnit2;
		public List<Integer> refreshPrice2;
		public List<Integer> refreshTime;
		public Map<Integer, ShopGoodsLevelCFGS> levels;
		public Map<Integer, ShopGoodsCFGS> allGoods;
	}

	public static class GambleShopGoodsCFGS implements Stream.IStreamable
	{

		public GambleShopGoodsCFGS() { }

		public GambleShopGoodsCFGS(int id, int curUnit, int price, float pro, 
		                           int startdate, int conditiontype, int conditionnum, int randomDropId)
		{
			this.id = id;
			this.curUnit = curUnit;
			this.price = price;
			this.pro = pro;
			this.startdate = startdate;
			this.conditiontype = conditiontype;
			this.conditionnum = conditionnum;
			this.randomDropId = randomDropId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curUnit = is.popInteger();
			price = is.popInteger();
			pro = is.popFloat();
			startdate = is.popInteger();
			conditiontype = is.popInteger();
			conditionnum = is.popInteger();
			randomDropId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curUnit);
			os.pushInteger(price);
			os.pushFloat(pro);
			os.pushInteger(startdate);
			os.pushInteger(conditiontype);
			os.pushInteger(conditionnum);
			os.pushInteger(randomDropId);
		}

		public int id;
		public int curUnit;
		public int price;
		public float pro;
		public int startdate;
		public int conditiontype;
		public int conditionnum;
		public int randomDropId;
	}

	public static class GambleShopGoodsGroupCFGS implements Stream.IStreamable
	{

		public GambleShopGoodsGroupCFGS() { }

		public GambleShopGoodsGroupCFGS(List<GambleShopGoodsCFGS> goods)
		{
			this.goods = goods;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			goods = is.popList(GambleShopGoodsCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(goods);
		}

		public List<GambleShopGoodsCFGS> goods;
	}

	public static class GambleShopGoodsLevelCFGS implements Stream.IStreamable
	{

		public GambleShopGoodsLevelCFGS() { }

		public GambleShopGoodsLevelCFGS(List<GambleShopGoodsGroupCFGS> groups)
		{
			this.groups = groups;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groups = is.popList(GambleShopGoodsGroupCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(groups);
		}

		public List<GambleShopGoodsGroupCFGS> groups;
	}

	public static class GambleShopCFGS implements Stream.IStreamable
	{

		public GambleShopCFGS() { }

		public GambleShopCFGS(int refreshCount, int refreshCurUnit, List<Integer> refreshPrice, List<Integer> refreshTime, 
		                      Map<Integer, GambleShopGoodsLevelCFGS> levels, Map<Integer, GambleShopGoodsCFGS> allGoods)
		{
			this.refreshCount = refreshCount;
			this.refreshCurUnit = refreshCurUnit;
			this.refreshPrice = refreshPrice;
			this.refreshTime = refreshTime;
			this.levels = levels;
			this.allGoods = allGoods;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			refreshCount = is.popInteger();
			refreshCurUnit = is.popInteger();
			refreshPrice = is.popIntegerList();
			refreshTime = is.popIntegerList();
			levels = is.popIntegerTreeMap(GambleShopGoodsLevelCFGS.class);
			allGoods = is.popIntegerTreeMap(GambleShopGoodsCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(refreshCount);
			os.pushInteger(refreshCurUnit);
			os.pushIntegerList(refreshPrice);
			os.pushIntegerList(refreshTime);
			os.pushIntegerMap(levels);
			os.pushIntegerMap(allGoods);
		}

		public int refreshCount;
		public int refreshCurUnit;
		public List<Integer> refreshPrice;
		public List<Integer> refreshTime;
		public Map<Integer, GambleShopGoodsLevelCFGS> levels;
		public Map<Integer, GambleShopGoodsCFGS> allGoods;
	}

	public static class DamageResult implements Stream.IStreamable, Stream.KCloneable<DamageResult>
	{

		public DamageResult() { }

		public DamageResult(int damage, int dodge, int crit, int deflect, 
		                    int suckBlood, int reduce, List<Integer> buffs, int behead, 
		                    int remit, ArmorDamage armor)
		{
			this.damage = damage;
			this.dodge = dodge;
			this.crit = crit;
			this.deflect = deflect;
			this.suckBlood = suckBlood;
			this.reduce = reduce;
			this.buffs = buffs;
			this.behead = behead;
			this.remit = remit;
			this.armor = armor;
		}

		public DamageResult ksClone()
		{
			return new DamageResult(damage, dodge, crit, deflect, 
			                        suckBlood, reduce, buffs, behead, 
			                        remit, armor);
		}

		@Override
		public DamageResult kdClone()
		{
			DamageResult _kio_clobj = ksClone();
			_kio_clobj.buffs = new ArrayList<Integer>(buffs);
			_kio_clobj.armor = Stream.clone(armor);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			damage = is.popInteger();
			dodge = is.popInteger();
			crit = is.popInteger();
			deflect = is.popInteger();
			suckBlood = is.popInteger();
			reduce = is.popInteger();
			buffs = is.popIntegerList();
			behead = is.popInteger();
			remit = is.popInteger();
			if( armor == null )
				armor = new ArmorDamage();
			is.pop(armor);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(damage);
			os.pushInteger(dodge);
			os.pushInteger(crit);
			os.pushInteger(deflect);
			os.pushInteger(suckBlood);
			os.pushInteger(reduce);
			os.pushIntegerList(buffs);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(armor);
		}

		public int damage;
		public int dodge;
		public int crit;
		public int deflect;
		public int suckBlood;
		public int reduce;
		public List<Integer> buffs;
		public int behead;
		public int remit;
		public ArmorDamage armor;
	}

	public static class ArmorDamage implements Stream.IStreamable, Stream.KCloneable<ArmorDamage>, SStream.IStreamable
	{

		public ArmorDamage() { }

		public ArmorDamage(int damage, int suck, int destroy, int weak)
		{
			this.damage = damage;
			this.suck = suck;
			this.destroy = destroy;
			this.weak = weak;
		}

		public ArmorDamage ksClone()
		{
			return new ArmorDamage(damage, suck, destroy, weak);
		}

		@Override
		public ArmorDamage kdClone()
		{
			ArmorDamage _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			damage = is.popInteger();
			suck = is.popInteger();
			destroy = is.popInteger();
			weak = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(damage);
			os.pushInteger(suck);
			os.pushInteger(destroy);
			os.pushInteger(weak);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			damage = is.popInteger();
			suck = is.popInteger();
			destroy = is.popInteger();
			weak = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(damage);
			os.pushInteger(suck);
			os.pushInteger(destroy);
			os.pushInteger(weak);
		}

		public int damage;
		public int suck;
		public int destroy;
		public int weak;
	}

	public static class SkillLevelUpLevelCostCFGS implements Stream.IStreamable, Stream.KCloneable<SkillLevelUpLevelCostCFGS>
	{

		public SkillLevelUpLevelCostCFGS() { }

		public SkillLevelUpLevelCostCFGS(int coin, Map<Integer, Integer> items, int lvlReq)
		{
			this.coin = coin;
			this.items = items;
			this.lvlReq = lvlReq;
		}

		public SkillLevelUpLevelCostCFGS ksClone()
		{
			return new SkillLevelUpLevelCostCFGS(coin, items, lvlReq);
		}

		@Override
		public SkillLevelUpLevelCostCFGS kdClone()
		{
			SkillLevelUpLevelCostCFGS _kio_clobj = ksClone();
			_kio_clobj.items = new TreeMap<Integer, Integer>(items);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			coin = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
			lvlReq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(coin);
			os.pushIntegerIntegerMap(items);
			os.pushInteger(lvlReq);
		}

		public int coin;
		public Map<Integer, Integer> items;
		public int lvlReq;
	}

	public static class SkillLevelCFGS implements Stream.IStreamable
	{

		public SkillLevelCFGS() { }

		public SkillLevelCFGS(SkillLevelCommonCFGS common, SkillLevelFixCFGS fix)
		{
			this.common = common;
			this.fix = fix;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( common == null )
				common = new SkillLevelCommonCFGS();
			is.pop(common);
			if( fix == null )
				fix = new SkillLevelFixCFGS();
			is.pop(fix);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(common);
			os.push(fix);
		}

		public SkillLevelCommonCFGS common;
		public SkillLevelFixCFGS fix;
	}

	public static class SkillLevelCommonCFGS implements Stream.IStreamable
	{

		public SkillLevelCommonCFGS() { }

		public SkillLevelCommonCFGS(int id, int level, int roleLvlReq, int coinCost, 
		                            int itemIDCost, int itemCntCost, int skillPower, List<Integer> realmPower, 
		                            Map<Integer, SkillLevelUpLevelCostCFGS> costs)
		{
			this.id = id;
			this.level = level;
			this.roleLvlReq = roleLvlReq;
			this.coinCost = coinCost;
			this.itemIDCost = itemIDCost;
			this.itemCntCost = itemCntCost;
			this.skillPower = skillPower;
			this.realmPower = realmPower;
			this.costs = costs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			roleLvlReq = is.popInteger();
			coinCost = is.popInteger();
			itemIDCost = is.popInteger();
			itemCntCost = is.popInteger();
			skillPower = is.popInteger();
			realmPower = is.popIntegerList();
			costs = is.popIntegerTreeMap(SkillLevelUpLevelCostCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(roleLvlReq);
			os.pushInteger(coinCost);
			os.pushInteger(itemIDCost);
			os.pushInteger(itemCntCost);
			os.pushInteger(skillPower);
			os.pushIntegerList(realmPower);
			os.pushIntegerMap(costs);
		}

		public int id;
		public int level;
		public int roleLvlReq;
		public int coinCost;
		public int itemIDCost;
		public int itemCntCost;
		public int skillPower;
		public List<Integer> realmPower;
		public Map<Integer, SkillLevelUpLevelCostCFGS> costs;
	}

	public static class SkillLevelFixCFGS implements Stream.IStreamable, Stream.KCloneable<SkillLevelFixCFGS>
	{

		public SkillLevelFixCFGS() { }

		public SkillLevelFixCFGS(int addSP, int cool, List<SkillEventCFGS> events)
		{
			this.addSP = addSP;
			this.cool = cool;
			this.events = events;
		}

		public SkillLevelFixCFGS ksClone()
		{
			return new SkillLevelFixCFGS(addSP, cool, events);
		}

		@Override
		public SkillLevelFixCFGS kdClone()
		{
			SkillLevelFixCFGS _kio_clobj = ksClone();
			_kio_clobj.events = Stream.clone(events);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			addSP = is.popInteger();
			cool = is.popInteger();
			events = is.popList(SkillEventCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(addSP);
			os.pushInteger(cool);
			os.pushList(events);
		}

		public int addSP;
		public int cool;
		public List<SkillEventCFGS> events;
	}

	public static class SkillEventCFGS implements Stream.IStreamable, Stream.KCloneable<SkillEventCFGS>
	{

		public SkillEventCFGS() { }

		public SkillEventCFGS(int triTime, SubDamageCFGS damage, List<SubStatus> status)
		{
			this.triTime = triTime;
			this.damage = damage;
			this.status = status;
		}

		public SkillEventCFGS ksClone()
		{
			return new SkillEventCFGS(triTime, damage, status);
		}

		@Override
		public SkillEventCFGS kdClone()
		{
			SkillEventCFGS _kio_clobj = ksClone();
			_kio_clobj.damage = Stream.clone(damage);
			_kio_clobj.status = Stream.clone(status);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			triTime = is.popInteger();
			if( damage == null )
				damage = new SubDamageCFGS();
			is.pop(damage);
			status = is.popList(SubStatus.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(triTime);
			os.push(damage);
			os.pushList(status);
		}

		public int triTime;
		public SubDamageCFGS damage;
		public List<SubStatus> status;
	}

	public static class CommonEquipCFGS implements Stream.IStreamable
	{

		public CommonEquipCFGS() { }

		public CommonEquipCFGS(float probability, int initDurability, int disableValue, double propertiesAdd, 
		                       float fixCostCoin, int useSkillLoss, int awardPartNum, int awardSlotNum)
		{
			this.probability = probability;
			this.initDurability = initDurability;
			this.disableValue = disableValue;
			this.propertiesAdd = propertiesAdd;
			this.fixCostCoin = fixCostCoin;
			this.useSkillLoss = useSkillLoss;
			this.awardPartNum = awardPartNum;
			this.awardSlotNum = awardSlotNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			probability = is.popFloat();
			initDurability = is.popInteger();
			disableValue = is.popInteger();
			propertiesAdd = is.popDouble();
			fixCostCoin = is.popFloat();
			useSkillLoss = is.popInteger();
			awardPartNum = is.popInteger();
			awardSlotNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(probability);
			os.pushInteger(initDurability);
			os.pushInteger(disableValue);
			os.pushDouble(propertiesAdd);
			os.pushFloat(fixCostCoin);
			os.pushInteger(useSkillLoss);
			os.pushInteger(awardPartNum);
			os.pushInteger(awardSlotNum);
		}

		public float probability;
		public int initDurability;
		public int disableValue;
		public double propertiesAdd;
		public float fixCostCoin;
		public int useSkillLoss;
		public int awardPartNum;
		public int awardSlotNum;
	}

	public static class SubDamageCFGS implements Stream.IStreamable, Stream.KCloneable<SubDamageCFGS>
	{

		public SubDamageCFGS() { }

		public SubDamageCFGS(int odds, byte atrType, byte acrType, float arg1, 
		                     float arg2, float realmAdd)
		{
			this.odds = odds;
			this.atrType = atrType;
			this.acrType = acrType;
			this.arg1 = arg1;
			this.arg2 = arg2;
			this.realmAdd = realmAdd;
		}

		public SubDamageCFGS ksClone()
		{
			return new SubDamageCFGS(odds, atrType, acrType, arg1, 
			                         arg2, realmAdd);
		}

		@Override
		public SubDamageCFGS kdClone()
		{
			SubDamageCFGS _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			odds = is.popInteger();
			atrType = is.popByte();
			acrType = is.popByte();
			arg1 = is.popFloat();
			arg2 = is.popFloat();
			realmAdd = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(odds);
			os.pushByte(atrType);
			os.pushByte(acrType);
			os.pushFloat(arg1);
			os.pushFloat(arg2);
			os.pushFloat(realmAdd);
		}

		public int odds;
		public byte atrType;
		public byte acrType;
		public float arg1;
		public float arg2;
		public float realmAdd;
	}

	public static class SkillCFGS implements Stream.IStreamable
	{

		public SkillCFGS() { }

		public SkillCFGS(int id, SkillBaseCFGS baseData, List<SkillLevelCFGS> lvlDatas)
		{
			this.id = id;
			this.baseData = baseData;
			this.lvlDatas = lvlDatas;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( baseData == null )
				baseData = new SkillBaseCFGS();
			is.pop(baseData);
			lvlDatas = is.popList(SkillLevelCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(baseData);
			os.pushList(lvlDatas);
		}

		public int id;
		public SkillBaseCFGS baseData;
		public List<SkillLevelCFGS> lvlDatas;
	}

	public static class SkillBaseCFGS implements Stream.IStreamable
	{

		public SkillBaseCFGS() { }

		public SkillBaseCFGS(SkillBaseCommonCFGS common, SkillBaseFixCFGS fix)
		{
			this.common = common;
			this.fix = fix;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( common == null )
				common = new SkillBaseCommonCFGS();
			is.pop(common);
			if( fix == null )
				fix = new SkillBaseFixCFGS();
			is.pop(fix);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(common);
			os.push(fix);
		}

		public SkillBaseCommonCFGS common;
		public SkillBaseFixCFGS fix;
	}

	public static class SkillBaseCommonCFGS implements Stream.IStreamable
	{

		public SkillBaseCommonCFGS() { }

		public SkillBaseCommonCFGS(int id, byte triType, int maxLvl, int maxEffectLvl, 
		                           int parentID, int parentLvl, AttackCFGS spell, AttackCFGS charge, 
		                           AttackCFGS attack, List<Integer> specialIDs, byte hasShowID, byte canAttack, 
		                           byte forceBreak, int fixDistance, int priority, int addFightSp, 
		                           List<Integer> children, List<Integer> followSkills, int relateSKill)
		{
			this.id = id;
			this.triType = triType;
			this.maxLvl = maxLvl;
			this.maxEffectLvl = maxEffectLvl;
			this.parentID = parentID;
			this.parentLvl = parentLvl;
			this.spell = spell;
			this.charge = charge;
			this.attack = attack;
			this.specialIDs = specialIDs;
			this.hasShowID = hasShowID;
			this.canAttack = canAttack;
			this.forceBreak = forceBreak;
			this.fixDistance = fixDistance;
			this.priority = priority;
			this.addFightSp = addFightSp;
			this.children = children;
			this.followSkills = followSkills;
			this.relateSKill = relateSKill;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			triType = is.popByte();
			maxLvl = is.popInteger();
			maxEffectLvl = is.popInteger();
			parentID = is.popInteger();
			parentLvl = is.popInteger();
			if( spell == null )
				spell = new AttackCFGS();
			is.pop(spell);
			if( charge == null )
				charge = new AttackCFGS();
			is.pop(charge);
			if( attack == null )
				attack = new AttackCFGS();
			is.pop(attack);
			specialIDs = is.popIntegerList();
			hasShowID = is.popByte();
			canAttack = is.popByte();
			forceBreak = is.popByte();
			fixDistance = is.popInteger();
			priority = is.popInteger();
			addFightSp = is.popInteger();
			children = is.popIntegerList();
			followSkills = is.popIntegerList();
			relateSKill = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushByte(triType);
			os.pushInteger(maxLvl);
			os.pushInteger(maxEffectLvl);
			os.pushInteger(parentID);
			os.pushInteger(parentLvl);
			os.push(spell);
			os.push(charge);
			os.push(attack);
			os.pushIntegerList(specialIDs);
			os.pushByte(hasShowID);
			os.pushByte(canAttack);
			os.pushByte(forceBreak);
			os.pushInteger(fixDistance);
			os.pushInteger(priority);
			os.pushInteger(addFightSp);
			os.pushIntegerList(children);
			os.pushIntegerList(followSkills);
			os.pushInteger(relateSKill);
		}

		public int id;
		public byte triType;
		public int maxLvl;
		public int maxEffectLvl;
		public int parentID;
		public int parentLvl;
		public AttackCFGS spell;
		public AttackCFGS charge;
		public AttackCFGS attack;
		public List<Integer> specialIDs;
		public byte hasShowID;
		public byte canAttack;
		public byte forceBreak;
		public int fixDistance;
		public int priority;
		public int addFightSp;
		public List<Integer> children;
		public List<Integer> followSkills;
		public int relateSKill;
	}

	public static class SkillBaseFixCFGS implements Stream.IStreamable, Stream.KCloneable<SkillBaseFixCFGS>
	{

		public SkillBaseFixCFGS() { }

		public SkillBaseFixCFGS(byte type, int duration, Scope scope, int maxTargets)
		{
			this.type = type;
			this.duration = duration;
			this.scope = scope;
			this.maxTargets = maxTargets;
		}

		public SkillBaseFixCFGS ksClone()
		{
			return new SkillBaseFixCFGS(type, duration, scope, maxTargets);
		}

		@Override
		public SkillBaseFixCFGS kdClone()
		{
			SkillBaseFixCFGS _kio_clobj = ksClone();
			_kio_clobj.scope = Stream.clone(scope);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popByte();
			duration = is.popInteger();
			if( scope == null )
				scope = new Scope();
			is.pop(scope);
			maxTargets = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(type);
			os.pushInteger(duration);
			os.push(scope);
			os.pushInteger(maxTargets);
		}

		public byte type;
		public int duration;
		public Scope scope;
		public int maxTargets;
	}

	public static class SkillBriefCFGS implements Stream.IStreamable
	{

		public SkillBriefCFGS() { }

		public SkillBriefCFGS(int id, int lvl)
		{
			this.id = id;
			this.lvl = lvl;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			lvl = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(lvl);
		}

		public int id;
		public int lvl;
	}

	public static class SkillSpecialCFGS implements Stream.IStreamable
	{

		public SkillSpecialCFGS() { }

		public SkillSpecialCFGS(int id, int formulaID, int param1, int param2, 
		                        int param3, int param4, int param5, int param6, 
		                        int param7, int param8)
		{
			this.id = id;
			this.formulaID = formulaID;
			this.param1 = param1;
			this.param2 = param2;
			this.param3 = param3;
			this.param4 = param4;
			this.param5 = param5;
			this.param6 = param6;
			this.param7 = param7;
			this.param8 = param8;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			formulaID = is.popInteger();
			param1 = is.popInteger();
			param2 = is.popInteger();
			param3 = is.popInteger();
			param4 = is.popInteger();
			param5 = is.popInteger();
			param6 = is.popInteger();
			param7 = is.popInteger();
			param8 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(formulaID);
			os.pushInteger(param1);
			os.pushInteger(param2);
			os.pushInteger(param3);
			os.pushInteger(param4);
			os.pushInteger(param5);
			os.pushInteger(param6);
			os.pushInteger(param7);
			os.pushInteger(param8);
		}

		public int id;
		public int formulaID;
		public int param1;
		public int param2;
		public int param3;
		public int param4;
		public int param5;
		public int param6;
		public int param7;
		public int param8;
	}

	public static class AttackCFGS implements Stream.IStreamable, Stream.KCloneable<AttackCFGS>
	{

		public AttackCFGS() { }

		public AttackCFGS(int time, byte breakByDamage, byte breakByCtrl, byte breakByMove)
		{
			this.time = time;
			this.breakByDamage = breakByDamage;
			this.breakByCtrl = breakByCtrl;
			this.breakByMove = breakByMove;
		}

		public AttackCFGS ksClone()
		{
			return new AttackCFGS(time, breakByDamage, breakByCtrl, breakByMove);
		}

		@Override
		public AttackCFGS kdClone()
		{
			AttackCFGS _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			time = is.popInteger();
			breakByDamage = is.popByte();
			breakByCtrl = is.popByte();
			breakByMove = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(time);
			os.pushByte(breakByDamage);
			os.pushByte(breakByCtrl);
			os.pushByte(breakByMove);
		}

		public int time;
		public byte breakByDamage;
		public byte breakByCtrl;
		public byte breakByMove;
	}

	public static class ClassRoleCFGS implements Stream.IStreamable
	{

		public ClassRoleCFGS() { }

		public ClassRoleCFGS(int id, ClassRolePropCFGS hp, ClassRolePropCFGS atkN, ClassRolePropCFGS defN, 
		                     ClassRolePropCFGS atr, ClassRolePropCFGS ctr, ClassRolePropCFGS acrN, ClassRolePropCFGS tou, 
		                     ClassRolePropCFGS atkA, List<Integer> attacks, List<Integer> skills, int dodgeSkill, 
		                     List<Integer> attackList, int speed, int radius, int checkRange, 
		                     List<Integer> spirits, MapPosition spawnPosition, List<Integer> initEquips, List<Integer> aotufightAi, 
		                     List<Float> classReduce)
		{
			this.id = id;
			this.hp = hp;
			this.atkN = atkN;
			this.defN = defN;
			this.atr = atr;
			this.ctr = ctr;
			this.acrN = acrN;
			this.tou = tou;
			this.atkA = atkA;
			this.attacks = attacks;
			this.skills = skills;
			this.dodgeSkill = dodgeSkill;
			this.attackList = attackList;
			this.speed = speed;
			this.radius = radius;
			this.checkRange = checkRange;
			this.spirits = spirits;
			this.spawnPosition = spawnPosition;
			this.initEquips = initEquips;
			this.aotufightAi = aotufightAi;
			this.classReduce = classReduce;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( hp == null )
				hp = new ClassRolePropCFGS();
			is.pop(hp);
			if( atkN == null )
				atkN = new ClassRolePropCFGS();
			is.pop(atkN);
			if( defN == null )
				defN = new ClassRolePropCFGS();
			is.pop(defN);
			if( atr == null )
				atr = new ClassRolePropCFGS();
			is.pop(atr);
			if( ctr == null )
				ctr = new ClassRolePropCFGS();
			is.pop(ctr);
			if( acrN == null )
				acrN = new ClassRolePropCFGS();
			is.pop(acrN);
			if( tou == null )
				tou = new ClassRolePropCFGS();
			is.pop(tou);
			if( atkA == null )
				atkA = new ClassRolePropCFGS();
			is.pop(atkA);
			attacks = is.popIntegerList();
			skills = is.popIntegerList();
			dodgeSkill = is.popInteger();
			attackList = is.popIntegerList();
			speed = is.popInteger();
			radius = is.popInteger();
			checkRange = is.popInteger();
			spirits = is.popIntegerList();
			if( spawnPosition == null )
				spawnPosition = new MapPosition();
			is.pop(spawnPosition);
			initEquips = is.popIntegerList();
			aotufightAi = is.popIntegerList();
			classReduce = is.popFloatList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(hp);
			os.push(atkN);
			os.push(defN);
			os.push(atr);
			os.push(ctr);
			os.push(acrN);
			os.push(tou);
			os.push(atkA);
			os.pushIntegerList(attacks);
			os.pushIntegerList(skills);
			os.pushInteger(dodgeSkill);
			os.pushIntegerList(attackList);
			os.pushInteger(speed);
			os.pushInteger(radius);
			os.pushInteger(checkRange);
			os.pushIntegerList(spirits);
			os.push(spawnPosition);
			os.pushIntegerList(initEquips);
			os.pushIntegerList(aotufightAi);
			os.pushFloatList(classReduce);
		}

		public int id;
		public ClassRolePropCFGS hp;
		public ClassRolePropCFGS atkN;
		public ClassRolePropCFGS defN;
		public ClassRolePropCFGS atr;
		public ClassRolePropCFGS ctr;
		public ClassRolePropCFGS acrN;
		public ClassRolePropCFGS tou;
		public ClassRolePropCFGS atkA;
		public List<Integer> attacks;
		public List<Integer> skills;
		public int dodgeSkill;
		public List<Integer> attackList;
		public int speed;
		public int radius;
		public int checkRange;
		public List<Integer> spirits;
		public MapPosition spawnPosition;
		public List<Integer> initEquips;
		public List<Integer> aotufightAi;
		public List<Float> classReduce;
	}

	public static class ClassRoleFashionCFGS implements Stream.IStreamable
	{

		public ClassRoleFashionCFGS() { }

		public ClassRoleFashionCFGS(int id, List<Byte> faces, List<Byte> hairs)
		{
			this.id = id;
			this.faces = faces;
			this.hairs = hairs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			faces = is.popByteList();
			hairs = is.popByteList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushByteList(faces);
			os.pushByteList(hairs);
		}

		public int id;
		public List<Byte> faces;
		public List<Byte> hairs;
	}

	public static class MonsterCFGS implements Stream.IStreamable
	{

		public MonsterCFGS() { }

		public MonsterCFGS(int id, int level, int bossType, int maxHP, 
		                   int atkN, int defN, int atr, int ctr, 
		                   int acrN, int tou, int atkA, int atkC, 
		                   int defC, int atkW, int defW, List<Integer> attacks, 
		                   List<SkillBriefCFGS> skills, List<Integer> attackList, int speed, int radius, 
		                   int checkRange, int fixedDropID, List<Integer> randomDropIDs, int randomDropCnt, 
		                   byte isActive, int race, List<Integer> patrolInterval, int patrolRadius, 
		                   int patrolSpeed, int maxTraceRange, int addExp, int buffDropID, 
		                   int buffDropCnt, List<Integer> foreverState, float spaHP, float spaOdd, 
		                   byte countType, byte bwType, Map<Integer, PercentDropCFGS> percentDrop, List<Integer> birthBuffs, 
		                   byte logDamage, int tdScore, int armorID, int armorMaxVal, 
		                   float armorTransRate, float armorDmgDeep, int armorTransVal)
		{
			this.id = id;
			this.level = level;
			this.bossType = bossType;
			this.maxHP = maxHP;
			this.atkN = atkN;
			this.defN = defN;
			this.atr = atr;
			this.ctr = ctr;
			this.acrN = acrN;
			this.tou = tou;
			this.atkA = atkA;
			this.atkC = atkC;
			this.defC = defC;
			this.atkW = atkW;
			this.defW = defW;
			this.attacks = attacks;
			this.skills = skills;
			this.attackList = attackList;
			this.speed = speed;
			this.radius = radius;
			this.checkRange = checkRange;
			this.fixedDropID = fixedDropID;
			this.randomDropIDs = randomDropIDs;
			this.randomDropCnt = randomDropCnt;
			this.isActive = isActive;
			this.race = race;
			this.patrolInterval = patrolInterval;
			this.patrolRadius = patrolRadius;
			this.patrolSpeed = patrolSpeed;
			this.maxTraceRange = maxTraceRange;
			this.addExp = addExp;
			this.buffDropID = buffDropID;
			this.buffDropCnt = buffDropCnt;
			this.foreverState = foreverState;
			this.spaHP = spaHP;
			this.spaOdd = spaOdd;
			this.countType = countType;
			this.bwType = bwType;
			this.percentDrop = percentDrop;
			this.birthBuffs = birthBuffs;
			this.logDamage = logDamage;
			this.tdScore = tdScore;
			this.armorID = armorID;
			this.armorMaxVal = armorMaxVal;
			this.armorTransRate = armorTransRate;
			this.armorDmgDeep = armorDmgDeep;
			this.armorTransVal = armorTransVal;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			bossType = is.popInteger();
			maxHP = is.popInteger();
			atkN = is.popInteger();
			defN = is.popInteger();
			atr = is.popInteger();
			ctr = is.popInteger();
			acrN = is.popInteger();
			tou = is.popInteger();
			atkA = is.popInteger();
			atkC = is.popInteger();
			defC = is.popInteger();
			atkW = is.popInteger();
			defW = is.popInteger();
			attacks = is.popIntegerList();
			skills = is.popList(SkillBriefCFGS.class);
			attackList = is.popIntegerList();
			speed = is.popInteger();
			radius = is.popInteger();
			checkRange = is.popInteger();
			fixedDropID = is.popInteger();
			randomDropIDs = is.popIntegerList();
			randomDropCnt = is.popInteger();
			isActive = is.popByte();
			race = is.popInteger();
			patrolInterval = is.popIntegerList();
			patrolRadius = is.popInteger();
			patrolSpeed = is.popInteger();
			maxTraceRange = is.popInteger();
			addExp = is.popInteger();
			buffDropID = is.popInteger();
			buffDropCnt = is.popInteger();
			foreverState = is.popIntegerList();
			spaHP = is.popFloat();
			spaOdd = is.popFloat();
			countType = is.popByte();
			bwType = is.popByte();
			percentDrop = is.popIntegerTreeMap(PercentDropCFGS.class);
			birthBuffs = is.popIntegerList();
			logDamage = is.popByte();
			tdScore = is.popInteger();
			armorID = is.popInteger();
			armorMaxVal = is.popInteger();
			armorTransRate = is.popFloat();
			armorDmgDeep = is.popFloat();
			armorTransVal = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(bossType);
			os.pushInteger(maxHP);
			os.pushInteger(atkN);
			os.pushInteger(defN);
			os.pushInteger(atr);
			os.pushInteger(ctr);
			os.pushInteger(acrN);
			os.pushInteger(tou);
			os.pushInteger(atkA);
			os.pushInteger(atkC);
			os.pushInteger(defC);
			os.pushInteger(atkW);
			os.pushInteger(defW);
			os.pushIntegerList(attacks);
			os.pushList(skills);
			os.pushIntegerList(attackList);
			os.pushInteger(speed);
			os.pushInteger(radius);
			os.pushInteger(checkRange);
			os.pushInteger(fixedDropID);
			os.pushIntegerList(randomDropIDs);
			os.pushInteger(randomDropCnt);
			os.pushByte(isActive);
			os.pushInteger(race);
			os.pushIntegerList(patrolInterval);
			os.pushInteger(patrolRadius);
			os.pushInteger(patrolSpeed);
			os.pushInteger(maxTraceRange);
			os.pushInteger(addExp);
			os.pushInteger(buffDropID);
			os.pushInteger(buffDropCnt);
			os.pushIntegerList(foreverState);
			os.pushFloat(spaHP);
			os.pushFloat(spaOdd);
			os.pushByte(countType);
			os.pushByte(bwType);
			os.pushIntegerMap(percentDrop);
			os.pushIntegerList(birthBuffs);
			os.pushByte(logDamage);
			os.pushInteger(tdScore);
			os.pushInteger(armorID);
			os.pushInteger(armorMaxVal);
			os.pushFloat(armorTransRate);
			os.pushFloat(armorDmgDeep);
			os.pushInteger(armorTransVal);
		}

		public int id;
		public int level;
		public int bossType;
		public int maxHP;
		public int atkN;
		public int defN;
		public int atr;
		public int ctr;
		public int acrN;
		public int tou;
		public int atkA;
		public int atkC;
		public int defC;
		public int atkW;
		public int defW;
		public List<Integer> attacks;
		public List<SkillBriefCFGS> skills;
		public List<Integer> attackList;
		public int speed;
		public int radius;
		public int checkRange;
		public int fixedDropID;
		public List<Integer> randomDropIDs;
		public int randomDropCnt;
		public byte isActive;
		public int race;
		public List<Integer> patrolInterval;
		public int patrolRadius;
		public int patrolSpeed;
		public int maxTraceRange;
		public int addExp;
		public int buffDropID;
		public int buffDropCnt;
		public List<Integer> foreverState;
		public float spaHP;
		public float spaOdd;
		public byte countType;
		public byte bwType;
		public Map<Integer, PercentDropCFGS> percentDrop;
		public List<Integer> birthBuffs;
		public byte logDamage;
		public int tdScore;
		public int armorID;
		public int armorMaxVal;
		public float armorTransRate;
		public float armorDmgDeep;
		public int armorTransVal;
	}

	public static class MonsterDamageCFGS implements Stream.IStreamable
	{

		public MonsterDamageCFGS() { }

		public MonsterDamageCFGS(Map<Integer, Integer> dmgTos, Map<Integer, Integer> dmgBys)
		{
			this.dmgTos = dmgTos;
			this.dmgBys = dmgBys;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dmgTos = is.popIntegerIntegerHashMap();
			dmgBys = is.popIntegerIntegerHashMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(dmgTos);
			os.pushIntegerIntegerMap(dmgBys);
		}

		public Map<Integer, Integer> dmgTos;
		public Map<Integer, Integer> dmgBys;
	}

	public static class NpcCFGS implements Stream.IStreamable
	{

		public NpcCFGS() { }

		public NpcCFGS(int id, int toMonsterID, Set<Integer> funcs, Set<Integer> functionArg)
		{
			this.id = id;
			this.toMonsterID = toMonsterID;
			this.funcs = funcs;
			this.functionArg = functionArg;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			toMonsterID = is.popInteger();
			funcs = is.popIntegerTreeSet();
			functionArg = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(toMonsterID);
			os.pushIntegerSet(funcs);
			os.pushIntegerSet(functionArg);
		}

		public int id;
		public int toMonsterID;
		public Set<Integer> funcs;
		public Set<Integer> functionArg;
	}

	public static class MineralCFGS implements Stream.IStreamable
	{

		public MineralCFGS() { }

		public MineralCFGS(int id, int mineralType, int needLvl, int needItem, 
		                   byte isCostItem, int mineralCount, int mineralTime, int monsterOdds, 
		                   int monsterID, int monsterCount, int monsterStandTime, int refreshInterval, 
		                   int fixedDropID, int randomDropID, int randomDropCnt, int buffDropID, 
		                   int buffDropCnt)
		{
			this.id = id;
			this.mineralType = mineralType;
			this.needLvl = needLvl;
			this.needItem = needItem;
			this.isCostItem = isCostItem;
			this.mineralCount = mineralCount;
			this.mineralTime = mineralTime;
			this.monsterOdds = monsterOdds;
			this.monsterID = monsterID;
			this.monsterCount = monsterCount;
			this.monsterStandTime = monsterStandTime;
			this.refreshInterval = refreshInterval;
			this.fixedDropID = fixedDropID;
			this.randomDropID = randomDropID;
			this.randomDropCnt = randomDropCnt;
			this.buffDropID = buffDropID;
			this.buffDropCnt = buffDropCnt;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			mineralType = is.popInteger();
			needLvl = is.popInteger();
			needItem = is.popInteger();
			isCostItem = is.popByte();
			mineralCount = is.popInteger();
			mineralTime = is.popInteger();
			monsterOdds = is.popInteger();
			monsterID = is.popInteger();
			monsterCount = is.popInteger();
			monsterStandTime = is.popInteger();
			refreshInterval = is.popInteger();
			fixedDropID = is.popInteger();
			randomDropID = is.popInteger();
			randomDropCnt = is.popInteger();
			buffDropID = is.popInteger();
			buffDropCnt = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(mineralType);
			os.pushInteger(needLvl);
			os.pushInteger(needItem);
			os.pushByte(isCostItem);
			os.pushInteger(mineralCount);
			os.pushInteger(mineralTime);
			os.pushInteger(monsterOdds);
			os.pushInteger(monsterID);
			os.pushInteger(monsterCount);
			os.pushInteger(monsterStandTime);
			os.pushInteger(refreshInterval);
			os.pushInteger(fixedDropID);
			os.pushInteger(randomDropID);
			os.pushInteger(randomDropCnt);
			os.pushInteger(buffDropID);
			os.pushInteger(buffDropCnt);
		}

		public int id;
		public int mineralType;
		public int needLvl;
		public int needItem;
		public byte isCostItem;
		public int mineralCount;
		public int mineralTime;
		public int monsterOdds;
		public int monsterID;
		public int monsterCount;
		public int monsterStandTime;
		public int refreshInterval;
		public int fixedDropID;
		public int randomDropID;
		public int randomDropCnt;
		public int buffDropID;
		public int buffDropCnt;
	}

	public static class MapBuffCFGS implements Stream.IStreamable
	{

		public MapBuffCFGS() { }

		public MapBuffCFGS(int id, int buffID, int rebirthTime, int rebirthCnt, 
		                   int scopeType, int radius)
		{
			this.id = id;
			this.buffID = buffID;
			this.rebirthTime = rebirthTime;
			this.rebirthCnt = rebirthCnt;
			this.scopeType = scopeType;
			this.radius = radius;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			rebirthTime = is.popInteger();
			rebirthCnt = is.popInteger();
			scopeType = is.popInteger();
			radius = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.pushInteger(rebirthTime);
			os.pushInteger(rebirthCnt);
			os.pushInteger(scopeType);
			os.pushInteger(radius);
		}

		public int id;
		public int buffID;
		public int rebirthTime;
		public int rebirthCnt;
		public int scopeType;
		public int radius;
	}

	public static class MapClusterCFGS implements Stream.IStreamable
	{

		public MapClusterCFGS() { }

		public MapClusterCFGS(int id, String name, int type, int patchPacket, 
		                      List<Integer> spawnAreas, Set<Integer> spawnPoints, Set<Integer> traps, Set<Integer> mapBuffs, 
		                      Set<Integer> npcs, Set<Integer> minerals, Set<Integer> wayPoints, Vector3 spawnPos, 
		                      Vector3 spawnPos2nd, Vector3F spawnRotation, Vector3 revivePos, Vector3 revivePos2nd, 
		                      int minX, int minZ, int maxX, int maxZ, 
		                      Vector3 center, int aiMaxDisToCenter)
		{
			this.id = id;
			this.name = name;
			this.type = type;
			this.patchPacket = patchPacket;
			this.spawnAreas = spawnAreas;
			this.spawnPoints = spawnPoints;
			this.traps = traps;
			this.mapBuffs = mapBuffs;
			this.npcs = npcs;
			this.minerals = minerals;
			this.wayPoints = wayPoints;
			this.spawnPos = spawnPos;
			this.spawnPos2nd = spawnPos2nd;
			this.spawnRotation = spawnRotation;
			this.revivePos = revivePos;
			this.revivePos2nd = revivePos2nd;
			this.minX = minX;
			this.minZ = minZ;
			this.maxX = maxX;
			this.maxZ = maxZ;
			this.center = center;
			this.aiMaxDisToCenter = aiMaxDisToCenter;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			type = is.popInteger();
			patchPacket = is.popInteger();
			spawnAreas = is.popIntegerList();
			spawnPoints = is.popIntegerTreeSet();
			traps = is.popIntegerTreeSet();
			mapBuffs = is.popIntegerTreeSet();
			npcs = is.popIntegerTreeSet();
			minerals = is.popIntegerTreeSet();
			wayPoints = is.popIntegerTreeSet();
			if( spawnPos == null )
				spawnPos = new Vector3();
			is.pop(spawnPos);
			if( spawnPos2nd == null )
				spawnPos2nd = new Vector3();
			is.pop(spawnPos2nd);
			if( spawnRotation == null )
				spawnRotation = new Vector3F();
			is.pop(spawnRotation);
			if( revivePos == null )
				revivePos = new Vector3();
			is.pop(revivePos);
			if( revivePos2nd == null )
				revivePos2nd = new Vector3();
			is.pop(revivePos2nd);
			minX = is.popInteger();
			minZ = is.popInteger();
			maxX = is.popInteger();
			maxZ = is.popInteger();
			if( center == null )
				center = new Vector3();
			is.pop(center);
			aiMaxDisToCenter = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(type);
			os.pushInteger(patchPacket);
			os.pushIntegerList(spawnAreas);
			os.pushIntegerSet(spawnPoints);
			os.pushIntegerSet(traps);
			os.pushIntegerSet(mapBuffs);
			os.pushIntegerSet(npcs);
			os.pushIntegerSet(minerals);
			os.pushIntegerSet(wayPoints);
			os.push(spawnPos);
			os.push(spawnPos2nd);
			os.push(spawnRotation);
			os.push(revivePos);
			os.push(revivePos2nd);
			os.pushInteger(minX);
			os.pushInteger(minZ);
			os.pushInteger(maxX);
			os.pushInteger(maxZ);
			os.push(center);
			os.pushInteger(aiMaxDisToCenter);
		}

		public int id;
		public String name;
		public int type;
		public int patchPacket;
		public List<Integer> spawnAreas;
		public Set<Integer> spawnPoints;
		public Set<Integer> traps;
		public Set<Integer> mapBuffs;
		public Set<Integer> npcs;
		public Set<Integer> minerals;
		public Set<Integer> wayPoints;
		public Vector3 spawnPos;
		public Vector3 spawnPos2nd;
		public Vector3F spawnRotation;
		public Vector3 revivePos;
		public Vector3 revivePos2nd;
		public int minX;
		public int minZ;
		public int maxX;
		public int maxZ;
		public Vector3 center;
		public int aiMaxDisToCenter;
	}

	public static class WorldMapCFGS implements Stream.IStreamable
	{

		public WorldMapCFGS() { }

		public WorldMapCFGS(int id, List<Vector3> randomPos, byte pkType, int safeReviveMap, 
		                    List<Integer> weaponMapNpcs, int worldNum)
		{
			this.id = id;
			this.randomPos = randomPos;
			this.pkType = pkType;
			this.safeReviveMap = safeReviveMap;
			this.weaponMapNpcs = weaponMapNpcs;
			this.worldNum = worldNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			randomPos = is.popList(Vector3.class);
			pkType = is.popByte();
			safeReviveMap = is.popInteger();
			weaponMapNpcs = is.popIntegerList();
			worldNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(randomPos);
			os.pushByte(pkType);
			os.pushInteger(safeReviveMap);
			os.pushIntegerList(weaponMapNpcs);
			os.pushInteger(worldNum);
		}

		public int id;
		public List<Vector3> randomPos;
		public byte pkType;
		public int safeReviveMap;
		public List<Integer> weaponMapNpcs;
		public int worldNum;
	}

	public static class MapCopyCFGS implements Stream.IStreamable
	{

		public MapCopyCFGS() { }

		public MapCopyCFGS(int id, int openType, int winCondition, int limitTimes, 
		                   int costVit, int needLevel, int minPlayers, int maxPlayers, 
		                   int preTask, int maxTime, int groupID, int difficulty, 
		                   int startTime, int endTime, int preMapCopy, int fightPower, 
		                   int sweepLvl, int sweepScore, int rewardExp, int fixedDropID, 
		                   int turnPlateDropID, int masterMasterPoint, int masterApprenticePoint, int masterMasterReputation, 
		                   Map<Integer, MapEntity> allMonsters, Map<Integer, MapEntity> allTraps, Map<Integer, Integer> bosses, int slowMotionTime)
		{
			this.id = id;
			this.openType = openType;
			this.winCondition = winCondition;
			this.limitTimes = limitTimes;
			this.costVit = costVit;
			this.needLevel = needLevel;
			this.minPlayers = minPlayers;
			this.maxPlayers = maxPlayers;
			this.preTask = preTask;
			this.maxTime = maxTime;
			this.groupID = groupID;
			this.difficulty = difficulty;
			this.startTime = startTime;
			this.endTime = endTime;
			this.preMapCopy = preMapCopy;
			this.fightPower = fightPower;
			this.sweepLvl = sweepLvl;
			this.sweepScore = sweepScore;
			this.rewardExp = rewardExp;
			this.fixedDropID = fixedDropID;
			this.turnPlateDropID = turnPlateDropID;
			this.masterMasterPoint = masterMasterPoint;
			this.masterApprenticePoint = masterApprenticePoint;
			this.masterMasterReputation = masterMasterReputation;
			this.allMonsters = allMonsters;
			this.allTraps = allTraps;
			this.bosses = bosses;
			this.slowMotionTime = slowMotionTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			openType = is.popInteger();
			winCondition = is.popInteger();
			limitTimes = is.popInteger();
			costVit = is.popInteger();
			needLevel = is.popInteger();
			minPlayers = is.popInteger();
			maxPlayers = is.popInteger();
			preTask = is.popInteger();
			maxTime = is.popInteger();
			groupID = is.popInteger();
			difficulty = is.popInteger();
			startTime = is.popInteger();
			endTime = is.popInteger();
			preMapCopy = is.popInteger();
			fightPower = is.popInteger();
			sweepLvl = is.popInteger();
			sweepScore = is.popInteger();
			rewardExp = is.popInteger();
			fixedDropID = is.popInteger();
			turnPlateDropID = is.popInteger();
			masterMasterPoint = is.popInteger();
			masterApprenticePoint = is.popInteger();
			masterMasterReputation = is.popInteger();
			allMonsters = is.popIntegerTreeMap(MapEntity.class);
			allTraps = is.popIntegerTreeMap(MapEntity.class);
			bosses = is.popIntegerIntegerTreeMap();
			slowMotionTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(openType);
			os.pushInteger(winCondition);
			os.pushInteger(limitTimes);
			os.pushInteger(costVit);
			os.pushInteger(needLevel);
			os.pushInteger(minPlayers);
			os.pushInteger(maxPlayers);
			os.pushInteger(preTask);
			os.pushInteger(maxTime);
			os.pushInteger(groupID);
			os.pushInteger(difficulty);
			os.pushInteger(startTime);
			os.pushInteger(endTime);
			os.pushInteger(preMapCopy);
			os.pushInteger(fightPower);
			os.pushInteger(sweepLvl);
			os.pushInteger(sweepScore);
			os.pushInteger(rewardExp);
			os.pushInteger(fixedDropID);
			os.pushInteger(turnPlateDropID);
			os.pushInteger(masterMasterPoint);
			os.pushInteger(masterApprenticePoint);
			os.pushInteger(masterMasterReputation);
			os.pushIntegerMap(allMonsters);
			os.pushIntegerMap(allTraps);
			os.pushIntegerIntegerMap(bosses);
			os.pushInteger(slowMotionTime);
		}

		public int id;
		public int openType;
		public int winCondition;
		public int limitTimes;
		public int costVit;
		public int needLevel;
		public int minPlayers;
		public int maxPlayers;
		public int preTask;
		public int maxTime;
		public int groupID;
		public int difficulty;
		public int startTime;
		public int endTime;
		public int preMapCopy;
		public int fightPower;
		public int sweepLvl;
		public int sweepScore;
		public int rewardExp;
		public int fixedDropID;
		public int turnPlateDropID;
		public int masterMasterPoint;
		public int masterApprenticePoint;
		public int masterMasterReputation;
		public Map<Integer, MapEntity> allMonsters;
		public Map<Integer, MapEntity> allTraps;
		public Map<Integer, Integer> bosses;
		public int slowMotionTime;
	}

	public static class MapCopySpawnPath implements Stream.IStreamable
	{

		public MapCopySpawnPath() { }

		public MapCopySpawnPath(List<Vector3> points)
		{
			this.points = points;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			points = is.popList(Vector3.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(points);
		}

		public List<Vector3> points;
	}

	public static class SectMapCFGS implements Stream.IStreamable
	{

		public SectMapCFGS() { }

		public SectMapCFGS(int id, int dayEnterTimes, int enterCostVit, int resetTimes, 
		                   int preMapId, int openCostVit, int lvlReq, int maxTime, 
		                   int startTime, int endTime, int boss, List<Integer> monsters, 
		                   Map<Integer, Integer> extraRewards, List<FactorCFGS> moneyRewardFactor, Map<Integer, ProgressRewards> progressRewards, int slowMotionTime)
		{
			this.id = id;
			this.dayEnterTimes = dayEnterTimes;
			this.enterCostVit = enterCostVit;
			this.resetTimes = resetTimes;
			this.preMapId = preMapId;
			this.openCostVit = openCostVit;
			this.lvlReq = lvlReq;
			this.maxTime = maxTime;
			this.startTime = startTime;
			this.endTime = endTime;
			this.boss = boss;
			this.monsters = monsters;
			this.extraRewards = extraRewards;
			this.moneyRewardFactor = moneyRewardFactor;
			this.progressRewards = progressRewards;
			this.slowMotionTime = slowMotionTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			dayEnterTimes = is.popInteger();
			enterCostVit = is.popInteger();
			resetTimes = is.popInteger();
			preMapId = is.popInteger();
			openCostVit = is.popInteger();
			lvlReq = is.popInteger();
			maxTime = is.popInteger();
			startTime = is.popInteger();
			endTime = is.popInteger();
			boss = is.popInteger();
			monsters = is.popIntegerList();
			extraRewards = is.popIntegerIntegerTreeMap();
			moneyRewardFactor = is.popList(FactorCFGS.class);
			progressRewards = is.popIntegerTreeMap(ProgressRewards.class);
			slowMotionTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(enterCostVit);
			os.pushInteger(resetTimes);
			os.pushInteger(preMapId);
			os.pushInteger(openCostVit);
			os.pushInteger(lvlReq);
			os.pushInteger(maxTime);
			os.pushInteger(startTime);
			os.pushInteger(endTime);
			os.pushInteger(boss);
			os.pushIntegerList(monsters);
			os.pushIntegerIntegerMap(extraRewards);
			os.pushList(moneyRewardFactor);
			os.pushIntegerMap(progressRewards);
			os.pushInteger(slowMotionTime);
		}

		public int id;
		public int dayEnterTimes;
		public int enterCostVit;
		public int resetTimes;
		public int preMapId;
		public int openCostVit;
		public int lvlReq;
		public int maxTime;
		public int startTime;
		public int endTime;
		public int boss;
		public List<Integer> monsters;
		public Map<Integer, Integer> extraRewards;
		public List<FactorCFGS> moneyRewardFactor;
		public Map<Integer, ProgressRewards> progressRewards;
		public int slowMotionTime;
	}

	public static class FactorCFGS implements Stream.IStreamable
	{

		public FactorCFGS() { }

		public FactorCFGS(int maxHp, float factor)
		{
			this.maxHp = maxHp;
			this.factor = factor;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			maxHp = is.popInteger();
			factor = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(maxHp);
			os.pushFloat(factor);
		}

		public int maxHp;
		public float factor;
	}

	public static class ArenaMapCFGS implements Stream.IStreamable
	{

		public ArenaMapCFGS() { }

		public ArenaMapCFGS(int id, List<Vector3> selfPetPos, List<Vector3> enemyPetPos)
		{
			this.id = id;
			this.selfPetPos = selfPetPos;
			this.enemyPetPos = enemyPetPos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			selfPetPos = is.popList(Vector3.class);
			enemyPetPos = is.popList(Vector3.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(selfPetPos);
			os.pushList(enemyPetPos);
		}

		public int id;
		public List<Vector3> selfPetPos;
		public List<Vector3> enemyPetPos;
	}

	public static class SuperArenaMapCFGS implements Stream.IStreamable
	{

		public SuperArenaMapCFGS() { }

		public SuperArenaMapCFGS(int id, int type, Set<Integer> oneoffTraps)
		{
			this.id = id;
			this.type = type;
			this.oneoffTraps = oneoffTraps;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			oneoffTraps = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushIntegerSet(oneoffTraps);
		}

		public int id;
		public int type;
		public Set<Integer> oneoffTraps;
	}

	public static class BWArenaMapCFGS implements Stream.IStreamable
	{

		public BWArenaMapCFGS() { }

		public BWArenaMapCFGS(int id, List<Vector3> selfPetPos, List<Vector3> enemyPetPos)
		{
			this.id = id;
			this.selfPetPos = selfPetPos;
			this.enemyPetPos = enemyPetPos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			selfPetPos = is.popList(Vector3.class);
			enemyPetPos = is.popList(Vector3.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(selfPetPos);
			os.pushList(enemyPetPos);
		}

		public int id;
		public List<Vector3> selfPetPos;
		public List<Vector3> enemyPetPos;
	}

	public static class ClanOreMapCFGS implements Stream.IStreamable
	{

		public ClanOreMapCFGS() { }

		public ClanOreMapCFGS(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		public int id;
	}

	public static class ClanTaskMapCFGS implements Stream.IStreamable
	{

		public ClanTaskMapCFGS() { }

		public ClanTaskMapCFGS(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		public int id;
	}

	public static class ClanBattleMapCFGS implements Stream.IStreamable
	{

		public ClanBattleMapCFGS() { }

		public ClanBattleMapCFGS(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		public int id;
	}

	public static class ClanBattleHelpMapCFGS implements Stream.IStreamable
	{

		public ClanBattleHelpMapCFGS() { }

		public ClanBattleHelpMapCFGS(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		public int id;
	}

	public static class ActivityMapCFGS implements Stream.IStreamable
	{

		public ActivityMapCFGS() { }

		public ActivityMapCFGS(int id, int groupId, int difficulty, int winCondition, 
		                       int costVit, int lvlReq, int maxTime, int preMap, 
		                       int rewardExp, int fixedDropID, int turnPlateDropID, Map<Integer, MapEntity> allMonsters, 
		                       Map<Integer, MapEntity> allTraps, Map<Integer, Integer> bosses, int slowMotionTime)
		{
			this.id = id;
			this.groupId = groupId;
			this.difficulty = difficulty;
			this.winCondition = winCondition;
			this.costVit = costVit;
			this.lvlReq = lvlReq;
			this.maxTime = maxTime;
			this.preMap = preMap;
			this.rewardExp = rewardExp;
			this.fixedDropID = fixedDropID;
			this.turnPlateDropID = turnPlateDropID;
			this.allMonsters = allMonsters;
			this.allTraps = allTraps;
			this.bosses = bosses;
			this.slowMotionTime = slowMotionTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			groupId = is.popInteger();
			difficulty = is.popInteger();
			winCondition = is.popInteger();
			costVit = is.popInteger();
			lvlReq = is.popInteger();
			maxTime = is.popInteger();
			preMap = is.popInteger();
			rewardExp = is.popInteger();
			fixedDropID = is.popInteger();
			turnPlateDropID = is.popInteger();
			allMonsters = is.popIntegerTreeMap(MapEntity.class);
			allTraps = is.popIntegerTreeMap(MapEntity.class);
			bosses = is.popIntegerIntegerTreeMap();
			slowMotionTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(groupId);
			os.pushInteger(difficulty);
			os.pushInteger(winCondition);
			os.pushInteger(costVit);
			os.pushInteger(lvlReq);
			os.pushInteger(maxTime);
			os.pushInteger(preMap);
			os.pushInteger(rewardExp);
			os.pushInteger(fixedDropID);
			os.pushInteger(turnPlateDropID);
			os.pushIntegerMap(allMonsters);
			os.pushIntegerMap(allTraps);
			os.pushIntegerIntegerMap(bosses);
			os.pushInteger(slowMotionTime);
		}

		public int id;
		public int groupId;
		public int difficulty;
		public int winCondition;
		public int costVit;
		public int lvlReq;
		public int maxTime;
		public int preMap;
		public int rewardExp;
		public int fixedDropID;
		public int turnPlateDropID;
		public Map<Integer, MapEntity> allMonsters;
		public Map<Integer, MapEntity> allTraps;
		public Map<Integer, Integer> bosses;
		public int slowMotionTime;
	}

	public static class PetLifeMapCFGS implements Stream.IStreamable
	{

		public PetLifeMapCFGS() { }

		public PetLifeMapCFGS(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		public int id;
	}

	public static class ClimbTowerMapCFGS implements Stream.IStreamable
	{

		public ClimbTowerMapCFGS() { }

		public ClimbTowerMapCFGS(int id, int winCondition, int winCondParam, int costVit, 
		                         int needLevel, int maxTime, int fightPower, int rewardExp, 
		                         int fixedDropID, int turnPlateDropID, Map<Integer, MapEntity> allMonsters, Map<Integer, MapEntity> allTraps, 
		                         Map<Integer, Integer> bosses)
		{
			this.id = id;
			this.winCondition = winCondition;
			this.winCondParam = winCondParam;
			this.costVit = costVit;
			this.needLevel = needLevel;
			this.maxTime = maxTime;
			this.fightPower = fightPower;
			this.rewardExp = rewardExp;
			this.fixedDropID = fixedDropID;
			this.turnPlateDropID = turnPlateDropID;
			this.allMonsters = allMonsters;
			this.allTraps = allTraps;
			this.bosses = bosses;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			winCondition = is.popInteger();
			winCondParam = is.popInteger();
			costVit = is.popInteger();
			needLevel = is.popInteger();
			maxTime = is.popInteger();
			fightPower = is.popInteger();
			rewardExp = is.popInteger();
			fixedDropID = is.popInteger();
			turnPlateDropID = is.popInteger();
			allMonsters = is.popIntegerTreeMap(MapEntity.class);
			allTraps = is.popIntegerTreeMap(MapEntity.class);
			bosses = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(winCondition);
			os.pushInteger(winCondParam);
			os.pushInteger(costVit);
			os.pushInteger(needLevel);
			os.pushInteger(maxTime);
			os.pushInteger(fightPower);
			os.pushInteger(rewardExp);
			os.pushInteger(fixedDropID);
			os.pushInteger(turnPlateDropID);
			os.pushIntegerMap(allMonsters);
			os.pushIntegerMap(allTraps);
			os.pushIntegerIntegerMap(bosses);
		}

		public int id;
		public int winCondition;
		public int winCondParam;
		public int costVit;
		public int needLevel;
		public int maxTime;
		public int fightPower;
		public int rewardExp;
		public int fixedDropID;
		public int turnPlateDropID;
		public Map<Integer, MapEntity> allMonsters;
		public Map<Integer, MapEntity> allTraps;
		public Map<Integer, Integer> bosses;
	}

	public static class ForceWarMapCFGS implements Stream.IStreamable
	{

		public ForceWarMapCFGS() { }

		public ForceWarMapCFGS(int id, int normalStatues, int bigStatues, int type)
		{
			this.id = id;
			this.normalStatues = normalStatues;
			this.bigStatues = bigStatues;
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			normalStatues = is.popInteger();
			bigStatues = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(normalStatues);
			os.pushInteger(bigStatues);
			os.pushInteger(type);
		}

		public int id;
		public int normalStatues;
		public int bigStatues;
		public int type;
	}

	public static class WeaponMapGradeCFGS implements Stream.IStreamable
	{

		public WeaponMapGradeCFGS() { }

		public WeaponMapGradeCFGS(int floor, int mapID)
		{
			this.floor = floor;
			this.mapID = mapID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			floor = is.popInteger();
			mapID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(floor);
			os.pushInteger(mapID);
		}

		public int floor;
		public int mapID;
	}

	public static class WeaponMapCFGS implements Stream.IStreamable
	{

		public WeaponMapCFGS() { }

		public WeaponMapCFGS(int id, byte keepMotivate, int motivateWeapon, int winCondition, 
		                     int maxTime, int rewardExp, int fixedDropID, int turnPlateDropID, 
		                     int slowMotionTime, Map<Integer, Integer> bosses)
		{
			this.id = id;
			this.keepMotivate = keepMotivate;
			this.motivateWeapon = motivateWeapon;
			this.winCondition = winCondition;
			this.maxTime = maxTime;
			this.rewardExp = rewardExp;
			this.fixedDropID = fixedDropID;
			this.turnPlateDropID = turnPlateDropID;
			this.slowMotionTime = slowMotionTime;
			this.bosses = bosses;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			keepMotivate = is.popByte();
			motivateWeapon = is.popInteger();
			winCondition = is.popInteger();
			maxTime = is.popInteger();
			rewardExp = is.popInteger();
			fixedDropID = is.popInteger();
			turnPlateDropID = is.popInteger();
			slowMotionTime = is.popInteger();
			bosses = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushByte(keepMotivate);
			os.pushInteger(motivateWeapon);
			os.pushInteger(winCondition);
			os.pushInteger(maxTime);
			os.pushInteger(rewardExp);
			os.pushInteger(fixedDropID);
			os.pushInteger(turnPlateDropID);
			os.pushInteger(slowMotionTime);
			os.pushIntegerIntegerMap(bosses);
		}

		public int id;
		public byte keepMotivate;
		public int motivateWeapon;
		public int winCondition;
		public int maxTime;
		public int rewardExp;
		public int fixedDropID;
		public int turnPlateDropID;
		public int slowMotionTime;
		public Map<Integer, Integer> bosses;
	}

	public static class DemonHoleMapCFGS implements Stream.IStreamable
	{

		public DemonHoleMapCFGS() { }

		public DemonHoleMapCFGS(int id, int enterCostCnt, int addExpInterval, float addExpPercent, 
		                        List<Vector3> spawns, List<Vector3> revives, List<DummyGoods> rewards, int bossID, 
		                        Vector3 bossPos, int bossRefreshTime, int pkType)
		{
			this.id = id;
			this.enterCostCnt = enterCostCnt;
			this.addExpInterval = addExpInterval;
			this.addExpPercent = addExpPercent;
			this.spawns = spawns;
			this.revives = revives;
			this.rewards = rewards;
			this.bossID = bossID;
			this.bossPos = bossPos;
			this.bossRefreshTime = bossRefreshTime;
			this.pkType = pkType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			enterCostCnt = is.popInteger();
			addExpInterval = is.popInteger();
			addExpPercent = is.popFloat();
			spawns = is.popList(Vector3.class);
			revives = is.popList(Vector3.class);
			rewards = is.popList(DummyGoods.class);
			bossID = is.popInteger();
			if( bossPos == null )
				bossPos = new Vector3();
			is.pop(bossPos);
			bossRefreshTime = is.popInteger();
			pkType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(enterCostCnt);
			os.pushInteger(addExpInterval);
			os.pushFloat(addExpPercent);
			os.pushList(spawns);
			os.pushList(revives);
			os.pushList(rewards);
			os.pushInteger(bossID);
			os.push(bossPos);
			os.pushInteger(bossRefreshTime);
			os.pushInteger(pkType);
		}

		public int id;
		public int enterCostCnt;
		public int addExpInterval;
		public float addExpPercent;
		public List<Vector3> spawns;
		public List<Vector3> revives;
		public List<DummyGoods> rewards;
		public int bossID;
		public Vector3 bossPos;
		public int bossRefreshTime;
		public int pkType;
	}

	public static class JusticeMapCopyCFGS implements Stream.IStreamable
	{

		public JusticeMapCopyCFGS() { }

		public JusticeMapCopyCFGS(int id, int openType, int winCondition, int maxTime, 
		                          int rewardExp, int turnPlateDropID, int slowMotionTime, int npcMapGroup, 
		                          int mapSkill)
		{
			this.id = id;
			this.openType = openType;
			this.winCondition = winCondition;
			this.maxTime = maxTime;
			this.rewardExp = rewardExp;
			this.turnPlateDropID = turnPlateDropID;
			this.slowMotionTime = slowMotionTime;
			this.npcMapGroup = npcMapGroup;
			this.mapSkill = mapSkill;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			openType = is.popInteger();
			winCondition = is.popInteger();
			maxTime = is.popInteger();
			rewardExp = is.popInteger();
			turnPlateDropID = is.popInteger();
			slowMotionTime = is.popInteger();
			npcMapGroup = is.popInteger();
			mapSkill = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(openType);
			os.pushInteger(winCondition);
			os.pushInteger(maxTime);
			os.pushInteger(rewardExp);
			os.pushInteger(turnPlateDropID);
			os.pushInteger(slowMotionTime);
			os.pushInteger(npcMapGroup);
			os.pushInteger(mapSkill);
		}

		public int id;
		public int openType;
		public int winCondition;
		public int maxTime;
		public int rewardExp;
		public int turnPlateDropID;
		public int slowMotionTime;
		public int npcMapGroup;
		public int mapSkill;
	}

	public static class FightNpcMapCFGS implements Stream.IStreamable
	{

		public FightNpcMapCFGS() { }

		public FightNpcMapCFGS(int id, int winCondition, int maxTime, Map<Integer, Integer> bosses)
		{
			this.id = id;
			this.winCondition = winCondition;
			this.maxTime = maxTime;
			this.bosses = bosses;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			winCondition = is.popInteger();
			maxTime = is.popInteger();
			bosses = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(winCondition);
			os.pushInteger(maxTime);
			os.pushIntegerIntegerMap(bosses);
		}

		public int id;
		public int winCondition;
		public int maxTime;
		public Map<Integer, Integer> bosses;
	}

	public static class TowerDefenceMapCFGS implements Stream.IStreamable
	{

		public TowerDefenceMapCFGS() { }

		public TowerDefenceMapCFGS(int id, int winCondition, int maxTime, int turnPlateDropID)
		{
			this.id = id;
			this.winCondition = winCondition;
			this.maxTime = maxTime;
			this.turnPlateDropID = turnPlateDropID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			winCondition = is.popInteger();
			maxTime = is.popInteger();
			turnPlateDropID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(winCondition);
			os.pushInteger(maxTime);
			os.pushInteger(turnPlateDropID);
		}

		public int id;
		public int winCondition;
		public int maxTime;
		public int turnPlateDropID;
	}

	public static class SpawnAreaCFGS implements Stream.IStreamable
	{

		public SpawnAreaCFGS() { }

		public SpawnAreaCFGS(int id, int checkRadius, byte hasTripDoor, List<Integer> trapDoorIDs, 
		                     List<Integer> spawnOpen, List<Integer> spawnClose, List<Integer> clearOpen, List<Integer> clearClose, 
		                     List<Integer> spawnPoint, int delaySpawnTime, List<Vector3> paths)
		{
			this.id = id;
			this.checkRadius = checkRadius;
			this.hasTripDoor = hasTripDoor;
			this.trapDoorIDs = trapDoorIDs;
			this.spawnOpen = spawnOpen;
			this.spawnClose = spawnClose;
			this.clearOpen = clearOpen;
			this.clearClose = clearClose;
			this.spawnPoint = spawnPoint;
			this.delaySpawnTime = delaySpawnTime;
			this.paths = paths;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			checkRadius = is.popInteger();
			hasTripDoor = is.popByte();
			trapDoorIDs = is.popIntegerList();
			spawnOpen = is.popIntegerList();
			spawnClose = is.popIntegerList();
			clearOpen = is.popIntegerList();
			clearClose = is.popIntegerList();
			spawnPoint = is.popIntegerList();
			delaySpawnTime = is.popInteger();
			paths = is.popList(Vector3.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(checkRadius);
			os.pushByte(hasTripDoor);
			os.pushIntegerList(trapDoorIDs);
			os.pushIntegerList(spawnOpen);
			os.pushIntegerList(spawnClose);
			os.pushIntegerList(clearOpen);
			os.pushIntegerList(clearClose);
			os.pushIntegerList(spawnPoint);
			os.pushInteger(delaySpawnTime);
			os.pushList(paths);
		}

		public int id;
		public int checkRadius;
		public byte hasTripDoor;
		public List<Integer> trapDoorIDs;
		public List<Integer> spawnOpen;
		public List<Integer> spawnClose;
		public List<Integer> clearOpen;
		public List<Integer> clearClose;
		public List<Integer> spawnPoint;
		public int delaySpawnTime;
		public List<Vector3> paths;
	}

	public static class SpawnPointCFGS implements Stream.IStreamable
	{

		public SpawnPointCFGS() { }

		public SpawnPointCFGS(int id, Vector3 position, byte isRandom, int randomRadius, 
		                      int monsterID, int isBoss, int spawnType, int interval, 
		                      int spawnTimes, List<Integer> spawnNum, byte rotationType, Vector3F rotation)
		{
			this.id = id;
			this.position = position;
			this.isRandom = isRandom;
			this.randomRadius = randomRadius;
			this.monsterID = monsterID;
			this.isBoss = isBoss;
			this.spawnType = spawnType;
			this.interval = interval;
			this.spawnTimes = spawnTimes;
			this.spawnNum = spawnNum;
			this.rotationType = rotationType;
			this.rotation = rotation;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			isRandom = is.popByte();
			randomRadius = is.popInteger();
			monsterID = is.popInteger();
			isBoss = is.popInteger();
			spawnType = is.popInteger();
			interval = is.popInteger();
			spawnTimes = is.popInteger();
			spawnNum = is.popIntegerList();
			rotationType = is.popByte();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(position);
			os.pushByte(isRandom);
			os.pushInteger(randomRadius);
			os.pushInteger(monsterID);
			os.pushInteger(isBoss);
			os.pushInteger(spawnType);
			os.pushInteger(interval);
			os.pushInteger(spawnTimes);
			os.pushIntegerList(spawnNum);
			os.pushByte(rotationType);
			os.push(rotation);
		}

		public int id;
		public Vector3 position;
		public byte isRandom;
		public int randomRadius;
		public int monsterID;
		public int isBoss;
		public int spawnType;
		public int interval;
		public int spawnTimes;
		public List<Integer> spawnNum;
		public byte rotationType;
		public Vector3F rotation;
	}

	public static class NpcPointCFGS implements Stream.IStreamable
	{

		public NpcPointCFGS() { }

		public NpcPointCFGS(int id, Vector3 position, Vector3F rotation, int relatedID)
		{
			this.id = id;
			this.position = position;
			this.rotation = rotation;
			this.relatedID = relatedID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			relatedID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(position);
			os.push(rotation);
			os.pushInteger(relatedID);
		}

		public int id;
		public Vector3 position;
		public Vector3F rotation;
		public int relatedID;
	}

	public static class MineralPointCFGS implements Stream.IStreamable
	{

		public MineralPointCFGS() { }

		public MineralPointCFGS(int id, Vector3 position, Vector3F rotation, int relatedID)
		{
			this.id = id;
			this.position = position;
			this.rotation = rotation;
			this.relatedID = relatedID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			relatedID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(position);
			os.push(rotation);
			os.pushInteger(relatedID);
		}

		public int id;
		public Vector3 position;
		public Vector3F rotation;
		public int relatedID;
	}

	public static class WayPointCFGS implements Stream.IStreamable
	{

		public WayPointCFGS() { }

		public WayPointCFGS(int id, Vector3 position, MapPosition target, int trigRadius, 
		                    int pointFunc)
		{
			this.id = id;
			this.position = position;
			this.target = target;
			this.trigRadius = trigRadius;
			this.pointFunc = pointFunc;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( target == null )
				target = new MapPosition();
			is.pop(target);
			trigRadius = is.popInteger();
			pointFunc = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(position);
			os.push(target);
			os.pushInteger(trigRadius);
			os.pushInteger(pointFunc);
		}

		public int id;
		public Vector3 position;
		public MapPosition target;
		public int trigRadius;
		public int pointFunc;
	}

	public static class MapBuffPointCFGS implements Stream.IStreamable
	{

		public MapBuffPointCFGS() { }

		public MapBuffPointCFGS(int id, Vector3 position, int mapBuffID)
		{
			this.id = id;
			this.position = position;
			this.mapBuffID = mapBuffID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			mapBuffID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(position);
			os.pushInteger(mapBuffID);
		}

		public int id;
		public Vector3 position;
		public int mapBuffID;
	}

	public static class ActivityMapGroupCFGS implements Stream.IStreamable
	{

		public ActivityMapGroupCFGS() { }

		public ActivityMapGroupCFGS(int id, Set<Integer> weekDays, int dayEnterTimes, int openStartTime, 
		                            int lastTime, Set<Integer> maps)
		{
			this.id = id;
			this.weekDays = weekDays;
			this.dayEnterTimes = dayEnterTimes;
			this.openStartTime = openStartTime;
			this.lastTime = lastTime;
			this.maps = maps;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			weekDays = is.popIntegerTreeSet();
			dayEnterTimes = is.popInteger();
			openStartTime = is.popInteger();
			lastTime = is.popInteger();
			maps = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerSet(weekDays);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(openStartTime);
			os.pushInteger(lastTime);
			os.pushIntegerSet(maps);
		}

		public int id;
		public Set<Integer> weekDays;
		public int dayEnterTimes;
		public int openStartTime;
		public int lastTime;
		public Set<Integer> maps;
	}

	public static class ClassRolePropCFGS implements Stream.IStreamable
	{

		public ClassRolePropCFGS() { }

		public ClassRolePropCFGS(double org, double incs1, double incs2)
		{
			this.org = org;
			this.incs1 = incs1;
			this.incs2 = incs2;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			org = is.popDouble();
			incs1 = is.popDouble();
			incs2 = is.popDouble();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushDouble(org);
			os.pushDouble(incs1);
			os.pushDouble(incs2);
		}

		public double org;
		public double incs1;
		public double incs2;
	}

	public static class PKCFGS implements Stream.IStreamable
	{

		public PKCFGS() { }

		public PKCFGS(List<Integer> deltaMax, List<Integer> dmgDecrease, List<Float> priceIncrease)
		{
			this.deltaMax = deltaMax;
			this.dmgDecrease = dmgDecrease;
			this.priceIncrease = priceIncrease;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			deltaMax = is.popIntegerList();
			dmgDecrease = is.popIntegerList();
			priceIncrease = is.popFloatList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(deltaMax);
			os.pushIntegerList(dmgDecrease);
			os.pushFloatList(priceIncrease);
		}

		public List<Integer> deltaMax;
		public List<Integer> dmgDecrease;
		public List<Float> priceIncrease;
	}

	public static class CommonInputCFGS implements Stream.IStreamable
	{

		public CommonInputCFGS() { }

		public CommonInputCFGS(int maxUserNameLength, int maxRoleNameLength, int maxSectNameLength, int maxSectCreedLength, 
		                       int maxMsgLength, int maxDiySkillNameLength, int maxClanNameLength, int maxSkillPresetNameLength)
		{
			this.maxUserNameLength = maxUserNameLength;
			this.maxRoleNameLength = maxRoleNameLength;
			this.maxSectNameLength = maxSectNameLength;
			this.maxSectCreedLength = maxSectCreedLength;
			this.maxMsgLength = maxMsgLength;
			this.maxDiySkillNameLength = maxDiySkillNameLength;
			this.maxClanNameLength = maxClanNameLength;
			this.maxSkillPresetNameLength = maxSkillPresetNameLength;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			maxUserNameLength = is.popInteger();
			maxRoleNameLength = is.popInteger();
			maxSectNameLength = is.popInteger();
			maxSectCreedLength = is.popInteger();
			maxMsgLength = is.popInteger();
			maxDiySkillNameLength = is.popInteger();
			maxClanNameLength = is.popInteger();
			maxSkillPresetNameLength = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(maxUserNameLength);
			os.pushInteger(maxRoleNameLength);
			os.pushInteger(maxSectNameLength);
			os.pushInteger(maxSectCreedLength);
			os.pushInteger(maxMsgLength);
			os.pushInteger(maxDiySkillNameLength);
			os.pushInteger(maxClanNameLength);
			os.pushInteger(maxSkillPresetNameLength);
		}

		public int maxUserNameLength;
		public int maxRoleNameLength;
		public int maxSectNameLength;
		public int maxSectCreedLength;
		public int maxMsgLength;
		public int maxDiySkillNameLength;
		public int maxClanNameLength;
		public int maxSkillPresetNameLength;
	}

	public static class CommonBagCFGS implements Stream.IStreamable
	{

		public CommonBagCFGS() { }

		public CommonBagCFGS(int initCount, int extendCellCount, List<Integer> extendCellCost, int extendCellSize)
		{
			this.initCount = initCount;
			this.extendCellCount = extendCellCount;
			this.extendCellCost = extendCellCost;
			this.extendCellSize = extendCellSize;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			initCount = is.popInteger();
			extendCellCount = is.popInteger();
			extendCellCost = is.popIntegerList();
			extendCellSize = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(initCount);
			os.pushInteger(extendCellCount);
			os.pushIntegerList(extendCellCost);
			os.pushInteger(extendCellSize);
		}

		public int initCount;
		public int extendCellCount;
		public List<Integer> extendCellCost;
		public int extendCellSize;
	}

	public static class BuffCFGS implements Stream.IStreamable
	{

		public BuffCFGS() { }

		public BuffCFGS(int id, byte hasShowID, byte owner, int loopTime, 
		                int overLays, int overLayType, byte affectType, int affectID, 
		                byte valueType, int affectValue, double realmAdd, int interval, 
		                List<Integer> child, byte removeOnZero, List<Integer> triggers, int damageType, 
		                int againstPropID, int fightSpAddTime)
		{
			this.id = id;
			this.hasShowID = hasShowID;
			this.owner = owner;
			this.loopTime = loopTime;
			this.overLays = overLays;
			this.overLayType = overLayType;
			this.affectType = affectType;
			this.affectID = affectID;
			this.valueType = valueType;
			this.affectValue = affectValue;
			this.realmAdd = realmAdd;
			this.interval = interval;
			this.child = child;
			this.removeOnZero = removeOnZero;
			this.triggers = triggers;
			this.damageType = damageType;
			this.againstPropID = againstPropID;
			this.fightSpAddTime = fightSpAddTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			hasShowID = is.popByte();
			owner = is.popByte();
			loopTime = is.popInteger();
			overLays = is.popInteger();
			overLayType = is.popInteger();
			affectType = is.popByte();
			affectID = is.popInteger();
			valueType = is.popByte();
			affectValue = is.popInteger();
			realmAdd = is.popDouble();
			interval = is.popInteger();
			child = is.popIntegerList();
			removeOnZero = is.popByte();
			triggers = is.popIntegerList();
			damageType = is.popInteger();
			againstPropID = is.popInteger();
			fightSpAddTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushByte(hasShowID);
			os.pushByte(owner);
			os.pushInteger(loopTime);
			os.pushInteger(overLays);
			os.pushInteger(overLayType);
			os.pushByte(affectType);
			os.pushInteger(affectID);
			os.pushByte(valueType);
			os.pushInteger(affectValue);
			os.pushDouble(realmAdd);
			os.pushInteger(interval);
			os.pushIntegerList(child);
			os.pushByte(removeOnZero);
			os.pushIntegerList(triggers);
			os.pushInteger(damageType);
			os.pushInteger(againstPropID);
			os.pushInteger(fightSpAddTime);
		}

		public int id;
		public byte hasShowID;
		public byte owner;
		public int loopTime;
		public int overLays;
		public int overLayType;
		public byte affectType;
		public int affectID;
		public byte valueType;
		public int affectValue;
		public double realmAdd;
		public int interval;
		public List<Integer> child;
		public byte removeOnZero;
		public List<Integer> triggers;
		public int damageType;
		public int againstPropID;
		public int fightSpAddTime;
	}

	public static class AiTrigerCFGS implements Stream.IStreamable
	{

		public AiTrigerCFGS() { }

		public AiTrigerCFGS(int id, int eventID, int behaviorID, int coolDown, 
		                    int odds)
		{
			this.id = id;
			this.eventID = eventID;
			this.behaviorID = behaviorID;
			this.coolDown = coolDown;
			this.odds = odds;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			eventID = is.popInteger();
			behaviorID = is.popInteger();
			coolDown = is.popInteger();
			odds = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(eventID);
			os.pushInteger(behaviorID);
			os.pushInteger(coolDown);
			os.pushInteger(odds);
		}

		public int id;
		public int eventID;
		public int behaviorID;
		public int coolDown;
		public int odds;
	}

	public static class TrigEventCFGS implements Stream.IStreamable, Stream.KCloneable<TrigEventCFGS>
	{

		public TrigEventCFGS() { }

		public TrigEventCFGS(int id, int eventType, int param1, int param2, 
		                     int param3)
		{
			this.id = id;
			this.eventType = eventType;
			this.param1 = param1;
			this.param2 = param2;
			this.param3 = param3;
		}

		public TrigEventCFGS ksClone()
		{
			return new TrigEventCFGS(id, eventType, param1, param2, 
			                         param3);
		}

		@Override
		public TrigEventCFGS kdClone()
		{
			TrigEventCFGS _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			eventType = is.popInteger();
			param1 = is.popInteger();
			param2 = is.popInteger();
			param3 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(eventType);
			os.pushInteger(param1);
			os.pushInteger(param2);
			os.pushInteger(param3);
		}

		public int id;
		public int eventType;
		public int param1;
		public int param2;
		public int param3;
	}

	public static class TrigBehaviorCFGS implements Stream.IStreamable, Stream.KCloneable<TrigBehaviorCFGS>
	{

		public TrigBehaviorCFGS() { }

		public TrigBehaviorCFGS(int id, int behaviorType, int param1, int param2, 
		                        int param3, int param4, int param5)
		{
			this.id = id;
			this.behaviorType = behaviorType;
			this.param1 = param1;
			this.param2 = param2;
			this.param3 = param3;
			this.param4 = param4;
			this.param5 = param5;
		}

		public TrigBehaviorCFGS ksClone()
		{
			return new TrigBehaviorCFGS(id, behaviorType, param1, param2, 
			                            param3, param4, param5);
		}

		@Override
		public TrigBehaviorCFGS kdClone()
		{
			TrigBehaviorCFGS _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			behaviorType = is.popInteger();
			param1 = is.popInteger();
			param2 = is.popInteger();
			param3 = is.popInteger();
			param4 = is.popInteger();
			param5 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(behaviorType);
			os.pushInteger(param1);
			os.pushInteger(param2);
			os.pushInteger(param3);
			os.pushInteger(param4);
			os.pushInteger(param5);
		}

		public int id;
		public int behaviorType;
		public int param1;
		public int param2;
		public int param3;
		public int param4;
		public int param5;
	}

	public static class StateCFGS implements Stream.IStreamable, Stream.KCloneable<StateCFGS>
	{

		public StateCFGS() { }

		public StateCFGS(int id, byte canRebound)
		{
			this.id = id;
			this.canRebound = canRebound;
		}

		public StateCFGS ksClone()
		{
			return new StateCFGS(id, canRebound);
		}

		@Override
		public StateCFGS kdClone()
		{
			StateCFGS _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			canRebound = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushByte(canRebound);
		}

		public int id;
		public byte canRebound;
	}

	public static class CommonEngineCFGS implements Stream.IStreamable
	{

		public CommonEngineCFGS() { }

		public CommonEngineCFGS(int interval)
		{
			this.interval = interval;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			interval = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(interval);
		}

		public int interval;
	}

	public static class CommonSkillCFGS implements Stream.IStreamable
	{

		public CommonSkillCFGS() { }

		public CommonSkillCFGS(List<Double> atk, List<Double> atr, List<Double> cri, List<Double> sbd, 
		                       List<Double> hel, List<Double> shell, int spa, List<Integer> invalidSkillIDs, 
		                       int stupidMin, int stupidMax, float bloodrate, int attackEdge, 
		                       float closeAngle, float farAngle, int percentBuffMax, float stepTrigCondition, 
		                       float stepTrigOdds, int skillPresetMaxSize, int spiritsPresetMaxSize, int privateMapMasterMaxCount, 
		                       int weaponMasterInterval)
		{
			this.atk = atk;
			this.atr = atr;
			this.cri = cri;
			this.sbd = sbd;
			this.hel = hel;
			this.shell = shell;
			this.spa = spa;
			this.invalidSkillIDs = invalidSkillIDs;
			this.stupidMin = stupidMin;
			this.stupidMax = stupidMax;
			this.bloodrate = bloodrate;
			this.attackEdge = attackEdge;
			this.closeAngle = closeAngle;
			this.farAngle = farAngle;
			this.percentBuffMax = percentBuffMax;
			this.stepTrigCondition = stepTrigCondition;
			this.stepTrigOdds = stepTrigOdds;
			this.skillPresetMaxSize = skillPresetMaxSize;
			this.spiritsPresetMaxSize = spiritsPresetMaxSize;
			this.privateMapMasterMaxCount = privateMapMasterMaxCount;
			this.weaponMasterInterval = weaponMasterInterval;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			atk = is.popDoubleList();
			atr = is.popDoubleList();
			cri = is.popDoubleList();
			sbd = is.popDoubleList();
			hel = is.popDoubleList();
			shell = is.popDoubleList();
			spa = is.popInteger();
			invalidSkillIDs = is.popIntegerList();
			stupidMin = is.popInteger();
			stupidMax = is.popInteger();
			bloodrate = is.popFloat();
			attackEdge = is.popInteger();
			closeAngle = is.popFloat();
			farAngle = is.popFloat();
			percentBuffMax = is.popInteger();
			stepTrigCondition = is.popFloat();
			stepTrigOdds = is.popFloat();
			skillPresetMaxSize = is.popInteger();
			spiritsPresetMaxSize = is.popInteger();
			privateMapMasterMaxCount = is.popInteger();
			weaponMasterInterval = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushDoubleList(atk);
			os.pushDoubleList(atr);
			os.pushDoubleList(cri);
			os.pushDoubleList(sbd);
			os.pushDoubleList(hel);
			os.pushDoubleList(shell);
			os.pushInteger(spa);
			os.pushIntegerList(invalidSkillIDs);
			os.pushInteger(stupidMin);
			os.pushInteger(stupidMax);
			os.pushFloat(bloodrate);
			os.pushInteger(attackEdge);
			os.pushFloat(closeAngle);
			os.pushFloat(farAngle);
			os.pushInteger(percentBuffMax);
			os.pushFloat(stepTrigCondition);
			os.pushFloat(stepTrigOdds);
			os.pushInteger(skillPresetMaxSize);
			os.pushInteger(spiritsPresetMaxSize);
			os.pushInteger(privateMapMasterMaxCount);
			os.pushInteger(weaponMasterInterval);
		}

		public List<Double> atk;
		public List<Double> atr;
		public List<Double> cri;
		public List<Double> sbd;
		public List<Double> hel;
		public List<Double> shell;
		public int spa;
		public List<Integer> invalidSkillIDs;
		public int stupidMin;
		public int stupidMax;
		public float bloodrate;
		public int attackEdge;
		public float closeAngle;
		public float farAngle;
		public int percentBuffMax;
		public float stepTrigCondition;
		public float stepTrigOdds;
		public int skillPresetMaxSize;
		public int spiritsPresetMaxSize;
		public int privateMapMasterMaxCount;
		public int weaponMasterInterval;
	}

	public static class CommonArmorCFGS implements Stream.IStreamable
	{

		public CommonArmorCFGS() { }

		public CommonArmorCFGS(int transParam1, int transParam2, float transRate, float transOddMin, 
		                       float transOddMax, int defParam1, int defParam2, float dmgDeep, 
		                       int recoverInterval, int freezeTime, ArmorDeepCFG suck, ArmorDeepCFG destroy, 
		                       ArmorDeepCFG weak, float dmgFixMin, float dmgFixMax)
		{
			this.transParam1 = transParam1;
			this.transParam2 = transParam2;
			this.transRate = transRate;
			this.transOddMin = transOddMin;
			this.transOddMax = transOddMax;
			this.defParam1 = defParam1;
			this.defParam2 = defParam2;
			this.dmgDeep = dmgDeep;
			this.recoverInterval = recoverInterval;
			this.freezeTime = freezeTime;
			this.suck = suck;
			this.destroy = destroy;
			this.weak = weak;
			this.dmgFixMin = dmgFixMin;
			this.dmgFixMax = dmgFixMax;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			transParam1 = is.popInteger();
			transParam2 = is.popInteger();
			transRate = is.popFloat();
			transOddMin = is.popFloat();
			transOddMax = is.popFloat();
			defParam1 = is.popInteger();
			defParam2 = is.popInteger();
			dmgDeep = is.popFloat();
			recoverInterval = is.popInteger();
			freezeTime = is.popInteger();
			if( suck == null )
				suck = new ArmorDeepCFG();
			is.pop(suck);
			if( destroy == null )
				destroy = new ArmorDeepCFG();
			is.pop(destroy);
			if( weak == null )
				weak = new ArmorDeepCFG();
			is.pop(weak);
			dmgFixMin = is.popFloat();
			dmgFixMax = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(transParam1);
			os.pushInteger(transParam2);
			os.pushFloat(transRate);
			os.pushFloat(transOddMin);
			os.pushFloat(transOddMax);
			os.pushInteger(defParam1);
			os.pushInteger(defParam2);
			os.pushFloat(dmgDeep);
			os.pushInteger(recoverInterval);
			os.pushInteger(freezeTime);
			os.push(suck);
			os.push(destroy);
			os.push(weak);
			os.pushFloat(dmgFixMin);
			os.pushFloat(dmgFixMax);
		}

		public int transParam1;
		public int transParam2;
		public float transRate;
		public float transOddMin;
		public float transOddMax;
		public int defParam1;
		public int defParam2;
		public float dmgDeep;
		public int recoverInterval;
		public int freezeTime;
		public ArmorDeepCFG suck;
		public ArmorDeepCFG destroy;
		public ArmorDeepCFG weak;
		public float dmgFixMin;
		public float dmgFixMax;
	}

	public static class ArmorDeepCFG implements Stream.IStreamable
	{

		public ArmorDeepCFG() { }

		public ArmorDeepCFG(int interval, float add)
		{
			this.interval = interval;
			this.add = add;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			interval = is.popInteger();
			add = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(interval);
			os.pushFloat(add);
		}

		public int interval;
		public float add;
	}

	public static class CommonMedicineCFGS implements Stream.IStreamable
	{

		public CommonMedicineCFGS() { }

		public CommonMedicineCFGS(int vipTripInterval, int hpCD)
		{
			this.vipTripInterval = vipTripInterval;
			this.hpCD = hpCD;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			vipTripInterval = is.popInteger();
			hpCD = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(vipTripInterval);
			os.pushInteger(hpCD);
		}

		public int vipTripInterval;
		public int hpCD;
	}

	public static class CommonMapCFGS implements Stream.IStreamable
	{

		public CommonMapCFGS() { }

		public CommonMapCFGS(List<Integer> dropClearTime, int palteCount, int mapCopyAutoFlipCardTime, int mapCopyAutoCloseTime, 
		                     int lotteryCostDiamond, int sweepItemId, List<Integer> mapcopyFinishArgs, List<Float> primapFinishArgs, 
		                     List<Float> teammapFinishArgs, List<Integer> scores, List<Integer> buyUseDiamond, int mapCopyNoAnimationWaitPopupTime, 
		                     Set<Integer> forbidReviveMaps, Set<Integer> forbidUseHpPoolMaps)
		{
			this.dropClearTime = dropClearTime;
			this.palteCount = palteCount;
			this.mapCopyAutoFlipCardTime = mapCopyAutoFlipCardTime;
			this.mapCopyAutoCloseTime = mapCopyAutoCloseTime;
			this.lotteryCostDiamond = lotteryCostDiamond;
			this.sweepItemId = sweepItemId;
			this.mapcopyFinishArgs = mapcopyFinishArgs;
			this.primapFinishArgs = primapFinishArgs;
			this.teammapFinishArgs = teammapFinishArgs;
			this.scores = scores;
			this.buyUseDiamond = buyUseDiamond;
			this.mapCopyNoAnimationWaitPopupTime = mapCopyNoAnimationWaitPopupTime;
			this.forbidReviveMaps = forbidReviveMaps;
			this.forbidUseHpPoolMaps = forbidUseHpPoolMaps;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dropClearTime = is.popIntegerList();
			palteCount = is.popInteger();
			mapCopyAutoFlipCardTime = is.popInteger();
			mapCopyAutoCloseTime = is.popInteger();
			lotteryCostDiamond = is.popInteger();
			sweepItemId = is.popInteger();
			mapcopyFinishArgs = is.popIntegerList();
			primapFinishArgs = is.popFloatList();
			teammapFinishArgs = is.popFloatList();
			scores = is.popIntegerList();
			buyUseDiamond = is.popIntegerList();
			mapCopyNoAnimationWaitPopupTime = is.popInteger();
			forbidReviveMaps = is.popIntegerTreeSet();
			forbidUseHpPoolMaps = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(dropClearTime);
			os.pushInteger(palteCount);
			os.pushInteger(mapCopyAutoFlipCardTime);
			os.pushInteger(mapCopyAutoCloseTime);
			os.pushInteger(lotteryCostDiamond);
			os.pushInteger(sweepItemId);
			os.pushIntegerList(mapcopyFinishArgs);
			os.pushFloatList(primapFinishArgs);
			os.pushFloatList(teammapFinishArgs);
			os.pushIntegerList(scores);
			os.pushIntegerList(buyUseDiamond);
			os.pushInteger(mapCopyNoAnimationWaitPopupTime);
			os.pushIntegerSet(forbidReviveMaps);
			os.pushIntegerSet(forbidUseHpPoolMaps);
		}

		public List<Integer> dropClearTime;
		public int palteCount;
		public int mapCopyAutoFlipCardTime;
		public int mapCopyAutoCloseTime;
		public int lotteryCostDiamond;
		public int sweepItemId;
		public List<Integer> mapcopyFinishArgs;
		public List<Float> primapFinishArgs;
		public List<Float> teammapFinishArgs;
		public List<Integer> scores;
		public List<Integer> buyUseDiamond;
		public int mapCopyNoAnimationWaitPopupTime;
		public Set<Integer> forbidReviveMaps;
		public Set<Integer> forbidUseHpPoolMaps;
	}

	public static class CommonGeneralCFGS implements Stream.IStreamable
	{

		public CommonGeneralCFGS() { }

		public CommonGeneralCFGS(int maxSP, int fightTime)
		{
			this.maxSP = maxSP;
			this.fightTime = fightTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			maxSP = is.popInteger();
			fightTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(maxSP);
			os.pushInteger(fightTime);
		}

		public int maxSP;
		public int fightTime;
	}

	public static class CommonMineralCFGS implements Stream.IStreamable
	{

		public CommonMineralCFGS() { }

		public CommonMineralCFGS(int mineralDistance, int appearRadius)
		{
			this.mineralDistance = mineralDistance;
			this.appearRadius = appearRadius;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mineralDistance = is.popInteger();
			appearRadius = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mineralDistance);
			os.pushInteger(appearRadius);
		}

		public int mineralDistance;
		public int appearRadius;
	}

	public static class CommonFightPowerCFGS implements Stream.IStreamable
	{

		public CommonFightPowerCFGS() { }

		public CommonFightPowerCFGS(List<Float> args, List<Integer> dmgs, int spirit, int weapon, 
		                            float atkIFAndStep, List<Float> seal, float maxHPFac, float atkNFac, 
		                            float defNFac)
		{
			this.args = args;
			this.dmgs = dmgs;
			this.spirit = spirit;
			this.weapon = weapon;
			this.atkIFAndStep = atkIFAndStep;
			this.seal = seal;
			this.maxHPFac = maxHPFac;
			this.atkNFac = atkNFac;
			this.defNFac = defNFac;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			args = is.popFloatList();
			dmgs = is.popIntegerList();
			spirit = is.popInteger();
			weapon = is.popInteger();
			atkIFAndStep = is.popFloat();
			seal = is.popFloatList();
			maxHPFac = is.popFloat();
			atkNFac = is.popFloat();
			defNFac = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloatList(args);
			os.pushIntegerList(dmgs);
			os.pushInteger(spirit);
			os.pushInteger(weapon);
			os.pushFloat(atkIFAndStep);
			os.pushFloatList(seal);
			os.pushFloat(maxHPFac);
			os.pushFloat(atkNFac);
			os.pushFloat(defNFac);
		}

		public List<Float> args;
		public List<Integer> dmgs;
		public int spirit;
		public int weapon;
		public float atkIFAndStep;
		public List<Float> seal;
		public float maxHPFac;
		public float atkNFac;
		public float defNFac;
	}

	public static class CommonPetCFGS implements Stream.IStreamable
	{

		public CommonPetCFGS() { }

		public CommonPetCFGS(List<Integer> level, int autoRevive, int coPracticeOpenLvl, int maxCoPracticeTaskNum, 
		                     float autoUsePoolHp, int poolCD, int healPerPool, int spiritLvlReq, 
		                     int normalArenaExploit, int bwArenaExploit, int superArenaExploit, int fullStarPropAdd)
		{
			this.level = level;
			this.autoRevive = autoRevive;
			this.coPracticeOpenLvl = coPracticeOpenLvl;
			this.maxCoPracticeTaskNum = maxCoPracticeTaskNum;
			this.autoUsePoolHp = autoUsePoolHp;
			this.poolCD = poolCD;
			this.healPerPool = healPerPool;
			this.spiritLvlReq = spiritLvlReq;
			this.normalArenaExploit = normalArenaExploit;
			this.bwArenaExploit = bwArenaExploit;
			this.superArenaExploit = superArenaExploit;
			this.fullStarPropAdd = fullStarPropAdd;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popIntegerList();
			autoRevive = is.popInteger();
			coPracticeOpenLvl = is.popInteger();
			maxCoPracticeTaskNum = is.popInteger();
			autoUsePoolHp = is.popFloat();
			poolCD = is.popInteger();
			healPerPool = is.popInteger();
			spiritLvlReq = is.popInteger();
			normalArenaExploit = is.popInteger();
			bwArenaExploit = is.popInteger();
			superArenaExploit = is.popInteger();
			fullStarPropAdd = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(level);
			os.pushInteger(autoRevive);
			os.pushInteger(coPracticeOpenLvl);
			os.pushInteger(maxCoPracticeTaskNum);
			os.pushFloat(autoUsePoolHp);
			os.pushInteger(poolCD);
			os.pushInteger(healPerPool);
			os.pushInteger(spiritLvlReq);
			os.pushInteger(normalArenaExploit);
			os.pushInteger(bwArenaExploit);
			os.pushInteger(superArenaExploit);
			os.pushInteger(fullStarPropAdd);
		}

		public List<Integer> level;
		public int autoRevive;
		public int coPracticeOpenLvl;
		public int maxCoPracticeTaskNum;
		public float autoUsePoolHp;
		public int poolCD;
		public int healPerPool;
		public int spiritLvlReq;
		public int normalArenaExploit;
		public int bwArenaExploit;
		public int superArenaExploit;
		public int fullStarPropAdd;
	}

	public static class CommonTeamCFGS implements Stream.IStreamable
	{

		public CommonTeamCFGS() { }

		public CommonTeamCFGS(float killMonsterExpAdd, int expAddDistance, int lvlReq)
		{
			this.killMonsterExpAdd = killMonsterExpAdd;
			this.expAddDistance = expAddDistance;
			this.lvlReq = lvlReq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			killMonsterExpAdd = is.popFloat();
			expAddDistance = is.popInteger();
			lvlReq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(killMonsterExpAdd);
			os.pushInteger(expAddDistance);
			os.pushInteger(lvlReq);
		}

		public float killMonsterExpAdd;
		public int expAddDistance;
		public int lvlReq;
	}

	public static class CommonVitCFGS implements Stream.IStreamable
	{

		public CommonVitCFGS() { }

		public CommonVitCFGS(int revertValue, int revertInterval, int buyVitValue, List<Integer> buyTimesCost)
		{
			this.revertValue = revertValue;
			this.revertInterval = revertInterval;
			this.buyVitValue = buyVitValue;
			this.buyTimesCost = buyTimesCost;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			revertValue = is.popInteger();
			revertInterval = is.popInteger();
			buyVitValue = is.popInteger();
			buyTimesCost = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(revertValue);
			os.pushInteger(revertInterval);
			os.pushInteger(buyVitValue);
			os.pushIntegerList(buyTimesCost);
		}

		public int revertValue;
		public int revertInterval;
		public int buyVitValue;
		public List<Integer> buyTimesCost;
	}

	public static class CommonChatCFGS implements Stream.IStreamable
	{

		public CommonChatCFGS() { }

		public CommonChatCFGS(int worldChatItem, int publicChatInterval, int privateChatInterval, int allServerChatVipNeed, 
		                      int allServerChatItem, int allServerChatInterval, int mRoomInviteChatInterval, int sectInviteChatInterval)
		{
			this.worldChatItem = worldChatItem;
			this.publicChatInterval = publicChatInterval;
			this.privateChatInterval = privateChatInterval;
			this.allServerChatVipNeed = allServerChatVipNeed;
			this.allServerChatItem = allServerChatItem;
			this.allServerChatInterval = allServerChatInterval;
			this.mRoomInviteChatInterval = mRoomInviteChatInterval;
			this.sectInviteChatInterval = sectInviteChatInterval;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			worldChatItem = is.popInteger();
			publicChatInterval = is.popInteger();
			privateChatInterval = is.popInteger();
			allServerChatVipNeed = is.popInteger();
			allServerChatItem = is.popInteger();
			allServerChatInterval = is.popInteger();
			mRoomInviteChatInterval = is.popInteger();
			sectInviteChatInterval = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(worldChatItem);
			os.pushInteger(publicChatInterval);
			os.pushInteger(privateChatInterval);
			os.pushInteger(allServerChatVipNeed);
			os.pushInteger(allServerChatItem);
			os.pushInteger(allServerChatInterval);
			os.pushInteger(mRoomInviteChatInterval);
			os.pushInteger(sectInviteChatInterval);
		}

		public int worldChatItem;
		public int publicChatInterval;
		public int privateChatInterval;
		public int allServerChatVipNeed;
		public int allServerChatItem;
		public int allServerChatInterval;
		public int mRoomInviteChatInterval;
		public int sectInviteChatInterval;
	}

	public static class CommonRevivesCFGS implements Stream.IStreamable
	{

		public CommonRevivesCFGS() { }

		public CommonRevivesCFGS(int spawnReviveCD, int pvpReviveCostBase, int pvpReviveCostAdd, int clearRecentReviveTime, 
		                         int protectTime, Set<Integer> pveReviveMapTypes, int pveReviveCost)
		{
			this.spawnReviveCD = spawnReviveCD;
			this.pvpReviveCostBase = pvpReviveCostBase;
			this.pvpReviveCostAdd = pvpReviveCostAdd;
			this.clearRecentReviveTime = clearRecentReviveTime;
			this.protectTime = protectTime;
			this.pveReviveMapTypes = pveReviveMapTypes;
			this.pveReviveCost = pveReviveCost;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spawnReviveCD = is.popInteger();
			pvpReviveCostBase = is.popInteger();
			pvpReviveCostAdd = is.popInteger();
			clearRecentReviveTime = is.popInteger();
			protectTime = is.popInteger();
			pveReviveMapTypes = is.popIntegerTreeSet();
			pveReviveCost = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spawnReviveCD);
			os.pushInteger(pvpReviveCostBase);
			os.pushInteger(pvpReviveCostAdd);
			os.pushInteger(clearRecentReviveTime);
			os.pushInteger(protectTime);
			os.pushIntegerSet(pveReviveMapTypes);
			os.pushInteger(pveReviveCost);
		}

		public int spawnReviveCD;
		public int pvpReviveCostBase;
		public int pvpReviveCostAdd;
		public int clearRecentReviveTime;
		public int protectTime;
		public Set<Integer> pveReviveMapTypes;
		public int pveReviveCost;
	}

	public static class CommonPKCFGS implements Stream.IStreamable
	{

		public CommonPKCFGS() { }

		public CommonPKCFGS(int needLvl, int pkKeepTime, int orangeNameKeepTime, int pkValueInterval, 
		                    int punishSkill, int punishReduceValue, int punishReq, int punishInterval, 
		                    int punishDamageBuff)
		{
			this.needLvl = needLvl;
			this.pkKeepTime = pkKeepTime;
			this.orangeNameKeepTime = orangeNameKeepTime;
			this.pkValueInterval = pkValueInterval;
			this.punishSkill = punishSkill;
			this.punishReduceValue = punishReduceValue;
			this.punishReq = punishReq;
			this.punishInterval = punishInterval;
			this.punishDamageBuff = punishDamageBuff;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			needLvl = is.popInteger();
			pkKeepTime = is.popInteger();
			orangeNameKeepTime = is.popInteger();
			pkValueInterval = is.popInteger();
			punishSkill = is.popInteger();
			punishReduceValue = is.popInteger();
			punishReq = is.popInteger();
			punishInterval = is.popInteger();
			punishDamageBuff = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(needLvl);
			os.pushInteger(pkKeepTime);
			os.pushInteger(orangeNameKeepTime);
			os.pushInteger(pkValueInterval);
			os.pushInteger(punishSkill);
			os.pushInteger(punishReduceValue);
			os.pushInteger(punishReq);
			os.pushInteger(punishInterval);
			os.pushInteger(punishDamageBuff);
		}

		public int needLvl;
		public int pkKeepTime;
		public int orangeNameKeepTime;
		public int pkValueInterval;
		public int punishSkill;
		public int punishReduceValue;
		public int punishReq;
		public int punishInterval;
		public int punishDamageBuff;
	}

	public static class CommonCoinCFGS implements Stream.IStreamable
	{

		public CommonCoinCFGS() { }

		public CommonCoinCFGS(int buyBaseAmount, int buyRoleLvlAmount, int buyTimesAmount, List<CritCFGS> buyCrits, 
		                      List<Integer> buyTimesCost)
		{
			this.buyBaseAmount = buyBaseAmount;
			this.buyRoleLvlAmount = buyRoleLvlAmount;
			this.buyTimesAmount = buyTimesAmount;
			this.buyCrits = buyCrits;
			this.buyTimesCost = buyTimesCost;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			buyBaseAmount = is.popInteger();
			buyRoleLvlAmount = is.popInteger();
			buyTimesAmount = is.popInteger();
			buyCrits = is.popList(CritCFGS.class);
			buyTimesCost = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(buyBaseAmount);
			os.pushInteger(buyRoleLvlAmount);
			os.pushInteger(buyTimesAmount);
			os.pushList(buyCrits);
			os.pushIntegerList(buyTimesCost);
		}

		public int buyBaseAmount;
		public int buyRoleLvlAmount;
		public int buyTimesAmount;
		public List<CritCFGS> buyCrits;
		public List<Integer> buyTimesCost;
	}

	public static class CommonSectCFGS implements Stream.IStreamable
	{

		public CommonSectCFGS() { }

		public CommonSectCFGS(int createLvl, int joinLvlReq, int diamond, int coin, 
		                      int sectMaxApplicant, int dayFinishTask, List<Integer> exitPunishTime, int eventMax, 
		                      int fastApplyActive, int fastApplyRole, int sectUpLvlDiamond, int banOpenTime, 
		                      int banEndTime, int mapOpenLvl, int mapAutoCloseTime, int creedLength, 
		                      int eatTotal, List<Integer> taskShareStar, int taskVipMax, List<Integer> taskRefreshTime, 
		                      int taskShareLimitTime, int taskShareMakeCount, int taskLibDefaultCount, int taskLibAddCount, 
		                      int taskOpenLvl, int mapRecordsAllocateStartTime, int mapRecordsAllocateEndTime, int taskCancelPunishTime, 
		                      List<Integer> sectTaskDiamond, int maxDayVitality, int changeNameDiamond, int groupMapFinishEndTime, 
		                      int chiefTimeout, int receiveChiefLastTime, int qqGroupLength, int startVit)
		{
			this.createLvl = createLvl;
			this.joinLvlReq = joinLvlReq;
			this.diamond = diamond;
			this.coin = coin;
			this.sectMaxApplicant = sectMaxApplicant;
			this.dayFinishTask = dayFinishTask;
			this.exitPunishTime = exitPunishTime;
			this.eventMax = eventMax;
			this.fastApplyActive = fastApplyActive;
			this.fastApplyRole = fastApplyRole;
			this.sectUpLvlDiamond = sectUpLvlDiamond;
			this.banOpenTime = banOpenTime;
			this.banEndTime = banEndTime;
			this.mapOpenLvl = mapOpenLvl;
			this.mapAutoCloseTime = mapAutoCloseTime;
			this.creedLength = creedLength;
			this.eatTotal = eatTotal;
			this.taskShareStar = taskShareStar;
			this.taskVipMax = taskVipMax;
			this.taskRefreshTime = taskRefreshTime;
			this.taskShareLimitTime = taskShareLimitTime;
			this.taskShareMakeCount = taskShareMakeCount;
			this.taskLibDefaultCount = taskLibDefaultCount;
			this.taskLibAddCount = taskLibAddCount;
			this.taskOpenLvl = taskOpenLvl;
			this.mapRecordsAllocateStartTime = mapRecordsAllocateStartTime;
			this.mapRecordsAllocateEndTime = mapRecordsAllocateEndTime;
			this.taskCancelPunishTime = taskCancelPunishTime;
			this.sectTaskDiamond = sectTaskDiamond;
			this.maxDayVitality = maxDayVitality;
			this.changeNameDiamond = changeNameDiamond;
			this.groupMapFinishEndTime = groupMapFinishEndTime;
			this.chiefTimeout = chiefTimeout;
			this.receiveChiefLastTime = receiveChiefLastTime;
			this.qqGroupLength = qqGroupLength;
			this.startVit = startVit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			createLvl = is.popInteger();
			joinLvlReq = is.popInteger();
			diamond = is.popInteger();
			coin = is.popInteger();
			sectMaxApplicant = is.popInteger();
			dayFinishTask = is.popInteger();
			exitPunishTime = is.popIntegerList();
			eventMax = is.popInteger();
			fastApplyActive = is.popInteger();
			fastApplyRole = is.popInteger();
			sectUpLvlDiamond = is.popInteger();
			banOpenTime = is.popInteger();
			banEndTime = is.popInteger();
			mapOpenLvl = is.popInteger();
			mapAutoCloseTime = is.popInteger();
			creedLength = is.popInteger();
			eatTotal = is.popInteger();
			taskShareStar = is.popIntegerList();
			taskVipMax = is.popInteger();
			taskRefreshTime = is.popIntegerList();
			taskShareLimitTime = is.popInteger();
			taskShareMakeCount = is.popInteger();
			taskLibDefaultCount = is.popInteger();
			taskLibAddCount = is.popInteger();
			taskOpenLvl = is.popInteger();
			mapRecordsAllocateStartTime = is.popInteger();
			mapRecordsAllocateEndTime = is.popInteger();
			taskCancelPunishTime = is.popInteger();
			sectTaskDiamond = is.popIntegerList();
			maxDayVitality = is.popInteger();
			changeNameDiamond = is.popInteger();
			groupMapFinishEndTime = is.popInteger();
			chiefTimeout = is.popInteger();
			receiveChiefLastTime = is.popInteger();
			qqGroupLength = is.popInteger();
			startVit = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(createLvl);
			os.pushInteger(joinLvlReq);
			os.pushInteger(diamond);
			os.pushInteger(coin);
			os.pushInteger(sectMaxApplicant);
			os.pushInteger(dayFinishTask);
			os.pushIntegerList(exitPunishTime);
			os.pushInteger(eventMax);
			os.pushInteger(fastApplyActive);
			os.pushInteger(fastApplyRole);
			os.pushInteger(sectUpLvlDiamond);
			os.pushInteger(banOpenTime);
			os.pushInteger(banEndTime);
			os.pushInteger(mapOpenLvl);
			os.pushInteger(mapAutoCloseTime);
			os.pushInteger(creedLength);
			os.pushInteger(eatTotal);
			os.pushIntegerList(taskShareStar);
			os.pushInteger(taskVipMax);
			os.pushIntegerList(taskRefreshTime);
			os.pushInteger(taskShareLimitTime);
			os.pushInteger(taskShareMakeCount);
			os.pushInteger(taskLibDefaultCount);
			os.pushInteger(taskLibAddCount);
			os.pushInteger(taskOpenLvl);
			os.pushInteger(mapRecordsAllocateStartTime);
			os.pushInteger(mapRecordsAllocateEndTime);
			os.pushInteger(taskCancelPunishTime);
			os.pushIntegerList(sectTaskDiamond);
			os.pushInteger(maxDayVitality);
			os.pushInteger(changeNameDiamond);
			os.pushInteger(groupMapFinishEndTime);
			os.pushInteger(chiefTimeout);
			os.pushInteger(receiveChiefLastTime);
			os.pushInteger(qqGroupLength);
			os.pushInteger(startVit);
		}

		public int createLvl;
		public int joinLvlReq;
		public int diamond;
		public int coin;
		public int sectMaxApplicant;
		public int dayFinishTask;
		public List<Integer> exitPunishTime;
		public int eventMax;
		public int fastApplyActive;
		public int fastApplyRole;
		public int sectUpLvlDiamond;
		public int banOpenTime;
		public int banEndTime;
		public int mapOpenLvl;
		public int mapAutoCloseTime;
		public int creedLength;
		public int eatTotal;
		public List<Integer> taskShareStar;
		public int taskVipMax;
		public List<Integer> taskRefreshTime;
		public int taskShareLimitTime;
		public int taskShareMakeCount;
		public int taskLibDefaultCount;
		public int taskLibAddCount;
		public int taskOpenLvl;
		public int mapRecordsAllocateStartTime;
		public int mapRecordsAllocateEndTime;
		public int taskCancelPunishTime;
		public List<Integer> sectTaskDiamond;
		public int maxDayVitality;
		public int changeNameDiamond;
		public int groupMapFinishEndTime;
		public int chiefTimeout;
		public int receiveChiefLastTime;
		public int qqGroupLength;
		public int startVit;
	}

	public static class CommonActivityCFGS implements Stream.IStreamable
	{

		public CommonActivityCFGS() { }

		public CommonActivityCFGS(int bossTransCD, int resetDiamond, int transItemID, List<Integer> buyUseDiamond)
		{
			this.bossTransCD = bossTransCD;
			this.resetDiamond = resetDiamond;
			this.transItemID = transItemID;
			this.buyUseDiamond = buyUseDiamond;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bossTransCD = is.popInteger();
			resetDiamond = is.popInteger();
			transItemID = is.popInteger();
			buyUseDiamond = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bossTransCD);
			os.pushInteger(resetDiamond);
			os.pushInteger(transItemID);
			os.pushIntegerList(buyUseDiamond);
		}

		public int bossTransCD;
		public int resetDiamond;
		public int transItemID;
		public List<Integer> buyUseDiamond;
	}

	public static class CommonWeaponTaskCFGS implements Stream.IStreamable
	{

		public CommonWeaponTaskCFGS() { }

		public CommonWeaponTaskCFGS(int dayLoopCount)
		{
			this.dayLoopCount = dayLoopCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayLoopCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayLoopCount);
		}

		public int dayLoopCount;
	}

	public static class CommonSpiritCFGS implements Stream.IStreamable
	{

		public CommonSpiritCFGS() { }

		public CommonSpiritCFGS(int jobTotal, int gangTotal, int bulimTotal)
		{
			this.jobTotal = jobTotal;
			this.gangTotal = gangTotal;
			this.bulimTotal = bulimTotal;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			jobTotal = is.popInteger();
			gangTotal = is.popInteger();
			bulimTotal = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(jobTotal);
			os.pushInteger(gangTotal);
			os.pushInteger(bulimTotal);
		}

		public int jobTotal;
		public int gangTotal;
		public int bulimTotal;
	}

	public static class CommonAuctionCFGS implements Stream.IStreamable
	{

		public CommonAuctionCFGS() { }

		public CommonAuctionCFGS(int needLvl, int openTime, int consignTime, List<Integer> expandCost, 
		                         float minPercent, float maxPercent, int freeAmount, float taxRate, 
		                         float buyCreditRate, int putOnDelayMin, int putOnDelayMax, Set<Integer> costCreditTypes)
		{
			this.needLvl = needLvl;
			this.openTime = openTime;
			this.consignTime = consignTime;
			this.expandCost = expandCost;
			this.minPercent = minPercent;
			this.maxPercent = maxPercent;
			this.freeAmount = freeAmount;
			this.taxRate = taxRate;
			this.buyCreditRate = buyCreditRate;
			this.putOnDelayMin = putOnDelayMin;
			this.putOnDelayMax = putOnDelayMax;
			this.costCreditTypes = costCreditTypes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			needLvl = is.popInteger();
			openTime = is.popInteger();
			consignTime = is.popInteger();
			expandCost = is.popIntegerList();
			minPercent = is.popFloat();
			maxPercent = is.popFloat();
			freeAmount = is.popInteger();
			taxRate = is.popFloat();
			buyCreditRate = is.popFloat();
			putOnDelayMin = is.popInteger();
			putOnDelayMax = is.popInteger();
			costCreditTypes = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(needLvl);
			os.pushInteger(openTime);
			os.pushInteger(consignTime);
			os.pushIntegerList(expandCost);
			os.pushFloat(minPercent);
			os.pushFloat(maxPercent);
			os.pushInteger(freeAmount);
			os.pushFloat(taxRate);
			os.pushFloat(buyCreditRate);
			os.pushInteger(putOnDelayMin);
			os.pushInteger(putOnDelayMax);
			os.pushIntegerSet(costCreditTypes);
		}

		public int needLvl;
		public int openTime;
		public int consignTime;
		public List<Integer> expandCost;
		public float minPercent;
		public float maxPercent;
		public int freeAmount;
		public float taxRate;
		public float buyCreditRate;
		public int putOnDelayMin;
		public int putOnDelayMax;
		public Set<Integer> costCreditTypes;
	}

	public static class CommonSectMailCFGS implements Stream.IStreamable
	{

		public CommonSectMailCFGS() { }

		public CommonSectMailCFGS(int freeCount, int noFreeUseMoney, int maxContentLength)
		{
			this.freeCount = freeCount;
			this.noFreeUseMoney = noFreeUseMoney;
			this.maxContentLength = maxContentLength;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			freeCount = is.popInteger();
			noFreeUseMoney = is.popInteger();
			maxContentLength = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(freeCount);
			os.pushInteger(noFreeUseMoney);
			os.pushInteger(maxContentLength);
		}

		public int freeCount;
		public int noFreeUseMoney;
		public int maxContentLength;
	}

	public static class CommonFriendCFGS implements Stream.IStreamable
	{

		public CommonFriendCFGS() { }

		public CommonFriendCFGS(int cdTime, int itemId, int maxCount, int heartLength, 
		                        int addExp, int focusDown, int focusUp, int focusDefault, 
		                        int focusAdd, int maxEnemies, int maxBlackList)
		{
			this.cdTime = cdTime;
			this.itemId = itemId;
			this.maxCount = maxCount;
			this.heartLength = heartLength;
			this.addExp = addExp;
			this.focusDown = focusDown;
			this.focusUp = focusUp;
			this.focusDefault = focusDefault;
			this.focusAdd = focusAdd;
			this.maxEnemies = maxEnemies;
			this.maxBlackList = maxBlackList;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cdTime = is.popInteger();
			itemId = is.popInteger();
			maxCount = is.popInteger();
			heartLength = is.popInteger();
			addExp = is.popInteger();
			focusDown = is.popInteger();
			focusUp = is.popInteger();
			focusDefault = is.popInteger();
			focusAdd = is.popInteger();
			maxEnemies = is.popInteger();
			maxBlackList = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cdTime);
			os.pushInteger(itemId);
			os.pushInteger(maxCount);
			os.pushInteger(heartLength);
			os.pushInteger(addExp);
			os.pushInteger(focusDown);
			os.pushInteger(focusUp);
			os.pushInteger(focusDefault);
			os.pushInteger(focusAdd);
			os.pushInteger(maxEnemies);
			os.pushInteger(maxBlackList);
		}

		public int cdTime;
		public int itemId;
		public int maxCount;
		public int heartLength;
		public int addExp;
		public int focusDown;
		public int focusUp;
		public int focusDefault;
		public int focusAdd;
		public int maxEnemies;
		public int maxBlackList;
	}

	public static class CommonFlowerCFGS implements Stream.IStreamable
	{

		public CommonFlowerCFGS() { }

		public CommonFlowerCFGS(int flowerId, int giveMaxCount, int giveShowCount, int acceptMaxCount, 
		                        int acceptShowCount)
		{
			this.flowerId = flowerId;
			this.giveMaxCount = giveMaxCount;
			this.giveShowCount = giveShowCount;
			this.acceptMaxCount = acceptMaxCount;
			this.acceptShowCount = acceptShowCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			flowerId = is.popInteger();
			giveMaxCount = is.popInteger();
			giveShowCount = is.popInteger();
			acceptMaxCount = is.popInteger();
			acceptShowCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(flowerId);
			os.pushInteger(giveMaxCount);
			os.pushInteger(giveShowCount);
			os.pushInteger(acceptMaxCount);
			os.pushInteger(acceptShowCount);
		}

		public int flowerId;
		public int giveMaxCount;
		public int giveShowCount;
		public int acceptMaxCount;
		public int acceptShowCount;
	}

	public static class CommonTitleCFGS implements Stream.IStreamable
	{

		public CommonTitleCFGS() { }

		public CommonTitleCFGS(int timedTitleCnt, int initTitle, List<Integer> unlockCfgs)
		{
			this.timedTitleCnt = timedTitleCnt;
			this.initTitle = initTitle;
			this.unlockCfgs = unlockCfgs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			timedTitleCnt = is.popInteger();
			initTitle = is.popInteger();
			unlockCfgs = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(timedTitleCnt);
			os.pushInteger(initTitle);
			os.pushIntegerList(unlockCfgs);
		}

		public int timedTitleCnt;
		public int initTitle;
		public List<Integer> unlockCfgs;
	}

	public static class CommonGameSetCFGS implements Stream.IStreamable
	{

		public CommonGameSetCFGS() { }

		public CommonGameSetCFGS(int wrongPosLeaveCD)
		{
			this.wrongPosLeaveCD = wrongPosLeaveCD;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			wrongPosLeaveCD = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(wrongPosLeaveCD);
		}

		public int wrongPosLeaveCD;
	}

	public static class CommonTaskCFGS implements Stream.IStreamable
	{

		public CommonTaskCFGS() { }

		public CommonTaskCFGS(int npcRadius)
		{
			this.npcRadius = npcRadius;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcRadius = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(npcRadius);
		}

		public int npcRadius;
	}

	public static class CommonMonsterExpCFGS implements Stream.IStreamable
	{

		public CommonMonsterExpCFGS() { }

		public CommonMonsterExpCFGS(Set<Integer> effectMapTyps, List<MonsterExp> dLvls)
		{
			this.effectMapTyps = effectMapTyps;
			this.dLvls = dLvls;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectMapTyps = is.popIntegerTreeSet();
			dLvls = is.popList(MonsterExp.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(effectMapTyps);
			os.pushList(dLvls);
		}

		public Set<Integer> effectMapTyps;
		public List<MonsterExp> dLvls;
	}

	public static class CommonRenameCFGS implements Stream.IStreamable
	{

		public CommonRenameCFGS() { }

		public CommonRenameCFGS(int diamondCost, int costItemID)
		{
			this.diamondCost = diamondCost;
			this.costItemID = costItemID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			diamondCost = is.popInteger();
			costItemID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(diamondCost);
			os.pushInteger(costItemID);
		}

		public int diamondCost;
		public int costItemID;
	}

	public static class CommonWarehouseCFGS implements Stream.IStreamable
	{

		public CommonWarehouseCFGS() { }

		public CommonWarehouseCFGS(int expandCells, List<Integer> priavetExpandCost, int priavetExpandSize, List<Integer> publicExpandCost, 
		                           int publicExpandSize, int privateDefaultSize, int privateUnlockPrice, int unlockLevel)
		{
			this.expandCells = expandCells;
			this.priavetExpandCost = priavetExpandCost;
			this.priavetExpandSize = priavetExpandSize;
			this.publicExpandCost = publicExpandCost;
			this.publicExpandSize = publicExpandSize;
			this.privateDefaultSize = privateDefaultSize;
			this.privateUnlockPrice = privateUnlockPrice;
			this.unlockLevel = unlockLevel;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			expandCells = is.popInteger();
			priavetExpandCost = is.popIntegerList();
			priavetExpandSize = is.popInteger();
			publicExpandCost = is.popIntegerList();
			publicExpandSize = is.popInteger();
			privateDefaultSize = is.popInteger();
			privateUnlockPrice = is.popInteger();
			unlockLevel = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(expandCells);
			os.pushIntegerList(priavetExpandCost);
			os.pushInteger(priavetExpandSize);
			os.pushIntegerList(publicExpandCost);
			os.pushInteger(publicExpandSize);
			os.pushInteger(privateDefaultSize);
			os.pushInteger(privateUnlockPrice);
			os.pushInteger(unlockLevel);
		}

		public int expandCells;
		public List<Integer> priavetExpandCost;
		public int priavetExpandSize;
		public List<Integer> publicExpandCost;
		public int publicExpandSize;
		public int privateDefaultSize;
		public int privateUnlockPrice;
		public int unlockLevel;
	}

	public static class CommonFuncOpenCFGS implements Stream.IStreamable
	{

		public CommonFuncOpenCFGS() { }

		public CommonFuncOpenCFGS(int equipRefine)
		{
			this.equipRefine = equipRefine;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			equipRefine = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(equipRefine);
		}

		public int equipRefine;
	}

	public static class CommonSocialActionCFGS implements Stream.IStreamable
	{

		public CommonSocialActionCFGS() { }

		public CommonSocialActionCFGS(int autoActionTime, int autoActionID, Set<Integer> effectMapTypes)
		{
			this.autoActionTime = autoActionTime;
			this.autoActionID = autoActionID;
			this.effectMapTypes = effectMapTypes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			autoActionTime = is.popInteger();
			autoActionID = is.popInteger();
			effectMapTypes = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(autoActionTime);
			os.pushInteger(autoActionID);
			os.pushIntegerSet(effectMapTypes);
		}

		public int autoActionTime;
		public int autoActionID;
		public Set<Integer> effectMapTypes;
	}

	public static class MonsterExp implements Stream.IStreamable
	{

		public MonsterExp() { }

		public MonsterExp(int floor, float percent)
		{
			this.floor = floor;
			this.percent = percent;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			floor = is.popInteger();
			percent = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(floor);
			os.pushFloat(percent);
		}

		public int floor;
		public float percent;
	}

	public static class FriendGiveRewardCFGS implements Stream.IStreamable
	{

		public FriendGiveRewardCFGS() { }

		public FriendGiveRewardCFGS(int level, int exp, int count)
		{
			this.level = level;
			this.exp = exp;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			exp = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(exp);
			os.pushInteger(count);
		}

		public int level;
		public int exp;
		public int count;
	}

	public static class CharmCFGS implements Stream.IStreamable
	{

		public CharmCFGS() { }

		public CharmCFGS(int level, int charmReq, int maleTitle, int femaleTitle)
		{
			this.level = level;
			this.charmReq = charmReq;
			this.maleTitle = maleTitle;
			this.femaleTitle = femaleTitle;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			charmReq = is.popInteger();
			maleTitle = is.popInteger();
			femaleTitle = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(charmReq);
			os.pushInteger(maleTitle);
			os.pushInteger(femaleTitle);
		}

		public int level;
		public int charmReq;
		public int maleTitle;
		public int femaleTitle;
	}

	public static class FriendHeadCFGS implements Stream.IStreamable
	{

		public FriendHeadCFGS() { }

		public FriendHeadCFGS(int headId, int openType, int arg1, int arg2)
		{
			this.headId = headId;
			this.openType = openType;
			this.arg1 = arg1;
			this.arg2 = arg2;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			headId = is.popInteger();
			openType = is.popInteger();
			arg1 = is.popInteger();
			arg2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(headId);
			os.pushInteger(openType);
			os.pushInteger(arg1);
			os.pushInteger(arg2);
		}

		public int headId;
		public int openType;
		public int arg1;
		public int arg2;
	}

	public static class CritCFGS implements Stream.IStreamable
	{

		public CritCFGS() { }

		public CritCFGS(int multiplier, float probability)
		{
			this.multiplier = multiplier;
			this.probability = probability;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			multiplier = is.popInteger();
			probability = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(multiplier);
			os.pushFloat(probability);
		}

		public int multiplier;
		public float probability;
	}

	public static class DropItemCFGS implements Stream.IStreamable
	{

		public DropItemCFGS() { }

		public DropItemCFGS(int did, int count, int weight)
		{
			this.did = did;
			this.count = count;
			this.weight = weight;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			did = is.popInteger();
			count = is.popInteger();
			weight = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(did);
			os.pushInteger(count);
			os.pushInteger(weight);
		}

		public int did;
		public int count;
		public int weight;
	}

	public static class DropBuffCFGS implements Stream.IStreamable
	{

		public DropBuffCFGS() { }

		public DropBuffCFGS(int mapBuffID, float probability)
		{
			this.mapBuffID = mapBuffID;
			this.probability = probability;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapBuffID = is.popInteger();
			probability = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapBuffID);
			os.pushFloat(probability);
		}

		public int mapBuffID;
		public float probability;
	}

	public static class FixedDropTableCFGS implements Stream.IStreamable
	{

		public FixedDropTableCFGS() { }

		public FixedDropTableCFGS(int id, List<DropEntity> drops)
		{
			this.id = id;
			this.drops = drops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			drops = is.popList(DropEntity.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(drops);
		}

		public int id;
		public List<DropEntity> drops;
	}

	public static class RandomDropTableCFGS implements Stream.IStreamable
	{

		public RandomDropTableCFGS() { }

		public RandomDropTableCFGS(int id, List<DropEntry> drops)
		{
			this.id = id;
			this.drops = drops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			drops = is.popList(DropEntry.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(drops);
		}

		public int id;
		public List<DropEntry> drops;
	}

	public static class NoDuplicateDropTableCFGS implements Stream.IStreamable
	{

		public NoDuplicateDropTableCFGS() { }

		public NoDuplicateDropTableCFGS(int id, int weightSum, List<DropItemCFGS> drops)
		{
			this.id = id;
			this.weightSum = weightSum;
			this.drops = drops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			weightSum = is.popInteger();
			drops = is.popList(DropItemCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(weightSum);
			os.pushList(drops);
		}

		public int id;
		public int weightSum;
		public List<DropItemCFGS> drops;
	}

	public static class BuffDropTableCFGS implements Stream.IStreamable
	{

		public BuffDropTableCFGS() { }

		public BuffDropTableCFGS(int id, List<DropBuffCFGS> drops)
		{
			this.id = id;
			this.drops = drops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			drops = is.popList(DropBuffCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(drops);
		}

		public int id;
		public List<DropBuffCFGS> drops;
	}

	public static class ClassTypeDrop implements Stream.IStreamable
	{

		public ClassTypeDrop() { }

		public ClassTypeDrop(List<Integer> dropIDs, int count)
		{
			this.dropIDs = dropIDs;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dropIDs = is.popIntegerList();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(dropIDs);
			os.pushInteger(count);
		}

		public List<Integer> dropIDs;
		public int count;
	}

	public static class PropAwardCFGS implements Stream.IStreamable
	{

		public PropAwardCFGS() { }

		public PropAwardCFGS(int id, int conditionType, int conditionArg, List<AttrCFGS> awards)
		{
			this.id = id;
			this.conditionType = conditionType;
			this.conditionArg = conditionArg;
			this.awards = awards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			conditionType = is.popInteger();
			conditionArg = is.popInteger();
			awards = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(conditionType);
			os.pushInteger(conditionArg);
			os.pushList(awards);
		}

		public int id;
		public int conditionType;
		public int conditionArg;
		public List<AttrCFGS> awards;
	}

	public static class TrapExpandedCFGS implements Stream.IStreamable
	{

		public TrapExpandedCFGS() { }

		public TrapExpandedCFGS(int id, int groupID, Vector3 position, Vector3F rotation, 
		                        int orgState, int trigType, List<Integer> relateTraps, List<Integer> stateCondition, 
		                        int delay, int fixedDropID, int randomDropID, int randomDropCnt, 
		                        List<Integer> paras, int monsterOdds, int monsterID, int monsterCount, 
		                        int buffDropID, int buffDropCnt, int dropRadius, int skillID)
		{
			this.id = id;
			this.groupID = groupID;
			this.position = position;
			this.rotation = rotation;
			this.orgState = orgState;
			this.trigType = trigType;
			this.relateTraps = relateTraps;
			this.stateCondition = stateCondition;
			this.delay = delay;
			this.fixedDropID = fixedDropID;
			this.randomDropID = randomDropID;
			this.randomDropCnt = randomDropCnt;
			this.paras = paras;
			this.monsterOdds = monsterOdds;
			this.monsterID = monsterID;
			this.monsterCount = monsterCount;
			this.buffDropID = buffDropID;
			this.buffDropCnt = buffDropCnt;
			this.dropRadius = dropRadius;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			groupID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			orgState = is.popInteger();
			trigType = is.popInteger();
			relateTraps = is.popIntegerList();
			stateCondition = is.popIntegerList();
			delay = is.popInteger();
			fixedDropID = is.popInteger();
			randomDropID = is.popInteger();
			randomDropCnt = is.popInteger();
			paras = is.popIntegerList();
			monsterOdds = is.popInteger();
			monsterID = is.popInteger();
			monsterCount = is.popInteger();
			buffDropID = is.popInteger();
			buffDropCnt = is.popInteger();
			dropRadius = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(groupID);
			os.push(position);
			os.push(rotation);
			os.pushInteger(orgState);
			os.pushInteger(trigType);
			os.pushIntegerList(relateTraps);
			os.pushIntegerList(stateCondition);
			os.pushInteger(delay);
			os.pushInteger(fixedDropID);
			os.pushInteger(randomDropID);
			os.pushInteger(randomDropCnt);
			os.pushIntegerList(paras);
			os.pushInteger(monsterOdds);
			os.pushInteger(monsterID);
			os.pushInteger(monsterCount);
			os.pushInteger(buffDropID);
			os.pushInteger(buffDropCnt);
			os.pushInteger(dropRadius);
			os.pushInteger(skillID);
		}

		public int id;
		public int groupID;
		public Vector3 position;
		public Vector3F rotation;
		public int orgState;
		public int trigType;
		public List<Integer> relateTraps;
		public List<Integer> stateCondition;
		public int delay;
		public int fixedDropID;
		public int randomDropID;
		public int randomDropCnt;
		public List<Integer> paras;
		public int monsterOdds;
		public int monsterID;
		public int monsterCount;
		public int buffDropID;
		public int buffDropCnt;
		public int dropRadius;
		public int skillID;
	}

	public static class WeaponCFGS implements Stream.IStreamable
	{

		public WeaponCFGS() { }

		public WeaponCFGS(int id, int useId, int useCount, List<Integer> skills, 
		                  int initStar, int conTime, int varyType, int varyParam, 
		                  byte isUSkillOpen, int addMaster, int maxMaster, int dodge, 
		                  List<WeaponLevelCFGS> weaponLevel, List<WeaponStarCFGS> weaponStar, List<WeaponSkillLevelUpGroupCFGS> skillLevelUpCost, List<WeaponTalentCFGS> talents, 
		                  List<MutiDummyGoods> talentLevelUpCost, Set<Integer> uniqueSkills)
		{
			this.id = id;
			this.useId = useId;
			this.useCount = useCount;
			this.skills = skills;
			this.initStar = initStar;
			this.conTime = conTime;
			this.varyType = varyType;
			this.varyParam = varyParam;
			this.isUSkillOpen = isUSkillOpen;
			this.addMaster = addMaster;
			this.maxMaster = maxMaster;
			this.dodge = dodge;
			this.weaponLevel = weaponLevel;
			this.weaponStar = weaponStar;
			this.skillLevelUpCost = skillLevelUpCost;
			this.talents = talents;
			this.talentLevelUpCost = talentLevelUpCost;
			this.uniqueSkills = uniqueSkills;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			useId = is.popInteger();
			useCount = is.popInteger();
			skills = is.popIntegerList();
			initStar = is.popInteger();
			conTime = is.popInteger();
			varyType = is.popInteger();
			varyParam = is.popInteger();
			isUSkillOpen = is.popByte();
			addMaster = is.popInteger();
			maxMaster = is.popInteger();
			dodge = is.popInteger();
			weaponLevel = is.popList(WeaponLevelCFGS.class);
			weaponStar = is.popList(WeaponStarCFGS.class);
			skillLevelUpCost = is.popList(WeaponSkillLevelUpGroupCFGS.class);
			talents = is.popList(WeaponTalentCFGS.class);
			talentLevelUpCost = is.popList(MutiDummyGoods.class);
			uniqueSkills = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(useId);
			os.pushInteger(useCount);
			os.pushIntegerList(skills);
			os.pushInteger(initStar);
			os.pushInteger(conTime);
			os.pushInteger(varyType);
			os.pushInteger(varyParam);
			os.pushByte(isUSkillOpen);
			os.pushInteger(addMaster);
			os.pushInteger(maxMaster);
			os.pushInteger(dodge);
			os.pushList(weaponLevel);
			os.pushList(weaponStar);
			os.pushList(skillLevelUpCost);
			os.pushList(talents);
			os.pushList(talentLevelUpCost);
			os.pushIntegerSet(uniqueSkills);
		}

		public int id;
		public int useId;
		public int useCount;
		public List<Integer> skills;
		public int initStar;
		public int conTime;
		public int varyType;
		public int varyParam;
		public byte isUSkillOpen;
		public int addMaster;
		public int maxMaster;
		public int dodge;
		public List<WeaponLevelCFGS> weaponLevel;
		public List<WeaponStarCFGS> weaponStar;
		public List<WeaponSkillLevelUpGroupCFGS> skillLevelUpCost;
		public List<WeaponTalentCFGS> talents;
		public List<MutiDummyGoods> talentLevelUpCost;
		public Set<Integer> uniqueSkills;
	}

	public static class WeaponUniqueSkillCFGS implements Stream.IStreamable
	{

		public WeaponUniqueSkillCFGS() { }

		public WeaponUniqueSkillCFGS(int id, int type, int effectType, int param1, 
		                             int param2, int param3, int param4, int param5, 
		                             int param6, int fullStarParam1, int fullStarParam2, int fullStarParam3, 
		                             int fullStarParam4, int fullStarParam5, int fullStarParam6)
		{
			this.id = id;
			this.type = type;
			this.effectType = effectType;
			this.param1 = param1;
			this.param2 = param2;
			this.param3 = param3;
			this.param4 = param4;
			this.param5 = param5;
			this.param6 = param6;
			this.fullStarParam1 = fullStarParam1;
			this.fullStarParam2 = fullStarParam2;
			this.fullStarParam3 = fullStarParam3;
			this.fullStarParam4 = fullStarParam4;
			this.fullStarParam5 = fullStarParam5;
			this.fullStarParam6 = fullStarParam6;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			effectType = is.popInteger();
			param1 = is.popInteger();
			param2 = is.popInteger();
			param3 = is.popInteger();
			param4 = is.popInteger();
			param5 = is.popInteger();
			param6 = is.popInteger();
			fullStarParam1 = is.popInteger();
			fullStarParam2 = is.popInteger();
			fullStarParam3 = is.popInteger();
			fullStarParam4 = is.popInteger();
			fullStarParam5 = is.popInteger();
			fullStarParam6 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(effectType);
			os.pushInteger(param1);
			os.pushInteger(param2);
			os.pushInteger(param3);
			os.pushInteger(param4);
			os.pushInteger(param5);
			os.pushInteger(param6);
			os.pushInteger(fullStarParam1);
			os.pushInteger(fullStarParam2);
			os.pushInteger(fullStarParam3);
			os.pushInteger(fullStarParam4);
			os.pushInteger(fullStarParam5);
			os.pushInteger(fullStarParam6);
		}

		public int id;
		public int type;
		public int effectType;
		public int param1;
		public int param2;
		public int param3;
		public int param4;
		public int param5;
		public int param6;
		public int fullStarParam1;
		public int fullStarParam2;
		public int fullStarParam3;
		public int fullStarParam4;
		public int fullStarParam5;
		public int fullStarParam6;
	}

	public static class AttrCFGS implements Stream.IStreamable
	{

		public AttrCFGS() { }

		public AttrCFGS(int id, int value)
		{
			this.id = id;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
		}

		public int id;
		public int value;
	}

	public static class AttrListCFGS implements Stream.IStreamable
	{

		public AttrListCFGS() { }

		public AttrListCFGS(int id, List<Integer> values)
		{
			this.id = id;
			this.values = values;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			values = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerList(values);
		}

		public int id;
		public List<Integer> values;
	}

	public static class WeaponLevelCFGS implements Stream.IStreamable
	{

		public WeaponLevelCFGS() { }

		public WeaponLevelCFGS(int id, int level, int exp, int roleLvlReq, 
		                       int useDiamond, List<AttrCFGS> attrs, List<Integer> items, Map<Integer, Integer> useDiamonds)
		{
			this.id = id;
			this.level = level;
			this.exp = exp;
			this.roleLvlReq = roleLvlReq;
			this.useDiamond = useDiamond;
			this.attrs = attrs;
			this.items = items;
			this.useDiamonds = useDiamonds;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			exp = is.popInteger();
			roleLvlReq = is.popInteger();
			useDiamond = is.popInteger();
			attrs = is.popList(AttrCFGS.class);
			items = is.popIntegerList();
			useDiamonds = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(exp);
			os.pushInteger(roleLvlReq);
			os.pushInteger(useDiamond);
			os.pushList(attrs);
			os.pushIntegerList(items);
			os.pushIntegerIntegerMap(useDiamonds);
		}

		public int id;
		public int level;
		public int exp;
		public int roleLvlReq;
		public int useDiamond;
		public List<AttrCFGS> attrs;
		public List<Integer> items;
		public Map<Integer, Integer> useDiamonds;
	}

	public static class WeaponStarCFGS implements Stream.IStreamable
	{

		public WeaponStarCFGS() { }

		public WeaponStarCFGS(int id, int star, int useId, int useCount, 
		                      int replaceId, int quality, List<Integer> skillLvl, List<AttrCFGS> attrs, 
		                      int proficiencyAdd)
		{
			this.id = id;
			this.star = star;
			this.useId = useId;
			this.useCount = useCount;
			this.replaceId = replaceId;
			this.quality = quality;
			this.skillLvl = skillLvl;
			this.attrs = attrs;
			this.proficiencyAdd = proficiencyAdd;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			star = is.popInteger();
			useId = is.popInteger();
			useCount = is.popInteger();
			replaceId = is.popInteger();
			quality = is.popInteger();
			skillLvl = is.popIntegerList();
			attrs = is.popList(AttrCFGS.class);
			proficiencyAdd = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(star);
			os.pushInteger(useId);
			os.pushInteger(useCount);
			os.pushInteger(replaceId);
			os.pushInteger(quality);
			os.pushIntegerList(skillLvl);
			os.pushList(attrs);
			os.pushInteger(proficiencyAdd);
		}

		public int id;
		public int star;
		public int useId;
		public int useCount;
		public int replaceId;
		public int quality;
		public List<Integer> skillLvl;
		public List<AttrCFGS> attrs;
		public int proficiencyAdd;
	}

	public static class WeaponSkillLevelUpGroupCFGS implements Stream.IStreamable
	{

		public WeaponSkillLevelUpGroupCFGS() { }

		public WeaponSkillLevelUpGroupCFGS(List<WeaponSkillLevelUpCFGS> costGroup)
		{
			this.costGroup = costGroup;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			costGroup = is.popList(WeaponSkillLevelUpCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(costGroup);
		}

		public List<WeaponSkillLevelUpCFGS> costGroup;
	}

	public static class WeaponSkillLevelUpCFGS implements Stream.IStreamable
	{

		public WeaponSkillLevelUpCFGS() { }

		public WeaponSkillLevelUpCFGS(int weaponLevelNeed, Map<Integer, MutiDummyGoods> costs)
		{
			this.weaponLevelNeed = weaponLevelNeed;
			this.costs = costs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponLevelNeed = is.popInteger();
			costs = is.popIntegerTreeMap(MutiDummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponLevelNeed);
			os.pushIntegerMap(costs);
		}

		public int weaponLevelNeed;
		public Map<Integer, MutiDummyGoods> costs;
	}

	public static class WeaponTalentCFGS implements Stream.IStreamable
	{

		public WeaponTalentCFGS() { }

		public WeaponTalentCFGS(int weaponId, int talentIndex, int preTalentPoint, int maxUsePoint, 
		                        byte talentEffectType, int talentPropId, byte talentPropType, List<Integer> talentPropNum, 
		                        List<Integer> talentTriggerList)
		{
			this.weaponId = weaponId;
			this.talentIndex = talentIndex;
			this.preTalentPoint = preTalentPoint;
			this.maxUsePoint = maxUsePoint;
			this.talentEffectType = talentEffectType;
			this.talentPropId = talentPropId;
			this.talentPropType = talentPropType;
			this.talentPropNum = talentPropNum;
			this.talentTriggerList = talentTriggerList;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponId = is.popInteger();
			talentIndex = is.popInteger();
			preTalentPoint = is.popInteger();
			maxUsePoint = is.popInteger();
			talentEffectType = is.popByte();
			talentPropId = is.popInteger();
			talentPropType = is.popByte();
			talentPropNum = is.popIntegerList();
			talentTriggerList = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponId);
			os.pushInteger(talentIndex);
			os.pushInteger(preTalentPoint);
			os.pushInteger(maxUsePoint);
			os.pushByte(talentEffectType);
			os.pushInteger(talentPropId);
			os.pushByte(talentPropType);
			os.pushIntegerList(talentPropNum);
			os.pushIntegerList(talentTriggerList);
		}

		public int weaponId;
		public int talentIndex;
		public int preTalentPoint;
		public int maxUsePoint;
		public byte talentEffectType;
		public int talentPropId;
		public byte talentPropType;
		public List<Integer> talentPropNum;
		public List<Integer> talentTriggerList;
	}

	public static class FlagBattleCFGS implements Stream.IStreamable
	{

		public FlagBattleCFGS() { }

		public FlagBattleCFGS(int startTime, int endTime, int sectMinLevel, int roleMinLevel, 
		                      int sectMaxFlagNum, int getFlagSecond, int roleRewardLevel, int roleRewardTime, 
		                      int sectVitRewardTime, int roleJoinSectTimeLimit, int activityLine, Map<Integer, FlagBattleMapCFGS> flags, 
		                      Map<Integer, SpawnPointCFGS> flagMonsters)
		{
			this.startTime = startTime;
			this.endTime = endTime;
			this.sectMinLevel = sectMinLevel;
			this.roleMinLevel = roleMinLevel;
			this.sectMaxFlagNum = sectMaxFlagNum;
			this.getFlagSecond = getFlagSecond;
			this.roleRewardLevel = roleRewardLevel;
			this.roleRewardTime = roleRewardTime;
			this.sectVitRewardTime = sectVitRewardTime;
			this.roleJoinSectTimeLimit = roleJoinSectTimeLimit;
			this.activityLine = activityLine;
			this.flags = flags;
			this.flagMonsters = flagMonsters;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			startTime = is.popInteger();
			endTime = is.popInteger();
			sectMinLevel = is.popInteger();
			roleMinLevel = is.popInteger();
			sectMaxFlagNum = is.popInteger();
			getFlagSecond = is.popInteger();
			roleRewardLevel = is.popInteger();
			roleRewardTime = is.popInteger();
			sectVitRewardTime = is.popInteger();
			roleJoinSectTimeLimit = is.popInteger();
			activityLine = is.popInteger();
			flags = is.popIntegerTreeMap(FlagBattleMapCFGS.class);
			flagMonsters = is.popIntegerTreeMap(SpawnPointCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(startTime);
			os.pushInteger(endTime);
			os.pushInteger(sectMinLevel);
			os.pushInteger(roleMinLevel);
			os.pushInteger(sectMaxFlagNum);
			os.pushInteger(getFlagSecond);
			os.pushInteger(roleRewardLevel);
			os.pushInteger(roleRewardTime);
			os.pushInteger(sectVitRewardTime);
			os.pushInteger(roleJoinSectTimeLimit);
			os.pushInteger(activityLine);
			os.pushIntegerMap(flags);
			os.pushIntegerMap(flagMonsters);
		}

		public int startTime;
		public int endTime;
		public int sectMinLevel;
		public int roleMinLevel;
		public int sectMaxFlagNum;
		public int getFlagSecond;
		public int roleRewardLevel;
		public int roleRewardTime;
		public int sectVitRewardTime;
		public int roleJoinSectTimeLimit;
		public int activityLine;
		public Map<Integer, FlagBattleMapCFGS> flags;
		public Map<Integer, SpawnPointCFGS> flagMonsters;
	}

	public static class FlagBattleMapCFGS implements Stream.IStreamable
	{

		public FlagBattleMapCFGS() { }

		public FlagBattleMapCFGS(int mapId, Vector3 flagPoint, int flagId, List<Integer> monsterPointId, 
		                         int timeSectVitReward, List<DummyGoods> timeRoleReward, int endSectVitReward, List<DummyGoods> endRoleReward)
		{
			this.mapId = mapId;
			this.flagPoint = flagPoint;
			this.flagId = flagId;
			this.monsterPointId = monsterPointId;
			this.timeSectVitReward = timeSectVitReward;
			this.timeRoleReward = timeRoleReward;
			this.endSectVitReward = endSectVitReward;
			this.endRoleReward = endRoleReward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			if( flagPoint == null )
				flagPoint = new Vector3();
			is.pop(flagPoint);
			flagId = is.popInteger();
			monsterPointId = is.popIntegerList();
			timeSectVitReward = is.popInteger();
			timeRoleReward = is.popList(DummyGoods.class);
			endSectVitReward = is.popInteger();
			endRoleReward = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.push(flagPoint);
			os.pushInteger(flagId);
			os.pushIntegerList(monsterPointId);
			os.pushInteger(timeSectVitReward);
			os.pushList(timeRoleReward);
			os.pushInteger(endSectVitReward);
			os.pushList(endRoleReward);
		}

		public int mapId;
		public Vector3 flagPoint;
		public int flagId;
		public List<Integer> monsterPointId;
		public int timeSectVitReward;
		public List<DummyGoods> timeRoleReward;
		public int endSectVitReward;
		public List<DummyGoods> endRoleReward;
	}

	public static class WeaponTalentCommonCFGS implements Stream.IStreamable
	{

		public WeaponTalentCommonCFGS() { }

		public WeaponTalentCommonCFGS(int resetPointItemId, int resetPointItemNum, int defaultTalentPoint)
		{
			this.resetPointItemId = resetPointItemId;
			this.resetPointItemNum = resetPointItemNum;
			this.defaultTalentPoint = defaultTalentPoint;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			resetPointItemId = is.popInteger();
			resetPointItemNum = is.popInteger();
			defaultTalentPoint = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(resetPointItemId);
			os.pushInteger(resetPointItemNum);
			os.pushInteger(defaultTalentPoint);
		}

		public int resetPointItemId;
		public int resetPointItemNum;
		public int defaultTalentPoint;
	}

	public static class MutiDummyGoods implements Stream.IStreamable
	{

		public MutiDummyGoods() { }

		public MutiDummyGoods(Map<Integer, Integer> dummyGoods)
		{
			this.dummyGoods = dummyGoods;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dummyGoods = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(dummyGoods);
		}

		public Map<Integer, Integer> dummyGoods;
	}

	public static class PetCFGS implements Stream.IStreamable
	{

		public PetCFGS() { }

		public PetCFGS(int id, ClassRolePropCFGS hp, ClassRolePropCFGS atkN, ClassRolePropCFGS defN, 
		               ClassRolePropCFGS atr, ClassRolePropCFGS ctr, ClassRolePropCFGS acrN, ClassRolePropCFGS tou, 
		               ClassRolePropCFGS atkA, double spiritInherit, double weaponInherit, List<Integer> attacks, 
		               List<Integer> skills, List<Integer> attackList, int speed, int radius, 
		               int checkRange, List<PetBreakSkillCondCFGS> breakSkills, List<PetMakeCondCFGS> makeConds, int makeConsumeItem, 
		               int makeConsumeItemCount, int hurtAddSP, List<PetStarCFGS> stars, int minStupidTime, 
		               int maxStupidTime, int maxFollowDistance, int maxBehaviorRadius, int minBehaviorRadius, 
		               int lifeMapCopyId, int startLevel, int startStar, List<PetSkillLevelUpGroupCFGS> petSkill, 
		               List<DummyGoods> spiritLearnCost)
		{
			this.id = id;
			this.hp = hp;
			this.atkN = atkN;
			this.defN = defN;
			this.atr = atr;
			this.ctr = ctr;
			this.acrN = acrN;
			this.tou = tou;
			this.atkA = atkA;
			this.spiritInherit = spiritInherit;
			this.weaponInherit = weaponInherit;
			this.attacks = attacks;
			this.skills = skills;
			this.attackList = attackList;
			this.speed = speed;
			this.radius = radius;
			this.checkRange = checkRange;
			this.breakSkills = breakSkills;
			this.makeConds = makeConds;
			this.makeConsumeItem = makeConsumeItem;
			this.makeConsumeItemCount = makeConsumeItemCount;
			this.hurtAddSP = hurtAddSP;
			this.stars = stars;
			this.minStupidTime = minStupidTime;
			this.maxStupidTime = maxStupidTime;
			this.maxFollowDistance = maxFollowDistance;
			this.maxBehaviorRadius = maxBehaviorRadius;
			this.minBehaviorRadius = minBehaviorRadius;
			this.lifeMapCopyId = lifeMapCopyId;
			this.startLevel = startLevel;
			this.startStar = startStar;
			this.petSkill = petSkill;
			this.spiritLearnCost = spiritLearnCost;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( hp == null )
				hp = new ClassRolePropCFGS();
			is.pop(hp);
			if( atkN == null )
				atkN = new ClassRolePropCFGS();
			is.pop(atkN);
			if( defN == null )
				defN = new ClassRolePropCFGS();
			is.pop(defN);
			if( atr == null )
				atr = new ClassRolePropCFGS();
			is.pop(atr);
			if( ctr == null )
				ctr = new ClassRolePropCFGS();
			is.pop(ctr);
			if( acrN == null )
				acrN = new ClassRolePropCFGS();
			is.pop(acrN);
			if( tou == null )
				tou = new ClassRolePropCFGS();
			is.pop(tou);
			if( atkA == null )
				atkA = new ClassRolePropCFGS();
			is.pop(atkA);
			spiritInherit = is.popDouble();
			weaponInherit = is.popDouble();
			attacks = is.popIntegerList();
			skills = is.popIntegerList();
			attackList = is.popIntegerList();
			speed = is.popInteger();
			radius = is.popInteger();
			checkRange = is.popInteger();
			breakSkills = is.popList(PetBreakSkillCondCFGS.class);
			makeConds = is.popList(PetMakeCondCFGS.class);
			makeConsumeItem = is.popInteger();
			makeConsumeItemCount = is.popInteger();
			hurtAddSP = is.popInteger();
			stars = is.popList(PetStarCFGS.class);
			minStupidTime = is.popInteger();
			maxStupidTime = is.popInteger();
			maxFollowDistance = is.popInteger();
			maxBehaviorRadius = is.popInteger();
			minBehaviorRadius = is.popInteger();
			lifeMapCopyId = is.popInteger();
			startLevel = is.popInteger();
			startStar = is.popInteger();
			petSkill = is.popList(PetSkillLevelUpGroupCFGS.class);
			spiritLearnCost = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(hp);
			os.push(atkN);
			os.push(defN);
			os.push(atr);
			os.push(ctr);
			os.push(acrN);
			os.push(tou);
			os.push(atkA);
			os.pushDouble(spiritInherit);
			os.pushDouble(weaponInherit);
			os.pushIntegerList(attacks);
			os.pushIntegerList(skills);
			os.pushIntegerList(attackList);
			os.pushInteger(speed);
			os.pushInteger(radius);
			os.pushInteger(checkRange);
			os.pushList(breakSkills);
			os.pushList(makeConds);
			os.pushInteger(makeConsumeItem);
			os.pushInteger(makeConsumeItemCount);
			os.pushInteger(hurtAddSP);
			os.pushList(stars);
			os.pushInteger(minStupidTime);
			os.pushInteger(maxStupidTime);
			os.pushInteger(maxFollowDistance);
			os.pushInteger(maxBehaviorRadius);
			os.pushInteger(minBehaviorRadius);
			os.pushInteger(lifeMapCopyId);
			os.pushInteger(startLevel);
			os.pushInteger(startStar);
			os.pushList(petSkill);
			os.pushList(spiritLearnCost);
		}

		public int id;
		public ClassRolePropCFGS hp;
		public ClassRolePropCFGS atkN;
		public ClassRolePropCFGS defN;
		public ClassRolePropCFGS atr;
		public ClassRolePropCFGS ctr;
		public ClassRolePropCFGS acrN;
		public ClassRolePropCFGS tou;
		public ClassRolePropCFGS atkA;
		public double spiritInherit;
		public double weaponInherit;
		public List<Integer> attacks;
		public List<Integer> skills;
		public List<Integer> attackList;
		public int speed;
		public int radius;
		public int checkRange;
		public List<PetBreakSkillCondCFGS> breakSkills;
		public List<PetMakeCondCFGS> makeConds;
		public int makeConsumeItem;
		public int makeConsumeItemCount;
		public int hurtAddSP;
		public List<PetStarCFGS> stars;
		public int minStupidTime;
		public int maxStupidTime;
		public int maxFollowDistance;
		public int maxBehaviorRadius;
		public int minBehaviorRadius;
		public int lifeMapCopyId;
		public int startLevel;
		public int startStar;
		public List<PetSkillLevelUpGroupCFGS> petSkill;
		public List<DummyGoods> spiritLearnCost;
	}

	public static class PetSpiritGroupCFGS implements Stream.IStreamable
	{

		public PetSpiritGroupCFGS() { }

		public PetSpiritGroupCFGS(List<PetSpiritCFGS> spirits)
		{
			this.spirits = spirits;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spirits = is.popList(PetSpiritCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(spirits);
		}

		public List<PetSpiritCFGS> spirits;
	}

	public static class PetSpiritCFGS implements Stream.IStreamable
	{

		public PetSpiritCFGS() { }

		public PetSpiritCFGS(float weight, List<DummyGoods> cost, int effectType, List<Integer> params)
		{
			this.weight = weight;
			this.cost = cost;
			this.effectType = effectType;
			this.params = params;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weight = is.popFloat();
			cost = is.popList(DummyGoods.class);
			effectType = is.popInteger();
			params = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(weight);
			os.pushList(cost);
			os.pushInteger(effectType);
			os.pushIntegerList(params);
		}

		public float weight;
		public List<DummyGoods> cost;
		public int effectType;
		public List<Integer> params;
	}

	public static class PetExploitCFGS implements Stream.IStreamable
	{

		public PetExploitCFGS() { }

		public PetExploitCFGS(List<Integer> exploits)
		{
			this.exploits = exploits;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			exploits = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(exploits);
		}

		public List<Integer> exploits;
	}

	public static class PetSkillLevelUpGroupCFGS implements Stream.IStreamable
	{

		public PetSkillLevelUpGroupCFGS() { }

		public PetSkillLevelUpGroupCFGS(List<PetSkillLevelUpCFGS> costGroup)
		{
			this.costGroup = costGroup;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			costGroup = is.popList(PetSkillLevelUpCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(costGroup);
		}

		public List<PetSkillLevelUpCFGS> costGroup;
	}

	public static class PetSkillLevelUpCFGS implements Stream.IStreamable
	{

		public PetSkillLevelUpCFGS() { }

		public PetSkillLevelUpCFGS(int petLevelNeed, Map<Integer, MutiDummyGoods> costs)
		{
			this.petLevelNeed = petLevelNeed;
			this.costs = costs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petLevelNeed = is.popInteger();
			costs = is.popIntegerTreeMap(MutiDummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petLevelNeed);
			os.pushIntegerMap(costs);
		}

		public int petLevelNeed;
		public Map<Integer, MutiDummyGoods> costs;
	}

	public static class PetCoPracticeGroupCFGS implements Stream.IStreamable
	{

		public PetCoPracticeGroupCFGS() { }

		public PetCoPracticeGroupCFGS(int petid, List<PetCoPracticeCFGS> petCoPracticeCFGSs)
		{
			this.petid = petid;
			this.petCoPracticeCFGSs = petCoPracticeCFGSs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petid = is.popInteger();
			petCoPracticeCFGSs = is.popList(PetCoPracticeCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petid);
			os.pushList(petCoPracticeCFGSs);
		}

		public int petid;
		public List<PetCoPracticeCFGS> petCoPracticeCFGSs;
	}

	public static class PetCoPracticeCFGS implements Stream.IStreamable
	{

		public PetCoPracticeCFGS() { }

		public PetCoPracticeCFGS(int petid, int level, int needExp, List<Integer> skillLevels, 
		                         List<Integer> tasklist, List<AttrCFGS> attris)
		{
			this.petid = petid;
			this.level = level;
			this.needExp = needExp;
			this.skillLevels = skillLevels;
			this.tasklist = tasklist;
			this.attris = attris;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petid = is.popInteger();
			level = is.popInteger();
			needExp = is.popInteger();
			skillLevels = is.popIntegerList();
			tasklist = is.popIntegerList();
			attris = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petid);
			os.pushInteger(level);
			os.pushInteger(needExp);
			os.pushIntegerList(skillLevels);
			os.pushIntegerList(tasklist);
			os.pushList(attris);
		}

		public int petid;
		public int level;
		public int needExp;
		public List<Integer> skillLevels;
		public List<Integer> tasklist;
		public List<AttrCFGS> attris;
	}

	public static class PetBreakSkillCondCFGS implements Stream.IStreamable
	{

		public PetBreakSkillCondCFGS() { }

		public PetBreakSkillCondCFGS(int id, int value)
		{
			this.id = id;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
		}

		public int id;
		public int value;
	}

	public static class PetMakeCondCFGS implements Stream.IStreamable
	{

		public PetMakeCondCFGS() { }

		public PetMakeCondCFGS(int type, int value)
		{
			this.type = type;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(value);
		}

		public int type;
		public int value;
	}

	public static class PetBriefCFGS implements Stream.IStreamable
	{

		public PetBriefCFGS() { }

		public PetBriefCFGS(int id, int lvl)
		{
			this.id = id;
			this.lvl = lvl;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			lvl = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(lvl);
		}

		public int id;
		public int lvl;
	}

	public static class PetLvlCFGS implements Stream.IStreamable
	{

		public PetLvlCFGS() { }

		public PetLvlCFGS(int lvl, int exp, int buyDiamond, List<Integer> costItems, 
		                  Map<Integer, Integer> buyDiamonds)
		{
			this.lvl = lvl;
			this.exp = exp;
			this.buyDiamond = buyDiamond;
			this.costItems = costItems;
			this.buyDiamonds = buyDiamonds;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvl = is.popInteger();
			exp = is.popInteger();
			buyDiamond = is.popInteger();
			costItems = is.popIntegerList();
			buyDiamonds = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvl);
			os.pushInteger(exp);
			os.pushInteger(buyDiamond);
			os.pushIntegerList(costItems);
			os.pushIntegerIntegerMap(buyDiamonds);
		}

		public int lvl;
		public int exp;
		public int buyDiamond;
		public List<Integer> costItems;
		public Map<Integer, Integer> buyDiamonds;
	}

	public static class PetFriendCFGS implements Stream.IStreamable
	{

		public PetFriendCFGS() { }

		public PetFriendCFGS(int level, int friendliness, List<Integer> skillLvls, Map<Integer, PetTaskGroupCFGS> tasks)
		{
			this.level = level;
			this.friendliness = friendliness;
			this.skillLvls = skillLvls;
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			friendliness = is.popInteger();
			skillLvls = is.popIntegerList();
			tasks = is.popIntegerTreeMap(PetTaskGroupCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(friendliness);
			os.pushIntegerList(skillLvls);
			os.pushIntegerMap(tasks);
		}

		public int level;
		public int friendliness;
		public List<Integer> skillLvls;
		public Map<Integer, PetTaskGroupCFGS> tasks;
	}

	// >
	public static class PetTaskGroupCFGS implements Stream.IStreamable
	{

		public PetTaskGroupCFGS() { }

		public PetTaskGroupCFGS(int groupId, List<Integer> tasks)
		{
			this.groupId = groupId;
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
			tasks = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
			os.pushIntegerList(tasks);
		}

		public int groupId;
		public List<Integer> tasks;
	}

	public static class PetTransformCFGS implements Stream.IStreamable
	{

		public PetTransformCFGS() { }

		public PetTransformCFGS(int tlevel, int mustTransfromLvl, List<DummyGoods> costItems, int cond, 
		                        int value)
		{
			this.tlevel = tlevel;
			this.mustTransfromLvl = mustTransfromLvl;
			this.costItems = costItems;
			this.cond = cond;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tlevel = is.popInteger();
			mustTransfromLvl = is.popInteger();
			costItems = is.popList(DummyGoods.class);
			cond = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(tlevel);
			os.pushInteger(mustTransfromLvl);
			os.pushList(costItems);
			os.pushInteger(cond);
			os.pushInteger(value);
		}

		public int tlevel;
		public int mustTransfromLvl;
		public List<DummyGoods> costItems;
		public int cond;
		public int value;
	}

	public static class PetStarCFGS implements Stream.IStreamable
	{

		public PetStarCFGS() { }

		public PetStarCFGS(int id, int star, int itemId, int itemCount, 
		                   int replaceId, int harmUpRate, int harmDownRate, double spiritRate, 
		                   double weaponRate)
		{
			this.id = id;
			this.star = star;
			this.itemId = itemId;
			this.itemCount = itemCount;
			this.replaceId = replaceId;
			this.harmUpRate = harmUpRate;
			this.harmDownRate = harmDownRate;
			this.spiritRate = spiritRate;
			this.weaponRate = weaponRate;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			star = is.popInteger();
			itemId = is.popInteger();
			itemCount = is.popInteger();
			replaceId = is.popInteger();
			harmUpRate = is.popInteger();
			harmDownRate = is.popInteger();
			spiritRate = is.popDouble();
			weaponRate = is.popDouble();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(star);
			os.pushInteger(itemId);
			os.pushInteger(itemCount);
			os.pushInteger(replaceId);
			os.pushInteger(harmUpRate);
			os.pushInteger(harmDownRate);
			os.pushDouble(spiritRate);
			os.pushDouble(weaponRate);
		}

		public int id;
		public int star;
		public int itemId;
		public int itemCount;
		public int replaceId;
		public int harmUpRate;
		public int harmDownRate;
		public double spiritRate;
		public double weaponRate;
	}

	public static class PetBreakSkillCFGS implements Stream.IStreamable
	{

		public PetBreakSkillCFGS() { }

		public PetBreakSkillCFGS(int skillId, List<PetBreakSkillLevelCFGS> levels)
		{
			this.skillId = skillId;
			this.levels = levels;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
			levels = is.popList(PetBreakSkillLevelCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
			os.pushList(levels);
		}

		public int skillId;
		public List<PetBreakSkillLevelCFGS> levels;
	}

	public static class PetBreakSkillLevelCFGS implements Stream.IStreamable
	{

		public PetBreakSkillLevelCFGS() { }

		public PetBreakSkillLevelCFGS(int skillId, int level, int type, int harmUpRate, 
		                              int harmDownRate, double spiritRate, double weaponRate, int itemId, 
		                              int itemCount, int replaceId)
		{
			this.skillId = skillId;
			this.level = level;
			this.type = type;
			this.harmUpRate = harmUpRate;
			this.harmDownRate = harmDownRate;
			this.spiritRate = spiritRate;
			this.weaponRate = weaponRate;
			this.itemId = itemId;
			this.itemCount = itemCount;
			this.replaceId = replaceId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
			level = is.popInteger();
			type = is.popInteger();
			harmUpRate = is.popInteger();
			harmDownRate = is.popInteger();
			spiritRate = is.popDouble();
			weaponRate = is.popDouble();
			itemId = is.popInteger();
			itemCount = is.popInteger();
			replaceId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
			os.pushInteger(level);
			os.pushInteger(type);
			os.pushInteger(harmUpRate);
			os.pushInteger(harmDownRate);
			os.pushDouble(spiritRate);
			os.pushDouble(weaponRate);
			os.pushInteger(itemId);
			os.pushInteger(itemCount);
			os.pushInteger(replaceId);
		}

		public int skillId;
		public int level;
		public int type;
		public int harmUpRate;
		public int harmDownRate;
		public double spiritRate;
		public double weaponRate;
		public int itemId;
		public int itemCount;
		public int replaceId;
	}

	public static class TransformCFGS implements Stream.IStreamable
	{

		public TransformCFGS() { }

		public TransformCFGS(int id, int transformLevel, int type, int lvlReq, 
		                     Set<Integer> skills, List<DummyGoods> cost, List<AttrCFGS> attrs, List<Integer> spirits)
		{
			this.id = id;
			this.transformLevel = transformLevel;
			this.type = type;
			this.lvlReq = lvlReq;
			this.skills = skills;
			this.cost = cost;
			this.attrs = attrs;
			this.spirits = spirits;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			transformLevel = is.popInteger();
			type = is.popInteger();
			lvlReq = is.popInteger();
			skills = is.popIntegerTreeSet();
			cost = is.popList(DummyGoods.class);
			attrs = is.popList(AttrCFGS.class);
			spirits = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(transformLevel);
			os.pushInteger(type);
			os.pushInteger(lvlReq);
			os.pushIntegerSet(skills);
			os.pushList(cost);
			os.pushList(attrs);
			os.pushIntegerList(spirits);
		}

		public int id;
		public int transformLevel;
		public int type;
		public int lvlReq;
		public Set<Integer> skills;
		public List<DummyGoods> cost;
		public List<AttrCFGS> attrs;
		public List<Integer> spirits;
	}

	public static class BWTransformCFGS implements Stream.IStreamable
	{

		public BWTransformCFGS() { }

		public BWTransformCFGS(int id, int transformLevel, Map<Integer, TransformCFGS> transforms)
		{
			this.id = id;
			this.transformLevel = transformLevel;
			this.transforms = transforms;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			transformLevel = is.popInteger();
			transforms = is.popIntegerTreeMap(TransformCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(transformLevel);
			os.pushIntegerMap(transforms);
		}

		public int id;
		public int transformLevel;
		public Map<Integer, TransformCFGS> transforms;
	}

	public static class CLassTransformCFGS implements Stream.IStreamable
	{

		public CLassTransformCFGS() { }

		public CLassTransformCFGS(int id, List<BWTransformCFGS> transforms, Map<Integer, Integer> skills)
		{
			this.id = id;
			this.transforms = transforms;
			this.skills = skills;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			transforms = is.popList(BWTransformCFGS.class);
			skills = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(transforms);
			os.pushIntegerIntegerMap(skills);
		}

		public int id;
		public List<BWTransformCFGS> transforms;
		public Map<Integer, Integer> skills;
	}

	public static class SectAuthorityCFGS implements Stream.IStreamable
	{

		public SectAuthorityCFGS() { }

		public SectAuthorityCFGS(int id, List<Integer> authority, int accept, int sectBoss, 
		                         int sectMapCopy, int sectUpLvl, int sectFight, int manorFight, 
		                         int creed, int mapReset, int mapOpen, int sectMail, 
		                         int qqGroup, int changeSectName, int changeSectIcon, int changeJoinLvl, 
		                         int applyOption, int kickMember)
		{
			this.id = id;
			this.authority = authority;
			this.accept = accept;
			this.sectBoss = sectBoss;
			this.sectMapCopy = sectMapCopy;
			this.sectUpLvl = sectUpLvl;
			this.sectFight = sectFight;
			this.manorFight = manorFight;
			this.creed = creed;
			this.mapReset = mapReset;
			this.mapOpen = mapOpen;
			this.sectMail = sectMail;
			this.qqGroup = qqGroup;
			this.changeSectName = changeSectName;
			this.changeSectIcon = changeSectIcon;
			this.changeJoinLvl = changeJoinLvl;
			this.applyOption = applyOption;
			this.kickMember = kickMember;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			authority = is.popIntegerList();
			accept = is.popInteger();
			sectBoss = is.popInteger();
			sectMapCopy = is.popInteger();
			sectUpLvl = is.popInteger();
			sectFight = is.popInteger();
			manorFight = is.popInteger();
			creed = is.popInteger();
			mapReset = is.popInteger();
			mapOpen = is.popInteger();
			sectMail = is.popInteger();
			qqGroup = is.popInteger();
			changeSectName = is.popInteger();
			changeSectIcon = is.popInteger();
			changeJoinLvl = is.popInteger();
			applyOption = is.popInteger();
			kickMember = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerList(authority);
			os.pushInteger(accept);
			os.pushInteger(sectBoss);
			os.pushInteger(sectMapCopy);
			os.pushInteger(sectUpLvl);
			os.pushInteger(sectFight);
			os.pushInteger(manorFight);
			os.pushInteger(creed);
			os.pushInteger(mapReset);
			os.pushInteger(mapOpen);
			os.pushInteger(sectMail);
			os.pushInteger(qqGroup);
			os.pushInteger(changeSectName);
			os.pushInteger(changeSectIcon);
			os.pushInteger(changeJoinLvl);
			os.pushInteger(applyOption);
			os.pushInteger(kickMember);
		}

		public int id;
		public List<Integer> authority;
		public int accept;
		public int sectBoss;
		public int sectMapCopy;
		public int sectUpLvl;
		public int sectFight;
		public int manorFight;
		public int creed;
		public int mapReset;
		public int mapOpen;
		public int sectMail;
		public int qqGroup;
		public int changeSectName;
		public int changeSectIcon;
		public int changeJoinLvl;
		public int applyOption;
		public int kickMember;
	}

	public static class SectJobTypeCFGS implements Stream.IStreamable
	{

		public SectJobTypeCFGS() { }

		public SectJobTypeCFGS(int job, int count)
		{
			this.job = job;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			job = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(job);
			os.pushInteger(count);
		}

		public int job;
		public int count;
	}

	public static class SectUpLevelCFGS implements Stream.IStreamable
	{

		public SectUpLevelCFGS() { }

		public SectUpLevelCFGS(int lvl, int roleCount, int upTimes, int diamond, 
		                       int deputyCount, int elderCount, int active, List<Integer> skillOpenLevel, 
		                       int dayKickTimes)
		{
			this.lvl = lvl;
			this.roleCount = roleCount;
			this.upTimes = upTimes;
			this.diamond = diamond;
			this.deputyCount = deputyCount;
			this.elderCount = elderCount;
			this.active = active;
			this.skillOpenLevel = skillOpenLevel;
			this.dayKickTimes = dayKickTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvl = is.popInteger();
			roleCount = is.popInteger();
			upTimes = is.popInteger();
			diamond = is.popInteger();
			deputyCount = is.popInteger();
			elderCount = is.popInteger();
			active = is.popInteger();
			skillOpenLevel = is.popIntegerList();
			dayKickTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvl);
			os.pushInteger(roleCount);
			os.pushInteger(upTimes);
			os.pushInteger(diamond);
			os.pushInteger(deputyCount);
			os.pushInteger(elderCount);
			os.pushInteger(active);
			os.pushIntegerList(skillOpenLevel);
			os.pushInteger(dayKickTimes);
		}

		public int lvl;
		public int roleCount;
		public int upTimes;
		public int diamond;
		public int deputyCount;
		public int elderCount;
		public int active;
		public List<Integer> skillOpenLevel;
		public int dayKickTimes;
	}

	public static class SectItemCFGS implements Stream.IStreamable
	{

		public SectItemCFGS() { }

		public SectItemCFGS(int id, int value, int count)
		{
			this.id = id;
			this.value = value;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushInteger(count);
		}

		public int id;
		public int value;
		public int count;
	}

	public static class SectSkillCFGS implements Stream.IStreamable
	{

		public SectSkillCFGS() { }

		public SectSkillCFGS(int id, int lvl, Map<Integer, SectItemCFGS> items, int attri, 
		                     int attriValue, int sectLvl, int expcoinRateRaise)
		{
			this.id = id;
			this.lvl = lvl;
			this.items = items;
			this.attri = attri;
			this.attriValue = attriValue;
			this.sectLvl = sectLvl;
			this.expcoinRateRaise = expcoinRateRaise;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			lvl = is.popInteger();
			items = is.popIntegerTreeMap(SectItemCFGS.class);
			attri = is.popInteger();
			attriValue = is.popInteger();
			sectLvl = is.popInteger();
			expcoinRateRaise = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(lvl);
			os.pushIntegerMap(items);
			os.pushInteger(attri);
			os.pushInteger(attriValue);
			os.pushInteger(sectLvl);
			os.pushInteger(expcoinRateRaise);
		}

		public int id;
		public int lvl;
		public Map<Integer, SectItemCFGS> items;
		public int attri;
		public int attriValue;
		public int sectLvl;
		public int expcoinRateRaise;
	}

	public static class SectIconCFGS implements Stream.IStreamable
	{

		public SectIconCFGS() { }

		public SectIconCFGS(int iconId, int open)
		{
			this.iconId = iconId;
			this.open = open;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			iconId = is.popInteger();
			open = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(iconId);
			os.pushInteger(open);
		}

		public int iconId;
		public int open;
	}

	public static class SectGroupSkillCFGS implements Stream.IStreamable
	{

		public SectGroupSkillCFGS() { }

		public SectGroupSkillCFGS(int groupId, List<SectSkillCFGS> sectGroupSkill)
		{
			this.groupId = groupId;
			this.sectGroupSkill = sectGroupSkill;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
			sectGroupSkill = is.popList(SectSkillCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
			os.pushList(sectGroupSkill);
		}

		public int groupId;
		public List<SectSkillCFGS> sectGroupSkill;
	}

	public static class SectWorshipCFGS implements Stream.IStreamable
	{

		public SectWorshipCFGS() { }

		public SectWorshipCFGS(int type, int vipOpenLimit, int moneyType, int moneyValue, 
		                       int maxWorshipedTimes)
		{
			this.type = type;
			this.vipOpenLimit = vipOpenLimit;
			this.moneyType = moneyType;
			this.moneyValue = moneyValue;
			this.maxWorshipedTimes = maxWorshipedTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			vipOpenLimit = is.popInteger();
			moneyType = is.popInteger();
			moneyValue = is.popInteger();
			maxWorshipedTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(vipOpenLimit);
			os.pushInteger(moneyType);
			os.pushInteger(moneyValue);
			os.pushInteger(maxWorshipedTimes);
		}

		public int type;
		public int vipOpenLimit;
		public int moneyType;
		public int moneyValue;
		public int maxWorshipedTimes;
	}

	public static class SectWorshipExpCFGS implements Stream.IStreamable
	{

		public SectWorshipExpCFGS() { }

		public SectWorshipExpCFGS(int level, List<Integer> exps, List<Integer> offers)
		{
			this.level = level;
			this.exps = exps;
			this.offers = offers;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			exps = is.popIntegerList();
			offers = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushIntegerList(exps);
			os.pushIntegerList(offers);
		}

		public int level;
		public List<Integer> exps;
		public List<Integer> offers;
	}

	public static class FightSPCFGS implements Stream.IStreamable
	{

		public FightSPCFGS() { }

		public FightSPCFGS(int id, List<Integer> conditions, int odds, List<Integer> oddsSpirit, 
		                   int maxLays, int duration, int affectType, List<AttrListCFGS> attrs, 
		                   int relatedSkill, int reamlAddOdds, int spiritID)
		{
			this.id = id;
			this.conditions = conditions;
			this.odds = odds;
			this.oddsSpirit = oddsSpirit;
			this.maxLays = maxLays;
			this.duration = duration;
			this.affectType = affectType;
			this.attrs = attrs;
			this.relatedSkill = relatedSkill;
			this.reamlAddOdds = reamlAddOdds;
			this.spiritID = spiritID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			conditions = is.popIntegerList();
			odds = is.popInteger();
			oddsSpirit = is.popIntegerList();
			maxLays = is.popInteger();
			duration = is.popInteger();
			affectType = is.popInteger();
			attrs = is.popList(AttrListCFGS.class);
			relatedSkill = is.popInteger();
			reamlAddOdds = is.popInteger();
			spiritID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerList(conditions);
			os.pushInteger(odds);
			os.pushIntegerList(oddsSpirit);
			os.pushInteger(maxLays);
			os.pushInteger(duration);
			os.pushInteger(affectType);
			os.pushList(attrs);
			os.pushInteger(relatedSkill);
			os.pushInteger(reamlAddOdds);
			os.pushInteger(spiritID);
		}

		public int id;
		public List<Integer> conditions;
		public int odds;
		public List<Integer> oddsSpirit;
		public int maxLays;
		public int duration;
		public int affectType;
		public List<AttrListCFGS> attrs;
		public int relatedSkill;
		public int reamlAddOdds;
		public int spiritID;
	}

	public static class BlurCFGS implements Stream.IStreamable
	{

		public BlurCFGS() { }

		public BlurCFGS(int id, List<Integer> maxHPs, List<Integer> atkNs, List<Integer> defNs, 
		                List<Integer> atrs, List<Integer> ctrs, List<Integer> acrNs, List<Integer> tous, 
		                List<Integer> atkAs, List<Integer> atkHs, List<Integer> attacks, List<Integer> skills, 
		                List<Integer> attackList, int speed, int radius, int checkRadius, 
		                int survivalTime, int addMaxHpSpirit, List<Integer> addHps)
		{
			this.id = id;
			this.maxHPs = maxHPs;
			this.atkNs = atkNs;
			this.defNs = defNs;
			this.atrs = atrs;
			this.ctrs = ctrs;
			this.acrNs = acrNs;
			this.tous = tous;
			this.atkAs = atkAs;
			this.atkHs = atkHs;
			this.attacks = attacks;
			this.skills = skills;
			this.attackList = attackList;
			this.speed = speed;
			this.radius = radius;
			this.checkRadius = checkRadius;
			this.survivalTime = survivalTime;
			this.addMaxHpSpirit = addMaxHpSpirit;
			this.addHps = addHps;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			maxHPs = is.popIntegerList();
			atkNs = is.popIntegerList();
			defNs = is.popIntegerList();
			atrs = is.popIntegerList();
			ctrs = is.popIntegerList();
			acrNs = is.popIntegerList();
			tous = is.popIntegerList();
			atkAs = is.popIntegerList();
			atkHs = is.popIntegerList();
			attacks = is.popIntegerList();
			skills = is.popIntegerList();
			attackList = is.popIntegerList();
			speed = is.popInteger();
			radius = is.popInteger();
			checkRadius = is.popInteger();
			survivalTime = is.popInteger();
			addMaxHpSpirit = is.popInteger();
			addHps = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerList(maxHPs);
			os.pushIntegerList(atkNs);
			os.pushIntegerList(defNs);
			os.pushIntegerList(atrs);
			os.pushIntegerList(ctrs);
			os.pushIntegerList(acrNs);
			os.pushIntegerList(tous);
			os.pushIntegerList(atkAs);
			os.pushIntegerList(atkHs);
			os.pushIntegerList(attacks);
			os.pushIntegerList(skills);
			os.pushIntegerList(attackList);
			os.pushInteger(speed);
			os.pushInteger(radius);
			os.pushInteger(checkRadius);
			os.pushInteger(survivalTime);
			os.pushInteger(addMaxHpSpirit);
			os.pushIntegerList(addHps);
		}

		public int id;
		public List<Integer> maxHPs;
		public List<Integer> atkNs;
		public List<Integer> defNs;
		public List<Integer> atrs;
		public List<Integer> ctrs;
		public List<Integer> acrNs;
		public List<Integer> tous;
		public List<Integer> atkAs;
		public List<Integer> atkHs;
		public List<Integer> attacks;
		public List<Integer> skills;
		public List<Integer> attackList;
		public int speed;
		public int radius;
		public int checkRadius;
		public int survivalTime;
		public int addMaxHpSpirit;
		public List<Integer> addHps;
	}

	public static class SectBanquetCFGS implements Stream.IStreamable
	{

		public SectBanquetCFGS() { }

		public SectBanquetCFGS(int type, int moneyType, int moneyValue, int openCount, 
		                       int total, int time, int createSect, int joinVit, 
		                       List<Integer> percent, List<Integer> rate)
		{
			this.type = type;
			this.moneyType = moneyType;
			this.moneyValue = moneyValue;
			this.openCount = openCount;
			this.total = total;
			this.time = time;
			this.createSect = createSect;
			this.joinVit = joinVit;
			this.percent = percent;
			this.rate = rate;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			moneyType = is.popInteger();
			moneyValue = is.popInteger();
			openCount = is.popInteger();
			total = is.popInteger();
			time = is.popInteger();
			createSect = is.popInteger();
			joinVit = is.popInteger();
			percent = is.popIntegerList();
			rate = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(moneyType);
			os.pushInteger(moneyValue);
			os.pushInteger(openCount);
			os.pushInteger(total);
			os.pushInteger(time);
			os.pushInteger(createSect);
			os.pushInteger(joinVit);
			os.pushIntegerList(percent);
			os.pushIntegerList(rate);
		}

		public int type;
		public int moneyType;
		public int moneyValue;
		public int openCount;
		public int total;
		public int time;
		public int createSect;
		public int joinVit;
		public List<Integer> percent;
		public List<Integer> rate;
	}

	public static class DailyTaskCFGS implements Stream.IStreamable
	{

		public DailyTaskCFGS() { }

		public DailyTaskCFGS(int id, int lvlReq, int times, int rewardStartTime, 
		                     int rewardEndTime, float expFactor, List<DummyGoods> rewards)
		{
			this.id = id;
			this.lvlReq = lvlReq;
			this.times = times;
			this.rewardStartTime = rewardStartTime;
			this.rewardEndTime = rewardEndTime;
			this.expFactor = expFactor;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			lvlReq = is.popInteger();
			times = is.popInteger();
			rewardStartTime = is.popInteger();
			rewardEndTime = is.popInteger();
			expFactor = is.popFloat();
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(lvlReq);
			os.pushInteger(times);
			os.pushInteger(rewardStartTime);
			os.pushInteger(rewardEndTime);
			os.pushFloat(expFactor);
			os.pushList(rewards);
		}

		public int id;
		public int lvlReq;
		public int times;
		public int rewardStartTime;
		public int rewardEndTime;
		public float expFactor;
		public List<DummyGoods> rewards;
	}

	public static class QuestionCFGS implements Stream.IStreamable
	{

		public QuestionCFGS() { }

		public QuestionCFGS(int id, int answer)
		{
			this.id = id;
			this.answer = answer;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			answer = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(answer);
		}

		public int id;
		public int answer;
	}

	public static class RandQuestionCFGS implements Stream.IStreamable
	{

		public RandQuestionCFGS() { }

		public RandQuestionCFGS(int id, Set<Integer> questions)
		{
			this.id = id;
			this.questions = questions;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			questions = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerSet(questions);
		}

		public int id;
		public Set<Integer> questions;
	}

	public static class DailyOnlineGiftCFGS implements Stream.IStreamable
	{

		public DailyOnlineGiftCFGS() { }

		public DailyOnlineGiftCFGS(int minute, List<DummyGoods> rewards)
		{
			this.minute = minute;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			minute = is.popInteger();
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(minute);
			os.pushList(rewards);
		}

		public int minute;
		public List<DummyGoods> rewards;
	}

	public static class OfflineExpDistributeCFGS implements Stream.IStreamable
	{

		public OfflineExpDistributeCFGS() { }

		public OfflineExpDistributeCFGS(int type, Map<Integer, Float> id2ExpFactor)
		{
			this.type = type;
			this.id2ExpFactor = id2ExpFactor;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			id2ExpFactor = is.popIntegerFloatHashMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushIntegerFloatMap(id2ExpFactor);
		}

		public int type;
		public Map<Integer, Float> id2ExpFactor;
	}

	public static class OfflineExpCFGS implements Stream.IStreamable
	{

		public OfflineExpCFGS() { }

		public OfflineExpCFGS(int expPerMinute, int maxAccTime, float doubleCostPerMinute, int openLevel, 
		                      int monsterNumPerMin, int funcPointBuyNum, int maxFuncPoint, int dayMaxAccTime, 
		                      List<Integer> buyFuncPointDiamond, Map<Integer, OfflineExpDistributeCFGS> distribute, List<Integer> levelMonster, List<OfflineWizardFuncCFGS> levelFunc)
		{
			this.expPerMinute = expPerMinute;
			this.maxAccTime = maxAccTime;
			this.doubleCostPerMinute = doubleCostPerMinute;
			this.openLevel = openLevel;
			this.monsterNumPerMin = monsterNumPerMin;
			this.funcPointBuyNum = funcPointBuyNum;
			this.maxFuncPoint = maxFuncPoint;
			this.dayMaxAccTime = dayMaxAccTime;
			this.buyFuncPointDiamond = buyFuncPointDiamond;
			this.distribute = distribute;
			this.levelMonster = levelMonster;
			this.levelFunc = levelFunc;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			expPerMinute = is.popInteger();
			maxAccTime = is.popInteger();
			doubleCostPerMinute = is.popFloat();
			openLevel = is.popInteger();
			monsterNumPerMin = is.popInteger();
			funcPointBuyNum = is.popInteger();
			maxFuncPoint = is.popInteger();
			dayMaxAccTime = is.popInteger();
			buyFuncPointDiamond = is.popIntegerList();
			distribute = is.popIntegerHashMap(OfflineExpDistributeCFGS.class);
			levelMonster = is.popIntegerList();
			levelFunc = is.popList(OfflineWizardFuncCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(expPerMinute);
			os.pushInteger(maxAccTime);
			os.pushFloat(doubleCostPerMinute);
			os.pushInteger(openLevel);
			os.pushInteger(monsterNumPerMin);
			os.pushInteger(funcPointBuyNum);
			os.pushInteger(maxFuncPoint);
			os.pushInteger(dayMaxAccTime);
			os.pushIntegerList(buyFuncPointDiamond);
			os.pushIntegerMap(distribute);
			os.pushIntegerList(levelMonster);
			os.pushList(levelFunc);
		}

		public int expPerMinute;
		public int maxAccTime;
		public float doubleCostPerMinute;
		public int openLevel;
		public int monsterNumPerMin;
		public int funcPointBuyNum;
		public int maxFuncPoint;
		public int dayMaxAccTime;
		public List<Integer> buyFuncPointDiamond;
		public Map<Integer, OfflineExpDistributeCFGS> distribute;
		public List<Integer> levelMonster;
		public List<OfflineWizardFuncCFGS> levelFunc;
	}

	public static class OfflineWizardFuncCFGS implements Stream.IStreamable
	{

		public OfflineWizardFuncCFGS() { }

		public OfflineWizardFuncCFGS(int level, int levelUpExp, int offlineCoin, int offlineDrop, 
		                             List<Integer> activitySweep, int offlineExpGet)
		{
			this.level = level;
			this.levelUpExp = levelUpExp;
			this.offlineCoin = offlineCoin;
			this.offlineDrop = offlineDrop;
			this.activitySweep = activitySweep;
			this.offlineExpGet = offlineExpGet;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			levelUpExp = is.popInteger();
			offlineCoin = is.popInteger();
			offlineDrop = is.popInteger();
			activitySweep = is.popIntegerList();
			offlineExpGet = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(levelUpExp);
			os.pushInteger(offlineCoin);
			os.pushInteger(offlineDrop);
			os.pushIntegerList(activitySweep);
			os.pushInteger(offlineExpGet);
		}

		public int level;
		public int levelUpExp;
		public int offlineCoin;
		public int offlineDrop;
		public List<Integer> activitySweep;
		public int offlineExpGet;
	}

	public static class DailyQuizGiftCFGS implements Stream.IStreamable
	{

		public DailyQuizGiftCFGS() { }

		public DailyQuizGiftCFGS(int levelReq, int openTime, int noticeTime, int showTime, 
		                         int maxAnswerTime, int questionsCount, int doubleBonusTimes, int baseBonus, 
		                         int maxRewardRank, int answerQuestionExp, int answerRightExp, List<QuicklyAnswerBonusCFGS> quickBonus, 
		                         List<ContinuousAnswerBonusCFGS> continuousBonus, List<QuizBonusRewardCFGS> bonusReward)
		{
			this.levelReq = levelReq;
			this.openTime = openTime;
			this.noticeTime = noticeTime;
			this.showTime = showTime;
			this.maxAnswerTime = maxAnswerTime;
			this.questionsCount = questionsCount;
			this.doubleBonusTimes = doubleBonusTimes;
			this.baseBonus = baseBonus;
			this.maxRewardRank = maxRewardRank;
			this.answerQuestionExp = answerQuestionExp;
			this.answerRightExp = answerRightExp;
			this.quickBonus = quickBonus;
			this.continuousBonus = continuousBonus;
			this.bonusReward = bonusReward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			levelReq = is.popInteger();
			openTime = is.popInteger();
			noticeTime = is.popInteger();
			showTime = is.popInteger();
			maxAnswerTime = is.popInteger();
			questionsCount = is.popInteger();
			doubleBonusTimes = is.popInteger();
			baseBonus = is.popInteger();
			maxRewardRank = is.popInteger();
			answerQuestionExp = is.popInteger();
			answerRightExp = is.popInteger();
			quickBonus = is.popList(QuicklyAnswerBonusCFGS.class);
			continuousBonus = is.popList(ContinuousAnswerBonusCFGS.class);
			bonusReward = is.popList(QuizBonusRewardCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(levelReq);
			os.pushInteger(openTime);
			os.pushInteger(noticeTime);
			os.pushInteger(showTime);
			os.pushInteger(maxAnswerTime);
			os.pushInteger(questionsCount);
			os.pushInteger(doubleBonusTimes);
			os.pushInteger(baseBonus);
			os.pushInteger(maxRewardRank);
			os.pushInteger(answerQuestionExp);
			os.pushInteger(answerRightExp);
			os.pushList(quickBonus);
			os.pushList(continuousBonus);
			os.pushList(bonusReward);
		}

		public int levelReq;
		public int openTime;
		public int noticeTime;
		public int showTime;
		public int maxAnswerTime;
		public int questionsCount;
		public int doubleBonusTimes;
		public int baseBonus;
		public int maxRewardRank;
		public int answerQuestionExp;
		public int answerRightExp;
		public List<QuicklyAnswerBonusCFGS> quickBonus;
		public List<ContinuousAnswerBonusCFGS> continuousBonus;
		public List<QuizBonusRewardCFGS> bonusReward;
	}

	public static class QuicklyAnswerBonusCFGS implements Stream.IStreamable
	{

		public QuicklyAnswerBonusCFGS() { }

		public QuicklyAnswerBonusCFGS(int timeCostCeil, int bonus)
		{
			this.timeCostCeil = timeCostCeil;
			this.bonus = bonus;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			timeCostCeil = is.popInteger();
			bonus = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(timeCostCeil);
			os.pushInteger(bonus);
		}

		public int timeCostCeil;
		public int bonus;
	}

	public static class ContinuousAnswerBonusCFGS implements Stream.IStreamable
	{

		public ContinuousAnswerBonusCFGS() { }

		public ContinuousAnswerBonusCFGS(int continuousTimesFloor, int bonus)
		{
			this.continuousTimesFloor = continuousTimesFloor;
			this.bonus = bonus;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			continuousTimesFloor = is.popInteger();
			bonus = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(continuousTimesFloor);
			os.pushInteger(bonus);
		}

		public int continuousTimesFloor;
		public int bonus;
	}

	public static class QuizBonusRewardCFGS implements Stream.IStreamable
	{

		public QuizBonusRewardCFGS() { }

		public QuizBonusRewardCFGS(int rankFloor, List<DummyGoods> rewards, int title)
		{
			this.rankFloor = rankFloor;
			this.rewards = rewards;
			this.title = title;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rankFloor = is.popInteger();
			rewards = is.popList(DummyGoods.class);
			title = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rankFloor);
			os.pushList(rewards);
			os.pushInteger(title);
		}

		public int rankFloor;
		public List<DummyGoods> rewards;
		public int title;
	}

	public static class LuckyWheelCFGS implements Stream.IStreamable
	{

		public LuckyWheelCFGS() { }

		public LuckyWheelCFGS(int openAtLevel, int beginTime, int endTime, int dayFreeDrawTimes, 
		                      int dayBuyTimes, List<Integer> buyTimesNeedDiamond, List<LuckyWheelGradeCFGS> gradeList)
		{
			this.openAtLevel = openAtLevel;
			this.beginTime = beginTime;
			this.endTime = endTime;
			this.dayFreeDrawTimes = dayFreeDrawTimes;
			this.dayBuyTimes = dayBuyTimes;
			this.buyTimesNeedDiamond = buyTimesNeedDiamond;
			this.gradeList = gradeList;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			openAtLevel = is.popInteger();
			beginTime = is.popInteger();
			endTime = is.popInteger();
			dayFreeDrawTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
			buyTimesNeedDiamond = is.popIntegerList();
			gradeList = is.popList(LuckyWheelGradeCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(openAtLevel);
			os.pushInteger(beginTime);
			os.pushInteger(endTime);
			os.pushInteger(dayFreeDrawTimes);
			os.pushInteger(dayBuyTimes);
			os.pushIntegerList(buyTimesNeedDiamond);
			os.pushList(gradeList);
		}

		public int openAtLevel;
		public int beginTime;
		public int endTime;
		public int dayFreeDrawTimes;
		public int dayBuyTimes;
		public List<Integer> buyTimesNeedDiamond;
		public List<LuckyWheelGradeCFGS> gradeList;
	}

	public static class LuckyWheelGradeCFGS implements Stream.IStreamable
	{

		public LuckyWheelGradeCFGS() { }

		public LuckyWheelGradeCFGS(int gradeId, int levelCeil, List<LuckyWheelRewardsCFGS> rewards)
		{
			this.gradeId = gradeId;
			this.levelCeil = levelCeil;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gradeId = is.popInteger();
			levelCeil = is.popInteger();
			rewards = is.popList(LuckyWheelRewardsCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(gradeId);
			os.pushInteger(levelCeil);
			os.pushList(rewards);
		}

		public int gradeId;
		public int levelCeil;
		public List<LuckyWheelRewardsCFGS> rewards;
	}

	public static class LuckyWheelRewardsCFGS implements Stream.IStreamable
	{

		public LuckyWheelRewardsCFGS() { }

		public LuckyWheelRewardsCFGS(int id, List<LuckyWheelItemCFGS> items)
		{
			this.id = id;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			items = is.popList(LuckyWheelItemCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(items);
		}

		public int id;
		public List<LuckyWheelItemCFGS> items;
	}

	public static class LuckyWheelItemCFGS implements Stream.IStreamable
	{

		public LuckyWheelItemCFGS() { }

		public LuckyWheelItemCFGS(DummyGoods reward, int weight)
		{
			this.reward = reward;
			this.weight = weight;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( reward == null )
				reward = new DummyGoods();
			is.pop(reward);
			weight = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(reward);
			os.pushInteger(weight);
		}

		public DummyGoods reward;
		public int weight;
	}

	public static class RedEnvelopeCFGS implements Stream.IStreamable
	{

		public RedEnvelopeCFGS() { }

		public RedEnvelopeCFGS(int beginTime, int endTime, List<Integer> checkInterval, int checkThreshold, 
		                       float overlimitPercent, float firstHalfPercent, float secondHalfPercent, int openLevel, 
		                       int dayEmptyGiftTimes, int emptyGiftId, List<RedEnvelopeLevelCFGS> levelData)
		{
			this.beginTime = beginTime;
			this.endTime = endTime;
			this.checkInterval = checkInterval;
			this.checkThreshold = checkThreshold;
			this.overlimitPercent = overlimitPercent;
			this.firstHalfPercent = firstHalfPercent;
			this.secondHalfPercent = secondHalfPercent;
			this.openLevel = openLevel;
			this.dayEmptyGiftTimes = dayEmptyGiftTimes;
			this.emptyGiftId = emptyGiftId;
			this.levelData = levelData;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			beginTime = is.popInteger();
			endTime = is.popInteger();
			checkInterval = is.popIntegerList();
			checkThreshold = is.popInteger();
			overlimitPercent = is.popFloat();
			firstHalfPercent = is.popFloat();
			secondHalfPercent = is.popFloat();
			openLevel = is.popInteger();
			dayEmptyGiftTimes = is.popInteger();
			emptyGiftId = is.popInteger();
			levelData = is.popList(RedEnvelopeLevelCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(beginTime);
			os.pushInteger(endTime);
			os.pushIntegerList(checkInterval);
			os.pushInteger(checkThreshold);
			os.pushFloat(overlimitPercent);
			os.pushFloat(firstHalfPercent);
			os.pushFloat(secondHalfPercent);
			os.pushInteger(openLevel);
			os.pushInteger(dayEmptyGiftTimes);
			os.pushInteger(emptyGiftId);
			os.pushList(levelData);
		}

		public int beginTime;
		public int endTime;
		public List<Integer> checkInterval;
		public int checkThreshold;
		public float overlimitPercent;
		public float firstHalfPercent;
		public float secondHalfPercent;
		public int openLevel;
		public int dayEmptyGiftTimes;
		public int emptyGiftId;
		public List<RedEnvelopeLevelCFGS> levelData;
	}

	public static class ActivityChallengeTypeCFGS implements Stream.IStreamable
	{

		public ActivityChallengeTypeCFGS() { }

		public ActivityChallengeTypeCFGS(int id, int type, int arg)
		{
			this.id = id;
			this.type = type;
			this.arg = arg;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			arg = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(arg);
		}

		public int id;
		public int type;
		public int arg;
	}

	public static class RedEnvelopeLevelCFGS implements Stream.IStreamable
	{

		public RedEnvelopeLevelCFGS() { }

		public RedEnvelopeLevelCFGS(int payAmount, int count, int minDiamond, int maxDiamond, 
		                            int lifeTime, int rollNoticeId)
		{
			this.payAmount = payAmount;
			this.count = count;
			this.minDiamond = minDiamond;
			this.maxDiamond = maxDiamond;
			this.lifeTime = lifeTime;
			this.rollNoticeId = rollNoticeId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			payAmount = is.popInteger();
			count = is.popInteger();
			minDiamond = is.popInteger();
			maxDiamond = is.popInteger();
			lifeTime = is.popInteger();
			rollNoticeId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(payAmount);
			os.pushInteger(count);
			os.pushInteger(minDiamond);
			os.pushInteger(maxDiamond);
			os.pushInteger(lifeTime);
			os.pushInteger(rollNoticeId);
		}

		public int payAmount;
		public int count;
		public int minDiamond;
		public int maxDiamond;
		public int lifeTime;
		public int rollNoticeId;
	}

	public static class DIYSkillBaseCFGS implements Stream.IStreamable
	{

		public DIYSkillBaseCFGS() { }

		public DIYSkillBaseCFGS(int proficiencyLvl, int needProficiency, int dayUseTimes, int totalSavvy, 
		                        Map<Integer, Integer> investLimits, byte haseChase, int chaseCount, int chaseSelectWeight, 
		                        DamageCFGS damageArg1, DamageCFGS damageArg2, DamageCFGS atrDecrease, DamageCFGS acrDecrease, 
		                        List<DamageCFGS> damages, ParaCFGS cd, ParaCFGS addSP, Map<Integer, ParaCFGS> scopes, 
		                        ParaCFGS buffOdds, Map<Integer, ParaCFGS> controlLoopTimes, Map<Integer, ParaCFGS> controlValues, Map<Integer, ParaCFGS> breakLoopTimes, 
		                        Map<Integer, ParaCFGS> breakValues, Map<Integer, ParaCFGS> unrealLoopTimes, Map<Integer, ParaCFGS> unrealValues)
		{
			this.proficiencyLvl = proficiencyLvl;
			this.needProficiency = needProficiency;
			this.dayUseTimes = dayUseTimes;
			this.totalSavvy = totalSavvy;
			this.investLimits = investLimits;
			this.haseChase = haseChase;
			this.chaseCount = chaseCount;
			this.chaseSelectWeight = chaseSelectWeight;
			this.damageArg1 = damageArg1;
			this.damageArg2 = damageArg2;
			this.atrDecrease = atrDecrease;
			this.acrDecrease = acrDecrease;
			this.damages = damages;
			this.cd = cd;
			this.addSP = addSP;
			this.scopes = scopes;
			this.buffOdds = buffOdds;
			this.controlLoopTimes = controlLoopTimes;
			this.controlValues = controlValues;
			this.breakLoopTimes = breakLoopTimes;
			this.breakValues = breakValues;
			this.unrealLoopTimes = unrealLoopTimes;
			this.unrealValues = unrealValues;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			proficiencyLvl = is.popInteger();
			needProficiency = is.popInteger();
			dayUseTimes = is.popInteger();
			totalSavvy = is.popInteger();
			investLimits = is.popIntegerIntegerTreeMap();
			haseChase = is.popByte();
			chaseCount = is.popInteger();
			chaseSelectWeight = is.popInteger();
			if( damageArg1 == null )
				damageArg1 = new DamageCFGS();
			is.pop(damageArg1);
			if( damageArg2 == null )
				damageArg2 = new DamageCFGS();
			is.pop(damageArg2);
			if( atrDecrease == null )
				atrDecrease = new DamageCFGS();
			is.pop(atrDecrease);
			if( acrDecrease == null )
				acrDecrease = new DamageCFGS();
			is.pop(acrDecrease);
			damages = is.popList(DamageCFGS.class);
			if( cd == null )
				cd = new ParaCFGS();
			is.pop(cd);
			if( addSP == null )
				addSP = new ParaCFGS();
			is.pop(addSP);
			scopes = is.popIntegerTreeMap(ParaCFGS.class);
			if( buffOdds == null )
				buffOdds = new ParaCFGS();
			is.pop(buffOdds);
			controlLoopTimes = is.popIntegerTreeMap(ParaCFGS.class);
			controlValues = is.popIntegerTreeMap(ParaCFGS.class);
			breakLoopTimes = is.popIntegerTreeMap(ParaCFGS.class);
			breakValues = is.popIntegerTreeMap(ParaCFGS.class);
			unrealLoopTimes = is.popIntegerTreeMap(ParaCFGS.class);
			unrealValues = is.popIntegerTreeMap(ParaCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(proficiencyLvl);
			os.pushInteger(needProficiency);
			os.pushInteger(dayUseTimes);
			os.pushInteger(totalSavvy);
			os.pushIntegerIntegerMap(investLimits);
			os.pushByte(haseChase);
			os.pushInteger(chaseCount);
			os.pushInteger(chaseSelectWeight);
			os.push(damageArg1);
			os.push(damageArg2);
			os.push(atrDecrease);
			os.push(acrDecrease);
			os.pushList(damages);
			os.push(cd);
			os.push(addSP);
			os.pushIntegerMap(scopes);
			os.push(buffOdds);
			os.pushIntegerMap(controlLoopTimes);
			os.pushIntegerMap(controlValues);
			os.pushIntegerMap(breakLoopTimes);
			os.pushIntegerMap(breakValues);
			os.pushIntegerMap(unrealLoopTimes);
			os.pushIntegerMap(unrealValues);
		}

		public int proficiencyLvl;
		public int needProficiency;
		public int dayUseTimes;
		public int totalSavvy;
		public Map<Integer, Integer> investLimits;
		public byte haseChase;
		public int chaseCount;
		public int chaseSelectWeight;
		public DamageCFGS damageArg1;
		public DamageCFGS damageArg2;
		public DamageCFGS atrDecrease;
		public DamageCFGS acrDecrease;
		public List<DamageCFGS> damages;
		public ParaCFGS cd;
		public ParaCFGS addSP;
		public Map<Integer, ParaCFGS> scopes;
		public ParaCFGS buffOdds;
		public Map<Integer, ParaCFGS> controlLoopTimes;
		public Map<Integer, ParaCFGS> controlValues;
		public Map<Integer, ParaCFGS> breakLoopTimes;
		public Map<Integer, ParaCFGS> breakValues;
		public Map<Integer, ParaCFGS> unrealLoopTimes;
		public Map<Integer, ParaCFGS> unrealValues;
	}

	public static class DIYSkillGradeCFGS implements Stream.IStreamable
	{

		public DIYSkillGradeCFGS() { }

		public DIYSkillGradeCFGS(int id, int addProficiency, float createProb, float minFix, 
		                         float maxFix)
		{
			this.id = id;
			this.addProficiency = addProficiency;
			this.createProb = createProb;
			this.minFix = minFix;
			this.maxFix = maxFix;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			addProficiency = is.popInteger();
			createProb = is.popFloat();
			minFix = is.popFloat();
			maxFix = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(addProficiency);
			os.pushFloat(createProb);
			os.pushFloat(minFix);
			os.pushFloat(maxFix);
		}

		public int id;
		public int addProficiency;
		public float createProb;
		public float minFix;
		public float maxFix;
	}

	public static class DIYSkillUniqueCFGS implements Stream.IStreamable
	{

		public DIYSkillUniqueCFGS() { }

		public DIYSkillUniqueCFGS(int takeCount, int saveDays, int shareMax, int shareAward, 
		                          int awardCount, int shareSkillStandTime, List<Integer> icons, List<Integer> scores, 
		                          Map<Integer, Float> scopeOdds, int minAngle, int maxAngle, int minWidth, 
		                          int maxWidth, int chaseDefaultW, int chaseSelectW, int openLevel, 
		                          int sectMaxShareCount)
		{
			this.takeCount = takeCount;
			this.saveDays = saveDays;
			this.shareMax = shareMax;
			this.shareAward = shareAward;
			this.awardCount = awardCount;
			this.shareSkillStandTime = shareSkillStandTime;
			this.icons = icons;
			this.scores = scores;
			this.scopeOdds = scopeOdds;
			this.minAngle = minAngle;
			this.maxAngle = maxAngle;
			this.minWidth = minWidth;
			this.maxWidth = maxWidth;
			this.chaseDefaultW = chaseDefaultW;
			this.chaseSelectW = chaseSelectW;
			this.openLevel = openLevel;
			this.sectMaxShareCount = sectMaxShareCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			takeCount = is.popInteger();
			saveDays = is.popInteger();
			shareMax = is.popInteger();
			shareAward = is.popInteger();
			awardCount = is.popInteger();
			shareSkillStandTime = is.popInteger();
			icons = is.popIntegerList();
			scores = is.popIntegerList();
			scopeOdds = is.popIntegerFloatTreeMap();
			minAngle = is.popInteger();
			maxAngle = is.popInteger();
			minWidth = is.popInteger();
			maxWidth = is.popInteger();
			chaseDefaultW = is.popInteger();
			chaseSelectW = is.popInteger();
			openLevel = is.popInteger();
			sectMaxShareCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(takeCount);
			os.pushInteger(saveDays);
			os.pushInteger(shareMax);
			os.pushInteger(shareAward);
			os.pushInteger(awardCount);
			os.pushInteger(shareSkillStandTime);
			os.pushIntegerList(icons);
			os.pushIntegerList(scores);
			os.pushIntegerFloatMap(scopeOdds);
			os.pushInteger(minAngle);
			os.pushInteger(maxAngle);
			os.pushInteger(minWidth);
			os.pushInteger(maxWidth);
			os.pushInteger(chaseDefaultW);
			os.pushInteger(chaseSelectW);
			os.pushInteger(openLevel);
			os.pushInteger(sectMaxShareCount);
		}

		public int takeCount;
		public int saveDays;
		public int shareMax;
		public int shareAward;
		public int awardCount;
		public int shareSkillStandTime;
		public List<Integer> icons;
		public List<Integer> scores;
		public Map<Integer, Float> scopeOdds;
		public int minAngle;
		public int maxAngle;
		public int minWidth;
		public int maxWidth;
		public int chaseDefaultW;
		public int chaseSelectW;
		public int openLevel;
		public int sectMaxShareCount;
	}

	public static class DIYSkillActionCFGS implements Stream.IStreamable
	{

		public DIYSkillActionCFGS() { }

		public DIYSkillActionCFGS(int id, int scopeType, int duration, List<Integer> trigTimes)
		{
			this.id = id;
			this.scopeType = scopeType;
			this.duration = duration;
			this.trigTimes = trigTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			scopeType = is.popInteger();
			duration = is.popInteger();
			trigTimes = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(scopeType);
			os.pushInteger(duration);
			os.pushIntegerList(trigTimes);
		}

		public int id;
		public int scopeType;
		public int duration;
		public List<Integer> trigTimes;
	}

	public static class DIYBUFFCFGS implements Stream.IStreamable
	{

		public DIYBUFFCFGS() { }

		public DIYBUFFCFGS(int libType, int weight, int sum, int buffID)
		{
			this.libType = libType;
			this.weight = weight;
			this.sum = sum;
			this.buffID = buffID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			libType = is.popInteger();
			weight = is.popInteger();
			sum = is.popInteger();
			buffID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(libType);
			os.pushInteger(weight);
			os.pushInteger(sum);
			os.pushInteger(buffID);
		}

		public int libType;
		public int weight;
		public int sum;
		public int buffID;
	}

	public static class DamageCFGS implements Stream.IStreamable
	{

		public DamageCFGS() { }

		public DamageCFGS(float baseProb, float unit)
		{
			this.baseProb = baseProb;
			this.unit = unit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			baseProb = is.popFloat();
			unit = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(baseProb);
			os.pushFloat(unit);
		}

		public float baseProb;
		public float unit;
	}

	public static class ParaCFGS implements Stream.IStreamable
	{

		public ParaCFGS() { }

		public ParaCFGS(float min, float max, float unit)
		{
			this.min = min;
			this.max = max;
			this.unit = unit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			min = is.popFloat();
			max = is.popFloat();
			unit = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(min);
			os.pushFloat(max);
			os.pushFloat(unit);
		}

		public float min;
		public float max;
		public float unit;
	}

	public static class ArenaCFGS implements Stream.IStreamable
	{

		public ArenaCFGS() { }

		public ArenaCFGS(int refreshTime, int lvlReq, int freeTimes, int stoneRefresh, 
		                 List<Integer> timesPrice, int rankMax, int coolTime, int arenaMapID, 
		                 int arenaMaxTime, int arenaAutoCloseTime, int prepareTime, int winAddScore, 
		                 int loseAddScore, List<ArenaTargetCFGS> targets, List<ArenaRewardCFGS> rankRewards, Map<Integer, ArenaRewardCFGS> scoreRewards, 
		                 List<ArenaBestRankRewardCFGS> bestRankRewards, int hideDefenceVipReq)
		{
			this.refreshTime = refreshTime;
			this.lvlReq = lvlReq;
			this.freeTimes = freeTimes;
			this.stoneRefresh = stoneRefresh;
			this.timesPrice = timesPrice;
			this.rankMax = rankMax;
			this.coolTime = coolTime;
			this.arenaMapID = arenaMapID;
			this.arenaMaxTime = arenaMaxTime;
			this.arenaAutoCloseTime = arenaAutoCloseTime;
			this.prepareTime = prepareTime;
			this.winAddScore = winAddScore;
			this.loseAddScore = loseAddScore;
			this.targets = targets;
			this.rankRewards = rankRewards;
			this.scoreRewards = scoreRewards;
			this.bestRankRewards = bestRankRewards;
			this.hideDefenceVipReq = hideDefenceVipReq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			refreshTime = is.popInteger();
			lvlReq = is.popInteger();
			freeTimes = is.popInteger();
			stoneRefresh = is.popInteger();
			timesPrice = is.popIntegerList();
			rankMax = is.popInteger();
			coolTime = is.popInteger();
			arenaMapID = is.popInteger();
			arenaMaxTime = is.popInteger();
			arenaAutoCloseTime = is.popInteger();
			prepareTime = is.popInteger();
			winAddScore = is.popInteger();
			loseAddScore = is.popInteger();
			targets = is.popList(ArenaTargetCFGS.class);
			rankRewards = is.popList(ArenaRewardCFGS.class);
			scoreRewards = is.popIntegerTreeMap(ArenaRewardCFGS.class);
			bestRankRewards = is.popList(ArenaBestRankRewardCFGS.class);
			hideDefenceVipReq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(refreshTime);
			os.pushInteger(lvlReq);
			os.pushInteger(freeTimes);
			os.pushInteger(stoneRefresh);
			os.pushIntegerList(timesPrice);
			os.pushInteger(rankMax);
			os.pushInteger(coolTime);
			os.pushInteger(arenaMapID);
			os.pushInteger(arenaMaxTime);
			os.pushInteger(arenaAutoCloseTime);
			os.pushInteger(prepareTime);
			os.pushInteger(winAddScore);
			os.pushInteger(loseAddScore);
			os.pushList(targets);
			os.pushList(rankRewards);
			os.pushIntegerMap(scoreRewards);
			os.pushList(bestRankRewards);
			os.pushInteger(hideDefenceVipReq);
		}

		public int refreshTime;
		public int lvlReq;
		public int freeTimes;
		public int stoneRefresh;
		public List<Integer> timesPrice;
		public int rankMax;
		public int coolTime;
		public int arenaMapID;
		public int arenaMaxTime;
		public int arenaAutoCloseTime;
		public int prepareTime;
		public int winAddScore;
		public int loseAddScore;
		public List<ArenaTargetCFGS> targets;
		public List<ArenaRewardCFGS> rankRewards;
		public Map<Integer, ArenaRewardCFGS> scoreRewards;
		public List<ArenaBestRankRewardCFGS> bestRankRewards;
		public int hideDefenceVipReq;
	}

	public static class ArenaTargetCFGS implements Stream.IStreamable
	{

		public ArenaTargetCFGS() { }

		public ArenaTargetCFGS(int rankFloor, List<ArenaTargetRankDeltaCFGS> deltaRank, int seeMax)
		{
			this.rankFloor = rankFloor;
			this.deltaRank = deltaRank;
			this.seeMax = seeMax;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rankFloor = is.popInteger();
			deltaRank = is.popList(ArenaTargetRankDeltaCFGS.class);
			seeMax = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rankFloor);
			os.pushList(deltaRank);
			os.pushInteger(seeMax);
		}

		public int rankFloor;
		public List<ArenaTargetRankDeltaCFGS> deltaRank;
		public int seeMax;
	}

	public static class ArenaTargetRankDeltaCFGS implements Stream.IStreamable
	{

		public ArenaTargetRankDeltaCFGS() { }

		public ArenaTargetRankDeltaCFGS(int deltaMin, int deltaMax)
		{
			this.deltaMin = deltaMin;
			this.deltaMax = deltaMax;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			deltaMin = is.popInteger();
			deltaMax = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(deltaMin);
			os.pushInteger(deltaMax);
		}

		public int deltaMin;
		public int deltaMax;
	}

	public static class ArenaRewardCFGS implements Stream.IStreamable
	{

		public ArenaRewardCFGS() { }

		public ArenaRewardCFGS(int floor, int money, int point, int stone, 
		                       List<DummyGoods> items)
		{
			this.floor = floor;
			this.money = money;
			this.point = point;
			this.stone = stone;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			floor = is.popInteger();
			money = is.popInteger();
			point = is.popInteger();
			stone = is.popInteger();
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(floor);
			os.pushInteger(money);
			os.pushInteger(point);
			os.pushInteger(stone);
			os.pushList(items);
		}

		public int floor;
		public int money;
		public int point;
		public int stone;
		public List<DummyGoods> items;
	}

	public static class ArenaBestRankRewardCFGS implements Stream.IStreamable
	{

		public ArenaBestRankRewardCFGS() { }

		public ArenaBestRankRewardCFGS(int rankFloor, int money, int stone)
		{
			this.rankFloor = rankFloor;
			this.money = money;
			this.stone = stone;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rankFloor = is.popInteger();
			money = is.popInteger();
			stone = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rankFloor);
			os.pushInteger(money);
			os.pushInteger(stone);
		}

		public int rankFloor;
		public int money;
		public int stone;
	}

	public static class RandomNameCFGS implements Stream.IStreamable
	{

		public RandomNameCFGS() { }

		public RandomNameCFGS(List<String> familyname, List<String> malename, List<String> femalename)
		{
			this.familyname = familyname;
			this.malename = malename;
			this.femalename = femalename;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			familyname = is.popStringList();
			malename = is.popStringList();
			femalename = is.popStringList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushStringList(familyname);
			os.pushStringList(malename);
			os.pushStringList(femalename);
		}

		public List<String> familyname;
		public List<String> malename;
		public List<String> femalename;
	}

	public static class ArenaRobotCFGS implements Stream.IStreamable
	{

		public ArenaRobotCFGS() { }

		public ArenaRobotCFGS(int id, int rankMin, int rankMax, int lvl, 
		                      byte classType, byte transformLevel, Map<Integer, Integer> attrs, List<SkillBriefCFGS> skills, 
		                      List<PetBriefCFGS> pets, int power)
		{
			this.id = id;
			this.rankMin = rankMin;
			this.rankMax = rankMax;
			this.lvl = lvl;
			this.classType = classType;
			this.transformLevel = transformLevel;
			this.attrs = attrs;
			this.skills = skills;
			this.pets = pets;
			this.power = power;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			rankMin = is.popInteger();
			rankMax = is.popInteger();
			lvl = is.popInteger();
			classType = is.popByte();
			transformLevel = is.popByte();
			attrs = is.popIntegerIntegerTreeMap();
			skills = is.popList(SkillBriefCFGS.class);
			pets = is.popList(PetBriefCFGS.class);
			power = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(rankMin);
			os.pushInteger(rankMax);
			os.pushInteger(lvl);
			os.pushByte(classType);
			os.pushByte(transformLevel);
			os.pushIntegerIntegerMap(attrs);
			os.pushList(skills);
			os.pushList(pets);
			os.pushInteger(power);
		}

		public int id;
		public int rankMin;
		public int rankMax;
		public int lvl;
		public byte classType;
		public byte transformLevel;
		public Map<Integer, Integer> attrs;
		public List<SkillBriefCFGS> skills;
		public List<PetBriefCFGS> pets;
		public int power;
	}

	public static class ArenaRobotGroupCFGS implements Stream.IStreamable
	{

		public ArenaRobotGroupCFGS() { }

		public ArenaRobotGroupCFGS(int rankMin, int rankMax, List<ArenaRobotCFGS> robots)
		{
			this.rankMin = rankMin;
			this.rankMax = rankMax;
			this.robots = robots;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rankMin = is.popInteger();
			rankMax = is.popInteger();
			robots = is.popList(ArenaRobotCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rankMin);
			os.pushInteger(rankMax);
			os.pushList(robots);
		}

		public int rankMin;
		public int rankMax;
		public List<ArenaRobotCFGS> robots;
	}

	public static class ELOGradeCFG implements Stream.IStreamable
	{

		public ELOGradeCFG() { }

		public ELOGradeCFG(int ceiling, int degradeTime)
		{
			this.ceiling = ceiling;
			this.degradeTime = degradeTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ceiling = is.popInteger();
			degradeTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ceiling);
			os.pushInteger(degradeTime);
		}

		public int ceiling;
		public int degradeTime;
	}

	public static class SuperArenaCFGS implements Stream.IStreamable
	{

		public SuperArenaCFGS() { }

		public SuperArenaCFGS(int maxRoleMatch, int maxTeamMatch, int maxMatchTime, List<GradeCFGS> grades4v4, 
		                      List<GradeCFGS> grades2v2, List<ELOGradeCFG> elos4v4, List<ELOGradeCFG> elos2v2, int needLvl, 
		                      int openDay, SuperArenaBuffCFGS buff, short orgELO, short minELO, 
		                      short maxELO, int eloParamK, float eloParamWin, float eloParamLose, 
		                      float eloParamNone, SuperArenaNormalCFGS normal)
		{
			this.maxRoleMatch = maxRoleMatch;
			this.maxTeamMatch = maxTeamMatch;
			this.maxMatchTime = maxMatchTime;
			this.grades4v4 = grades4v4;
			this.grades2v2 = grades2v2;
			this.elos4v4 = elos4v4;
			this.elos2v2 = elos2v2;
			this.needLvl = needLvl;
			this.openDay = openDay;
			this.buff = buff;
			this.orgELO = orgELO;
			this.minELO = minELO;
			this.maxELO = maxELO;
			this.eloParamK = eloParamK;
			this.eloParamWin = eloParamWin;
			this.eloParamLose = eloParamLose;
			this.eloParamNone = eloParamNone;
			this.normal = normal;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			maxRoleMatch = is.popInteger();
			maxTeamMatch = is.popInteger();
			maxMatchTime = is.popInteger();
			grades4v4 = is.popList(GradeCFGS.class);
			grades2v2 = is.popList(GradeCFGS.class);
			elos4v4 = is.popList(ELOGradeCFG.class);
			elos2v2 = is.popList(ELOGradeCFG.class);
			needLvl = is.popInteger();
			openDay = is.popInteger();
			if( buff == null )
				buff = new SuperArenaBuffCFGS();
			is.pop(buff);
			orgELO = is.popShort();
			minELO = is.popShort();
			maxELO = is.popShort();
			eloParamK = is.popInteger();
			eloParamWin = is.popFloat();
			eloParamLose = is.popFloat();
			eloParamNone = is.popFloat();
			if( normal == null )
				normal = new SuperArenaNormalCFGS();
			is.pop(normal);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(maxRoleMatch);
			os.pushInteger(maxTeamMatch);
			os.pushInteger(maxMatchTime);
			os.pushList(grades4v4);
			os.pushList(grades2v2);
			os.pushList(elos4v4);
			os.pushList(elos2v2);
			os.pushInteger(needLvl);
			os.pushInteger(openDay);
			os.push(buff);
			os.pushShort(orgELO);
			os.pushShort(minELO);
			os.pushShort(maxELO);
			os.pushInteger(eloParamK);
			os.pushFloat(eloParamWin);
			os.pushFloat(eloParamLose);
			os.pushFloat(eloParamNone);
			os.push(normal);
		}

		public int maxRoleMatch;
		public int maxTeamMatch;
		public int maxMatchTime;
		public List<GradeCFGS> grades4v4;
		public List<GradeCFGS> grades2v2;
		public List<ELOGradeCFG> elos4v4;
		public List<ELOGradeCFG> elos2v2;
		public int needLvl;
		public int openDay;
		public SuperArenaBuffCFGS buff;
		public short orgELO;
		public short minELO;
		public short maxELO;
		public int eloParamK;
		public float eloParamWin;
		public float eloParamLose;
		public float eloParamNone;
		public SuperArenaNormalCFGS normal;
	}

	public static class SuperArenaTypeCFGS implements Stream.IStreamable
	{

		public SuperArenaTypeCFGS() { }

		public SuperArenaTypeCFGS(int type, int mapID, Set<Integer> openDays, List<Integer> startTimes, 
		                          int lastTime, int needLvl, int maxTime, List<Integer> honorPercent, 
		                          int winHonor, int loseHonor, int hangWinHonor, int hangLoseHonor, 
		                          int members, int races)
		{
			this.type = type;
			this.mapID = mapID;
			this.openDays = openDays;
			this.startTimes = startTimes;
			this.lastTime = lastTime;
			this.needLvl = needLvl;
			this.maxTime = maxTime;
			this.honorPercent = honorPercent;
			this.winHonor = winHonor;
			this.loseHonor = loseHonor;
			this.hangWinHonor = hangWinHonor;
			this.hangLoseHonor = hangLoseHonor;
			this.members = members;
			this.races = races;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			mapID = is.popInteger();
			openDays = is.popIntegerTreeSet();
			startTimes = is.popIntegerList();
			lastTime = is.popInteger();
			needLvl = is.popInteger();
			maxTime = is.popInteger();
			honorPercent = is.popIntegerList();
			winHonor = is.popInteger();
			loseHonor = is.popInteger();
			hangWinHonor = is.popInteger();
			hangLoseHonor = is.popInteger();
			members = is.popInteger();
			races = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(mapID);
			os.pushIntegerSet(openDays);
			os.pushIntegerList(startTimes);
			os.pushInteger(lastTime);
			os.pushInteger(needLvl);
			os.pushInteger(maxTime);
			os.pushIntegerList(honorPercent);
			os.pushInteger(winHonor);
			os.pushInteger(loseHonor);
			os.pushInteger(hangWinHonor);
			os.pushInteger(hangLoseHonor);
			os.pushInteger(members);
			os.pushInteger(races);
		}

		public int type;
		public int mapID;
		public Set<Integer> openDays;
		public List<Integer> startTimes;
		public int lastTime;
		public int needLvl;
		public int maxTime;
		public List<Integer> honorPercent;
		public int winHonor;
		public int loseHonor;
		public int hangWinHonor;
		public int hangLoseHonor;
		public int members;
		public int races;
	}

	public static class SuperArenaNormalCFGS implements Stream.IStreamable
	{

		public SuperArenaNormalCFGS() { }

		public SuperArenaNormalCFGS(int prepareTime, int autoCloseTime, int reviveTimes, List<Integer> killHonors, 
		                            List<Integer> otherKillHonors, int addHonorRange, int firstBloodHonor, int mostKillHonor, 
		                            int autoRevive)
		{
			this.prepareTime = prepareTime;
			this.autoCloseTime = autoCloseTime;
			this.reviveTimes = reviveTimes;
			this.killHonors = killHonors;
			this.otherKillHonors = otherKillHonors;
			this.addHonorRange = addHonorRange;
			this.firstBloodHonor = firstBloodHonor;
			this.mostKillHonor = mostKillHonor;
			this.autoRevive = autoRevive;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			prepareTime = is.popInteger();
			autoCloseTime = is.popInteger();
			reviveTimes = is.popInteger();
			killHonors = is.popIntegerList();
			otherKillHonors = is.popIntegerList();
			addHonorRange = is.popInteger();
			firstBloodHonor = is.popInteger();
			mostKillHonor = is.popInteger();
			autoRevive = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(prepareTime);
			os.pushInteger(autoCloseTime);
			os.pushInteger(reviveTimes);
			os.pushIntegerList(killHonors);
			os.pushIntegerList(otherKillHonors);
			os.pushInteger(addHonorRange);
			os.pushInteger(firstBloodHonor);
			os.pushInteger(mostKillHonor);
			os.pushInteger(autoRevive);
		}

		public int prepareTime;
		public int autoCloseTime;
		public int reviveTimes;
		public List<Integer> killHonors;
		public List<Integer> otherKillHonors;
		public int addHonorRange;
		public int firstBloodHonor;
		public int mostKillHonor;
		public int autoRevive;
	}

	public static class SuperArenaBuffCFGS implements Stream.IStreamable
	{

		public SuperArenaBuffCFGS() { }

		public SuperArenaBuffCFGS(int baseBuff, List<Integer> failedBuffs)
		{
			this.baseBuff = baseBuff;
			this.failedBuffs = failedBuffs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			baseBuff = is.popInteger();
			failedBuffs = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(baseBuff);
			os.pushIntegerList(failedBuffs);
		}

		public int baseBuff;
		public List<Integer> failedBuffs;
	}

	public static class BWArenaCFGS implements Stream.IStreamable
	{

		public BWArenaCFGS() { }

		public BWArenaCFGS(BWArenaBaseCFGS base, BWArenaFightCFGS fight, List<BWArenaLvlCFGS> lvls, List<BWArenaRankCFGS> ranks)
		{
			this.base = base;
			this.fight = fight;
			this.lvls = lvls;
			this.ranks = ranks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new BWArenaBaseCFGS();
			is.pop(base);
			if( fight == null )
				fight = new BWArenaFightCFGS();
			is.pop(fight);
			lvls = is.popList(BWArenaLvlCFGS.class);
			ranks = is.popList(BWArenaRankCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.push(fight);
			os.pushList(lvls);
			os.pushList(ranks);
		}

		public BWArenaBaseCFGS base;
		public BWArenaFightCFGS fight;
		public List<BWArenaLvlCFGS> lvls;
		public List<BWArenaRankCFGS> ranks;
	}

	public static class BWArenaBaseCFGS implements Stream.IStreamable
	{

		public BWArenaBaseCFGS() { }

		public BWArenaBaseCFGS(int lvlReq, int startTime, int endTime, List<Integer> rankRefreshTime, 
		                       int mailRewardTime, int dayEnterTimes, List<Integer> diamondBuys, int diamondRefresh, 
		                       int rewardScoreReq, List<Integer> winExp, List<Integer> loseExp, List<Integer> winScore, 
		                       List<Integer> loseScore, int mailRewardLvlReq)
		{
			this.lvlReq = lvlReq;
			this.startTime = startTime;
			this.endTime = endTime;
			this.rankRefreshTime = rankRefreshTime;
			this.mailRewardTime = mailRewardTime;
			this.dayEnterTimes = dayEnterTimes;
			this.diamondBuys = diamondBuys;
			this.diamondRefresh = diamondRefresh;
			this.rewardScoreReq = rewardScoreReq;
			this.winExp = winExp;
			this.loseExp = loseExp;
			this.winScore = winScore;
			this.loseScore = loseScore;
			this.mailRewardLvlReq = mailRewardLvlReq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvlReq = is.popInteger();
			startTime = is.popInteger();
			endTime = is.popInteger();
			rankRefreshTime = is.popIntegerList();
			mailRewardTime = is.popInteger();
			dayEnterTimes = is.popInteger();
			diamondBuys = is.popIntegerList();
			diamondRefresh = is.popInteger();
			rewardScoreReq = is.popInteger();
			winExp = is.popIntegerList();
			loseExp = is.popIntegerList();
			winScore = is.popIntegerList();
			loseScore = is.popIntegerList();
			mailRewardLvlReq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvlReq);
			os.pushInteger(startTime);
			os.pushInteger(endTime);
			os.pushIntegerList(rankRefreshTime);
			os.pushInteger(mailRewardTime);
			os.pushInteger(dayEnterTimes);
			os.pushIntegerList(diamondBuys);
			os.pushInteger(diamondRefresh);
			os.pushInteger(rewardScoreReq);
			os.pushIntegerList(winExp);
			os.pushIntegerList(loseExp);
			os.pushIntegerList(winScore);
			os.pushIntegerList(loseScore);
			os.pushInteger(mailRewardLvlReq);
		}

		public int lvlReq;
		public int startTime;
		public int endTime;
		public List<Integer> rankRefreshTime;
		public int mailRewardTime;
		public int dayEnterTimes;
		public List<Integer> diamondBuys;
		public int diamondRefresh;
		public int rewardScoreReq;
		public List<Integer> winExp;
		public List<Integer> loseExp;
		public List<Integer> winScore;
		public List<Integer> loseScore;
		public int mailRewardLvlReq;
	}

	public static class BWArenaFightCFGS implements Stream.IStreamable
	{

		public BWArenaFightCFGS() { }

		public BWArenaFightCFGS(int mapID, int maxTime, int autoCloseTime, int prepareTime, 
		                        int damageDecrease)
		{
			this.mapID = mapID;
			this.maxTime = maxTime;
			this.autoCloseTime = autoCloseTime;
			this.prepareTime = prepareTime;
			this.damageDecrease = damageDecrease;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapID = is.popInteger();
			maxTime = is.popInteger();
			autoCloseTime = is.popInteger();
			prepareTime = is.popInteger();
			damageDecrease = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapID);
			os.pushInteger(maxTime);
			os.pushInteger(autoCloseTime);
			os.pushInteger(prepareTime);
			os.pushInteger(damageDecrease);
		}

		public int mapID;
		public int maxTime;
		public int autoCloseTime;
		public int prepareTime;
		public int damageDecrease;
	}

	public static class BWArenaLvlCFGS implements Stream.IStreamable
	{

		public BWArenaLvlCFGS() { }

		public BWArenaLvlCFGS(int petCount, int expReq, DummyGoods whiteScoreReward, DummyGoods blackScoreReward)
		{
			this.petCount = petCount;
			this.expReq = expReq;
			this.whiteScoreReward = whiteScoreReward;
			this.blackScoreReward = blackScoreReward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petCount = is.popInteger();
			expReq = is.popInteger();
			if( whiteScoreReward == null )
				whiteScoreReward = new DummyGoods();
			is.pop(whiteScoreReward);
			if( blackScoreReward == null )
				blackScoreReward = new DummyGoods();
			is.pop(blackScoreReward);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petCount);
			os.pushInteger(expReq);
			os.push(whiteScoreReward);
			os.push(blackScoreReward);
		}

		public int petCount;
		public int expReq;
		public DummyGoods whiteScoreReward;
		public DummyGoods blackScoreReward;
	}

	public static class BWArenaRankCFGS implements Stream.IStreamable
	{

		public BWArenaRankCFGS() { }

		public BWArenaRankCFGS(List<DummyGoods> whiteRankReward, int roleWhiteTitle, List<DummyGoods> blackRankReward, int roleBlackTitle)
		{
			this.whiteRankReward = whiteRankReward;
			this.roleWhiteTitle = roleWhiteTitle;
			this.blackRankReward = blackRankReward;
			this.roleBlackTitle = roleBlackTitle;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			whiteRankReward = is.popList(DummyGoods.class);
			roleWhiteTitle = is.popInteger();
			blackRankReward = is.popList(DummyGoods.class);
			roleBlackTitle = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(whiteRankReward);
			os.pushInteger(roleWhiteTitle);
			os.pushList(blackRankReward);
			os.pushInteger(roleBlackTitle);
		}

		public List<DummyGoods> whiteRankReward;
		public int roleWhiteTitle;
		public List<DummyGoods> blackRankReward;
		public int roleBlackTitle;
	}

	public static class ForceWarCFGS implements Stream.IStreamable
	{

		public ForceWarCFGS() { }

		public ForceWarCFGS(int type, List<Integer> mapIDs, Set<Integer> openDays, int openStartTime, 
		                    int openLastTime, int lvlReq, int maxTime, List<Float> gainFeats)
		{
			this.type = type;
			this.mapIDs = mapIDs;
			this.openDays = openDays;
			this.openStartTime = openStartTime;
			this.openLastTime = openLastTime;
			this.lvlReq = lvlReq;
			this.maxTime = maxTime;
			this.gainFeats = gainFeats;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			mapIDs = is.popIntegerList();
			openDays = is.popIntegerTreeSet();
			openStartTime = is.popInteger();
			openLastTime = is.popInteger();
			lvlReq = is.popInteger();
			maxTime = is.popInteger();
			gainFeats = is.popFloatList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushIntegerList(mapIDs);
			os.pushIntegerSet(openDays);
			os.pushInteger(openStartTime);
			os.pushInteger(openLastTime);
			os.pushInteger(lvlReq);
			os.pushInteger(maxTime);
			os.pushFloatList(gainFeats);
		}

		public int type;
		public List<Integer> mapIDs;
		public Set<Integer> openDays;
		public int openStartTime;
		public int openLastTime;
		public int lvlReq;
		public int maxTime;
		public List<Float> gainFeats;
	}

	public static class ForceWarBaseCFGS implements Stream.IStreamable
	{

		public ForceWarBaseCFGS() { }

		public ForceWarBaseCFGS(ForceWarMatchCFGS match, ForceWarScoreCFGS score, ForceWarFeatCFGS feat, ForceWarOtherCFG other, 
		                        List<ForceWarRewardCFGS> rewards, List<Integer> levels, int baseBuff)
		{
			this.match = match;
			this.score = score;
			this.feat = feat;
			this.other = other;
			this.rewards = rewards;
			this.levels = levels;
			this.baseBuff = baseBuff;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( match == null )
				match = new ForceWarMatchCFGS();
			is.pop(match);
			if( score == null )
				score = new ForceWarScoreCFGS();
			is.pop(score);
			if( feat == null )
				feat = new ForceWarFeatCFGS();
			is.pop(feat);
			if( other == null )
				other = new ForceWarOtherCFG();
			is.pop(other);
			rewards = is.popList(ForceWarRewardCFGS.class);
			levels = is.popIntegerList();
			baseBuff = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(match);
			os.push(score);
			os.push(feat);
			os.push(other);
			os.pushList(rewards);
			os.pushIntegerList(levels);
			os.pushInteger(baseBuff);
		}

		public ForceWarMatchCFGS match;
		public ForceWarScoreCFGS score;
		public ForceWarFeatCFGS feat;
		public ForceWarOtherCFG other;
		public List<ForceWarRewardCFGS> rewards;
		public List<Integer> levels;
		public int baseBuff;
	}

	public static class ForceWarMatchCFGS implements Stream.IStreamable
	{

		public ForceWarMatchCFGS() { }

		public ForceWarMatchCFGS(int timeout, int maxCnt, int punishTime, int lowerCntTime, 
		                         int lowerCnt, int openDayLimit)
		{
			this.timeout = timeout;
			this.maxCnt = maxCnt;
			this.punishTime = punishTime;
			this.lowerCntTime = lowerCntTime;
			this.lowerCnt = lowerCnt;
			this.openDayLimit = openDayLimit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			timeout = is.popInteger();
			maxCnt = is.popInteger();
			punishTime = is.popInteger();
			lowerCntTime = is.popInteger();
			lowerCnt = is.popInteger();
			openDayLimit = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(timeout);
			os.pushInteger(maxCnt);
			os.pushInteger(punishTime);
			os.pushInteger(lowerCntTime);
			os.pushInteger(lowerCnt);
			os.pushInteger(openDayLimit);
		}

		public int timeout;
		public int maxCnt;
		public int punishTime;
		public int lowerCntTime;
		public int lowerCnt;
		public int openDayLimit;
	}

	public static class ForceWarScoreCFGS implements Stream.IStreamable
	{

		public ForceWarScoreCFGS() { }

		public ForceWarScoreCFGS(ForceWarScore killRole, Map<Integer, ForceWarScore> killMonsters, ForceWarScore firstKill, ForceWarScore mostKill)
		{
			this.killRole = killRole;
			this.killMonsters = killMonsters;
			this.firstKill = firstKill;
			this.mostKill = mostKill;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( killRole == null )
				killRole = new ForceWarScore();
			is.pop(killRole);
			killMonsters = is.popIntegerTreeMap(ForceWarScore.class);
			if( firstKill == null )
				firstKill = new ForceWarScore();
			is.pop(firstKill);
			if( mostKill == null )
				mostKill = new ForceWarScore();
			is.pop(mostKill);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(killRole);
			os.pushIntegerMap(killMonsters);
			os.push(firstKill);
			os.push(mostKill);
		}

		public ForceWarScore killRole;
		public Map<Integer, ForceWarScore> killMonsters;
		public ForceWarScore firstKill;
		public ForceWarScore mostKill;
	}

	public static class ForceWarFeatCFGS implements Stream.IStreamable
	{

		public ForceWarFeatCFGS() { }

		public ForceWarFeatCFGS(List<ForceWarFeat> rewards)
		{
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewards = is.popList(ForceWarFeat.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(rewards);
		}

		public List<ForceWarFeat> rewards;
	}

	public static class ForceWarScore implements Stream.IStreamable
	{

		public ForceWarScore() { }

		public ForceWarScore(int killer, int assist, int camp)
		{
			this.killer = killer;
			this.assist = assist;
			this.camp = camp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			killer = is.popInteger();
			assist = is.popInteger();
			camp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(killer);
			os.pushInteger(assist);
			os.pushInteger(camp);
		}

		public int killer;
		public int assist;
		public int camp;
	}

	public static class ForceWarFeat implements Stream.IStreamable
	{

		public ForceWarFeat() { }

		public ForceWarFeat(int floor, int win, int lose)
		{
			this.floor = floor;
			this.win = win;
			this.lose = lose;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			floor = is.popInteger();
			win = is.popInteger();
			lose = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(floor);
			os.pushInteger(win);
			os.pushInteger(lose);
		}

		public int floor;
		public int win;
		public int lose;
	}

	public static class ForceWarOtherCFG implements Stream.IStreamable
	{

		public ForceWarOtherCFG() { }

		public ForceWarOtherCFG(int goldMapID, int silverMapID, int winAdd, int loseAdd, 
		                        int goldMapMaxTime, int silverMapMaxTime, int dayMapRewardTimes, int prepareTime, 
		                        int autoCloseTime, int doubleScoreStartTime, int assistDistance, int mostKillCnt, 
		                        int killStreaks, int endKills, int autoRevive)
		{
			this.goldMapID = goldMapID;
			this.silverMapID = silverMapID;
			this.winAdd = winAdd;
			this.loseAdd = loseAdd;
			this.goldMapMaxTime = goldMapMaxTime;
			this.silverMapMaxTime = silverMapMaxTime;
			this.dayMapRewardTimes = dayMapRewardTimes;
			this.prepareTime = prepareTime;
			this.autoCloseTime = autoCloseTime;
			this.doubleScoreStartTime = doubleScoreStartTime;
			this.assistDistance = assistDistance;
			this.mostKillCnt = mostKillCnt;
			this.killStreaks = killStreaks;
			this.endKills = endKills;
			this.autoRevive = autoRevive;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			goldMapID = is.popInteger();
			silverMapID = is.popInteger();
			winAdd = is.popInteger();
			loseAdd = is.popInteger();
			goldMapMaxTime = is.popInteger();
			silverMapMaxTime = is.popInteger();
			dayMapRewardTimes = is.popInteger();
			prepareTime = is.popInteger();
			autoCloseTime = is.popInteger();
			doubleScoreStartTime = is.popInteger();
			assistDistance = is.popInteger();
			mostKillCnt = is.popInteger();
			killStreaks = is.popInteger();
			endKills = is.popInteger();
			autoRevive = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(goldMapID);
			os.pushInteger(silverMapID);
			os.pushInteger(winAdd);
			os.pushInteger(loseAdd);
			os.pushInteger(goldMapMaxTime);
			os.pushInteger(silverMapMaxTime);
			os.pushInteger(dayMapRewardTimes);
			os.pushInteger(prepareTime);
			os.pushInteger(autoCloseTime);
			os.pushInteger(doubleScoreStartTime);
			os.pushInteger(assistDistance);
			os.pushInteger(mostKillCnt);
			os.pushInteger(killStreaks);
			os.pushInteger(endKills);
			os.pushInteger(autoRevive);
		}

		public int goldMapID;
		public int silverMapID;
		public int winAdd;
		public int loseAdd;
		public int goldMapMaxTime;
		public int silverMapMaxTime;
		public int dayMapRewardTimes;
		public int prepareTime;
		public int autoCloseTime;
		public int doubleScoreStartTime;
		public int assistDistance;
		public int mostKillCnt;
		public int killStreaks;
		public int endKills;
		public int autoRevive;
	}

	public static class ForceWarRewardCFGS implements Stream.IStreamable
	{

		public ForceWarRewardCFGS() { }

		public ForceWarRewardCFGS(int floor, int whiteTitle, int blackTitle)
		{
			this.floor = floor;
			this.whiteTitle = whiteTitle;
			this.blackTitle = blackTitle;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			floor = is.popInteger();
			whiteTitle = is.popInteger();
			blackTitle = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(floor);
			os.pushInteger(whiteTitle);
			os.pushInteger(blackTitle);
		}

		public int floor;
		public int whiteTitle;
		public int blackTitle;
	}

	public static class GradeCFGS implements Stream.IStreamable
	{

		public GradeCFGS() { }

		public GradeCFGS(int min, int max)
		{
			this.min = min;
			this.max = max;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			min = is.popInteger();
			max = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(min);
			os.pushInteger(max);
		}

		public int min;
		public int max;
	}

	public static class ChallengeTaskCFGS implements Stream.IStreamable
	{

		public ChallengeTaskCFGS() { }

		public ChallengeTaskCFGS(int type, int target, int param1, int levelNeed, 
		                         int exp, List<DummyGoods> rewards, int title, int achtype, 
		                         int achpoint)
		{
			this.type = type;
			this.target = target;
			this.param1 = param1;
			this.levelNeed = levelNeed;
			this.exp = exp;
			this.rewards = rewards;
			this.title = title;
			this.achtype = achtype;
			this.achpoint = achpoint;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			target = is.popInteger();
			param1 = is.popInteger();
			levelNeed = is.popInteger();
			exp = is.popInteger();
			rewards = is.popList(DummyGoods.class);
			title = is.popInteger();
			achtype = is.popInteger();
			achpoint = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(target);
			os.pushInteger(param1);
			os.pushInteger(levelNeed);
			os.pushInteger(exp);
			os.pushList(rewards);
			os.pushInteger(title);
			os.pushInteger(achtype);
			os.pushInteger(achpoint);
		}

		public int type;
		public int target;
		public int param1;
		public int levelNeed;
		public int exp;
		public List<DummyGoods> rewards;
		public int title;
		public int achtype;
		public int achpoint;
	}

	public static class ChallengeTaskGroupCFGS implements Stream.IStreamable
	{

		public ChallengeTaskGroupCFGS() { }

		public ChallengeTaskGroupCFGS(int type, List<ChallengeTaskCFGS> tasks)
		{
			this.type = type;
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			tasks = is.popList(ChallengeTaskCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushList(tasks);
		}

		public int type;
		public List<ChallengeTaskCFGS> tasks;
	}

	public static class FameConditionCFGS implements Stream.IStreamable
	{

		public FameConditionCFGS() { }

		public FameConditionCFGS(int id, int value)
		{
			this.id = id;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
		}

		public int id;
		public int value;
	}

	public static class FameCFGS implements Stream.IStreamable
	{

		public FameCFGS() { }

		public FameCFGS(int openLevel, List<FameLevelCFGS> fames)
		{
			this.openLevel = openLevel;
			this.fames = fames;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			openLevel = is.popInteger();
			fames = is.popList(FameLevelCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(openLevel);
			os.pushList(fames);
		}

		public int openLevel;
		public List<FameLevelCFGS> fames;
	}

	public static class FameLevelCFGS implements Stream.IStreamable
	{

		public FameLevelCFGS() { }

		public FameLevelCFGS(int level, List<FameConditionCFGS> condition, List<DummyGoods> cost, List<DummyGoods> rewards, 
		                     int levelUpCD, int title)
		{
			this.level = level;
			this.condition = condition;
			this.cost = cost;
			this.rewards = rewards;
			this.levelUpCD = levelUpCD;
			this.title = title;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			condition = is.popList(FameConditionCFGS.class);
			cost = is.popList(DummyGoods.class);
			rewards = is.popList(DummyGoods.class);
			levelUpCD = is.popInteger();
			title = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushList(condition);
			os.pushList(cost);
			os.pushList(rewards);
			os.pushInteger(levelUpCD);
			os.pushInteger(title);
		}

		public int level;
		public List<FameConditionCFGS> condition;
		public List<DummyGoods> cost;
		public List<DummyGoods> rewards;
		public int levelUpCD;
		public int title;
	}

	public static class ProduceCFGS implements Stream.IStreamable
	{

		public ProduceCFGS() { }

		public ProduceCFGS(List<Integer> lvlNeedExp, int spMax, int buyTimes, int buySP, 
		                   List<Integer> costStones, int spRevertInterval, int spRevertCount)
		{
			this.lvlNeedExp = lvlNeedExp;
			this.spMax = spMax;
			this.buyTimes = buyTimes;
			this.buySP = buySP;
			this.costStones = costStones;
			this.spRevertInterval = spRevertInterval;
			this.spRevertCount = spRevertCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvlNeedExp = is.popIntegerList();
			spMax = is.popInteger();
			buyTimes = is.popInteger();
			buySP = is.popInteger();
			costStones = is.popIntegerList();
			spRevertInterval = is.popInteger();
			spRevertCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(lvlNeedExp);
			os.pushInteger(spMax);
			os.pushInteger(buyTimes);
			os.pushInteger(buySP);
			os.pushIntegerList(costStones);
			os.pushInteger(spRevertInterval);
			os.pushInteger(spRevertCount);
		}

		public List<Integer> lvlNeedExp;
		public int spMax;
		public int buyTimes;
		public int buySP;
		public List<Integer> costStones;
		public int spRevertInterval;
		public int spRevertCount;
	}

	public static class ProduceRecipeCFGS implements Stream.IStreamable
	{

		public ProduceRecipeCFGS() { }

		public ProduceRecipeCFGS(int id, int produceLvlReq, int roleLvlReq, DummyGoods output, 
		                         List<DummyGoods> input, int gainExp)
		{
			this.id = id;
			this.produceLvlReq = produceLvlReq;
			this.roleLvlReq = roleLvlReq;
			this.output = output;
			this.input = input;
			this.gainExp = gainExp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			produceLvlReq = is.popInteger();
			roleLvlReq = is.popInteger();
			if( output == null )
				output = new DummyGoods();
			is.pop(output);
			input = is.popList(DummyGoods.class);
			gainExp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(produceLvlReq);
			os.pushInteger(roleLvlReq);
			os.push(output);
			os.pushList(input);
			os.pushInteger(gainExp);
		}

		public int id;
		public int produceLvlReq;
		public int roleLvlReq;
		public DummyGoods output;
		public List<DummyGoods> input;
		public int gainExp;
	}

	public static class FusionCFGS implements Stream.IStreamable
	{

		public FusionCFGS() { }

		public FusionCFGS(int openLevel, int costEnergy, int fullPoint, List<FusionSectionCFGS> fusionsection)
		{
			this.openLevel = openLevel;
			this.costEnergy = costEnergy;
			this.fullPoint = fullPoint;
			this.fusionsection = fusionsection;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			openLevel = is.popInteger();
			costEnergy = is.popInteger();
			fullPoint = is.popInteger();
			fusionsection = is.popList(FusionSectionCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(openLevel);
			os.pushInteger(costEnergy);
			os.pushInteger(fullPoint);
			os.pushList(fusionsection);
		}

		public int openLevel;
		public int costEnergy;
		public int fullPoint;
		public List<FusionSectionCFGS> fusionsection;
	}

	public static class FusionSectionCFGS implements Stream.IStreamable
	{

		public FusionSectionCFGS() { }

		public FusionSectionCFGS(int startLevel, int endLevel, int reward)
		{
			this.startLevel = startLevel;
			this.endLevel = endLevel;
			this.reward = reward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			startLevel = is.popInteger();
			endLevel = is.popInteger();
			reward = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(startLevel);
			os.pushInteger(endLevel);
			os.pushInteger(reward);
		}

		public int startLevel;
		public int endLevel;
		public int reward;
	}

	public static class DiySkillSlotUnblockCFGS implements Stream.IStreamable
	{

		public DiySkillSlotUnblockCFGS() { }

		public DiySkillSlotUnblockCFGS(int id, int isOpen, int openCoin)
		{
			this.id = id;
			this.isOpen = isOpen;
			this.openCoin = openCoin;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			isOpen = is.popInteger();
			openCoin = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(isOpen);
			os.pushInteger(openCoin);
		}

		public int id;
		public int isOpen;
		public int openCoin;
	}

	public static class VipCFGS implements Stream.IStreamable
	{

		public VipCFGS() { }

		public VipCFGS(int level, int points, List<DummyGoods> rewards, int diyBuyCount, 
		               List<Integer> diyBuyUseDiamond, int diyDayAddCount, int dayMaxBuyCoinTimes, int dayMaxBuyVitTimes, 
		               int dayMaxBuyDopowerTimes, int dayMaxBuyArenaFight, int worship1, int worship2, 
		               int worship3, int dayMaxBuyNormalMapCopyEnterTimes, int dayMaxBuyActivityMapGroupEnterTimes, int auctionMaxCells, 
		               int dayClanOccupyOreMaxTimes, int luckyWheelFreeDrawTiems, int bwarenaDayBuyTiems, int title, 
		               byte canGetMissVit, List<Integer> activityLastTimes, int vipRewardPrice, byte freeTransfrom, 
		               int taxReduction, int reviveReduction, float sectTaskRewardRate, float teamMapDropTimeRate, 
		               List<DummyGoods> PBTCashBackRewards)
		{
			this.level = level;
			this.points = points;
			this.rewards = rewards;
			this.diyBuyCount = diyBuyCount;
			this.diyBuyUseDiamond = diyBuyUseDiamond;
			this.diyDayAddCount = diyDayAddCount;
			this.dayMaxBuyCoinTimes = dayMaxBuyCoinTimes;
			this.dayMaxBuyVitTimes = dayMaxBuyVitTimes;
			this.dayMaxBuyDopowerTimes = dayMaxBuyDopowerTimes;
			this.dayMaxBuyArenaFight = dayMaxBuyArenaFight;
			this.worship1 = worship1;
			this.worship2 = worship2;
			this.worship3 = worship3;
			this.dayMaxBuyNormalMapCopyEnterTimes = dayMaxBuyNormalMapCopyEnterTimes;
			this.dayMaxBuyActivityMapGroupEnterTimes = dayMaxBuyActivityMapGroupEnterTimes;
			this.auctionMaxCells = auctionMaxCells;
			this.dayClanOccupyOreMaxTimes = dayClanOccupyOreMaxTimes;
			this.luckyWheelFreeDrawTiems = luckyWheelFreeDrawTiems;
			this.bwarenaDayBuyTiems = bwarenaDayBuyTiems;
			this.title = title;
			this.canGetMissVit = canGetMissVit;
			this.activityLastTimes = activityLastTimes;
			this.vipRewardPrice = vipRewardPrice;
			this.freeTransfrom = freeTransfrom;
			this.taxReduction = taxReduction;
			this.reviveReduction = reviveReduction;
			this.sectTaskRewardRate = sectTaskRewardRate;
			this.teamMapDropTimeRate = teamMapDropTimeRate;
			this.PBTCashBackRewards = PBTCashBackRewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			points = is.popInteger();
			rewards = is.popList(DummyGoods.class);
			diyBuyCount = is.popInteger();
			diyBuyUseDiamond = is.popIntegerList();
			diyDayAddCount = is.popInteger();
			dayMaxBuyCoinTimes = is.popInteger();
			dayMaxBuyVitTimes = is.popInteger();
			dayMaxBuyDopowerTimes = is.popInteger();
			dayMaxBuyArenaFight = is.popInteger();
			worship1 = is.popInteger();
			worship2 = is.popInteger();
			worship3 = is.popInteger();
			dayMaxBuyNormalMapCopyEnterTimes = is.popInteger();
			dayMaxBuyActivityMapGroupEnterTimes = is.popInteger();
			auctionMaxCells = is.popInteger();
			dayClanOccupyOreMaxTimes = is.popInteger();
			luckyWheelFreeDrawTiems = is.popInteger();
			bwarenaDayBuyTiems = is.popInteger();
			title = is.popInteger();
			canGetMissVit = is.popByte();
			activityLastTimes = is.popIntegerList();
			vipRewardPrice = is.popInteger();
			freeTransfrom = is.popByte();
			taxReduction = is.popInteger();
			reviveReduction = is.popInteger();
			sectTaskRewardRate = is.popFloat();
			teamMapDropTimeRate = is.popFloat();
			PBTCashBackRewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(points);
			os.pushList(rewards);
			os.pushInteger(diyBuyCount);
			os.pushIntegerList(diyBuyUseDiamond);
			os.pushInteger(diyDayAddCount);
			os.pushInteger(dayMaxBuyCoinTimes);
			os.pushInteger(dayMaxBuyVitTimes);
			os.pushInteger(dayMaxBuyDopowerTimes);
			os.pushInteger(dayMaxBuyArenaFight);
			os.pushInteger(worship1);
			os.pushInteger(worship2);
			os.pushInteger(worship3);
			os.pushInteger(dayMaxBuyNormalMapCopyEnterTimes);
			os.pushInteger(dayMaxBuyActivityMapGroupEnterTimes);
			os.pushInteger(auctionMaxCells);
			os.pushInteger(dayClanOccupyOreMaxTimes);
			os.pushInteger(luckyWheelFreeDrawTiems);
			os.pushInteger(bwarenaDayBuyTiems);
			os.pushInteger(title);
			os.pushByte(canGetMissVit);
			os.pushIntegerList(activityLastTimes);
			os.pushInteger(vipRewardPrice);
			os.pushByte(freeTransfrom);
			os.pushInteger(taxReduction);
			os.pushInteger(reviveReduction);
			os.pushFloat(sectTaskRewardRate);
			os.pushFloat(teamMapDropTimeRate);
			os.pushList(PBTCashBackRewards);
		}

		public int level;
		public int points;
		public List<DummyGoods> rewards;
		public int diyBuyCount;
		public List<Integer> diyBuyUseDiamond;
		public int diyDayAddCount;
		public int dayMaxBuyCoinTimes;
		public int dayMaxBuyVitTimes;
		public int dayMaxBuyDopowerTimes;
		public int dayMaxBuyArenaFight;
		public int worship1;
		public int worship2;
		public int worship3;
		public int dayMaxBuyNormalMapCopyEnterTimes;
		public int dayMaxBuyActivityMapGroupEnterTimes;
		public int auctionMaxCells;
		public int dayClanOccupyOreMaxTimes;
		public int luckyWheelFreeDrawTiems;
		public int bwarenaDayBuyTiems;
		public int title;
		public byte canGetMissVit;
		public List<Integer> activityLastTimes;
		public int vipRewardPrice;
		public byte freeTransfrom;
		public int taxReduction;
		public int reviveReduction;
		public float sectTaskRewardRate;
		public float teamMapDropTimeRate;
		public List<DummyGoods> PBTCashBackRewards;
	}

	public static class PayLevelCFGS implements Stream.IStreamable
	{

		public PayLevelCFGS() { }

		public PayLevelCFGS(int level, String id, int buyNum, int worth, 
		                    int money, int points, int diamond, int credit, 
		                    List<Integer> rebates, float price, int type, int param)
		{
			this.level = level;
			this.id = id;
			this.buyNum = buyNum;
			this.worth = worth;
			this.money = money;
			this.points = points;
			this.diamond = diamond;
			this.credit = credit;
			this.rebates = rebates;
			this.price = price;
			this.type = type;
			this.param = param;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			id = is.popString();
			buyNum = is.popInteger();
			worth = is.popInteger();
			money = is.popInteger();
			points = is.popInteger();
			diamond = is.popInteger();
			credit = is.popInteger();
			rebates = is.popIntegerList();
			price = is.popFloat();
			type = is.popInteger();
			param = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushString(id);
			os.pushInteger(buyNum);
			os.pushInteger(worth);
			os.pushInteger(money);
			os.pushInteger(points);
			os.pushInteger(diamond);
			os.pushInteger(credit);
			os.pushIntegerList(rebates);
			os.pushFloat(price);
			os.pushInteger(type);
			os.pushInteger(param);
		}

		public int level;
		public String id;
		public int buyNum;
		public int worth;
		public int money;
		public int points;
		public int diamond;
		public int credit;
		public List<Integer> rebates;
		public float price;
		public int type;
		public int param;
	}

	public static class PayCFGS implements Stream.IStreamable
	{

		public PayCFGS() { }

		public PayCFGS(int id, Map<Integer, PayLevelCFGS> payLevels)
		{
			this.id = id;
			this.payLevels = payLevels;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			payLevels = is.popIntegerTreeMap(PayLevelCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerMap(payLevels);
		}

		public int id;
		public Map<Integer, PayLevelCFGS> payLevels;
	}

	public static class ChannelCFGS implements Stream.IStreamable
	{

		public ChannelCFGS() { }

		public ChannelCFGS(int id, String name, int payId)
		{
			this.id = id;
			this.name = name;
			this.payId = payId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			payId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(payId);
		}

		public int id;
		public String name;
		public int payId;
	}

	public static class SpecialCardCFGS implements Stream.IStreamable
	{

		public SpecialCardCFGS() { }

		public SpecialCardCFGS(List<AttrCFGS> attrs, List<DummyGoods> dayReward, int lastTime, int offlineAddtion, 
		                       float takeVitAddtion)
		{
			this.attrs = attrs;
			this.dayReward = dayReward;
			this.lastTime = lastTime;
			this.offlineAddtion = offlineAddtion;
			this.takeVitAddtion = takeVitAddtion;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			attrs = is.popList(AttrCFGS.class);
			dayReward = is.popList(DummyGoods.class);
			lastTime = is.popInteger();
			offlineAddtion = is.popInteger();
			takeVitAddtion = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(attrs);
			os.pushList(dayReward);
			os.pushInteger(lastTime);
			os.pushInteger(offlineAddtion);
			os.pushFloat(takeVitAddtion);
		}

		public List<AttrCFGS> attrs;
		public List<DummyGoods> dayReward;
		public int lastTime;
		public int offlineAddtion;
		public float takeVitAddtion;
	}

	public static class RankCFGS implements Stream.IStreamable
	{

		public RankCFGS() { }

		public RankCFGS(int id, int length, List<Integer> refreshTime, byte rankType, 
		                int lvlReq, List<RankTitle> gainTitles, int titleLastRank)
		{
			this.id = id;
			this.length = length;
			this.refreshTime = refreshTime;
			this.rankType = rankType;
			this.lvlReq = lvlReq;
			this.gainTitles = gainTitles;
			this.titleLastRank = titleLastRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			length = is.popInteger();
			refreshTime = is.popIntegerList();
			rankType = is.popByte();
			lvlReq = is.popInteger();
			gainTitles = is.popList(RankTitle.class);
			titleLastRank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(length);
			os.pushIntegerList(refreshTime);
			os.pushByte(rankType);
			os.pushInteger(lvlReq);
			os.pushList(gainTitles);
			os.pushInteger(titleLastRank);
		}

		public int id;
		public int length;
		public List<Integer> refreshTime;
		public byte rankType;
		public int lvlReq;
		public List<RankTitle> gainTitles;
		public int titleLastRank;
	}

	public static class RoleRankCFGS implements Stream.IStreamable
	{

		public RoleRankCFGS() { }

		public RoleRankCFGS(RankCFGS rank)
		{
			this.rank = rank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( rank == null )
				rank = new RankCFGS();
			is.pop(rank);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(rank);
		}

		public RankCFGS rank;
	}

	public static class SectRankCFGS implements Stream.IStreamable
	{

		public SectRankCFGS() { }

		public SectRankCFGS(RankCFGS rank)
		{
			this.rank = rank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( rank == null )
				rank = new RankCFGS();
			is.pop(rank);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(rank);
		}

		public RankCFGS rank;
	}

	public static class RankTitle implements Stream.IStreamable
	{

		public RankTitle() { }

		public RankTitle(int floor, int title)
		{
			this.floor = floor;
			this.title = title;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			floor = is.popInteger();
			title = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(floor);
			os.pushInteger(title);
		}

		public int floor;
		public int title;
	}

	public static class ClanLevelCFGS implements Stream.IStreamable
	{

		public ClanLevelCFGS() { }

		public ClanLevelCFGS(int level, int xuetie, int yaocao, int shengwang, 
		                     int subLvl, int doPowerMax, int elderCountMax, int shareCountMax)
		{
			this.level = level;
			this.xuetie = xuetie;
			this.yaocao = yaocao;
			this.shengwang = shengwang;
			this.subLvl = subLvl;
			this.doPowerMax = doPowerMax;
			this.elderCountMax = elderCountMax;
			this.shareCountMax = shareCountMax;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			xuetie = is.popInteger();
			yaocao = is.popInteger();
			shengwang = is.popInteger();
			subLvl = is.popInteger();
			doPowerMax = is.popInteger();
			elderCountMax = is.popInteger();
			shareCountMax = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(xuetie);
			os.pushInteger(yaocao);
			os.pushInteger(shengwang);
			os.pushInteger(subLvl);
			os.pushInteger(doPowerMax);
			os.pushInteger(elderCountMax);
			os.pushInteger(shareCountMax);
		}

		public int level;
		public int xuetie;
		public int yaocao;
		public int shengwang;
		public int subLvl;
		public int doPowerMax;
		public int elderCountMax;
		public int shareCountMax;
	}

	public static class ClanSupplementCFGS implements Stream.IStreamable
	{

		public ClanSupplementCFGS() { }

		public ClanSupplementCFGS(List<Integer> doPowerBuyDiamond, int buyDoPower, int appointUseDoPower, int recruitUseDiamond, 
		                          int kickUseDoPower, int appointElderLevel)
		{
			this.doPowerBuyDiamond = doPowerBuyDiamond;
			this.buyDoPower = buyDoPower;
			this.appointUseDoPower = appointUseDoPower;
			this.recruitUseDiamond = recruitUseDiamond;
			this.kickUseDoPower = kickUseDoPower;
			this.appointElderLevel = appointElderLevel;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			doPowerBuyDiamond = is.popIntegerList();
			buyDoPower = is.popInteger();
			appointUseDoPower = is.popInteger();
			recruitUseDiamond = is.popInteger();
			kickUseDoPower = is.popInteger();
			appointElderLevel = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(doPowerBuyDiamond);
			os.pushInteger(buyDoPower);
			os.pushInteger(appointUseDoPower);
			os.pushInteger(recruitUseDiamond);
			os.pushInteger(kickUseDoPower);
			os.pushInteger(appointElderLevel);
		}

		public List<Integer> doPowerBuyDiamond;
		public int buyDoPower;
		public int appointUseDoPower;
		public int recruitUseDiamond;
		public int kickUseDoPower;
		public int appointElderLevel;
	}

	public static class ClanShoutuCFGS implements Stream.IStreamable
	{

		public ClanShoutuCFGS() { }

		public ClanShoutuCFGS(int needLevel, List<Integer> useDoPower, List<Integer> cd1, int addSpeed, 
		                      List<Integer> genDisciples, float range, List<Integer> cd2)
		{
			this.needLevel = needLevel;
			this.useDoPower = useDoPower;
			this.cd1 = cd1;
			this.addSpeed = addSpeed;
			this.genDisciples = genDisciples;
			this.range = range;
			this.cd2 = cd2;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			needLevel = is.popInteger();
			useDoPower = is.popIntegerList();
			cd1 = is.popIntegerList();
			addSpeed = is.popInteger();
			genDisciples = is.popIntegerList();
			range = is.popFloat();
			cd2 = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(needLevel);
			os.pushIntegerList(useDoPower);
			os.pushIntegerList(cd1);
			os.pushInteger(addSpeed);
			os.pushIntegerList(genDisciples);
			os.pushFloat(range);
			os.pushIntegerList(cd2);
		}

		public int needLevel;
		public List<Integer> useDoPower;
		public List<Integer> cd1;
		public int addSpeed;
		public List<Integer> genDisciples;
		public float range;
		public List<Integer> cd2;
	}

	public static class ClanBiwuCFGS implements Stream.IStreamable
	{

		public ClanBiwuCFGS() { }

		public ClanBiwuCFGS(int needLevel, int needDZ, List<Integer> useDoPower, List<Integer> cd1, 
		                    int addSpeed, List<Integer> cd2)
		{
			this.needLevel = needLevel;
			this.needDZ = needDZ;
			this.useDoPower = useDoPower;
			this.cd1 = cd1;
			this.addSpeed = addSpeed;
			this.cd2 = cd2;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			needLevel = is.popInteger();
			needDZ = is.popInteger();
			useDoPower = is.popIntegerList();
			cd1 = is.popIntegerList();
			addSpeed = is.popInteger();
			cd2 = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(needLevel);
			os.pushInteger(needDZ);
			os.pushIntegerList(useDoPower);
			os.pushIntegerList(cd1);
			os.pushInteger(addSpeed);
			os.pushIntegerList(cd2);
		}

		public int needLevel;
		public int needDZ;
		public List<Integer> useDoPower;
		public List<Integer> cd1;
		public int addSpeed;
		public List<Integer> cd2;
	}

	public static class ClanBushiCFGS implements Stream.IStreamable
	{

		public ClanBushiCFGS() { }

		public ClanBushiCFGS(int needLevel, int needItemId, int needItemCount, int cd, 
		                     int baseValue, float floatValue)
		{
			this.needLevel = needLevel;
			this.needItemId = needItemId;
			this.needItemCount = needItemCount;
			this.cd = cd;
			this.baseValue = baseValue;
			this.floatValue = floatValue;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			needLevel = is.popInteger();
			needItemId = is.popInteger();
			needItemCount = is.popInteger();
			cd = is.popInteger();
			baseValue = is.popInteger();
			floatValue = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(needLevel);
			os.pushInteger(needItemId);
			os.pushInteger(needItemCount);
			os.pushInteger(cd);
			os.pushInteger(baseValue);
			os.pushFloat(floatValue);
		}

		public int needLevel;
		public int needItemId;
		public int needItemCount;
		public int cd;
		public int baseValue;
		public float floatValue;
	}

	public static class ClanChuandaoCFGS implements Stream.IStreamable
	{

		public ClanChuandaoCFGS() { }

		public ClanChuandaoCFGS(int needLevel, int needItemId, int needItemCount, int needjydz, 
		                        int cd)
		{
			this.needLevel = needLevel;
			this.needItemId = needItemId;
			this.needItemCount = needItemCount;
			this.needjydz = needjydz;
			this.cd = cd;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			needLevel = is.popInteger();
			needItemId = is.popInteger();
			needItemCount = is.popInteger();
			needjydz = is.popInteger();
			cd = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(needLevel);
			os.pushInteger(needItemId);
			os.pushInteger(needItemCount);
			os.pushInteger(needjydz);
			os.pushInteger(cd);
		}

		public int needLevel;
		public int needItemId;
		public int needItemCount;
		public int needjydz;
		public int cd;
	}

	public static class ClanDizdtangAttriCFGS implements Stream.IStreamable
	{

		public ClanDizdtangAttriCFGS() { }

		public ClanDizdtangAttriCFGS(int level, int value)
		{
			this.level = level;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(value);
		}

		public int level;
		public int value;
	}

	public static class ClanDizdtangCFGS implements Stream.IStreamable
	{

		public ClanDizdtangCFGS() { }

		public ClanDizdtangCFGS(int needLevel, List<ClanDizdtangAttriCFGS> wgValue, List<ClanDizdtangAttriCFGS> xfValue, List<ClanDizdtangAttriCFGS> yqValue, 
		                        List<ClanDizdtangAttriCFGS> tjValue)
		{
			this.needLevel = needLevel;
			this.wgValue = wgValue;
			this.xfValue = xfValue;
			this.yqValue = yqValue;
			this.tjValue = tjValue;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			needLevel = is.popInteger();
			wgValue = is.popList(ClanDizdtangAttriCFGS.class);
			xfValue = is.popList(ClanDizdtangAttriCFGS.class);
			yqValue = is.popList(ClanDizdtangAttriCFGS.class);
			tjValue = is.popList(ClanDizdtangAttriCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(needLevel);
			os.pushList(wgValue);
			os.pushList(xfValue);
			os.pushList(yqValue);
			os.pushList(tjValue);
		}

		public int needLevel;
		public List<ClanDizdtangAttriCFGS> wgValue;
		public List<ClanDizdtangAttriCFGS> xfValue;
		public List<ClanDizdtangAttriCFGS> yqValue;
		public List<ClanDizdtangAttriCFGS> tjValue;
	}

	public static class ClanTaskParamCFGS implements Stream.IStreamable
	{

		public ClanTaskParamCFGS() { }

		public ClanTaskParamCFGS(int refreshDoPower, int dayAddDzCount, List<Integer> dayAddDzDoPower, int dayTaskMax, 
		                         float rewardRate, float critRate, float remainRate, float recoverRate, 
		                         int mapId, int fightTime, int autoCloseTime, int fightStartCD)
		{
			this.refreshDoPower = refreshDoPower;
			this.dayAddDzCount = dayAddDzCount;
			this.dayAddDzDoPower = dayAddDzDoPower;
			this.dayTaskMax = dayTaskMax;
			this.rewardRate = rewardRate;
			this.critRate = critRate;
			this.remainRate = remainRate;
			this.recoverRate = recoverRate;
			this.mapId = mapId;
			this.fightTime = fightTime;
			this.autoCloseTime = autoCloseTime;
			this.fightStartCD = fightStartCD;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			refreshDoPower = is.popInteger();
			dayAddDzCount = is.popInteger();
			dayAddDzDoPower = is.popIntegerList();
			dayTaskMax = is.popInteger();
			rewardRate = is.popFloat();
			critRate = is.popFloat();
			remainRate = is.popFloat();
			recoverRate = is.popFloat();
			mapId = is.popInteger();
			fightTime = is.popInteger();
			autoCloseTime = is.popInteger();
			fightStartCD = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(refreshDoPower);
			os.pushInteger(dayAddDzCount);
			os.pushIntegerList(dayAddDzDoPower);
			os.pushInteger(dayTaskMax);
			os.pushFloat(rewardRate);
			os.pushFloat(critRate);
			os.pushFloat(remainRate);
			os.pushFloat(recoverRate);
			os.pushInteger(mapId);
			os.pushInteger(fightTime);
			os.pushInteger(autoCloseTime);
			os.pushInteger(fightStartCD);
		}

		public int refreshDoPower;
		public int dayAddDzCount;
		public List<Integer> dayAddDzDoPower;
		public int dayTaskMax;
		public float rewardRate;
		public float critRate;
		public float remainRate;
		public float recoverRate;
		public int mapId;
		public int fightTime;
		public int autoCloseTime;
		public int fightStartCD;
	}

	public static class ClanOccupyOreLvlCFGS implements Stream.IStreamable
	{

		public ClanOccupyOreLvlCFGS() { }

		public ClanOccupyOreLvlCFGS(int Lvl, int ironPrestige, int ironItemId, int ironItemCount, 
		                            float ironAdditionRate, int herbPrestige, int herbItemId, int herbItemCount, 
		                            float herbAdditionRate, int thorpePrestige, int thorpeItemId, int thorpeItemCount, 
		                            float thorpeAdditionRate, int needClanLevel)
		{
			this.Lvl = Lvl;
			this.ironPrestige = ironPrestige;
			this.ironItemId = ironItemId;
			this.ironItemCount = ironItemCount;
			this.ironAdditionRate = ironAdditionRate;
			this.herbPrestige = herbPrestige;
			this.herbItemId = herbItemId;
			this.herbItemCount = herbItemCount;
			this.herbAdditionRate = herbAdditionRate;
			this.thorpePrestige = thorpePrestige;
			this.thorpeItemId = thorpeItemId;
			this.thorpeItemCount = thorpeItemCount;
			this.thorpeAdditionRate = thorpeAdditionRate;
			this.needClanLevel = needClanLevel;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			Lvl = is.popInteger();
			ironPrestige = is.popInteger();
			ironItemId = is.popInteger();
			ironItemCount = is.popInteger();
			ironAdditionRate = is.popFloat();
			herbPrestige = is.popInteger();
			herbItemId = is.popInteger();
			herbItemCount = is.popInteger();
			herbAdditionRate = is.popFloat();
			thorpePrestige = is.popInteger();
			thorpeItemId = is.popInteger();
			thorpeItemCount = is.popInteger();
			thorpeAdditionRate = is.popFloat();
			needClanLevel = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(Lvl);
			os.pushInteger(ironPrestige);
			os.pushInteger(ironItemId);
			os.pushInteger(ironItemCount);
			os.pushFloat(ironAdditionRate);
			os.pushInteger(herbPrestige);
			os.pushInteger(herbItemId);
			os.pushInteger(herbItemCount);
			os.pushFloat(herbAdditionRate);
			os.pushInteger(thorpePrestige);
			os.pushInteger(thorpeItemId);
			os.pushInteger(thorpeItemCount);
			os.pushFloat(thorpeAdditionRate);
			os.pushInteger(needClanLevel);
		}

		public int Lvl;
		public int ironPrestige;
		public int ironItemId;
		public int ironItemCount;
		public float ironAdditionRate;
		public int herbPrestige;
		public int herbItemId;
		public int herbItemCount;
		public float herbAdditionRate;
		public int thorpePrestige;
		public int thorpeItemId;
		public int thorpeItemCount;
		public float thorpeAdditionRate;
		public int needClanLevel;
	}

	public static class ClanOccupyOreCFGS implements Stream.IStreamable
	{

		public ClanOccupyOreCFGS() { }

		public ClanOccupyOreCFGS(int ironOpenLvl, int ironBaseValue, int herbOpenLvl, int herbBaseValue, 
		                         int thorpeOpenLvl, int thorpeBaseValue, int occupyValue, int finishTime, 
		                         float harryBase, int failDiamondDown, int faildiamondUp, int successDiamondDown, 
		                         int successDiamondUp, int petLevel, List<ClanOccupyOreLvlCFGS> oreLvl)
		{
			this.ironOpenLvl = ironOpenLvl;
			this.ironBaseValue = ironBaseValue;
			this.herbOpenLvl = herbOpenLvl;
			this.herbBaseValue = herbBaseValue;
			this.thorpeOpenLvl = thorpeOpenLvl;
			this.thorpeBaseValue = thorpeBaseValue;
			this.occupyValue = occupyValue;
			this.finishTime = finishTime;
			this.harryBase = harryBase;
			this.failDiamondDown = failDiamondDown;
			this.faildiamondUp = faildiamondUp;
			this.successDiamondDown = successDiamondDown;
			this.successDiamondUp = successDiamondUp;
			this.petLevel = petLevel;
			this.oreLvl = oreLvl;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ironOpenLvl = is.popInteger();
			ironBaseValue = is.popInteger();
			herbOpenLvl = is.popInteger();
			herbBaseValue = is.popInteger();
			thorpeOpenLvl = is.popInteger();
			thorpeBaseValue = is.popInteger();
			occupyValue = is.popInteger();
			finishTime = is.popInteger();
			harryBase = is.popFloat();
			failDiamondDown = is.popInteger();
			faildiamondUp = is.popInteger();
			successDiamondDown = is.popInteger();
			successDiamondUp = is.popInteger();
			petLevel = is.popInteger();
			oreLvl = is.popList(ClanOccupyOreLvlCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ironOpenLvl);
			os.pushInteger(ironBaseValue);
			os.pushInteger(herbOpenLvl);
			os.pushInteger(herbBaseValue);
			os.pushInteger(thorpeOpenLvl);
			os.pushInteger(thorpeBaseValue);
			os.pushInteger(occupyValue);
			os.pushInteger(finishTime);
			os.pushFloat(harryBase);
			os.pushInteger(failDiamondDown);
			os.pushInteger(faildiamondUp);
			os.pushInteger(successDiamondDown);
			os.pushInteger(successDiamondUp);
			os.pushInteger(petLevel);
			os.pushList(oreLvl);
		}

		public int ironOpenLvl;
		public int ironBaseValue;
		public int herbOpenLvl;
		public int herbBaseValue;
		public int thorpeOpenLvl;
		public int thorpeBaseValue;
		public int occupyValue;
		public int finishTime;
		public float harryBase;
		public int failDiamondDown;
		public int faildiamondUp;
		public int successDiamondDown;
		public int successDiamondUp;
		public int petLevel;
		public List<ClanOccupyOreLvlCFGS> oreLvl;
	}

	public static class ClanRobOreCFGS implements Stream.IStreamable
	{

		public ClanRobOreCFGS() { }

		public ClanRobOreCFGS(List<Integer> searchCoin, int searchTime, int pointUp, int pointSpeed, 
		                      int usePoint, int giveEnemyPoint, int diamondDown, int diamondUp, 
		                      int dayGivePoint, float successRatio, int petLevel, int mapId, 
		                      int fightTime, int autoCloseTime, int fightStartCD)
		{
			this.searchCoin = searchCoin;
			this.searchTime = searchTime;
			this.pointUp = pointUp;
			this.pointSpeed = pointSpeed;
			this.usePoint = usePoint;
			this.giveEnemyPoint = giveEnemyPoint;
			this.diamondDown = diamondDown;
			this.diamondUp = diamondUp;
			this.dayGivePoint = dayGivePoint;
			this.successRatio = successRatio;
			this.petLevel = petLevel;
			this.mapId = mapId;
			this.fightTime = fightTime;
			this.autoCloseTime = autoCloseTime;
			this.fightStartCD = fightStartCD;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			searchCoin = is.popIntegerList();
			searchTime = is.popInteger();
			pointUp = is.popInteger();
			pointSpeed = is.popInteger();
			usePoint = is.popInteger();
			giveEnemyPoint = is.popInteger();
			diamondDown = is.popInteger();
			diamondUp = is.popInteger();
			dayGivePoint = is.popInteger();
			successRatio = is.popFloat();
			petLevel = is.popInteger();
			mapId = is.popInteger();
			fightTime = is.popInteger();
			autoCloseTime = is.popInteger();
			fightStartCD = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(searchCoin);
			os.pushInteger(searchTime);
			os.pushInteger(pointUp);
			os.pushInteger(pointSpeed);
			os.pushInteger(usePoint);
			os.pushInteger(giveEnemyPoint);
			os.pushInteger(diamondDown);
			os.pushInteger(diamondUp);
			os.pushInteger(dayGivePoint);
			os.pushFloat(successRatio);
			os.pushInteger(petLevel);
			os.pushInteger(mapId);
			os.pushInteger(fightTime);
			os.pushInteger(autoCloseTime);
			os.pushInteger(fightStartCD);
		}

		public List<Integer> searchCoin;
		public int searchTime;
		public int pointUp;
		public int pointSpeed;
		public int usePoint;
		public int giveEnemyPoint;
		public int diamondDown;
		public int diamondUp;
		public int dayGivePoint;
		public float successRatio;
		public int petLevel;
		public int mapId;
		public int fightTime;
		public int autoCloseTime;
		public int fightStartCD;
	}

	public static class ClanExistPositionCFGS implements Stream.IStreamable
	{

		public ClanExistPositionCFGS() { }

		public ClanExistPositionCFGS(int id, int x, int y)
		{
			this.id = id;
			this.x = x;
			this.y = y;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			x = is.popInteger();
			y = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(x);
			os.pushInteger(y);
		}

		public int id;
		public int x;
		public int y;
	}

	public static class ClanOthersCFGS implements Stream.IStreamable
	{

		public ClanOthersCFGS() { }

		public ClanOthersCFGS(List<Integer> moveCost, int jyExpMax, Set<Integer> orgRecipes, int jyMax, 
		                      int jyInit, int ptInit, int xuetieInit, int yaocaoInit, 
		                      int doPowerInit, int prestigeInit, int jyExpInit, int memberMax, 
		                      int disbandCDLevel, int disbandCD, Map<Long, ClanExistPositionCFGS> existPosition)
		{
			this.moveCost = moveCost;
			this.jyExpMax = jyExpMax;
			this.orgRecipes = orgRecipes;
			this.jyMax = jyMax;
			this.jyInit = jyInit;
			this.ptInit = ptInit;
			this.xuetieInit = xuetieInit;
			this.yaocaoInit = yaocaoInit;
			this.doPowerInit = doPowerInit;
			this.prestigeInit = prestigeInit;
			this.jyExpInit = jyExpInit;
			this.memberMax = memberMax;
			this.disbandCDLevel = disbandCDLevel;
			this.disbandCD = disbandCD;
			this.existPosition = existPosition;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			moveCost = is.popIntegerList();
			jyExpMax = is.popInteger();
			orgRecipes = is.popIntegerTreeSet();
			jyMax = is.popInteger();
			jyInit = is.popInteger();
			ptInit = is.popInteger();
			xuetieInit = is.popInteger();
			yaocaoInit = is.popInteger();
			doPowerInit = is.popInteger();
			prestigeInit = is.popInteger();
			jyExpInit = is.popInteger();
			memberMax = is.popInteger();
			disbandCDLevel = is.popInteger();
			disbandCD = is.popInteger();
			existPosition = is.popLongTreeMap(ClanExistPositionCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(moveCost);
			os.pushInteger(jyExpMax);
			os.pushIntegerSet(orgRecipes);
			os.pushInteger(jyMax);
			os.pushInteger(jyInit);
			os.pushInteger(ptInit);
			os.pushInteger(xuetieInit);
			os.pushInteger(yaocaoInit);
			os.pushInteger(doPowerInit);
			os.pushInteger(prestigeInit);
			os.pushInteger(jyExpInit);
			os.pushInteger(memberMax);
			os.pushInteger(disbandCDLevel);
			os.pushInteger(disbandCD);
			os.pushLongMap(existPosition);
		}

		public List<Integer> moveCost;
		public int jyExpMax;
		public Set<Integer> orgRecipes;
		public int jyMax;
		public int jyInit;
		public int ptInit;
		public int xuetieInit;
		public int yaocaoInit;
		public int doPowerInit;
		public int prestigeInit;
		public int jyExpInit;
		public int memberMax;
		public int disbandCDLevel;
		public int disbandCD;
		public Map<Long, ClanExistPositionCFGS> existPosition;
	}

	public static class ClanFightTeamCFGS implements Stream.IStreamable
	{

		public ClanFightTeamCFGS() { }

		public ClanFightTeamCFGS(int teamSize, List<Integer> teamLimit, int petMinLvl)
		{
			this.teamSize = teamSize;
			this.teamLimit = teamLimit;
			this.petMinLvl = petMinLvl;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			teamSize = is.popInteger();
			teamLimit = is.popIntegerList();
			petMinLvl = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(teamSize);
			os.pushIntegerList(teamLimit);
			os.pushInteger(petMinLvl);
		}

		public int teamSize;
		public List<Integer> teamLimit;
		public int petMinLvl;
	}

	public static class ClanNormalBattleCFGS implements Stream.IStreamable
	{

		public ClanNormalBattleCFGS() { }

		public ClanNormalBattleCFGS(int useDoPower, int clanMinLvl, int ensureTime, int mapId, 
		                            int battleTime, int battleEndCloseTime, int battleStartTime, int battleOpenUpTime, 
		                            int battleOpenDownTime, int expiredTime, List<Float> moveTime, int moveShortTime, 
		                            int moveLongTime, int keekDiamond, float failRateXuantie, float failRateyaocao, 
		                            float failRatePrestige, int failPrestigeLel, float reduceXuantieRate, float reduceYaocaoRate, 
		                            float reducePrestigeRate)
		{
			this.useDoPower = useDoPower;
			this.clanMinLvl = clanMinLvl;
			this.ensureTime = ensureTime;
			this.mapId = mapId;
			this.battleTime = battleTime;
			this.battleEndCloseTime = battleEndCloseTime;
			this.battleStartTime = battleStartTime;
			this.battleOpenUpTime = battleOpenUpTime;
			this.battleOpenDownTime = battleOpenDownTime;
			this.expiredTime = expiredTime;
			this.moveTime = moveTime;
			this.moveShortTime = moveShortTime;
			this.moveLongTime = moveLongTime;
			this.keekDiamond = keekDiamond;
			this.failRateXuantie = failRateXuantie;
			this.failRateyaocao = failRateyaocao;
			this.failRatePrestige = failRatePrestige;
			this.failPrestigeLel = failPrestigeLel;
			this.reduceXuantieRate = reduceXuantieRate;
			this.reduceYaocaoRate = reduceYaocaoRate;
			this.reducePrestigeRate = reducePrestigeRate;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			useDoPower = is.popInteger();
			clanMinLvl = is.popInteger();
			ensureTime = is.popInteger();
			mapId = is.popInteger();
			battleTime = is.popInteger();
			battleEndCloseTime = is.popInteger();
			battleStartTime = is.popInteger();
			battleOpenUpTime = is.popInteger();
			battleOpenDownTime = is.popInteger();
			expiredTime = is.popInteger();
			moveTime = is.popFloatList();
			moveShortTime = is.popInteger();
			moveLongTime = is.popInteger();
			keekDiamond = is.popInteger();
			failRateXuantie = is.popFloat();
			failRateyaocao = is.popFloat();
			failRatePrestige = is.popFloat();
			failPrestigeLel = is.popInteger();
			reduceXuantieRate = is.popFloat();
			reduceYaocaoRate = is.popFloat();
			reducePrestigeRate = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(useDoPower);
			os.pushInteger(clanMinLvl);
			os.pushInteger(ensureTime);
			os.pushInteger(mapId);
			os.pushInteger(battleTime);
			os.pushInteger(battleEndCloseTime);
			os.pushInteger(battleStartTime);
			os.pushInteger(battleOpenUpTime);
			os.pushInteger(battleOpenDownTime);
			os.pushInteger(expiredTime);
			os.pushFloatList(moveTime);
			os.pushInteger(moveShortTime);
			os.pushInteger(moveLongTime);
			os.pushInteger(keekDiamond);
			os.pushFloat(failRateXuantie);
			os.pushFloat(failRateyaocao);
			os.pushFloat(failRatePrestige);
			os.pushInteger(failPrestigeLel);
			os.pushFloat(reduceXuantieRate);
			os.pushFloat(reduceYaocaoRate);
			os.pushFloat(reducePrestigeRate);
		}

		public int useDoPower;
		public int clanMinLvl;
		public int ensureTime;
		public int mapId;
		public int battleTime;
		public int battleEndCloseTime;
		public int battleStartTime;
		public int battleOpenUpTime;
		public int battleOpenDownTime;
		public int expiredTime;
		public List<Float> moveTime;
		public int moveShortTime;
		public int moveLongTime;
		public int keekDiamond;
		public float failRateXuantie;
		public float failRateyaocao;
		public float failRatePrestige;
		public int failPrestigeLel;
		public float reduceXuantieRate;
		public float reduceYaocaoRate;
		public float reducePrestigeRate;
	}

	public static class ClanBattleHelpEnemyLevelCFGS implements Stream.IStreamable
	{

		public ClanBattleHelpEnemyLevelCFGS() { }

		public ClanBattleHelpEnemyLevelCFGS(int level, int prestige)
		{
			this.level = level;
			this.prestige = prestige;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			prestige = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(prestige);
		}

		public int level;
		public int prestige;
	}

	public static class ClanBattleHelpCFGS implements Stream.IStreamable
	{

		public ClanBattleHelpCFGS() { }

		public ClanBattleHelpCFGS(int qyRemainTime, int zyRemainTime, int mapId, int battleTime, 
		                          int battleEndCloseTime, int battleStartTime, int expiredTime, List<ClanBattleHelpEnemyLevelCFGS> enemyLevel, 
		                          int battleHelpTimes)
		{
			this.qyRemainTime = qyRemainTime;
			this.zyRemainTime = zyRemainTime;
			this.mapId = mapId;
			this.battleTime = battleTime;
			this.battleEndCloseTime = battleEndCloseTime;
			this.battleStartTime = battleStartTime;
			this.expiredTime = expiredTime;
			this.enemyLevel = enemyLevel;
			this.battleHelpTimes = battleHelpTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			qyRemainTime = is.popInteger();
			zyRemainTime = is.popInteger();
			mapId = is.popInteger();
			battleTime = is.popInteger();
			battleEndCloseTime = is.popInteger();
			battleStartTime = is.popInteger();
			expiredTime = is.popInteger();
			enemyLevel = is.popList(ClanBattleHelpEnemyLevelCFGS.class);
			battleHelpTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(qyRemainTime);
			os.pushInteger(zyRemainTime);
			os.pushInteger(mapId);
			os.pushInteger(battleTime);
			os.pushInteger(battleEndCloseTime);
			os.pushInteger(battleStartTime);
			os.pushInteger(expiredTime);
			os.pushList(enemyLevel);
			os.pushInteger(battleHelpTimes);
		}

		public int qyRemainTime;
		public int zyRemainTime;
		public int mapId;
		public int battleTime;
		public int battleEndCloseTime;
		public int battleStartTime;
		public int expiredTime;
		public List<ClanBattleHelpEnemyLevelCFGS> enemyLevel;
		public int battleHelpTimes;
	}

	public static class ClanAddPrestigeCFGS implements Stream.IStreamable
	{

		public ClanAddPrestigeCFGS() { }

		public ClanAddPrestigeCFGS(Map<Integer, Integer> items)
		{
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(items);
		}

		public Map<Integer, Integer> items;
	}

	public static class ClanCFGS implements Stream.IStreamable
	{

		public ClanCFGS() { }

		public ClanCFGS(int level, int vip, int diamond, List<Integer> addLevels, 
		                List<ClanLevelCFGS> clanLevels, ClanSupplementCFGS supplement, ClanShoutuCFGS shoutu, ClanBiwuCFGS biwu, 
		                ClanBushiCFGS bushi, ClanChuandaoCFGS chuandao, ClanDizdtangCFGS dizitang, ClanTaskParamCFGS taskParam, 
		                ClanOccupyOreCFGS occupyOre, ClanRobOreCFGS robOre, ClanOthersCFGS others, ClanFightTeamCFGS fightTeam, 
		                ClanNormalBattleCFGS normalBattle, ClanBattleHelpCFGS battleHelp, ClanAddPrestigeCFGS addPrestige, List<ClanRankCFGS> clanRanks)
		{
			this.level = level;
			this.vip = vip;
			this.diamond = diamond;
			this.addLevels = addLevels;
			this.clanLevels = clanLevels;
			this.supplement = supplement;
			this.shoutu = shoutu;
			this.biwu = biwu;
			this.bushi = bushi;
			this.chuandao = chuandao;
			this.dizitang = dizitang;
			this.taskParam = taskParam;
			this.occupyOre = occupyOre;
			this.robOre = robOre;
			this.others = others;
			this.fightTeam = fightTeam;
			this.normalBattle = normalBattle;
			this.battleHelp = battleHelp;
			this.addPrestige = addPrestige;
			this.clanRanks = clanRanks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			vip = is.popInteger();
			diamond = is.popInteger();
			addLevels = is.popIntegerList();
			clanLevels = is.popList(ClanLevelCFGS.class);
			if( supplement == null )
				supplement = new ClanSupplementCFGS();
			is.pop(supplement);
			if( shoutu == null )
				shoutu = new ClanShoutuCFGS();
			is.pop(shoutu);
			if( biwu == null )
				biwu = new ClanBiwuCFGS();
			is.pop(biwu);
			if( bushi == null )
				bushi = new ClanBushiCFGS();
			is.pop(bushi);
			if( chuandao == null )
				chuandao = new ClanChuandaoCFGS();
			is.pop(chuandao);
			if( dizitang == null )
				dizitang = new ClanDizdtangCFGS();
			is.pop(dizitang);
			if( taskParam == null )
				taskParam = new ClanTaskParamCFGS();
			is.pop(taskParam);
			if( occupyOre == null )
				occupyOre = new ClanOccupyOreCFGS();
			is.pop(occupyOre);
			if( robOre == null )
				robOre = new ClanRobOreCFGS();
			is.pop(robOre);
			if( others == null )
				others = new ClanOthersCFGS();
			is.pop(others);
			if( fightTeam == null )
				fightTeam = new ClanFightTeamCFGS();
			is.pop(fightTeam);
			if( normalBattle == null )
				normalBattle = new ClanNormalBattleCFGS();
			is.pop(normalBattle);
			if( battleHelp == null )
				battleHelp = new ClanBattleHelpCFGS();
			is.pop(battleHelp);
			if( addPrestige == null )
				addPrestige = new ClanAddPrestigeCFGS();
			is.pop(addPrestige);
			clanRanks = is.popList(ClanRankCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(vip);
			os.pushInteger(diamond);
			os.pushIntegerList(addLevels);
			os.pushList(clanLevels);
			os.push(supplement);
			os.push(shoutu);
			os.push(biwu);
			os.push(bushi);
			os.push(chuandao);
			os.push(dizitang);
			os.push(taskParam);
			os.push(occupyOre);
			os.push(robOre);
			os.push(others);
			os.push(fightTeam);
			os.push(normalBattle);
			os.push(battleHelp);
			os.push(addPrestige);
			os.pushList(clanRanks);
		}

		public int level;
		public int vip;
		public int diamond;
		public List<Integer> addLevels;
		public List<ClanLevelCFGS> clanLevels;
		public ClanSupplementCFGS supplement;
		public ClanShoutuCFGS shoutu;
		public ClanBiwuCFGS biwu;
		public ClanBushiCFGS bushi;
		public ClanChuandaoCFGS chuandao;
		public ClanDizdtangCFGS dizitang;
		public ClanTaskParamCFGS taskParam;
		public ClanOccupyOreCFGS occupyOre;
		public ClanRobOreCFGS robOre;
		public ClanOthersCFGS others;
		public ClanFightTeamCFGS fightTeam;
		public ClanNormalBattleCFGS normalBattle;
		public ClanBattleHelpCFGS battleHelp;
		public ClanAddPrestigeCFGS addPrestige;
		public List<ClanRankCFGS> clanRanks;
	}

	public static class ClanRankCFGS implements Stream.IStreamable
	{

		public ClanRankCFGS() { }

		public ClanRankCFGS(int rankFloor, int whiteTitle, int blackTitle)
		{
			this.rankFloor = rankFloor;
			this.whiteTitle = whiteTitle;
			this.blackTitle = blackTitle;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rankFloor = is.popInteger();
			whiteTitle = is.popInteger();
			blackTitle = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rankFloor);
			os.pushInteger(whiteTitle);
			os.pushInteger(blackTitle);
		}

		public int rankFloor;
		public int whiteTitle;
		public int blackTitle;
	}

	public static class ClanDiscipleNameCFGS implements Stream.IStreamable
	{

		public ClanDiscipleNameCFGS() { }

		public ClanDiscipleNameCFGS(int id, String name, int icon)
		{
			this.id = id;
			this.name = name;
			this.icon = icon;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			icon = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(icon);
		}

		public int id;
		public String name;
		public int icon;
	}

	public static class ClanPointToDiscipleCFGS implements Stream.IStreamable
	{

		public ClanPointToDiscipleCFGS() { }

		public ClanPointToDiscipleCFGS(int dzCount, int point)
		{
			this.dzCount = dzCount;
			this.point = point;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dzCount = is.popInteger();
			point = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dzCount);
			os.pushInteger(point);
		}

		public int dzCount;
		public int point;
	}

	public static class ClanAttriTotalCFGS implements Stream.IStreamable
	{

		public ClanAttriTotalCFGS() { }

		public ClanAttriTotalCFGS(int attriTotal, int minValue, int maxValue)
		{
			this.attriTotal = attriTotal;
			this.minValue = minValue;
			this.maxValue = maxValue;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			attriTotal = is.popInteger();
			minValue = is.popInteger();
			maxValue = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(attriTotal);
			os.pushInteger(minValue);
			os.pushInteger(maxValue);
		}

		public int attriTotal;
		public int minValue;
		public int maxValue;
	}

	public static class ClanRushTollgateCFGS implements Stream.IStreamable
	{

		public ClanRushTollgateCFGS() { }

		public ClanRushTollgateCFGS(int count, int exp, float rate, float attriRate, 
		                            float skillRate, int diamond, int minValue, int maxValue)
		{
			this.count = count;
			this.exp = exp;
			this.rate = rate;
			this.attriRate = attriRate;
			this.skillRate = skillRate;
			this.diamond = diamond;
			this.minValue = minValue;
			this.maxValue = maxValue;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			count = is.popInteger();
			exp = is.popInteger();
			rate = is.popFloat();
			attriRate = is.popFloat();
			skillRate = is.popFloat();
			diamond = is.popInteger();
			minValue = is.popInteger();
			maxValue = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(count);
			os.pushInteger(exp);
			os.pushFloat(rate);
			os.pushFloat(attriRate);
			os.pushFloat(skillRate);
			os.pushInteger(diamond);
			os.pushInteger(minValue);
			os.pushInteger(maxValue);
		}

		public int count;
		public int exp;
		public float rate;
		public float attriRate;
		public float skillRate;
		public int diamond;
		public int minValue;
		public int maxValue;
	}

	public static class ClanItemUpSkillRateCFGS implements Stream.IStreamable
	{

		public ClanItemUpSkillRateCFGS() { }

		public ClanItemUpSkillRateCFGS(int level, float rate)
		{
			this.level = level;
			this.rate = rate;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			rate = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushFloat(rate);
		}

		public int level;
		public float rate;
	}

	public static class ClanItemUpAttriRateCFGS implements Stream.IStreamable
	{

		public ClanItemUpAttriRateCFGS() { }

		public ClanItemUpAttriRateCFGS(int value, float rate)
		{
			this.value = value;
			this.rate = rate;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			value = is.popInteger();
			rate = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(value);
			os.pushFloat(rate);
		}

		public int value;
		public float rate;
	}

	public static class ClanItemUpAttriCFGS implements Stream.IStreamable
	{

		public ClanItemUpAttriCFGS() { }

		public ClanItemUpAttriCFGS(int id, Map<Integer, Integer> items)
		{
			this.id = id;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerIntegerMap(items);
		}

		public int id;
		public Map<Integer, Integer> items;
	}

	public static class ClanItemUpSkillCFGS implements Stream.IStreamable
	{

		public ClanItemUpSkillCFGS() { }

		public ClanItemUpSkillCFGS(int id, List<Integer> items)
		{
			this.id = id;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			items = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerList(items);
		}

		public int id;
		public List<Integer> items;
	}

	public static class ClanEliteDZTaskCFGS implements Stream.IStreamable
	{

		public ClanEliteDZTaskCFGS() { }

		public ClanEliteDZTaskCFGS(int level, float decTimeRate, float decDiscipleRate)
		{
			this.level = level;
			this.decTimeRate = decTimeRate;
			this.decDiscipleRate = decDiscipleRate;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			decTimeRate = is.popFloat();
			decDiscipleRate = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushFloat(decTimeRate);
			os.pushFloat(decDiscipleRate);
		}

		public int level;
		public float decTimeRate;
		public float decDiscipleRate;
	}

	public static class ClanValueCFGS implements Stream.IStreamable
	{

		public ClanValueCFGS() { }

		public ClanValueCFGS(int attriSum, int eachAttri, int skillCount, int skillLvl, 
		                     List<ClanPointToDiscipleCFGS> pointToDisciple, List<ClanAttriTotalCFGS> attriTotal, List<ClanRushTollgateCFGS> rushTollgate, List<ClanItemUpSkillRateCFGS> itemUpSkill, 
		                     List<ClanItemUpAttriRateCFGS> itemUpAttri, List<ClanItemUpAttriCFGS> attriItem, List<ClanItemUpSkillCFGS> skillItem, Map<Integer, Integer> itemMappingSkill, 
		                     Map<Integer, Integer> itemMappingAttri, List<ClanEliteDZTaskCFGS> discipleTask)
		{
			this.attriSum = attriSum;
			this.eachAttri = eachAttri;
			this.skillCount = skillCount;
			this.skillLvl = skillLvl;
			this.pointToDisciple = pointToDisciple;
			this.attriTotal = attriTotal;
			this.rushTollgate = rushTollgate;
			this.itemUpSkill = itemUpSkill;
			this.itemUpAttri = itemUpAttri;
			this.attriItem = attriItem;
			this.skillItem = skillItem;
			this.itemMappingSkill = itemMappingSkill;
			this.itemMappingAttri = itemMappingAttri;
			this.discipleTask = discipleTask;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			attriSum = is.popInteger();
			eachAttri = is.popInteger();
			skillCount = is.popInteger();
			skillLvl = is.popInteger();
			pointToDisciple = is.popList(ClanPointToDiscipleCFGS.class);
			attriTotal = is.popList(ClanAttriTotalCFGS.class);
			rushTollgate = is.popList(ClanRushTollgateCFGS.class);
			itemUpSkill = is.popList(ClanItemUpSkillRateCFGS.class);
			itemUpAttri = is.popList(ClanItemUpAttriRateCFGS.class);
			attriItem = is.popList(ClanItemUpAttriCFGS.class);
			skillItem = is.popList(ClanItemUpSkillCFGS.class);
			itemMappingSkill = is.popIntegerIntegerTreeMap();
			itemMappingAttri = is.popIntegerIntegerTreeMap();
			discipleTask = is.popList(ClanEliteDZTaskCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(attriSum);
			os.pushInteger(eachAttri);
			os.pushInteger(skillCount);
			os.pushInteger(skillLvl);
			os.pushList(pointToDisciple);
			os.pushList(attriTotal);
			os.pushList(rushTollgate);
			os.pushList(itemUpSkill);
			os.pushList(itemUpAttri);
			os.pushList(attriItem);
			os.pushList(skillItem);
			os.pushIntegerIntegerMap(itemMappingSkill);
			os.pushIntegerIntegerMap(itemMappingAttri);
			os.pushList(discipleTask);
		}

		public int attriSum;
		public int eachAttri;
		public int skillCount;
		public int skillLvl;
		public List<ClanPointToDiscipleCFGS> pointToDisciple;
		public List<ClanAttriTotalCFGS> attriTotal;
		public List<ClanRushTollgateCFGS> rushTollgate;
		public List<ClanItemUpSkillRateCFGS> itemUpSkill;
		public List<ClanItemUpAttriRateCFGS> itemUpAttri;
		public List<ClanItemUpAttriCFGS> attriItem;
		public List<ClanItemUpSkillCFGS> skillItem;
		public Map<Integer, Integer> itemMappingSkill;
		public Map<Integer, Integer> itemMappingAttri;
		public List<ClanEliteDZTaskCFGS> discipleTask;
	}

	public static class ClanTaskCFGS implements Stream.IStreamable
	{

		public ClanTaskCFGS() { }

		public ClanTaskCFGS(int id, int level, int star, int finishCount, 
		                    int jydzSkill, int ptdzCount, int calldzCount, int xuantie, 
		                    int caoyao, int dzexp, int baseTime)
		{
			this.id = id;
			this.level = level;
			this.star = star;
			this.finishCount = finishCount;
			this.jydzSkill = jydzSkill;
			this.ptdzCount = ptdzCount;
			this.calldzCount = calldzCount;
			this.xuantie = xuantie;
			this.caoyao = caoyao;
			this.dzexp = dzexp;
			this.baseTime = baseTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			star = is.popInteger();
			finishCount = is.popInteger();
			jydzSkill = is.popInteger();
			ptdzCount = is.popInteger();
			calldzCount = is.popInteger();
			xuantie = is.popInteger();
			caoyao = is.popInteger();
			dzexp = is.popInteger();
			baseTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(star);
			os.pushInteger(finishCount);
			os.pushInteger(jydzSkill);
			os.pushInteger(ptdzCount);
			os.pushInteger(calldzCount);
			os.pushInteger(xuantie);
			os.pushInteger(caoyao);
			os.pushInteger(dzexp);
			os.pushInteger(baseTime);
		}

		public int id;
		public int level;
		public int star;
		public int finishCount;
		public int jydzSkill;
		public int ptdzCount;
		public int calldzCount;
		public int xuantie;
		public int caoyao;
		public int dzexp;
		public int baseTime;
	}

	public static class ClanTaskGroupCFGS implements Stream.IStreamable
	{

		public ClanTaskGroupCFGS() { }

		public ClanTaskGroupCFGS(int level, List<Integer> tasks)
		{
			this.level = level;
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			tasks = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushIntegerList(tasks);
		}

		public int level;
		public List<Integer> tasks;
	}

	public static class WorldBossCFGS implements Stream.IStreamable
	{

		public WorldBossCFGS() { }

		public WorldBossCFGS(WorldMonsterCFGS base, ClassTypeDrop killDrop, List<ClassTypeDrop> rankDrops, ClassTypeDrop joinDrop, 
		                     List<Integer> popTimes)
		{
			this.base = base;
			this.killDrop = killDrop;
			this.rankDrops = rankDrops;
			this.joinDrop = joinDrop;
			this.popTimes = popTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new WorldMonsterCFGS();
			is.pop(base);
			if( killDrop == null )
				killDrop = new ClassTypeDrop();
			is.pop(killDrop);
			rankDrops = is.popList(ClassTypeDrop.class);
			if( joinDrop == null )
				joinDrop = new ClassTypeDrop();
			is.pop(joinDrop);
			popTimes = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.push(killDrop);
			os.pushList(rankDrops);
			os.push(joinDrop);
			os.pushIntegerList(popTimes);
		}

		public WorldMonsterCFGS base;
		public ClassTypeDrop killDrop;
		public List<ClassTypeDrop> rankDrops;
		public ClassTypeDrop joinDrop;
		public List<Integer> popTimes;
	}

	public static class WorldMonsterCFGS implements Stream.IStreamable
	{

		public WorldMonsterCFGS() { }

		public WorldMonsterCFGS(int id, int monsterID, int mapID, Set<Integer> openDay, 
		                        List<Integer> refreshTime, int standbyTime, List<Vector3> refreshPos, byte rollNoticeType)
		{
			this.id = id;
			this.monsterID = monsterID;
			this.mapID = mapID;
			this.openDay = openDay;
			this.refreshTime = refreshTime;
			this.standbyTime = standbyTime;
			this.refreshPos = refreshPos;
			this.rollNoticeType = rollNoticeType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			monsterID = is.popInteger();
			mapID = is.popInteger();
			openDay = is.popIntegerTreeSet();
			refreshTime = is.popIntegerList();
			standbyTime = is.popInteger();
			refreshPos = is.popList(Vector3.class);
			rollNoticeType = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(monsterID);
			os.pushInteger(mapID);
			os.pushIntegerSet(openDay);
			os.pushIntegerList(refreshTime);
			os.pushInteger(standbyTime);
			os.pushList(refreshPos);
			os.pushByte(rollNoticeType);
		}

		public int id;
		public int monsterID;
		public int mapID;
		public Set<Integer> openDay;
		public List<Integer> refreshTime;
		public int standbyTime;
		public List<Vector3> refreshPos;
		public byte rollNoticeType;
	}

	public static class WorldMineralCFGS implements Stream.IStreamable
	{

		public WorldMineralCFGS() { }

		public WorldMineralCFGS(int id, int mineralID, int mapID, Set<Integer> openDay, 
		                        List<Integer> refreshTime, int standbyTime, List<Vector3> refreshPos)
		{
			this.id = id;
			this.mineralID = mineralID;
			this.mapID = mapID;
			this.openDay = openDay;
			this.refreshTime = refreshTime;
			this.standbyTime = standbyTime;
			this.refreshPos = refreshPos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			mineralID = is.popInteger();
			mapID = is.popInteger();
			openDay = is.popIntegerTreeSet();
			refreshTime = is.popIntegerList();
			standbyTime = is.popInteger();
			refreshPos = is.popList(Vector3.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(mineralID);
			os.pushInteger(mapID);
			os.pushIntegerSet(openDay);
			os.pushIntegerList(refreshTime);
			os.pushInteger(standbyTime);
			os.pushList(refreshPos);
		}

		public int id;
		public int mineralID;
		public int mapID;
		public Set<Integer> openDay;
		public List<Integer> refreshTime;
		public int standbyTime;
		public List<Vector3> refreshPos;
	}

	public static class FightFactorCFGS implements Stream.IStreamable
	{

		public FightFactorCFGS() { }

		public FightFactorCFGS(List<Integer> grades, List<Double> factors)
		{
			this.grades = grades;
			this.factors = factors;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			grades = is.popIntegerList();
			factors = is.popDoubleList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(grades);
			os.pushDoubleList(factors);
		}

		public List<Integer> grades;
		public List<Double> factors;
	}

	public static class StoreCFGS implements Stream.IStreamable
	{

		public StoreCFGS() { }

		public StoreCFGS(int id, int itemId, int count, int costType, 
		                 int money, int isStop)
		{
			this.id = id;
			this.itemId = itemId;
			this.count = count;
			this.costType = costType;
			this.money = money;
			this.isStop = isStop;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			itemId = is.popInteger();
			count = is.popInteger();
			costType = is.popInteger();
			money = is.popInteger();
			isStop = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(itemId);
			os.pushInteger(count);
			os.pushInteger(costType);
			os.pushInteger(money);
			os.pushInteger(isStop);
		}

		public int id;
		public int itemId;
		public int count;
		public int costType;
		public int money;
		public int isStop;
	}

	public static class HorseCFGS implements Stream.IStreamable
	{

		public HorseCFGS() { }

		public HorseCFGS(int id, int orgShowID, int fullStarShowID, int buyShowID, 
		                 int speed, DummyGoods tameCost, List<DummyGoods> enhanceCosts, int lockCostItem, 
		                 List<Integer> lockCostCounts, int lockCostReplaceItem, List<Integer> lockCostReplaceCounts, Set<Integer> attrs, 
		                 int enhanceExp, List<Integer> lockExps, int bornSkill, List<HorseGrowUpCGFS> growups, 
		                 byte pure, int rideCnt, int enHanceType)
		{
			this.id = id;
			this.orgShowID = orgShowID;
			this.fullStarShowID = fullStarShowID;
			this.buyShowID = buyShowID;
			this.speed = speed;
			this.tameCost = tameCost;
			this.enhanceCosts = enhanceCosts;
			this.lockCostItem = lockCostItem;
			this.lockCostCounts = lockCostCounts;
			this.lockCostReplaceItem = lockCostReplaceItem;
			this.lockCostReplaceCounts = lockCostReplaceCounts;
			this.attrs = attrs;
			this.enhanceExp = enhanceExp;
			this.lockExps = lockExps;
			this.bornSkill = bornSkill;
			this.growups = growups;
			this.pure = pure;
			this.rideCnt = rideCnt;
			this.enHanceType = enHanceType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			orgShowID = is.popInteger();
			fullStarShowID = is.popInteger();
			buyShowID = is.popInteger();
			speed = is.popInteger();
			if( tameCost == null )
				tameCost = new DummyGoods();
			is.pop(tameCost);
			enhanceCosts = is.popList(DummyGoods.class);
			lockCostItem = is.popInteger();
			lockCostCounts = is.popIntegerList();
			lockCostReplaceItem = is.popInteger();
			lockCostReplaceCounts = is.popIntegerList();
			attrs = is.popIntegerTreeSet();
			enhanceExp = is.popInteger();
			lockExps = is.popIntegerList();
			bornSkill = is.popInteger();
			growups = is.popList(HorseGrowUpCGFS.class);
			pure = is.popByte();
			rideCnt = is.popInteger();
			enHanceType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(orgShowID);
			os.pushInteger(fullStarShowID);
			os.pushInteger(buyShowID);
			os.pushInteger(speed);
			os.push(tameCost);
			os.pushList(enhanceCosts);
			os.pushInteger(lockCostItem);
			os.pushIntegerList(lockCostCounts);
			os.pushInteger(lockCostReplaceItem);
			os.pushIntegerList(lockCostReplaceCounts);
			os.pushIntegerSet(attrs);
			os.pushInteger(enhanceExp);
			os.pushIntegerList(lockExps);
			os.pushInteger(bornSkill);
			os.pushList(growups);
			os.pushByte(pure);
			os.pushInteger(rideCnt);
			os.pushInteger(enHanceType);
		}

		public int id;
		public int orgShowID;
		public int fullStarShowID;
		public int buyShowID;
		public int speed;
		public DummyGoods tameCost;
		public List<DummyGoods> enhanceCosts;
		public int lockCostItem;
		public List<Integer> lockCostCounts;
		public int lockCostReplaceItem;
		public List<Integer> lockCostReplaceCounts;
		public Set<Integer> attrs;
		public int enhanceExp;
		public List<Integer> lockExps;
		public int bornSkill;
		public List<HorseGrowUpCGFS> growups;
		public byte pure;
		public int rideCnt;
		public int enHanceType;
	}

	public static class HorseGrowUpCGFS implements Stream.IStreamable
	{

		public HorseGrowUpCGFS() { }

		public HorseGrowUpCGFS(int id, int star, byte bornOpen, int skillCount, 
		                       List<DummyGoods> costs, List<AttrCFGS> attrs)
		{
			this.id = id;
			this.star = star;
			this.bornOpen = bornOpen;
			this.skillCount = skillCount;
			this.costs = costs;
			this.attrs = attrs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			star = is.popInteger();
			bornOpen = is.popByte();
			skillCount = is.popInteger();
			costs = is.popList(DummyGoods.class);
			attrs = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(star);
			os.pushByte(bornOpen);
			os.pushInteger(skillCount);
			os.pushList(costs);
			os.pushList(attrs);
		}

		public int id;
		public int star;
		public byte bornOpen;
		public int skillCount;
		public List<DummyGoods> costs;
		public List<AttrCFGS> attrs;
	}

	public static class HorseEnHanceCFGS implements Stream.IStreamable
	{

		public HorseEnHanceCFGS() { }

		public HorseEnHanceCFGS(List<HorseEnHanceDataCFGS> datas)
		{
			this.datas = datas;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			datas = is.popList(HorseEnHanceDataCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(datas);
		}

		public List<HorseEnHanceDataCFGS> datas;
	}

	public static class HorseEnHanceDataCFGS implements Stream.IStreamable
	{

		public HorseEnHanceDataCFGS() { }

		public HorseEnHanceDataCFGS(int id, int level, int propID, List<Integer> values)
		{
			this.id = id;
			this.level = level;
			this.propID = propID;
			this.values = values;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			propID = is.popInteger();
			values = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(propID);
			os.pushIntegerList(values);
		}

		public int id;
		public int level;
		public int propID;
		public List<Integer> values;
	}

	public static class HorseEnHanceLvlCFGS implements Stream.IStreamable
	{

		public HorseEnHanceLvlCFGS() { }

		public HorseEnHanceLvlCFGS(List<HorseEnHanceLvlDataCFGS> datas)
		{
			this.datas = datas;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			datas = is.popList(HorseEnHanceLvlDataCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(datas);
		}

		public List<HorseEnHanceLvlDataCFGS> datas;
	}

	public static class HorseEnHanceLvlCommonCFGS implements Stream.IStreamable
	{

		public HorseEnHanceLvlCommonCFGS() { }

		public HorseEnHanceLvlCommonCFGS(int level, int attrNum, byte canLockGrow, int maxLockNum)
		{
			this.level = level;
			this.attrNum = attrNum;
			this.canLockGrow = canLockGrow;
			this.maxLockNum = maxLockNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			attrNum = is.popInteger();
			canLockGrow = is.popByte();
			maxLockNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(attrNum);
			os.pushByte(canLockGrow);
			os.pushInteger(maxLockNum);
		}

		public int level;
		public int attrNum;
		public byte canLockGrow;
		public int maxLockNum;
	}

	public static class HorseEnHanceTypeCFGS implements Stream.IStreamable
	{

		public HorseEnHanceTypeCFGS() { }

		public HorseEnHanceTypeCFGS(List<HorseEnHanceAttrLineCFGS> lines)
		{
			this.lines = lines;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lines = is.popList(HorseEnHanceAttrLineCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(lines);
		}

		public List<HorseEnHanceAttrLineCFGS> lines;
	}

	public static class HorseEnHanceAttrLineCFGS implements Stream.IStreamable
	{

		public HorseEnHanceAttrLineCFGS() { }

		public HorseEnHanceAttrLineCFGS(List<HorseEnHanceAttrCFGS> attrs)
		{
			this.attrs = attrs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			attrs = is.popList(HorseEnHanceAttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(attrs);
		}

		public List<HorseEnHanceAttrCFGS> attrs;
	}

	public static class HorseEnHanceAttrCFGS implements Stream.IStreamable
	{

		public HorseEnHanceAttrCFGS() { }

		public HorseEnHanceAttrCFGS(int attrId, byte attrType, int minNum, int maxNum, 
		                            int randomRuleId, int attrWeight)
		{
			this.attrId = attrId;
			this.attrType = attrType;
			this.minNum = minNum;
			this.maxNum = maxNum;
			this.randomRuleId = randomRuleId;
			this.attrWeight = attrWeight;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			attrId = is.popInteger();
			attrType = is.popByte();
			minNum = is.popInteger();
			maxNum = is.popInteger();
			randomRuleId = is.popInteger();
			attrWeight = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(attrId);
			os.pushByte(attrType);
			os.pushInteger(minNum);
			os.pushInteger(maxNum);
			os.pushInteger(randomRuleId);
			os.pushInteger(attrWeight);
		}

		public int attrId;
		public byte attrType;
		public int minNum;
		public int maxNum;
		public int randomRuleId;
		public int attrWeight;
	}

	public static class HorseEnHanceWeightCFGS implements Stream.IStreamable
	{

		public HorseEnHanceWeightCFGS() { }

		public HorseEnHanceWeightCFGS(int weightId, int rate0120, int rate2140, int rate4160, 
		                              int rate6180, int rate8100)
		{
			this.weightId = weightId;
			this.rate0120 = rate0120;
			this.rate2140 = rate2140;
			this.rate4160 = rate4160;
			this.rate6180 = rate6180;
			this.rate8100 = rate8100;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weightId = is.popInteger();
			rate0120 = is.popInteger();
			rate2140 = is.popInteger();
			rate4160 = is.popInteger();
			rate6180 = is.popInteger();
			rate8100 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weightId);
			os.pushInteger(rate0120);
			os.pushInteger(rate2140);
			os.pushInteger(rate4160);
			os.pushInteger(rate6180);
			os.pushInteger(rate8100);
		}

		public int weightId;
		public int rate0120;
		public int rate2140;
		public int rate4160;
		public int rate6180;
		public int rate8100;
	}

	public static class HorseEnHanceLvlDataCFGS implements Stream.IStreamable
	{

		public HorseEnHanceLvlDataCFGS() { }

		public HorseEnHanceLvlDataCFGS(int id, int level, int needExp)
		{
			this.id = id;
			this.level = level;
			this.needExp = needExp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			needExp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(needExp);
		}

		public int id;
		public int level;
		public int needExp;
	}

	public static class HorseShowCFGS implements Stream.IStreamable
	{

		public HorseShowCFGS() { }

		public HorseShowCFGS(int id, DummyGoods cost, List<Vector3> offsets)
		{
			this.id = id;
			this.cost = cost;
			this.offsets = offsets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( cost == null )
				cost = new DummyGoods();
			is.pop(cost);
			offsets = is.popList(Vector3.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(cost);
			os.pushList(offsets);
		}

		public int id;
		public DummyGoods cost;
		public List<Vector3> offsets;
	}

	public static class HorseSkillCFGS implements Stream.IStreamable
	{

		public HorseSkillCFGS() { }

		public HorseSkillCFGS(int id, int type, DummyGoods learnCost)
		{
			this.id = id;
			this.type = type;
			this.learnCost = learnCost;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			if( learnCost == null )
				learnCost = new DummyGoods();
			is.pop(learnCost);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.push(learnCost);
		}

		public int id;
		public int type;
		public DummyGoods learnCost;
	}

	public static class HorseSkillUpdateCFGS implements Stream.IStreamable
	{

		public HorseSkillUpdateCFGS() { }

		public HorseSkillUpdateCFGS(int id, int level, DummyGoods consume1, DummyGoods consume2, 
		                            int fightPower)
		{
			this.id = id;
			this.level = level;
			this.consume1 = consume1;
			this.consume2 = consume2;
			this.fightPower = fightPower;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			if( consume1 == null )
				consume1 = new DummyGoods();
			is.pop(consume1);
			if( consume2 == null )
				consume2 = new DummyGoods();
			is.pop(consume2);
			fightPower = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.push(consume1);
			os.push(consume2);
			os.pushInteger(fightPower);
		}

		public int id;
		public int level;
		public DummyGoods consume1;
		public DummyGoods consume2;
		public int fightPower;
	}

	public static class HorseSkillUpdateDataCFGS implements Stream.IStreamable
	{

		public HorseSkillUpdateDataCFGS() { }

		public HorseSkillUpdateDataCFGS(List<HorseSkillUpdateCFGS> data)
		{
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			data = is.popList(HorseSkillUpdateCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(data);
		}

		public List<HorseSkillUpdateCFGS> data;
	}

	public static class HorseEffectCFGS implements Stream.IStreamable
	{

		public HorseEffectCFGS() { }

		public HorseEffectCFGS(List<HorseEffectDataCFGS> datas)
		{
			this.datas = datas;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			datas = is.popList(HorseEffectDataCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(datas);
		}

		public List<HorseEffectDataCFGS> datas;
	}

	public static class HorseEffectDataCFGS implements Stream.IStreamable
	{

		public HorseEffectDataCFGS() { }

		public HorseEffectDataCFGS(int id, int level, Set<Integer> effectIDs)
		{
			this.id = id;
			this.level = level;
			this.effectIDs = effectIDs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			effectIDs = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushIntegerSet(effectIDs);
		}

		public int id;
		public int level;
		public Set<Integer> effectIDs;
	}

	public static class HorseCommonCFGS implements Stream.IStreamable
	{

		public HorseCommonCFGS() { }

		public HorseCommonCFGS(Set<Integer> canRideMaps, int forbidTime, int inuseAdd, List<Integer> rankOdds, 
		                       int valueFix, int inviteDistance, List<DummyGoods> unlockCost, int lockAddArg)
		{
			this.canRideMaps = canRideMaps;
			this.forbidTime = forbidTime;
			this.inuseAdd = inuseAdd;
			this.rankOdds = rankOdds;
			this.valueFix = valueFix;
			this.inviteDistance = inviteDistance;
			this.unlockCost = unlockCost;
			this.lockAddArg = lockAddArg;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			canRideMaps = is.popIntegerTreeSet();
			forbidTime = is.popInteger();
			inuseAdd = is.popInteger();
			rankOdds = is.popIntegerList();
			valueFix = is.popInteger();
			inviteDistance = is.popInteger();
			unlockCost = is.popList(DummyGoods.class);
			lockAddArg = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(canRideMaps);
			os.pushInteger(forbidTime);
			os.pushInteger(inuseAdd);
			os.pushIntegerList(rankOdds);
			os.pushInteger(valueFix);
			os.pushInteger(inviteDistance);
			os.pushList(unlockCost);
			os.pushInteger(lockAddArg);
		}

		public Set<Integer> canRideMaps;
		public int forbidTime;
		public int inuseAdd;
		public List<Integer> rankOdds;
		public int valueFix;
		public int inviteDistance;
		public List<DummyGoods> unlockCost;
		public int lockAddArg;
	}

	public static class TreasureBaseCFGS implements Stream.IStreamable
	{

		public TreasureBaseCFGS() { }

		public TreasureBaseCFGS(Map<Integer, ClueTreeCFGS> clueTrees, List<NpcFameCFGS> npcFames, List<Integer> refreshDiamond, int distance, 
		                        int needlevel, int searchVit, Map<Integer, Integer> bornPieces)
		{
			this.clueTrees = clueTrees;
			this.npcFames = npcFames;
			this.refreshDiamond = refreshDiamond;
			this.distance = distance;
			this.needlevel = needlevel;
			this.searchVit = searchVit;
			this.bornPieces = bornPieces;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			clueTrees = is.popIntegerTreeMap(ClueTreeCFGS.class);
			npcFames = is.popList(NpcFameCFGS.class);
			refreshDiamond = is.popIntegerList();
			distance = is.popInteger();
			needlevel = is.popInteger();
			searchVit = is.popInteger();
			bornPieces = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(clueTrees);
			os.pushList(npcFames);
			os.pushIntegerList(refreshDiamond);
			os.pushInteger(distance);
			os.pushInteger(needlevel);
			os.pushInteger(searchVit);
			os.pushIntegerIntegerMap(bornPieces);
		}

		public Map<Integer, ClueTreeCFGS> clueTrees;
		public List<NpcFameCFGS> npcFames;
		public List<Integer> refreshDiamond;
		public int distance;
		public int needlevel;
		public int searchVit;
		public Map<Integer, Integer> bornPieces;
	}

	public static class ClueTreeCFGS implements Stream.IStreamable
	{

		public ClueTreeCFGS() { }

		public ClueTreeCFGS(List<Clue> clues)
		{
			this.clues = clues;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			clues = is.popList(Clue.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(clues);
		}

		public List<Clue> clues;
	}

	public static class Clue implements Stream.IStreamable
	{

		public Clue() { }

		public Clue(int gain, Set<Integer> prePoints)
		{
			this.gain = gain;
			this.prePoints = prePoints;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gain = is.popInteger();
			prePoints = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(gain);
			os.pushIntegerSet(prePoints);
		}

		public int gain;
		public Set<Integer> prePoints;
	}

	public static class NpcFameCFGS implements Stream.IStreamable
	{

		public NpcFameCFGS() { }

		public NpcFameCFGS(int level, int fameFloor, int count, int min, 
		                   int max)
		{
			this.level = level;
			this.fameFloor = fameFloor;
			this.count = count;
			this.min = min;
			this.max = max;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			fameFloor = is.popInteger();
			count = is.popInteger();
			min = is.popInteger();
			max = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(fameFloor);
			os.pushInteger(count);
			os.pushInteger(min);
			os.pushInteger(max);
		}

		public int level;
		public int fameFloor;
		public int count;
		public int min;
		public int max;
	}

	public static class TreasureMapCFGS implements Stream.IStreamable
	{

		public TreasureMapCFGS() { }

		public TreasureMapCFGS(int id, int clueType, List<Integer> points, List<TreasureReward> rewards, 
		                       int medal, int pieceID)
		{
			this.id = id;
			this.clueType = clueType;
			this.points = points;
			this.rewards = rewards;
			this.medal = medal;
			this.pieceID = pieceID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			clueType = is.popInteger();
			points = is.popIntegerList();
			rewards = is.popList(TreasureReward.class);
			medal = is.popInteger();
			pieceID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(clueType);
			os.pushIntegerList(points);
			os.pushList(rewards);
			os.pushInteger(medal);
			os.pushInteger(pieceID);
		}

		public int id;
		public int clueType;
		public List<Integer> points;
		public List<TreasureReward> rewards;
		public int medal;
		public int pieceID;
	}

	public static class TreasureReward implements Stream.IStreamable
	{

		public TreasureReward() { }

		public TreasureReward(int percent, int fixTblID)
		{
			this.percent = percent;
			this.fixTblID = fixTblID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			percent = is.popInteger();
			fixTblID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(percent);
			os.pushInteger(fixTblID);
		}

		public int percent;
		public int fixTblID;
	}

	public static class TreasurePieceCFGS implements Stream.IStreamable
	{

		public TreasurePieceCFGS() { }

		public TreasurePieceCFGS(int id, int relateMapID, int needCount, int price, 
		                         int addFame)
		{
			this.id = id;
			this.relateMapID = relateMapID;
			this.needCount = needCount;
			this.price = price;
			this.addFame = addFame;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			relateMapID = is.popInteger();
			needCount = is.popInteger();
			price = is.popInteger();
			addFame = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(relateMapID);
			os.pushInteger(needCount);
			os.pushInteger(price);
			os.pushInteger(addFame);
		}

		public int id;
		public int relateMapID;
		public int needCount;
		public int price;
		public int addFame;
	}

	public static class InfoPointCFGS implements Stream.IStreamable
	{

		public InfoPointCFGS() { }

		public InfoPointCFGS(int id, int type, int param1, int param2, 
		                     int param3, int param4, int param5)
		{
			this.id = id;
			this.type = type;
			this.param1 = param1;
			this.param2 = param2;
			this.param3 = param3;
			this.param4 = param4;
			this.param5 = param5;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			param1 = is.popInteger();
			param2 = is.popInteger();
			param3 = is.popInteger();
			param4 = is.popInteger();
			param5 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(param1);
			os.pushInteger(param2);
			os.pushInteger(param3);
			os.pushInteger(param4);
			os.pushInteger(param5);
		}

		public int id;
		public int type;
		public int param1;
		public int param2;
		public int param3;
		public int param4;
		public int param5;
	}

	public static class MedalCFGS implements Stream.IStreamable
	{

		public MedalCFGS() { }

		public MedalCFGS(int id, List<AttrCFGS> attrs, List<DummyGoods> normalCost, int diamondCost)
		{
			this.id = id;
			this.attrs = attrs;
			this.normalCost = normalCost;
			this.diamondCost = diamondCost;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			attrs = is.popList(AttrCFGS.class);
			normalCost = is.popList(DummyGoods.class);
			diamondCost = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(attrs);
			os.pushList(normalCost);
			os.pushInteger(diamondCost);
		}

		public int id;
		public List<AttrCFGS> attrs;
		public List<DummyGoods> normalCost;
		public int diamondCost;
	}

	public static class TreasureNpcCFGS implements Stream.IStreamable
	{

		public TreasureNpcCFGS() { }

		public TreasureNpcCFGS(int id, int needPower, List<IntList> pieces, List<Integer> fixTblIDs)
		{
			this.id = id;
			this.needPower = needPower;
			this.pieces = pieces;
			this.fixTblIDs = fixTblIDs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			needPower = is.popInteger();
			pieces = is.popList(IntList.class);
			fixTblIDs = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(needPower);
			os.pushList(pieces);
			os.pushIntegerList(fixTblIDs);
		}

		public int id;
		public int needPower;
		public List<IntList> pieces;
		public List<Integer> fixTblIDs;
	}

	public static class FashionCFGS implements Stream.IStreamable
	{

		public FashionCFGS() { }

		public FashionCFGS(int id, int type, List<AttrCFGS> attrs, byte sex)
		{
			this.id = id;
			this.type = type;
			this.attrs = attrs;
			this.sex = sex;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			attrs = is.popList(AttrCFGS.class);
			sex = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushList(attrs);
			os.pushByte(sex);
		}

		public int id;
		public int type;
		public List<AttrCFGS> attrs;
		public byte sex;
	}

	public static class SocialActionCFGS implements Stream.IStreamable
	{

		public SocialActionCFGS() { }

		public SocialActionCFGS(int id, byte keep, byte checkFight, List<Integer> buffs, 
		                        int relateState)
		{
			this.id = id;
			this.keep = keep;
			this.checkFight = checkFight;
			this.buffs = buffs;
			this.relateState = relateState;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			keep = is.popByte();
			checkFight = is.popByte();
			buffs = is.popIntegerList();
			relateState = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushByte(keep);
			os.pushByte(checkFight);
			os.pushIntegerList(buffs);
			os.pushInteger(relateState);
		}

		public int id;
		public byte keep;
		public byte checkFight;
		public List<Integer> buffs;
		public int relateState;
	}

	public static class SealBaseCFGS implements Stream.IStreamable
	{

		public SealBaseCFGS() { }

		public SealBaseCFGS(SealOpenCFGS open, List<DummyGoods> normalMake, int diamondMake, int skillCount, 
		                    int skillOpenReq, List<Integer> needEnhanceCnt, List<DummyGoods> enhanceCost)
		{
			this.open = open;
			this.normalMake = normalMake;
			this.diamondMake = diamondMake;
			this.skillCount = skillCount;
			this.skillOpenReq = skillOpenReq;
			this.needEnhanceCnt = needEnhanceCnt;
			this.enhanceCost = enhanceCost;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( open == null )
				open = new SealOpenCFGS();
			is.pop(open);
			normalMake = is.popList(DummyGoods.class);
			diamondMake = is.popInteger();
			skillCount = is.popInteger();
			skillOpenReq = is.popInteger();
			needEnhanceCnt = is.popIntegerList();
			enhanceCost = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(open);
			os.pushList(normalMake);
			os.pushInteger(diamondMake);
			os.pushInteger(skillCount);
			os.pushInteger(skillOpenReq);
			os.pushIntegerList(needEnhanceCnt);
			os.pushList(enhanceCost);
		}

		public SealOpenCFGS open;
		public List<DummyGoods> normalMake;
		public int diamondMake;
		public int skillCount;
		public int skillOpenReq;
		public List<Integer> needEnhanceCnt;
		public List<DummyGoods> enhanceCost;
	}

	public static class SealOpenCFGS implements Stream.IStreamable
	{

		public SealOpenCFGS() { }

		public SealOpenCFGS(int lvlReq, int powerReq, int transformReq)
		{
			this.lvlReq = lvlReq;
			this.powerReq = powerReq;
			this.transformReq = transformReq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvlReq = is.popInteger();
			powerReq = is.popInteger();
			transformReq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvlReq);
			os.pushInteger(powerReq);
			os.pushInteger(transformReq);
		}

		public int lvlReq;
		public int powerReq;
		public int transformReq;
	}

	public static class SealGradeCFGS implements Stream.IStreamable
	{

		public SealGradeCFGS() { }

		public SealGradeCFGS(int grade, List<DummyGoods> cost, List<AttrCFGS> attrs)
		{
			this.grade = grade;
			this.cost = cost;
			this.attrs = attrs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			grade = is.popInteger();
			cost = is.popList(DummyGoods.class);
			attrs = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(grade);
			os.pushList(cost);
			os.pushList(attrs);
		}

		public int grade;
		public List<DummyGoods> cost;
		public List<AttrCFGS> attrs;
	}

	public static class SealEnhanceCFGS implements Stream.IStreamable
	{

		public SealEnhanceCFGS() { }

		public SealEnhanceCFGS(int id, int classType, int bwType, int weight, 
		                       int enhanceReq, int skillID, List<Integer> lvlWeight)
		{
			this.id = id;
			this.classType = classType;
			this.bwType = bwType;
			this.weight = weight;
			this.enhanceReq = enhanceReq;
			this.skillID = skillID;
			this.lvlWeight = lvlWeight;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			classType = is.popInteger();
			bwType = is.popInteger();
			weight = is.popInteger();
			enhanceReq = is.popInteger();
			skillID = is.popInteger();
			lvlWeight = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(classType);
			os.pushInteger(bwType);
			os.pushInteger(weight);
			os.pushInteger(enhanceReq);
			os.pushInteger(skillID);
			os.pushIntegerList(lvlWeight);
		}

		public int id;
		public int classType;
		public int bwType;
		public int weight;
		public int enhanceReq;
		public int skillID;
		public List<Integer> lvlWeight;
	}

	public static class SealEnhanceBWCFGS implements Stream.IStreamable
	{

		public SealEnhanceBWCFGS() { }

		public SealEnhanceBWCFGS(List<SealEnhanceCFGS> enhances)
		{
			this.enhances = enhances;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			enhances = is.popList(SealEnhanceCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(enhances);
		}

		public List<SealEnhanceCFGS> enhances;
	}

	public static class SealEnhanceTypeCFGS implements Stream.IStreamable
	{

		public SealEnhanceTypeCFGS() { }

		public SealEnhanceTypeCFGS(Map<Integer, SealEnhanceBWCFGS> bw)
		{
			this.bw = bw;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bw = is.popIntegerTreeMap(SealEnhanceBWCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(bw);
		}

		public Map<Integer, SealEnhanceBWCFGS> bw;
	}

	public static class LeadGroupCFGS implements Stream.IStreamable
	{

		public LeadGroupCFGS() { }

		public LeadGroupCFGS(int groupID)
		{
			this.groupID = groupID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupID);
		}

		public int groupID;
	}

	public static class ExpCoinBaseCFGS implements Stream.IStreamable
	{

		public ExpCoinBaseCFGS() { }

		public ExpCoinBaseCFGS(int lvlReq, int rate, int volume, int dayTakeTimes, 
		                       GraspBaseCFGS graspBase, GraspCostCFGS graspNormalCost, GraspCostCFGS graspSuitCost, ExpCoinExtractCFGS extract, 
		                       DMGTransferBaseCFGS dmgTransfer)
		{
			this.lvlReq = lvlReq;
			this.rate = rate;
			this.volume = volume;
			this.dayTakeTimes = dayTakeTimes;
			this.graspBase = graspBase;
			this.graspNormalCost = graspNormalCost;
			this.graspSuitCost = graspSuitCost;
			this.extract = extract;
			this.dmgTransfer = dmgTransfer;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvlReq = is.popInteger();
			rate = is.popInteger();
			volume = is.popInteger();
			dayTakeTimes = is.popInteger();
			if( graspBase == null )
				graspBase = new GraspBaseCFGS();
			is.pop(graspBase);
			if( graspNormalCost == null )
				graspNormalCost = new GraspCostCFGS();
			is.pop(graspNormalCost);
			if( graspSuitCost == null )
				graspSuitCost = new GraspCostCFGS();
			is.pop(graspSuitCost);
			if( extract == null )
				extract = new ExpCoinExtractCFGS();
			is.pop(extract);
			if( dmgTransfer == null )
				dmgTransfer = new DMGTransferBaseCFGS();
			is.pop(dmgTransfer);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvlReq);
			os.pushInteger(rate);
			os.pushInteger(volume);
			os.pushInteger(dayTakeTimes);
			os.push(graspBase);
			os.push(graspNormalCost);
			os.push(graspSuitCost);
			os.push(extract);
			os.push(dmgTransfer);
		}

		public int lvlReq;
		public int rate;
		public int volume;
		public int dayTakeTimes;
		public GraspBaseCFGS graspBase;
		public GraspCostCFGS graspNormalCost;
		public GraspCostCFGS graspSuitCost;
		public ExpCoinExtractCFGS extract;
		public DMGTransferBaseCFGS dmgTransfer;
	}

	public static class GraspBaseCFGS implements Stream.IStreamable
	{

		public GraspBaseCFGS() { }

		public GraspBaseCFGS(int dayGraspTimes, int coolTime, int resetDiamond)
		{
			this.dayGraspTimes = dayGraspTimes;
			this.coolTime = coolTime;
			this.resetDiamond = resetDiamond;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayGraspTimes = is.popInteger();
			coolTime = is.popInteger();
			resetDiamond = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayGraspTimes);
			os.pushInteger(coolTime);
			os.pushInteger(resetDiamond);
		}

		public int dayGraspTimes;
		public int coolTime;
		public int resetDiamond;
	}

	public static class GraspCostCFGS implements Stream.IStreamable
	{

		public GraspCostCFGS() { }

		public GraspCostCFGS(int expCoinCost, List<DummyGoods> itemsCost, int addExp)
		{
			this.expCoinCost = expCoinCost;
			this.itemsCost = itemsCost;
			this.addExp = addExp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			expCoinCost = is.popInteger();
			itemsCost = is.popList(DummyGoods.class);
			addExp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(expCoinCost);
			os.pushList(itemsCost);
			os.pushInteger(addExp);
		}

		public int expCoinCost;
		public List<DummyGoods> itemsCost;
		public int addExp;
	}

	public static class ExpCoinExtractCFGS implements Stream.IStreamable
	{

		public ExpCoinExtractCFGS() { }

		public ExpCoinExtractCFGS(DummyGoods input, DummyGoods output)
		{
			this.input = input;
			this.output = output;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( input == null )
				input = new DummyGoods();
			is.pop(input);
			if( output == null )
				output = new DummyGoods();
			is.pop(output);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(input);
			os.push(output);
		}

		public DummyGoods input;
		public DummyGoods output;
	}

	public static class RareBookCFGS implements Stream.IStreamable
	{

		public RareBookCFGS() { }

		public RareBookCFGS(int id, int classType, int lvl, int rareBookID, 
		                    int rareBookCount, int expCoinCost, List<DummyGoods> itemCost, List<DummyGoods> itemDoubleCost, 
		                    List<AttrCFGS> attrs)
		{
			this.id = id;
			this.classType = classType;
			this.lvl = lvl;
			this.rareBookID = rareBookID;
			this.rareBookCount = rareBookCount;
			this.expCoinCost = expCoinCost;
			this.itemCost = itemCost;
			this.itemDoubleCost = itemDoubleCost;
			this.attrs = attrs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			classType = is.popInteger();
			lvl = is.popInteger();
			rareBookID = is.popInteger();
			rareBookCount = is.popInteger();
			expCoinCost = is.popInteger();
			itemCost = is.popList(DummyGoods.class);
			itemDoubleCost = is.popList(DummyGoods.class);
			attrs = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(classType);
			os.pushInteger(lvl);
			os.pushInteger(rareBookID);
			os.pushInteger(rareBookCount);
			os.pushInteger(expCoinCost);
			os.pushList(itemCost);
			os.pushList(itemDoubleCost);
			os.pushList(attrs);
		}

		public int id;
		public int classType;
		public int lvl;
		public int rareBookID;
		public int rareBookCount;
		public int expCoinCost;
		public List<DummyGoods> itemCost;
		public List<DummyGoods> itemDoubleCost;
		public List<AttrCFGS> attrs;
	}

	public static class RareBookGroupCFGS implements Stream.IStreamable
	{

		public RareBookGroupCFGS() { }

		public RareBookGroupCFGS(List<RareBookCFGS> books)
		{
			this.books = books;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			books = is.popList(RareBookCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(books);
		}

		public List<RareBookCFGS> books;
	}

	public static class GraspCFGS implements Stream.IStreamable
	{

		public GraspCFGS() { }

		public GraspCFGS(int id, int lvl, int needExp, int rarebookRaise, 
		                 AttrCFGS attr)
		{
			this.id = id;
			this.lvl = lvl;
			this.needExp = needExp;
			this.rarebookRaise = rarebookRaise;
			this.attr = attr;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			lvl = is.popInteger();
			needExp = is.popInteger();
			rarebookRaise = is.popInteger();
			if( attr == null )
				attr = new AttrCFGS();
			is.pop(attr);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(lvl);
			os.pushInteger(needExp);
			os.pushInteger(rarebookRaise);
			os.push(attr);
		}

		public int id;
		public int lvl;
		public int needExp;
		public int rarebookRaise;
		public AttrCFGS attr;
	}

	public static class GraspGroupCFGS implements Stream.IStreamable
	{

		public GraspGroupCFGS() { }

		public GraspGroupCFGS(List<GraspCFGS> grasps)
		{
			this.grasps = grasps;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			grasps = is.popList(GraspCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(grasps);
		}

		public List<GraspCFGS> grasps;
	}

	public static class DMGTransferBaseCFGS implements Stream.IStreamable
	{

		public DMGTransferBaseCFGS() { }

		public DMGTransferBaseCFGS(int initPoint, List<DummyGoods> cost, int lvlReq, Map<Integer, Integer> dmgTos, 
		                           Map<Integer, Integer> dmgBys, int pointLimit)
		{
			this.initPoint = initPoint;
			this.cost = cost;
			this.lvlReq = lvlReq;
			this.dmgTos = dmgTos;
			this.dmgBys = dmgBys;
			this.pointLimit = pointLimit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			initPoint = is.popInteger();
			cost = is.popList(DummyGoods.class);
			lvlReq = is.popInteger();
			dmgTos = is.popIntegerIntegerTreeMap();
			dmgBys = is.popIntegerIntegerTreeMap();
			pointLimit = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(initPoint);
			os.pushList(cost);
			os.pushInteger(lvlReq);
			os.pushIntegerIntegerMap(dmgTos);
			os.pushIntegerIntegerMap(dmgBys);
			os.pushInteger(pointLimit);
		}

		public int initPoint;
		public List<DummyGoods> cost;
		public int lvlReq;
		public Map<Integer, Integer> dmgTos;
		public Map<Integer, Integer> dmgBys;
		public int pointLimit;
	}

	public static class DMGTransferLevelCFGS implements Stream.IStreamable
	{

		public DMGTransferLevelCFGS() { }

		public DMGTransferLevelCFGS(List<DMGTransferCFGS> levels)
		{
			this.levels = levels;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			levels = is.popList(DMGTransferCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(levels);
		}

		public List<DMGTransferCFGS> levels;
	}

	public static class DMGTransferCFGS implements Stream.IStreamable
	{

		public DMGTransferCFGS() { }

		public DMGTransferCFGS(int propID, int value, int pointsReq, List<DummyGoods> costItems, 
		                       List<DummyGoods> returnItems)
		{
			this.propID = propID;
			this.value = value;
			this.pointsReq = pointsReq;
			this.costItems = costItems;
			this.returnItems = returnItems;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			propID = is.popInteger();
			value = is.popInteger();
			pointsReq = is.popInteger();
			costItems = is.popList(DummyGoods.class);
			returnItems = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(propID);
			os.pushInteger(value);
			os.pushInteger(pointsReq);
			os.pushList(costItems);
			os.pushList(returnItems);
		}

		public int propID;
		public int value;
		public int pointsReq;
		public List<DummyGoods> costItems;
		public List<DummyGoods> returnItems;
	}

	public static class DMGTransferBuyCFGS implements Stream.IStreamable
	{

		public DMGTransferBuyCFGS() { }

		public DMGTransferBuyCFGS(List<DummyGoods> normalCost, int normalGain, List<DummyGoods> discountCost, int discountGain)
		{
			this.normalCost = normalCost;
			this.normalGain = normalGain;
			this.discountCost = discountCost;
			this.discountGain = discountGain;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			normalCost = is.popList(DummyGoods.class);
			normalGain = is.popInteger();
			discountCost = is.popList(DummyGoods.class);
			discountGain = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(normalCost);
			os.pushInteger(normalGain);
			os.pushList(discountCost);
			os.pushInteger(discountGain);
		}

		public List<DummyGoods> normalCost;
		public int normalGain;
		public List<DummyGoods> discountCost;
		public int discountGain;
	}

	public static class DailyLoginCFGS implements Stream.IStreamable
	{

		public DailyLoginCFGS() { }

		public DailyLoginCFGS(List<DummyGoods> rewards)
		{
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(rewards);
		}

		public List<DummyGoods> rewards;
	}

	public static class LvlUpRewardCFGS implements Stream.IStreamable
	{

		public LvlUpRewardCFGS() { }

		public LvlUpRewardCFGS(List<DummyGoods> rewards, int vipPoint)
		{
			this.rewards = rewards;
			this.vipPoint = vipPoint;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewards = is.popList(DummyGoods.class);
			vipPoint = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(rewards);
			os.pushInteger(vipPoint);
		}

		public List<DummyGoods> rewards;
		public int vipPoint;
	}

	public static class LastBetaRewardCFGS implements Stream.IStreamable
	{

		public LastBetaRewardCFGS() { }

		public LastBetaRewardCFGS(List<DummyGoods> rewards)
		{
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(rewards);
		}

		public List<DummyGoods> rewards;
	}

	public static class strengthenRewardCFGS implements Stream.IStreamable
	{

		public strengthenRewardCFGS() { }

		public strengthenRewardCFGS(List<DummyGoods> rewards)
		{
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(rewards);
		}

		public List<DummyGoods> rewards;
	}

	public static class onTimeRewardCFGS implements Stream.IStreamable
	{

		public onTimeRewardCFGS() { }

		public onTimeRewardCFGS(List<DummyGoods> rewards)
		{
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(rewards);
		}

		public List<DummyGoods> rewards;
	}

	public static class SurveyQuestionCFGS implements Stream.IStreamable
	{

		public SurveyQuestionCFGS() { }

		public SurveyQuestionCFGS(int id, String question, byte type, List<String> options)
		{
			this.id = id;
			this.question = question;
			this.type = type;
			this.options = options;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			question = is.popString();
			type = is.popByte();
			options = is.popStringList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(question);
			os.pushByte(type);
			os.pushStringList(options);
		}

		public int id;
		public String question;
		public byte type;
		public List<String> options;
	}

	public static class TitleCFGS implements Stream.IStreamable
	{

		public TitleCFGS() { }

		public TitleCFGS(int id, int type, int loopTime, List<AttrCFGS> attrs, 
		                 int rank)
		{
			this.id = id;
			this.type = type;
			this.loopTime = loopTime;
			this.attrs = attrs;
			this.rank = rank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			loopTime = is.popInteger();
			attrs = is.popList(AttrCFGS.class);
			rank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(loopTime);
			os.pushList(attrs);
			os.pushInteger(rank);
		}

		public int id;
		public int type;
		public int loopTime;
		public List<AttrCFGS> attrs;
		public int rank;
	}

	public static class BetaActivityCFGS implements Stream.IStreamable
	{

		public BetaActivityCFGS() { }

		public BetaActivityCFGS(int lvlNeed, int notifyTaskId, int surveyNeedLvl, int questionNum, 
		                        List<SurveyQuestionCFGS> surveyQuestions, List<DummyGoods> surveyFinalReward, List<DummyGoods> everyQuestionReward, int surveyNeedLvl2, 
		                        int questionNum2, List<DummyGoods> surveyFinalReward2, List<DummyGoods> everyQuestionReward2, Map<Integer, DailyLoginCFGS> dailyLogin, 
		                        Map<Integer, LvlUpRewardCFGS> lvlUpReward, List<DummyGoods> completUserInfoReward, int userDataLvl, int lastBetaStartDay, 
		                        Map<Integer, LastBetaRewardCFGS> lastBetaReward, int onTimeStartTime, int onTimeEndTime, Map<Integer, onTimeRewardCFGS> onTimeReward, 
		                        Map<Integer, strengthenRewardCFGS> strengthenReward, DummyGoods officialResearchReward)
		{
			this.lvlNeed = lvlNeed;
			this.notifyTaskId = notifyTaskId;
			this.surveyNeedLvl = surveyNeedLvl;
			this.questionNum = questionNum;
			this.surveyQuestions = surveyQuestions;
			this.surveyFinalReward = surveyFinalReward;
			this.everyQuestionReward = everyQuestionReward;
			this.surveyNeedLvl2 = surveyNeedLvl2;
			this.questionNum2 = questionNum2;
			this.surveyFinalReward2 = surveyFinalReward2;
			this.everyQuestionReward2 = everyQuestionReward2;
			this.dailyLogin = dailyLogin;
			this.lvlUpReward = lvlUpReward;
			this.completUserInfoReward = completUserInfoReward;
			this.userDataLvl = userDataLvl;
			this.lastBetaStartDay = lastBetaStartDay;
			this.lastBetaReward = lastBetaReward;
			this.onTimeStartTime = onTimeStartTime;
			this.onTimeEndTime = onTimeEndTime;
			this.onTimeReward = onTimeReward;
			this.strengthenReward = strengthenReward;
			this.officialResearchReward = officialResearchReward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvlNeed = is.popInteger();
			notifyTaskId = is.popInteger();
			surveyNeedLvl = is.popInteger();
			questionNum = is.popInteger();
			surveyQuestions = is.popList(SurveyQuestionCFGS.class);
			surveyFinalReward = is.popList(DummyGoods.class);
			everyQuestionReward = is.popList(DummyGoods.class);
			surveyNeedLvl2 = is.popInteger();
			questionNum2 = is.popInteger();
			surveyFinalReward2 = is.popList(DummyGoods.class);
			everyQuestionReward2 = is.popList(DummyGoods.class);
			dailyLogin = is.popIntegerTreeMap(DailyLoginCFGS.class);
			lvlUpReward = is.popIntegerTreeMap(LvlUpRewardCFGS.class);
			completUserInfoReward = is.popList(DummyGoods.class);
			userDataLvl = is.popInteger();
			lastBetaStartDay = is.popInteger();
			lastBetaReward = is.popIntegerTreeMap(LastBetaRewardCFGS.class);
			onTimeStartTime = is.popInteger();
			onTimeEndTime = is.popInteger();
			onTimeReward = is.popIntegerTreeMap(onTimeRewardCFGS.class);
			strengthenReward = is.popIntegerTreeMap(strengthenRewardCFGS.class);
			if( officialResearchReward == null )
				officialResearchReward = new DummyGoods();
			is.pop(officialResearchReward);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvlNeed);
			os.pushInteger(notifyTaskId);
			os.pushInteger(surveyNeedLvl);
			os.pushInteger(questionNum);
			os.pushList(surveyQuestions);
			os.pushList(surveyFinalReward);
			os.pushList(everyQuestionReward);
			os.pushInteger(surveyNeedLvl2);
			os.pushInteger(questionNum2);
			os.pushList(surveyFinalReward2);
			os.pushList(everyQuestionReward2);
			os.pushIntegerMap(dailyLogin);
			os.pushIntegerMap(lvlUpReward);
			os.pushList(completUserInfoReward);
			os.pushInteger(userDataLvl);
			os.pushInteger(lastBetaStartDay);
			os.pushIntegerMap(lastBetaReward);
			os.pushInteger(onTimeStartTime);
			os.pushInteger(onTimeEndTime);
			os.pushIntegerMap(onTimeReward);
			os.pushIntegerMap(strengthenReward);
			os.push(officialResearchReward);
		}

		public int lvlNeed;
		public int notifyTaskId;
		public int surveyNeedLvl;
		public int questionNum;
		public List<SurveyQuestionCFGS> surveyQuestions;
		public List<DummyGoods> surveyFinalReward;
		public List<DummyGoods> everyQuestionReward;
		public int surveyNeedLvl2;
		public int questionNum2;
		public List<DummyGoods> surveyFinalReward2;
		public List<DummyGoods> everyQuestionReward2;
		public Map<Integer, DailyLoginCFGS> dailyLogin;
		public Map<Integer, LvlUpRewardCFGS> lvlUpReward;
		public List<DummyGoods> completUserInfoReward;
		public int userDataLvl;
		public int lastBetaStartDay;
		public Map<Integer, LastBetaRewardCFGS> lastBetaReward;
		public int onTimeStartTime;
		public int onTimeEndTime;
		public Map<Integer, onTimeRewardCFGS> onTimeReward;
		public Map<Integer, strengthenRewardCFGS> strengthenReward;
		public DummyGoods officialResearchReward;
	}

	public static class BranchTaskCFGS implements Stream.IStreamable
	{

		public BranchTaskCFGS() { }

		public BranchTaskCFGS(List<BranchTaskDataCFGS> datas)
		{
			this.datas = datas;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			datas = is.popList(BranchTaskDataCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(datas);
		}

		public List<BranchTaskDataCFGS> datas;
	}

	public static class BranchTaskDataCFGS implements Stream.IStreamable
	{

		public BranchTaskDataCFGS() { }

		public BranchTaskDataCFGS(int groupId, int id, int nextId, int accCondType, 
		                          int accCondParam, byte accCondBWType, TaskCondCFGS taskParam, int startNpc, 
		                          int endNpc, List<ClassTypeReward> reward, int rewardExp, List<Integer> senceTrigIDs, 
		                          byte canQuit)
		{
			this.groupId = groupId;
			this.id = id;
			this.nextId = nextId;
			this.accCondType = accCondType;
			this.accCondParam = accCondParam;
			this.accCondBWType = accCondBWType;
			this.taskParam = taskParam;
			this.startNpc = startNpc;
			this.endNpc = endNpc;
			this.reward = reward;
			this.rewardExp = rewardExp;
			this.senceTrigIDs = senceTrigIDs;
			this.canQuit = canQuit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
			id = is.popInteger();
			nextId = is.popInteger();
			accCondType = is.popInteger();
			accCondParam = is.popInteger();
			accCondBWType = is.popByte();
			if( taskParam == null )
				taskParam = new TaskCondCFGS();
			is.pop(taskParam);
			startNpc = is.popInteger();
			endNpc = is.popInteger();
			reward = is.popList(ClassTypeReward.class);
			rewardExp = is.popInteger();
			senceTrigIDs = is.popIntegerList();
			canQuit = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
			os.pushInteger(id);
			os.pushInteger(nextId);
			os.pushInteger(accCondType);
			os.pushInteger(accCondParam);
			os.pushByte(accCondBWType);
			os.push(taskParam);
			os.pushInteger(startNpc);
			os.pushInteger(endNpc);
			os.pushList(reward);
			os.pushInteger(rewardExp);
			os.pushIntegerList(senceTrigIDs);
			os.pushByte(canQuit);
		}

		public int groupId;
		public int id;
		public int nextId;
		public int accCondType;
		public int accCondParam;
		public byte accCondBWType;
		public TaskCondCFGS taskParam;
		public int startNpc;
		public int endNpc;
		public List<ClassTypeReward> reward;
		public int rewardExp;
		public List<Integer> senceTrigIDs;
		public byte canQuit;
	}

	public static class PetAchieveGroupCFGS implements Stream.IStreamable
	{

		public PetAchieveGroupCFGS() { }

		public PetAchieveGroupCFGS(List<PetAchieveCFGS> achieves)
		{
			this.achieves = achieves;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			achieves = is.popList(PetAchieveCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(achieves);
		}

		public List<PetAchieveCFGS> achieves;
	}

	public static class PetAchieveCFGS implements Stream.IStreamable
	{

		public PetAchieveCFGS() { }

		public PetAchieveCFGS(int id, int type, int petCnt, int cond, 
		                      List<AttrCFGS> attrs)
		{
			this.id = id;
			this.type = type;
			this.petCnt = petCnt;
			this.cond = cond;
			this.attrs = attrs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			petCnt = is.popInteger();
			cond = is.popInteger();
			attrs = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(petCnt);
			os.pushInteger(cond);
			os.pushList(attrs);
		}

		public int id;
		public int type;
		public int petCnt;
		public int cond;
		public List<AttrCFGS> attrs;
	}

	public static class UniqueSkillCFG implements Stream.IStreamable
	{

		public UniqueSkillCFG() { }

		public UniqueSkillCFG(int id, List<Integer> skills)
		{
			this.id = id;
			this.skills = skills;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			skills = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerList(skills);
		}

		public int id;
		public List<Integer> skills;
	}

	public static class ClimbTowerFloorCFGS implements Stream.IStreamable
	{

		public ClimbTowerFloorCFGS() { }

		public ClimbTowerFloorCFGS(Map<Integer, ClimbTowerFloorDataCFGS> datas)
		{
			this.datas = datas;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			datas = is.popIntegerTreeMap(ClimbTowerFloorDataCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(datas);
		}

		public Map<Integer, ClimbTowerFloorDataCFGS> datas;
	}

	public static class ClimbTowerFloorDataCFGS implements Stream.IStreamable
	{

		public ClimbTowerFloorDataCFGS() { }

		public ClimbTowerFloorDataCFGS(int groupId, int floor, int dungeonId)
		{
			this.groupId = groupId;
			this.floor = floor;
			this.dungeonId = dungeonId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
			floor = is.popInteger();
			dungeonId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
			os.pushInteger(floor);
			os.pushInteger(dungeonId);
		}

		public int groupId;
		public int floor;
		public int dungeonId;
	}

	public static class ClimbTowerWinParamCFGS implements Stream.IStreamable
	{

		public ClimbTowerWinParamCFGS() { }

		public ClimbTowerWinParamCFGS(int winCond, int param1, int param2)
		{
			this.winCond = winCond;
			this.param1 = param1;
			this.param2 = param2;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			winCond = is.popInteger();
			param1 = is.popInteger();
			param2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(winCond);
			os.pushInteger(param1);
			os.pushInteger(param2);
		}

		public int winCond;
		public int param1;
		public int param2;
	}

	public static class ClimbTowerFameCFGS implements Stream.IStreamable
	{

		public ClimbTowerFameCFGS() { }

		public ClimbTowerFameCFGS(Map<Integer, ClimbTowerFameDataCFGS> datas)
		{
			this.datas = datas;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			datas = is.popIntegerTreeMap(ClimbTowerFameDataCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(datas);
		}

		public Map<Integer, ClimbTowerFameDataCFGS> datas;
	}

	public static class ClimbTowerFameDataCFGS implements Stream.IStreamable
	{

		public ClimbTowerFameDataCFGS() { }

		public ClimbTowerFameDataCFGS(int groupId, int level, int levelUpNeedFame, List<DummyGoods> rewards, 
		                              int canGetStunt, List<Integer> donateId)
		{
			this.groupId = groupId;
			this.level = level;
			this.levelUpNeedFame = levelUpNeedFame;
			this.rewards = rewards;
			this.canGetStunt = canGetStunt;
			this.donateId = donateId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
			level = is.popInteger();
			levelUpNeedFame = is.popInteger();
			rewards = is.popList(DummyGoods.class);
			canGetStunt = is.popInteger();
			donateId = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
			os.pushInteger(level);
			os.pushInteger(levelUpNeedFame);
			os.pushList(rewards);
			os.pushInteger(canGetStunt);
			os.pushIntegerList(donateId);
		}

		public int groupId;
		public int level;
		public int levelUpNeedFame;
		public List<DummyGoods> rewards;
		public int canGetStunt;
		public List<Integer> donateId;
	}

	public static class ClimbTowerBaseDataCFGS implements Stream.IStreamable
	{

		public ClimbTowerBaseDataCFGS() { }

		public ClimbTowerBaseDataCFGS(int needlvl, int displaylvl, int dayTimes, float sweepParam, 
		                              List<Integer> needDiamond, int notInTime)
		{
			this.needlvl = needlvl;
			this.displaylvl = displaylvl;
			this.dayTimes = dayTimes;
			this.sweepParam = sweepParam;
			this.needDiamond = needDiamond;
			this.notInTime = notInTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			needlvl = is.popInteger();
			displaylvl = is.popInteger();
			dayTimes = is.popInteger();
			sweepParam = is.popFloat();
			needDiamond = is.popIntegerList();
			notInTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(needlvl);
			os.pushInteger(displaylvl);
			os.pushInteger(dayTimes);
			os.pushFloat(sweepParam);
			os.pushIntegerList(needDiamond);
			os.pushInteger(notInTime);
		}

		public int needlvl;
		public int displaylvl;
		public int dayTimes;
		public float sweepParam;
		public List<Integer> needDiamond;
		public int notInTime;
	}

	public static class ScheduleCFGS implements Stream.IStreamable
	{

		public ScheduleCFGS() { }

		public ScheduleCFGS(Map<Integer, ScheduleDataCFGS> scheduleData, Map<Integer, ScheduleRewardsCFGS> scheduleRewards)
		{
			this.scheduleData = scheduleData;
			this.scheduleRewards = scheduleRewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			scheduleData = is.popIntegerTreeMap(ScheduleDataCFGS.class);
			scheduleRewards = is.popIntegerTreeMap(ScheduleRewardsCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(scheduleData);
			os.pushIntegerMap(scheduleRewards);
		}

		public Map<Integer, ScheduleDataCFGS> scheduleData;
		public Map<Integer, ScheduleRewardsCFGS> scheduleRewards;
	}

	public static class ScheduleDataCFGS implements Stream.IStreamable
	{

		public ScheduleDataCFGS() { }

		public ScheduleDataCFGS(int type, int id, int mapid, int num, 
		                        int activity)
		{
			this.type = type;
			this.id = id;
			this.mapid = mapid;
			this.num = num;
			this.activity = activity;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			id = is.popInteger();
			mapid = is.popInteger();
			num = is.popInteger();
			activity = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(id);
			os.pushInteger(mapid);
			os.pushInteger(num);
			os.pushInteger(activity);
		}

		public int type;
		public int id;
		public int mapid;
		public int num;
		public int activity;
	}

	public static class ScheduleRewardsCFGS implements Stream.IStreamable
	{

		public ScheduleRewardsCFGS() { }

		public ScheduleRewardsCFGS(int id, int activity, int bagCount, List<Integer> levels, 
		                           List<ScheduleDropCFGS> drop)
		{
			this.id = id;
			this.activity = activity;
			this.bagCount = bagCount;
			this.levels = levels;
			this.drop = drop;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			activity = is.popInteger();
			bagCount = is.popInteger();
			levels = is.popIntegerList();
			drop = is.popList(ScheduleDropCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(activity);
			os.pushInteger(bagCount);
			os.pushIntegerList(levels);
			os.pushList(drop);
		}

		public int id;
		public int activity;
		public int bagCount;
		public List<Integer> levels;
		public List<ScheduleDropCFGS> drop;
	}

	public static class ScheduleDropCFGS implements Stream.IStreamable
	{

		public ScheduleDropCFGS() { }

		public ScheduleDropCFGS(int fixedDropID, int randomDropIDs, int randomDropCnt)
		{
			this.fixedDropID = fixedDropID;
			this.randomDropIDs = randomDropIDs;
			this.randomDropCnt = randomDropCnt;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fixedDropID = is.popInteger();
			randomDropIDs = is.popInteger();
			randomDropCnt = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(fixedDropID);
			os.pushInteger(randomDropIDs);
			os.pushInteger(randomDropCnt);
		}

		public int fixedDropID;
		public int randomDropIDs;
		public int randomDropCnt;
	}

	public static class SecretAreaTaskCFGS implements Stream.IStreamable
	{

		public SecretAreaTaskCFGS() { }

		public SecretAreaTaskCFGS(int id, TaskCondCFGS taskCond, List<DummyGoods> rewards, int mapId)
		{
			this.id = id;
			this.taskCond = taskCond;
			this.rewards = rewards;
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( taskCond == null )
				taskCond = new TaskCondCFGS();
			is.pop(taskCond);
			rewards = is.popList(DummyGoods.class);
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(taskCond);
			os.pushList(rewards);
			os.pushInteger(mapId);
		}

		public int id;
		public TaskCondCFGS taskCond;
		public List<DummyGoods> rewards;
		public int mapId;
	}

	public static class SectDeliverCFGS implements Stream.IStreamable
	{

		public SectDeliverCFGS() { }

		public SectDeliverCFGS(int startLevel, List<Integer> doubleBonusTimes, int deliverTimes, int robTimes, 
		                       int beRobbedTimes, List<Integer> protectEndTime, int protectDiamond, List<Integer> refreshDiamond, 
		                       List<Integer> wishDiamonds, int moveSpeed, int stopDistance, int faildByTime, 
		                       int robSuccessHP, int needVit, int wishGet, List<Integer> teamBuffs, 
		                       int searchHelpTime, int invincibleBuff, int dmgBy, int maxHp, 
		                       int doubleBonusRate, int robValidNum, int robValidDistance, int roleLevelNeed, 
		                       List<Integer> rewardForQuality)
		{
			this.startLevel = startLevel;
			this.doubleBonusTimes = doubleBonusTimes;
			this.deliverTimes = deliverTimes;
			this.robTimes = robTimes;
			this.beRobbedTimes = beRobbedTimes;
			this.protectEndTime = protectEndTime;
			this.protectDiamond = protectDiamond;
			this.refreshDiamond = refreshDiamond;
			this.wishDiamonds = wishDiamonds;
			this.moveSpeed = moveSpeed;
			this.stopDistance = stopDistance;
			this.faildByTime = faildByTime;
			this.robSuccessHP = robSuccessHP;
			this.needVit = needVit;
			this.wishGet = wishGet;
			this.teamBuffs = teamBuffs;
			this.searchHelpTime = searchHelpTime;
			this.invincibleBuff = invincibleBuff;
			this.dmgBy = dmgBy;
			this.maxHp = maxHp;
			this.doubleBonusRate = doubleBonusRate;
			this.robValidNum = robValidNum;
			this.robValidDistance = robValidDistance;
			this.roleLevelNeed = roleLevelNeed;
			this.rewardForQuality = rewardForQuality;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			startLevel = is.popInteger();
			doubleBonusTimes = is.popIntegerList();
			deliverTimes = is.popInteger();
			robTimes = is.popInteger();
			beRobbedTimes = is.popInteger();
			protectEndTime = is.popIntegerList();
			protectDiamond = is.popInteger();
			refreshDiamond = is.popIntegerList();
			wishDiamonds = is.popIntegerList();
			moveSpeed = is.popInteger();
			stopDistance = is.popInteger();
			faildByTime = is.popInteger();
			robSuccessHP = is.popInteger();
			needVit = is.popInteger();
			wishGet = is.popInteger();
			teamBuffs = is.popIntegerList();
			searchHelpTime = is.popInteger();
			invincibleBuff = is.popInteger();
			dmgBy = is.popInteger();
			maxHp = is.popInteger();
			doubleBonusRate = is.popInteger();
			robValidNum = is.popInteger();
			robValidDistance = is.popInteger();
			roleLevelNeed = is.popInteger();
			rewardForQuality = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(startLevel);
			os.pushIntegerList(doubleBonusTimes);
			os.pushInteger(deliverTimes);
			os.pushInteger(robTimes);
			os.pushInteger(beRobbedTimes);
			os.pushIntegerList(protectEndTime);
			os.pushInteger(protectDiamond);
			os.pushIntegerList(refreshDiamond);
			os.pushIntegerList(wishDiamonds);
			os.pushInteger(moveSpeed);
			os.pushInteger(stopDistance);
			os.pushInteger(faildByTime);
			os.pushInteger(robSuccessHP);
			os.pushInteger(needVit);
			os.pushInteger(wishGet);
			os.pushIntegerList(teamBuffs);
			os.pushInteger(searchHelpTime);
			os.pushInteger(invincibleBuff);
			os.pushInteger(dmgBy);
			os.pushInteger(maxHp);
			os.pushInteger(doubleBonusRate);
			os.pushInteger(robValidNum);
			os.pushInteger(robValidDistance);
			os.pushInteger(roleLevelNeed);
			os.pushIntegerList(rewardForQuality);
		}

		public int startLevel;
		public List<Integer> doubleBonusTimes;
		public int deliverTimes;
		public int robTimes;
		public int beRobbedTimes;
		public List<Integer> protectEndTime;
		public int protectDiamond;
		public List<Integer> refreshDiamond;
		public List<Integer> wishDiamonds;
		public int moveSpeed;
		public int stopDistance;
		public int faildByTime;
		public int robSuccessHP;
		public int needVit;
		public int wishGet;
		public List<Integer> teamBuffs;
		public int searchHelpTime;
		public int invincibleBuff;
		public int dmgBy;
		public int maxHp;
		public int doubleBonusRate;
		public int robValidNum;
		public int robValidDistance;
		public int roleLevelNeed;
		public List<Integer> rewardForQuality;
	}

	public static class SectDeliverTaskCFGS implements Stream.IStreamable
	{

		public SectDeliverTaskCFGS() { }

		public SectDeliverTaskCFGS(List<SectDeliverTask> tasks)
		{
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tasks = is.popList(SectDeliverTask.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(tasks);
		}

		public List<SectDeliverTask> tasks;
	}

	public static class SectDeliverVehicleCFGS implements Stream.IStreamable
	{

		public SectDeliverVehicleCFGS() { }

		public SectDeliverVehicleCFGS(List<SectDeliverVehicle> vehicles)
		{
			this.vehicles = vehicles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			vehicles = is.popList(SectDeliverVehicle.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(vehicles);
		}

		public List<SectDeliverVehicle> vehicles;
	}

	public static class SectDeliverRouteCFGS implements Stream.IStreamable
	{

		public SectDeliverRouteCFGS() { }

		public SectDeliverRouteCFGS(List<SectDeliverRoute> deliverRoutes)
		{
			this.deliverRoutes = deliverRoutes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			deliverRoutes = is.popList(SectDeliverRoute.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(deliverRoutes);
		}

		public List<SectDeliverRoute> deliverRoutes;
	}

	public static class SectDeliverWishCFGS implements Stream.IStreamable
	{

		public SectDeliverWishCFGS() { }

		public SectDeliverWishCFGS(List<SectDeliverWish> wishes)
		{
			this.wishes = wishes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			wishes = is.popList(SectDeliverWish.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(wishes);
		}

		public List<SectDeliverWish> wishes;
	}

	public static class SectDeliverTask implements Stream.IStreamable
	{

		public SectDeliverTask() { }

		public SectDeliverTask(int id, String name, int iconId, int vehicleId, 
		                       int weight, int rewardExpRate, int rewardMoneyRate, int itemId, 
		                       int firstRobLeft, int secondRobLeft, int thirdRobLeft)
		{
			this.id = id;
			this.name = name;
			this.iconId = iconId;
			this.vehicleId = vehicleId;
			this.weight = weight;
			this.rewardExpRate = rewardExpRate;
			this.rewardMoneyRate = rewardMoneyRate;
			this.itemId = itemId;
			this.firstRobLeft = firstRobLeft;
			this.secondRobLeft = secondRobLeft;
			this.thirdRobLeft = thirdRobLeft;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			iconId = is.popInteger();
			vehicleId = is.popInteger();
			weight = is.popInteger();
			rewardExpRate = is.popInteger();
			rewardMoneyRate = is.popInteger();
			itemId = is.popInteger();
			firstRobLeft = is.popInteger();
			secondRobLeft = is.popInteger();
			thirdRobLeft = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(iconId);
			os.pushInteger(vehicleId);
			os.pushInteger(weight);
			os.pushInteger(rewardExpRate);
			os.pushInteger(rewardMoneyRate);
			os.pushInteger(itemId);
			os.pushInteger(firstRobLeft);
			os.pushInteger(secondRobLeft);
			os.pushInteger(thirdRobLeft);
		}

		public int id;
		public String name;
		public int iconId;
		public int vehicleId;
		public int weight;
		public int rewardExpRate;
		public int rewardMoneyRate;
		public int itemId;
		public int firstRobLeft;
		public int secondRobLeft;
		public int thirdRobLeft;
	}

	public static class SectDeliverVehicle implements Stream.IStreamable
	{

		public SectDeliverVehicle() { }

		public SectDeliverVehicle(int id, int quality, int damageLimit, int defN, 
		                          int ctr, int tou, int defC, int defW, 
		                          int radius)
		{
			this.id = id;
			this.quality = quality;
			this.damageLimit = damageLimit;
			this.defN = defN;
			this.ctr = ctr;
			this.tou = tou;
			this.defC = defC;
			this.defW = defW;
			this.radius = radius;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			quality = is.popInteger();
			damageLimit = is.popInteger();
			defN = is.popInteger();
			ctr = is.popInteger();
			tou = is.popInteger();
			defC = is.popInteger();
			defW = is.popInteger();
			radius = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(quality);
			os.pushInteger(damageLimit);
			os.pushInteger(defN);
			os.pushInteger(ctr);
			os.pushInteger(tou);
			os.pushInteger(defC);
			os.pushInteger(defW);
			os.pushInteger(radius);
		}

		public int id;
		public int quality;
		public int damageLimit;
		public int defN;
		public int ctr;
		public int tou;
		public int defC;
		public int defW;
		public int radius;
	}

	public static class SectDeliverRoute implements Stream.IStreamable
	{

		public SectDeliverRoute() { }

		public SectDeliverRoute(int id, String name, int picId, int startMapId, 
		                        int endMapId, int startNPC, int endNPC)
		{
			this.id = id;
			this.name = name;
			this.picId = picId;
			this.startMapId = startMapId;
			this.endMapId = endMapId;
			this.startNPC = startNPC;
			this.endNPC = endNPC;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			picId = is.popInteger();
			startMapId = is.popInteger();
			endMapId = is.popInteger();
			startNPC = is.popInteger();
			endNPC = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(picId);
			os.pushInteger(startMapId);
			os.pushInteger(endMapId);
			os.pushInteger(startNPC);
			os.pushInteger(endNPC);
		}

		public int id;
		public String name;
		public int picId;
		public int startMapId;
		public int endMapId;
		public int startNPC;
		public int endNPC;
	}

	public static class SectDeliverWish implements Stream.IStreamable
	{

		public SectDeliverWish() { }

		public SectDeliverWish(int wishType, int initValue, int first5max, int first10max, 
		                       int first15max, int first30max, int first60max, int maxValue)
		{
			this.wishType = wishType;
			this.initValue = initValue;
			this.first5max = first5max;
			this.first10max = first10max;
			this.first15max = first15max;
			this.first30max = first30max;
			this.first60max = first60max;
			this.maxValue = maxValue;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			wishType = is.popInteger();
			initValue = is.popInteger();
			first5max = is.popInteger();
			first10max = is.popInteger();
			first15max = is.popInteger();
			first30max = is.popInteger();
			first60max = is.popInteger();
			maxValue = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(wishType);
			os.pushInteger(initValue);
			os.pushInteger(first5max);
			os.pushInteger(first10max);
			os.pushInteger(first15max);
			os.pushInteger(first30max);
			os.pushInteger(first60max);
			os.pushInteger(maxValue);
		}

		public int wishType;
		public int initValue;
		public int first5max;
		public int first10max;
		public int first15max;
		public int first30max;
		public int first60max;
		public int maxValue;
	}

	public static class RollNoticeCFGS implements Stream.IStreamable
	{

		public RollNoticeCFGS() { }

		public RollNoticeCFGS(List<Integer> transfers, List<Integer> sectLevels, List<Integer> equipStrengthens, List<Integer> equipStarups, 
		                      List<Integer> gemLevels, List<Integer> hourseStarups, List<Integer> weaponStarups, List<Integer> petStarups, 
		                      int firstDayPkRank, int pkRank)
		{
			this.transfers = transfers;
			this.sectLevels = sectLevels;
			this.equipStrengthens = equipStrengthens;
			this.equipStarups = equipStarups;
			this.gemLevels = gemLevels;
			this.hourseStarups = hourseStarups;
			this.weaponStarups = weaponStarups;
			this.petStarups = petStarups;
			this.firstDayPkRank = firstDayPkRank;
			this.pkRank = pkRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			transfers = is.popIntegerList();
			sectLevels = is.popIntegerList();
			equipStrengthens = is.popIntegerList();
			equipStarups = is.popIntegerList();
			gemLevels = is.popIntegerList();
			hourseStarups = is.popIntegerList();
			weaponStarups = is.popIntegerList();
			petStarups = is.popIntegerList();
			firstDayPkRank = is.popInteger();
			pkRank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(transfers);
			os.pushIntegerList(sectLevels);
			os.pushIntegerList(equipStrengthens);
			os.pushIntegerList(equipStarups);
			os.pushIntegerList(gemLevels);
			os.pushIntegerList(hourseStarups);
			os.pushIntegerList(weaponStarups);
			os.pushIntegerList(petStarups);
			os.pushInteger(firstDayPkRank);
			os.pushInteger(pkRank);
		}

		public List<Integer> transfers;
		public List<Integer> sectLevels;
		public List<Integer> equipStrengthens;
		public List<Integer> equipStarups;
		public List<Integer> gemLevels;
		public List<Integer> hourseStarups;
		public List<Integer> weaponStarups;
		public List<Integer> petStarups;
		public int firstDayPkRank;
		public int pkRank;
	}

	public static class itemIdNameMapCFGS implements Stream.IStreamable
	{

		public itemIdNameMapCFGS() { }

		public itemIdNameMapCFGS(Map<Integer, String> datamap)
		{
			this.datamap = datamap;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			datamap = is.popIntegerStringTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerStringMap(datamap);
		}

		public Map<Integer, String> datamap;
	}

	public static class RemainActivityCFGS implements Stream.IStreamable
	{

		public RemainActivityCFGS() { }

		public RemainActivityCFGS(int id, int type, int cond, List<MutiDummyGoods> rewards)
		{
			this.id = id;
			this.type = type;
			this.cond = cond;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			cond = is.popInteger();
			rewards = is.popList(MutiDummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(cond);
			os.pushList(rewards);
		}

		public int id;
		public int type;
		public int cond;
		public List<MutiDummyGoods> rewards;
	}

	public static class ComposeCFGS implements Stream.IStreamable
	{

		public ComposeCFGS() { }

		public ComposeCFGS(int id, DummyGoods product, List<DummyGoods> materials)
		{
			this.id = id;
			this.product = product;
			this.materials = materials;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( product == null )
				product = new DummyGoods();
			is.pop(product);
			materials = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(product);
			os.pushList(materials);
		}

		public int id;
		public DummyGoods product;
		public List<DummyGoods> materials;
	}

	public static class MessageBoardSide implements Stream.IStreamable
	{

		public MessageBoardSide() { }

		public MessageBoardSide(List<MessageBoardCFGS> messageBoards)
		{
			this.messageBoards = messageBoards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			messageBoards = is.popList(MessageBoardCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(messageBoards);
		}

		public List<MessageBoardCFGS> messageBoards;
	}

	public static class MessageBoardCFGS implements Stream.IStreamable
	{

		public MessageBoardCFGS() { }

		public MessageBoardCFGS(int side, int id, int maxLength, int consumeType, 
		                        Map<Integer, Integer> timeCost, float rewritePercent, int protectTime)
		{
			this.side = side;
			this.id = id;
			this.maxLength = maxLength;
			this.consumeType = consumeType;
			this.timeCost = timeCost;
			this.rewritePercent = rewritePercent;
			this.protectTime = protectTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			side = is.popInteger();
			id = is.popInteger();
			maxLength = is.popInteger();
			consumeType = is.popInteger();
			timeCost = is.popIntegerIntegerTreeMap();
			rewritePercent = is.popFloat();
			protectTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(side);
			os.pushInteger(id);
			os.pushInteger(maxLength);
			os.pushInteger(consumeType);
			os.pushIntegerIntegerMap(timeCost);
			os.pushFloat(rewritePercent);
			os.pushInteger(protectTime);
		}

		public int side;
		public int id;
		public int maxLength;
		public int consumeType;
		public Map<Integer, Integer> timeCost;
		public float rewritePercent;
		public int protectTime;
	}

	public static class MessageBoardCommonCFGS implements Stream.IStreamable
	{

		public MessageBoardCommonCFGS() { }

		public MessageBoardCommonCFGS(int dayCommentTime, int openLevel, String anonymousName, String replaceNotice)
		{
			this.dayCommentTime = dayCommentTime;
			this.openLevel = openLevel;
			this.anonymousName = anonymousName;
			this.replaceNotice = replaceNotice;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayCommentTime = is.popInteger();
			openLevel = is.popInteger();
			anonymousName = is.popString();
			replaceNotice = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayCommentTime);
			os.pushInteger(openLevel);
			os.pushString(anonymousName);
			os.pushString(replaceNotice);
		}

		public int dayCommentTime;
		public int openLevel;
		public String anonymousName;
		public String replaceNotice;
	}

	public static class ArmorCFGS implements Stream.IStreamable
	{

		public ArmorCFGS() { }

		public ArmorCFGS(List<ArmorTypeCFGS> armorType, Map<Integer, ArmorLevelGroupCFGS> armorLevelGroup, Map<Integer, ArmorRankGroupCFGS> armorRankGroup, List<FeatAddWishPointCFGS> featAddWishPoint, 
		                 Map<Integer, ArmorTalentGroupCFGS> armorTalentGroup, Map<Integer, ArmorSlotGroupCFGS> armorSlotGroup, Map<Integer, RuneCFGS> rune, List<RuneTransmigrateCFGS> runeTransmigrate, 
		                 List<RuneLangCFGS> runeLang, ArmorCommonCFGS armorCommon)
		{
			this.armorType = armorType;
			this.armorLevelGroup = armorLevelGroup;
			this.armorRankGroup = armorRankGroup;
			this.featAddWishPoint = featAddWishPoint;
			this.armorTalentGroup = armorTalentGroup;
			this.armorSlotGroup = armorSlotGroup;
			this.rune = rune;
			this.runeTransmigrate = runeTransmigrate;
			this.runeLang = runeLang;
			this.armorCommon = armorCommon;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			armorType = is.popList(ArmorTypeCFGS.class);
			armorLevelGroup = is.popIntegerTreeMap(ArmorLevelGroupCFGS.class);
			armorRankGroup = is.popIntegerTreeMap(ArmorRankGroupCFGS.class);
			featAddWishPoint = is.popList(FeatAddWishPointCFGS.class);
			armorTalentGroup = is.popIntegerTreeMap(ArmorTalentGroupCFGS.class);
			armorSlotGroup = is.popIntegerTreeMap(ArmorSlotGroupCFGS.class);
			rune = is.popIntegerTreeMap(RuneCFGS.class);
			runeTransmigrate = is.popList(RuneTransmigrateCFGS.class);
			runeLang = is.popList(RuneLangCFGS.class);
			if( armorCommon == null )
				armorCommon = new ArmorCommonCFGS();
			is.pop(armorCommon);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(armorType);
			os.pushIntegerMap(armorLevelGroup);
			os.pushIntegerMap(armorRankGroup);
			os.pushList(featAddWishPoint);
			os.pushIntegerMap(armorTalentGroup);
			os.pushIntegerMap(armorSlotGroup);
			os.pushIntegerMap(rune);
			os.pushList(runeTransmigrate);
			os.pushList(runeLang);
			os.push(armorCommon);
		}

		public List<ArmorTypeCFGS> armorType;
		public Map<Integer, ArmorLevelGroupCFGS> armorLevelGroup;
		public Map<Integer, ArmorRankGroupCFGS> armorRankGroup;
		public List<FeatAddWishPointCFGS> featAddWishPoint;
		public Map<Integer, ArmorTalentGroupCFGS> armorTalentGroup;
		public Map<Integer, ArmorSlotGroupCFGS> armorSlotGroup;
		public Map<Integer, RuneCFGS> rune;
		public List<RuneTransmigrateCFGS> runeTransmigrate;
		public List<RuneLangCFGS> runeLang;
		public ArmorCommonCFGS armorCommon;
	}

	public static class ArmorTypeCFGS implements Stream.IStreamable
	{

		public ArmorTypeCFGS() { }

		public ArmorTypeCFGS(int type, int restrainType, int beRestrainType, int unLockLevel, 
		                     int unLockPower, int unLockFeat, List<DummyGoods> unLockItems)
		{
			this.type = type;
			this.restrainType = restrainType;
			this.beRestrainType = beRestrainType;
			this.unLockLevel = unLockLevel;
			this.unLockPower = unLockPower;
			this.unLockFeat = unLockFeat;
			this.unLockItems = unLockItems;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			restrainType = is.popInteger();
			beRestrainType = is.popInteger();
			unLockLevel = is.popInteger();
			unLockPower = is.popInteger();
			unLockFeat = is.popInteger();
			unLockItems = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(restrainType);
			os.pushInteger(beRestrainType);
			os.pushInteger(unLockLevel);
			os.pushInteger(unLockPower);
			os.pushInteger(unLockFeat);
			os.pushList(unLockItems);
		}

		public int type;
		public int restrainType;
		public int beRestrainType;
		public int unLockLevel;
		public int unLockPower;
		public int unLockFeat;
		public List<DummyGoods> unLockItems;
	}

	public static class ArmorLevelGroupCFGS implements Stream.IStreamable
	{

		public ArmorLevelGroupCFGS() { }

		public ArmorLevelGroupCFGS(int type, List<ArmorLevelCFGS> armorLevels)
		{
			this.type = type;
			this.armorLevels = armorLevels;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			armorLevels = is.popList(ArmorLevelCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushList(armorLevels);
		}

		public int type;
		public List<ArmorLevelCFGS> armorLevels;
	}

	public static class ArmorLevelCFGS implements Stream.IStreamable
	{

		public ArmorLevelCFGS() { }

		public ArmorLevelCFGS(int type, int level, int needExp, List<Integer> canUseItem, 
		                      int talentPoint, List<AttrCFGS> properties)
		{
			this.type = type;
			this.level = level;
			this.needExp = needExp;
			this.canUseItem = canUseItem;
			this.talentPoint = talentPoint;
			this.properties = properties;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			level = is.popInteger();
			needExp = is.popInteger();
			canUseItem = is.popIntegerList();
			talentPoint = is.popInteger();
			properties = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(level);
			os.pushInteger(needExp);
			os.pushIntegerList(canUseItem);
			os.pushInteger(talentPoint);
			os.pushList(properties);
		}

		public int type;
		public int level;
		public int needExp;
		public List<Integer> canUseItem;
		public int talentPoint;
		public List<AttrCFGS> properties;
	}

	public static class ArmorRankGroupCFGS implements Stream.IStreamable
	{

		public ArmorRankGroupCFGS() { }

		public ArmorRankGroupCFGS(int type, List<ArmorRankCFGS> armorRanks)
		{
			this.type = type;
			this.armorRanks = armorRanks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			armorRanks = is.popList(ArmorRankCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushList(armorRanks);
		}

		public int type;
		public List<ArmorRankCFGS> armorRanks;
	}

	public static class ArmorRankCFGS implements Stream.IStreamable
	{

		public ArmorRankCFGS() { }

		public ArmorRankCFGS(int type, int rank, double propertyRate, List<AttrCFGS> properties, 
		                     List<DummyGoods> rankUpConsume, int maxWishPoint, int addWishPointEveryTime, int rankUpDefaultRate, 
		                     int addRatePerWishPoint, int mustFailTime, int mustSuccessTime)
		{
			this.type = type;
			this.rank = rank;
			this.propertyRate = propertyRate;
			this.properties = properties;
			this.rankUpConsume = rankUpConsume;
			this.maxWishPoint = maxWishPoint;
			this.addWishPointEveryTime = addWishPointEveryTime;
			this.rankUpDefaultRate = rankUpDefaultRate;
			this.addRatePerWishPoint = addRatePerWishPoint;
			this.mustFailTime = mustFailTime;
			this.mustSuccessTime = mustSuccessTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			rank = is.popInteger();
			propertyRate = is.popDouble();
			properties = is.popList(AttrCFGS.class);
			rankUpConsume = is.popList(DummyGoods.class);
			maxWishPoint = is.popInteger();
			addWishPointEveryTime = is.popInteger();
			rankUpDefaultRate = is.popInteger();
			addRatePerWishPoint = is.popInteger();
			mustFailTime = is.popInteger();
			mustSuccessTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(rank);
			os.pushDouble(propertyRate);
			os.pushList(properties);
			os.pushList(rankUpConsume);
			os.pushInteger(maxWishPoint);
			os.pushInteger(addWishPointEveryTime);
			os.pushInteger(rankUpDefaultRate);
			os.pushInteger(addRatePerWishPoint);
			os.pushInteger(mustFailTime);
			os.pushInteger(mustSuccessTime);
		}

		public int type;
		public int rank;
		public double propertyRate;
		public List<AttrCFGS> properties;
		public List<DummyGoods> rankUpConsume;
		public int maxWishPoint;
		public int addWishPointEveryTime;
		public int rankUpDefaultRate;
		public int addRatePerWishPoint;
		public int mustFailTime;
		public int mustSuccessTime;
	}

	public static class FeatAddWishPointCFGS implements Stream.IStreamable
	{

		public FeatAddWishPointCFGS() { }

		public FeatAddWishPointCFGS(int feat, int startWishPoint)
		{
			this.feat = feat;
			this.startWishPoint = startWishPoint;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			feat = is.popInteger();
			startWishPoint = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(feat);
			os.pushInteger(startWishPoint);
		}

		public int feat;
		public int startWishPoint;
	}

	public static class ArmorTalentGroupCFGS implements Stream.IStreamable
	{

		public ArmorTalentGroupCFGS() { }

		public ArmorTalentGroupCFGS(int type, List<ArmorTalentCFGS> armorTalents)
		{
			this.type = type;
			this.armorTalents = armorTalents;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			armorTalents = is.popList(ArmorTalentCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushList(armorTalents);
		}

		public int type;
		public List<ArmorTalentCFGS> armorTalents;
	}

	public static class ArmorTalentCFGS implements Stream.IStreamable
	{

		public ArmorTalentCFGS() { }

		public ArmorTalentCFGS(int type, int talentId, int maxTalentPoint, int needTalentPoint, 
		                       int preTalentId, int preTalentPoint, int needFeat, byte effectType, 
		                       int attrId, byte addAttrType, List<Integer> addAttrNum, List<Integer> trigSkills, 
		                       List<Integer> powers)
		{
			this.type = type;
			this.talentId = talentId;
			this.maxTalentPoint = maxTalentPoint;
			this.needTalentPoint = needTalentPoint;
			this.preTalentId = preTalentId;
			this.preTalentPoint = preTalentPoint;
			this.needFeat = needFeat;
			this.effectType = effectType;
			this.attrId = attrId;
			this.addAttrType = addAttrType;
			this.addAttrNum = addAttrNum;
			this.trigSkills = trigSkills;
			this.powers = powers;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			talentId = is.popInteger();
			maxTalentPoint = is.popInteger();
			needTalentPoint = is.popInteger();
			preTalentId = is.popInteger();
			preTalentPoint = is.popInteger();
			needFeat = is.popInteger();
			effectType = is.popByte();
			attrId = is.popInteger();
			addAttrType = is.popByte();
			addAttrNum = is.popIntegerList();
			trigSkills = is.popIntegerList();
			powers = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(talentId);
			os.pushInteger(maxTalentPoint);
			os.pushInteger(needTalentPoint);
			os.pushInteger(preTalentId);
			os.pushInteger(preTalentPoint);
			os.pushInteger(needFeat);
			os.pushByte(effectType);
			os.pushInteger(attrId);
			os.pushByte(addAttrType);
			os.pushIntegerList(addAttrNum);
			os.pushIntegerList(trigSkills);
			os.pushIntegerList(powers);
		}

		public int type;
		public int talentId;
		public int maxTalentPoint;
		public int needTalentPoint;
		public int preTalentId;
		public int preTalentPoint;
		public int needFeat;
		public byte effectType;
		public int attrId;
		public byte addAttrType;
		public List<Integer> addAttrNum;
		public List<Integer> trigSkills;
		public List<Integer> powers;
	}

	public static class ArmorSlotGroupCFGS implements Stream.IStreamable
	{

		public ArmorSlotGroupCFGS() { }

		public ArmorSlotGroupCFGS(int type, List<ArmorSlotCFGS> armorSlots)
		{
			this.type = type;
			this.armorSlots = armorSlots;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			armorSlots = is.popList(ArmorSlotCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushList(armorSlots);
		}

		public int type;
		public List<ArmorSlotCFGS> armorSlots;
	}

	public static class ArmorSlotCFGS implements Stream.IStreamable
	{

		public ArmorSlotCFGS() { }

		public ArmorSlotCFGS(int type, int slotGroupId, int slotNum, byte defaultOpen, 
		                     int unlockLevel, int unLockPower, int unLockFeat, List<DummyGoods> unLockItems)
		{
			this.type = type;
			this.slotGroupId = slotGroupId;
			this.slotNum = slotNum;
			this.defaultOpen = defaultOpen;
			this.unlockLevel = unlockLevel;
			this.unLockPower = unLockPower;
			this.unLockFeat = unLockFeat;
			this.unLockItems = unLockItems;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			slotGroupId = is.popInteger();
			slotNum = is.popInteger();
			defaultOpen = is.popByte();
			unlockLevel = is.popInteger();
			unLockPower = is.popInteger();
			unLockFeat = is.popInteger();
			unLockItems = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(slotGroupId);
			os.pushInteger(slotNum);
			os.pushByte(defaultOpen);
			os.pushInteger(unlockLevel);
			os.pushInteger(unLockPower);
			os.pushInteger(unLockFeat);
			os.pushList(unLockItems);
		}

		public int type;
		public int slotGroupId;
		public int slotNum;
		public byte defaultOpen;
		public int unlockLevel;
		public int unLockPower;
		public int unLockFeat;
		public List<DummyGoods> unLockItems;
	}

	public static class RuneCFGS implements Stream.IStreamable
	{

		public RuneCFGS() { }

		public RuneCFGS(int runeId, int slotGroupId, int slotNum, AttrCFGS property, 
		                int transmigratePoint, List<Integer> mutexRunes, int power)
		{
			this.runeId = runeId;
			this.slotGroupId = slotGroupId;
			this.slotNum = slotNum;
			this.property = property;
			this.transmigratePoint = transmigratePoint;
			this.mutexRunes = mutexRunes;
			this.power = power;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			runeId = is.popInteger();
			slotGroupId = is.popInteger();
			slotNum = is.popInteger();
			if( property == null )
				property = new AttrCFGS();
			is.pop(property);
			transmigratePoint = is.popInteger();
			mutexRunes = is.popIntegerList();
			power = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(runeId);
			os.pushInteger(slotGroupId);
			os.pushInteger(slotNum);
			os.push(property);
			os.pushInteger(transmigratePoint);
			os.pushIntegerList(mutexRunes);
			os.pushInteger(power);
		}

		public int runeId;
		public int slotGroupId;
		public int slotNum;
		public AttrCFGS property;
		public int transmigratePoint;
		public List<Integer> mutexRunes;
		public int power;
	}

	public static class RuneTransmigrateCFGS implements Stream.IStreamable
	{

		public RuneTransmigrateCFGS() { }

		public RuneTransmigrateCFGS(int transmigrate, int dropId, int minDropNum, int maxDropNum)
		{
			this.transmigrate = transmigrate;
			this.dropId = dropId;
			this.minDropNum = minDropNum;
			this.maxDropNum = maxDropNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			transmigrate = is.popInteger();
			dropId = is.popInteger();
			minDropNum = is.popInteger();
			maxDropNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(transmigrate);
			os.pushInteger(dropId);
			os.pushInteger(minDropNum);
			os.pushInteger(maxDropNum);
		}

		public int transmigrate;
		public int dropId;
		public int minDropNum;
		public int maxDropNum;
	}

	public static class RuneLangCFGS implements Stream.IStreamable
	{

		public RuneLangCFGS() { }

		public RuneLangCFGS(int id, List<Integer> runes, List<AttrCFGS> properties)
		{
			this.id = id;
			this.runes = runes;
			this.properties = properties;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			runes = is.popIntegerList();
			properties = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerList(runes);
			os.pushList(properties);
		}

		public int id;
		public List<Integer> runes;
		public List<AttrCFGS> properties;
	}

	public static class ArmorCommonCFGS implements Stream.IStreamable
	{

		public ArmorCommonCFGS() { }

		public ArmorCommonCFGS(int wishPointMaxRate, int rollNoticeRank, int refreshItemId, List<Integer> refreshItemNum, 
		                       int minWishRuneNum, int maxWishRuneNum, int wishUseItem, int wishUseItemNum)
		{
			this.wishPointMaxRate = wishPointMaxRate;
			this.rollNoticeRank = rollNoticeRank;
			this.refreshItemId = refreshItemId;
			this.refreshItemNum = refreshItemNum;
			this.minWishRuneNum = minWishRuneNum;
			this.maxWishRuneNum = maxWishRuneNum;
			this.wishUseItem = wishUseItem;
			this.wishUseItemNum = wishUseItemNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			wishPointMaxRate = is.popInteger();
			rollNoticeRank = is.popInteger();
			refreshItemId = is.popInteger();
			refreshItemNum = is.popIntegerList();
			minWishRuneNum = is.popInteger();
			maxWishRuneNum = is.popInteger();
			wishUseItem = is.popInteger();
			wishUseItemNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(wishPointMaxRate);
			os.pushInteger(rollNoticeRank);
			os.pushInteger(refreshItemId);
			os.pushIntegerList(refreshItemNum);
			os.pushInteger(minWishRuneNum);
			os.pushInteger(maxWishRuneNum);
			os.pushInteger(wishUseItem);
			os.pushInteger(wishUseItemNum);
		}

		public int wishPointMaxRate;
		public int rollNoticeRank;
		public int refreshItemId;
		public List<Integer> refreshItemNum;
		public int minWishRuneNum;
		public int maxWishRuneNum;
		public int wishUseItem;
		public int wishUseItemNum;
	}

	public static class SceneTrigCFGS implements Stream.IStreamable
	{

		public SceneTrigCFGS() { }

		public SceneTrigCFGS(int id, int mapID, int trigEvent, int trigBehavior, 
		                     int param1)
		{
			this.id = id;
			this.mapID = mapID;
			this.trigEvent = trigEvent;
			this.trigBehavior = trigBehavior;
			this.param1 = param1;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			mapID = is.popInteger();
			trigEvent = is.popInteger();
			trigBehavior = is.popInteger();
			param1 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(mapID);
			os.pushInteger(trigEvent);
			os.pushInteger(trigBehavior);
			os.pushInteger(param1);
		}

		public int id;
		public int mapID;
		public int trigEvent;
		public int trigBehavior;
		public int param1;
	}

	public static class SceneSpawnPointCFGS implements Stream.IStreamable
	{

		public SceneSpawnPointCFGS() { }

		public SceneSpawnPointCFGS(int id, int mapID, Vector3 position, byte posRand, 
		                           int randRadius, int odds, int monsterID, int count, 
		                           int standTime, int seeType)
		{
			this.id = id;
			this.mapID = mapID;
			this.position = position;
			this.posRand = posRand;
			this.randRadius = randRadius;
			this.odds = odds;
			this.monsterID = monsterID;
			this.count = count;
			this.standTime = standTime;
			this.seeType = seeType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			mapID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			posRand = is.popByte();
			randRadius = is.popInteger();
			odds = is.popInteger();
			monsterID = is.popInteger();
			count = is.popInteger();
			standTime = is.popInteger();
			seeType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(mapID);
			os.push(position);
			os.pushByte(posRand);
			os.pushInteger(randRadius);
			os.pushInteger(odds);
			os.pushInteger(monsterID);
			os.pushInteger(count);
			os.pushInteger(standTime);
			os.pushInteger(seeType);
		}

		public int id;
		public int mapID;
		public Vector3 position;
		public byte posRand;
		public int randRadius;
		public int odds;
		public int monsterID;
		public int count;
		public int standTime;
		public int seeType;
	}

	public static class MarriageCFGS implements Stream.IStreamable
	{

		public MarriageCFGS() { }

		public MarriageCFGS(MarriageBaseCFGS marriageCommon, MarriageTaskCFG task, List<MarriageGradeCFGS> marriageGrade, List<MarriageAttributeCFGS> marriageAttributes, 
		                    Map<Integer, MarriageSkillGroupCFGS> marriageSkills, Map<Integer, MarriageCarCFGS> cars, Map<Integer, MarriageLineCFGS> lines, Map<Integer, MarriageBanquetCFGS> banquets, 
		                    MarriageBanquetBaseCFGS banquetBase, List<MarriageBespeakTimeCFGS> marriageBespeakTimes)
		{
			this.marriageCommon = marriageCommon;
			this.task = task;
			this.marriageGrade = marriageGrade;
			this.marriageAttributes = marriageAttributes;
			this.marriageSkills = marriageSkills;
			this.cars = cars;
			this.lines = lines;
			this.banquets = banquets;
			this.banquetBase = banquetBase;
			this.marriageBespeakTimes = marriageBespeakTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( marriageCommon == null )
				marriageCommon = new MarriageBaseCFGS();
			is.pop(marriageCommon);
			if( task == null )
				task = new MarriageTaskCFG();
			is.pop(task);
			marriageGrade = is.popList(MarriageGradeCFGS.class);
			marriageAttributes = is.popList(MarriageAttributeCFGS.class);
			marriageSkills = is.popIntegerTreeMap(MarriageSkillGroupCFGS.class);
			cars = is.popIntegerTreeMap(MarriageCarCFGS.class);
			lines = is.popIntegerTreeMap(MarriageLineCFGS.class);
			banquets = is.popIntegerTreeMap(MarriageBanquetCFGS.class);
			if( banquetBase == null )
				banquetBase = new MarriageBanquetBaseCFGS();
			is.pop(banquetBase);
			marriageBespeakTimes = is.popList(MarriageBespeakTimeCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(marriageCommon);
			os.push(task);
			os.pushList(marriageGrade);
			os.pushList(marriageAttributes);
			os.pushIntegerMap(marriageSkills);
			os.pushIntegerMap(cars);
			os.pushIntegerMap(lines);
			os.pushIntegerMap(banquets);
			os.push(banquetBase);
			os.pushList(marriageBespeakTimes);
		}

		public MarriageBaseCFGS marriageCommon;
		public MarriageTaskCFG task;
		public List<MarriageGradeCFGS> marriageGrade;
		public List<MarriageAttributeCFGS> marriageAttributes;
		public Map<Integer, MarriageSkillGroupCFGS> marriageSkills;
		public Map<Integer, MarriageCarCFGS> cars;
		public Map<Integer, MarriageLineCFGS> lines;
		public Map<Integer, MarriageBanquetCFGS> banquets;
		public MarriageBanquetBaseCFGS banquetBase;
		public List<MarriageBespeakTimeCFGS> marriageBespeakTimes;
	}

	public static class MarriageBespeakTimeCFGS implements Stream.IStreamable
	{

		public MarriageBespeakTimeCFGS() { }

		public MarriageBespeakTimeCFGS(TimeSpan time, int costId, int costNum)
		{
			this.time = time;
			this.costId = costId;
			this.costNum = costNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			costId = is.popInteger();
			costNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(time);
			os.pushInteger(costId);
			os.pushInteger(costNum);
		}

		public TimeSpan time;
		public int costId;
		public int costNum;
	}

	public static class MarriageBaseCFGS implements Stream.IStreamable
	{

		public MarriageBaseCFGS() { }

		public MarriageBaseCFGS(int levelNeed, int friendPointNeed, int pkPointLess, int giftMaxGetTimes, 
		                        int banquetMaxGetTimes, int banquetLast, int paradeLast, int divorceCostId, 
		                        int divorceCost, int divorceCD, int transmitCD, int marriageNpcId, 
		                        int skillUseCoin, int skillHillDistance, int carMoveSpeed, int banquetType, 
		                        int carId, int mapId)
		{
			this.levelNeed = levelNeed;
			this.friendPointNeed = friendPointNeed;
			this.pkPointLess = pkPointLess;
			this.giftMaxGetTimes = giftMaxGetTimes;
			this.banquetMaxGetTimes = banquetMaxGetTimes;
			this.banquetLast = banquetLast;
			this.paradeLast = paradeLast;
			this.divorceCostId = divorceCostId;
			this.divorceCost = divorceCost;
			this.divorceCD = divorceCD;
			this.transmitCD = transmitCD;
			this.marriageNpcId = marriageNpcId;
			this.skillUseCoin = skillUseCoin;
			this.skillHillDistance = skillHillDistance;
			this.carMoveSpeed = carMoveSpeed;
			this.banquetType = banquetType;
			this.carId = carId;
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			levelNeed = is.popInteger();
			friendPointNeed = is.popInteger();
			pkPointLess = is.popInteger();
			giftMaxGetTimes = is.popInteger();
			banquetMaxGetTimes = is.popInteger();
			banquetLast = is.popInteger();
			paradeLast = is.popInteger();
			divorceCostId = is.popInteger();
			divorceCost = is.popInteger();
			divorceCD = is.popInteger();
			transmitCD = is.popInteger();
			marriageNpcId = is.popInteger();
			skillUseCoin = is.popInteger();
			skillHillDistance = is.popInteger();
			carMoveSpeed = is.popInteger();
			banquetType = is.popInteger();
			carId = is.popInteger();
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(levelNeed);
			os.pushInteger(friendPointNeed);
			os.pushInteger(pkPointLess);
			os.pushInteger(giftMaxGetTimes);
			os.pushInteger(banquetMaxGetTimes);
			os.pushInteger(banquetLast);
			os.pushInteger(paradeLast);
			os.pushInteger(divorceCostId);
			os.pushInteger(divorceCost);
			os.pushInteger(divorceCD);
			os.pushInteger(transmitCD);
			os.pushInteger(marriageNpcId);
			os.pushInteger(skillUseCoin);
			os.pushInteger(skillHillDistance);
			os.pushInteger(carMoveSpeed);
			os.pushInteger(banquetType);
			os.pushInteger(carId);
			os.pushInteger(mapId);
		}

		public int levelNeed;
		public int friendPointNeed;
		public int pkPointLess;
		public int giftMaxGetTimes;
		public int banquetMaxGetTimes;
		public int banquetLast;
		public int paradeLast;
		public int divorceCostId;
		public int divorceCost;
		public int divorceCD;
		public int transmitCD;
		public int marriageNpcId;
		public int skillUseCoin;
		public int skillHillDistance;
		public int carMoveSpeed;
		public int banquetType;
		public int carId;
		public int mapId;
	}

	public static class MarriageTaskCFG implements Stream.IStreamable
	{

		public MarriageTaskCFG() { }

		public MarriageTaskCFG(int openNPC, int dayLoopTasks, int distance)
		{
			this.openNPC = openNPC;
			this.dayLoopTasks = dayLoopTasks;
			this.distance = distance;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			openNPC = is.popInteger();
			dayLoopTasks = is.popInteger();
			distance = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(openNPC);
			os.pushInteger(dayLoopTasks);
			os.pushInteger(distance);
		}

		public int openNPC;
		public int dayLoopTasks;
		public int distance;
	}

	public static class MarriageGradeCFGS implements Stream.IStreamable
	{

		public MarriageGradeCFGS() { }

		public MarriageGradeCFGS(int id, int coinCost, int diamondCost, DummyGoods itemCost, 
		                         byte chatDisplay, byte rollNoticeDisplay, byte publicWarehouseOpen, int publicWarehouseSize, 
		                         int skillLevel, int dressId)
		{
			this.id = id;
			this.coinCost = coinCost;
			this.diamondCost = diamondCost;
			this.itemCost = itemCost;
			this.chatDisplay = chatDisplay;
			this.rollNoticeDisplay = rollNoticeDisplay;
			this.publicWarehouseOpen = publicWarehouseOpen;
			this.publicWarehouseSize = publicWarehouseSize;
			this.skillLevel = skillLevel;
			this.dressId = dressId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			coinCost = is.popInteger();
			diamondCost = is.popInteger();
			if( itemCost == null )
				itemCost = new DummyGoods();
			is.pop(itemCost);
			chatDisplay = is.popByte();
			rollNoticeDisplay = is.popByte();
			publicWarehouseOpen = is.popByte();
			publicWarehouseSize = is.popInteger();
			skillLevel = is.popInteger();
			dressId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(coinCost);
			os.pushInteger(diamondCost);
			os.push(itemCost);
			os.pushByte(chatDisplay);
			os.pushByte(rollNoticeDisplay);
			os.pushByte(publicWarehouseOpen);
			os.pushInteger(publicWarehouseSize);
			os.pushInteger(skillLevel);
			os.pushInteger(dressId);
		}

		public int id;
		public int coinCost;
		public int diamondCost;
		public DummyGoods itemCost;
		public byte chatDisplay;
		public byte rollNoticeDisplay;
		public byte publicWarehouseOpen;
		public int publicWarehouseSize;
		public int skillLevel;
		public int dressId;
	}

	public static class MarriageCarCFGS implements Stream.IStreamable
	{

		public MarriageCarCFGS() { }

		public MarriageCarCFGS(int id, int lineID, int giftBoxID, int giftBoxCnt, 
		                       Set<Integer> refreshPonits, int radius, int standByTime)
		{
			this.id = id;
			this.lineID = lineID;
			this.giftBoxID = giftBoxID;
			this.giftBoxCnt = giftBoxCnt;
			this.refreshPonits = refreshPonits;
			this.radius = radius;
			this.standByTime = standByTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			lineID = is.popInteger();
			giftBoxID = is.popInteger();
			giftBoxCnt = is.popInteger();
			refreshPonits = is.popIntegerTreeSet();
			radius = is.popInteger();
			standByTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(lineID);
			os.pushInteger(giftBoxID);
			os.pushInteger(giftBoxCnt);
			os.pushIntegerSet(refreshPonits);
			os.pushInteger(radius);
			os.pushInteger(standByTime);
		}

		public int id;
		public int lineID;
		public int giftBoxID;
		public int giftBoxCnt;
		public Set<Integer> refreshPonits;
		public int radius;
		public int standByTime;
	}

	public static class MarriageBanquetCFGS implements Stream.IStreamable
	{

		public MarriageBanquetCFGS() { }

		public MarriageBanquetCFGS(int id, Set<Integer> minerals, Set<Integer> monsters, int refreshCnt, 
		                           int refreshInterval)
		{
			this.id = id;
			this.minerals = minerals;
			this.monsters = monsters;
			this.refreshCnt = refreshCnt;
			this.refreshInterval = refreshInterval;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			minerals = is.popIntegerTreeSet();
			monsters = is.popIntegerTreeSet();
			refreshCnt = is.popInteger();
			refreshInterval = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerSet(minerals);
			os.pushIntegerSet(monsters);
			os.pushInteger(refreshCnt);
			os.pushInteger(refreshInterval);
		}

		public int id;
		public Set<Integer> minerals;
		public Set<Integer> monsters;
		public int refreshCnt;
		public int refreshInterval;
	}

	public static class MarriageBanquetBaseCFGS implements Stream.IStreamable
	{

		public MarriageBanquetBaseCFGS() { }

		public MarriageBanquetBaseCFGS(int mapID, Map<Integer, PosEntity> minerals, Map<Integer, PosEntity> monsters)
		{
			this.mapID = mapID;
			this.minerals = minerals;
			this.monsters = monsters;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapID = is.popInteger();
			minerals = is.popIntegerTreeMap(PosEntity.class);
			monsters = is.popIntegerTreeMap(PosEntity.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapID);
			os.pushIntegerMap(minerals);
			os.pushIntegerMap(monsters);
		}

		public int mapID;
		public Map<Integer, PosEntity> minerals;
		public Map<Integer, PosEntity> monsters;
	}

	public static class PosEntity implements Stream.IStreamable
	{

		public PosEntity() { }

		public PosEntity(int id, Vector3 pos)
		{
			this.id = id;
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
		}

		public int id;
		public Vector3 pos;
	}

	public static class MarriageLineCFGS implements Stream.IStreamable
	{

		public MarriageLineCFGS() { }

		public MarriageLineCFGS(int id, int mapID, List<Vector3> points)
		{
			this.id = id;
			this.mapID = mapID;
			this.points = points;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			mapID = is.popInteger();
			points = is.popList(Vector3.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(mapID);
			os.pushList(points);
		}

		public int id;
		public int mapID;
		public List<Vector3> points;
	}

	public static class MarriageAttributeCFGS implements Stream.IStreamable
	{

		public MarriageAttributeCFGS() { }

		public MarriageAttributeCFGS(int level, int marriagePoint, List<AttrCFGS> properties)
		{
			this.level = level;
			this.marriagePoint = marriagePoint;
			this.properties = properties;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			marriagePoint = is.popInteger();
			properties = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(marriagePoint);
			os.pushList(properties);
		}

		public int level;
		public int marriagePoint;
		public List<AttrCFGS> properties;
	}

	public static class MarriageSkillGroupCFGS implements Stream.IStreamable
	{

		public MarriageSkillGroupCFGS() { }

		public MarriageSkillGroupCFGS(int skillId, List<MarriageSkillCFGS> skill)
		{
			this.skillId = skillId;
			this.skill = skill;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
			skill = is.popList(MarriageSkillCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
			os.pushList(skill);
		}

		public int skillId;
		public List<MarriageSkillCFGS> skill;
	}

	public static class MarriageSkillCFGS implements Stream.IStreamable
	{

		public MarriageSkillCFGS() { }

		public MarriageSkillCFGS(int skillId, int level, int levelUpTimes, List<DummyGoods> breakItemCost, 
		                         int buffId, int marriageLevelNeed)
		{
			this.skillId = skillId;
			this.level = level;
			this.levelUpTimes = levelUpTimes;
			this.breakItemCost = breakItemCost;
			this.buffId = buffId;
			this.marriageLevelNeed = marriageLevelNeed;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
			level = is.popInteger();
			levelUpTimes = is.popInteger();
			breakItemCost = is.popList(DummyGoods.class);
			buffId = is.popInteger();
			marriageLevelNeed = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
			os.pushInteger(level);
			os.pushInteger(levelUpTimes);
			os.pushList(breakItemCost);
			os.pushInteger(buffId);
			os.pushInteger(marriageLevelNeed);
		}

		public int skillId;
		public int level;
		public int levelUpTimes;
		public List<DummyGoods> breakItemCost;
		public int buffId;
		public int marriageLevelNeed;
	}

	public static class ExchangeCFGS implements Stream.IStreamable
	{

		public ExchangeCFGS() { }

		public ExchangeCFGS(int id, int dayTimes, List<DummyGoods> itemCost, List<DummyGoods> itemGet)
		{
			this.id = id;
			this.dayTimes = dayTimes;
			this.itemCost = itemCost;
			this.itemGet = itemGet;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			dayTimes = is.popInteger();
			itemCost = is.popList(DummyGoods.class);
			itemGet = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(dayTimes);
			os.pushList(itemCost);
			os.pushList(itemGet);
		}

		public int id;
		public int dayTimes;
		public List<DummyGoods> itemCost;
		public List<DummyGoods> itemGet;
	}

	public static class SectGroupMapCFGS implements Stream.IStreamable
	{

		public SectGroupMapCFGS() { }

		public SectGroupMapCFGS(int id, int memberLevelNeed, int memberNumNeed, int enterLevel, 
		                        int resetCD, int openCostId, int openCostCount, int monsterTimes, 
		                        int preMapId, int maxTime, List<Integer> drops, List<DummyGoods> finishReward, 
		                        int finishActivites, List<DummyGoods> quickFinishReward, int quickFinishActivites, List<DummyGoods> finish10percentReward, 
		                        int finish10percentActivites, List<DummyGoods> finish50percentReward, int finish50percentActivites, List<DummyGoods> finish75percentReward, 
		                        int finish75percentActivites, List<DummyGoods> finish100percentReward, int finish100percentActivites)
		{
			this.id = id;
			this.memberLevelNeed = memberLevelNeed;
			this.memberNumNeed = memberNumNeed;
			this.enterLevel = enterLevel;
			this.resetCD = resetCD;
			this.openCostId = openCostId;
			this.openCostCount = openCostCount;
			this.monsterTimes = monsterTimes;
			this.preMapId = preMapId;
			this.maxTime = maxTime;
			this.drops = drops;
			this.finishReward = finishReward;
			this.finishActivites = finishActivites;
			this.quickFinishReward = quickFinishReward;
			this.quickFinishActivites = quickFinishActivites;
			this.finish10percentReward = finish10percentReward;
			this.finish10percentActivites = finish10percentActivites;
			this.finish50percentReward = finish50percentReward;
			this.finish50percentActivites = finish50percentActivites;
			this.finish75percentReward = finish75percentReward;
			this.finish75percentActivites = finish75percentActivites;
			this.finish100percentReward = finish100percentReward;
			this.finish100percentActivites = finish100percentActivites;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			memberLevelNeed = is.popInteger();
			memberNumNeed = is.popInteger();
			enterLevel = is.popInteger();
			resetCD = is.popInteger();
			openCostId = is.popInteger();
			openCostCount = is.popInteger();
			monsterTimes = is.popInteger();
			preMapId = is.popInteger();
			maxTime = is.popInteger();
			drops = is.popIntegerList();
			finishReward = is.popList(DummyGoods.class);
			finishActivites = is.popInteger();
			quickFinishReward = is.popList(DummyGoods.class);
			quickFinishActivites = is.popInteger();
			finish10percentReward = is.popList(DummyGoods.class);
			finish10percentActivites = is.popInteger();
			finish50percentReward = is.popList(DummyGoods.class);
			finish50percentActivites = is.popInteger();
			finish75percentReward = is.popList(DummyGoods.class);
			finish75percentActivites = is.popInteger();
			finish100percentReward = is.popList(DummyGoods.class);
			finish100percentActivites = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(memberLevelNeed);
			os.pushInteger(memberNumNeed);
			os.pushInteger(enterLevel);
			os.pushInteger(resetCD);
			os.pushInteger(openCostId);
			os.pushInteger(openCostCount);
			os.pushInteger(monsterTimes);
			os.pushInteger(preMapId);
			os.pushInteger(maxTime);
			os.pushIntegerList(drops);
			os.pushList(finishReward);
			os.pushInteger(finishActivites);
			os.pushList(quickFinishReward);
			os.pushInteger(quickFinishActivites);
			os.pushList(finish10percentReward);
			os.pushInteger(finish10percentActivites);
			os.pushList(finish50percentReward);
			os.pushInteger(finish50percentActivites);
			os.pushList(finish75percentReward);
			os.pushInteger(finish75percentActivites);
			os.pushList(finish100percentReward);
			os.pushInteger(finish100percentActivites);
		}

		public int id;
		public int memberLevelNeed;
		public int memberNumNeed;
		public int enterLevel;
		public int resetCD;
		public int openCostId;
		public int openCostCount;
		public int monsterTimes;
		public int preMapId;
		public int maxTime;
		public List<Integer> drops;
		public List<DummyGoods> finishReward;
		public int finishActivites;
		public List<DummyGoods> quickFinishReward;
		public int quickFinishActivites;
		public List<DummyGoods> finish10percentReward;
		public int finish10percentActivites;
		public List<DummyGoods> finish50percentReward;
		public int finish50percentActivites;
		public List<DummyGoods> finish75percentReward;
		public int finish75percentActivites;
		public List<DummyGoods> finish100percentReward;
		public int finish100percentActivites;
	}

	public static class SectGroupMapPersonRewardCFGS implements Stream.IStreamable
	{

		public SectGroupMapPersonRewardCFGS() { }

		public SectGroupMapPersonRewardCFGS(int mapId, List<SectGroupMapRankRewardCFGS> rewards)
		{
			this.mapId = mapId;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			rewards = is.popList(SectGroupMapRankRewardCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushList(rewards);
		}

		public int mapId;
		public List<SectGroupMapRankRewardCFGS> rewards;
	}

	public static class SectGroupMapRankRewardCFGS implements Stream.IStreamable
	{

		public SectGroupMapRankRewardCFGS() { }

		public SectGroupMapRankRewardCFGS(int mapId, int rank, List<DummyGoods> finishReward, List<DummyGoods> quickFinishReward, 
		                                  List<DummyGoods> finish10percentReward, List<DummyGoods> finish50percentReward, List<DummyGoods> finish75percentReward, List<DummyGoods> finish100percentReward)
		{
			this.mapId = mapId;
			this.rank = rank;
			this.finishReward = finishReward;
			this.quickFinishReward = quickFinishReward;
			this.finish10percentReward = finish10percentReward;
			this.finish50percentReward = finish50percentReward;
			this.finish75percentReward = finish75percentReward;
			this.finish100percentReward = finish100percentReward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			rank = is.popInteger();
			finishReward = is.popList(DummyGoods.class);
			quickFinishReward = is.popList(DummyGoods.class);
			finish10percentReward = is.popList(DummyGoods.class);
			finish50percentReward = is.popList(DummyGoods.class);
			finish75percentReward = is.popList(DummyGoods.class);
			finish100percentReward = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(rank);
			os.pushList(finishReward);
			os.pushList(quickFinishReward);
			os.pushList(finish10percentReward);
			os.pushList(finish50percentReward);
			os.pushList(finish75percentReward);
			os.pushList(finish100percentReward);
		}

		public int mapId;
		public int rank;
		public List<DummyGoods> finishReward;
		public List<DummyGoods> quickFinishReward;
		public List<DummyGoods> finish10percentReward;
		public List<DummyGoods> finish50percentReward;
		public List<DummyGoods> finish75percentReward;
		public List<DummyGoods> finish100percentReward;
	}

	public static class PercentDropCFGS implements Stream.IStreamable, Stream.KCloneable<PercentDropCFGS>
	{

		public PercentDropCFGS() { }

		public PercentDropCFGS(int randomDropId, int randomDropTimes)
		{
			this.randomDropId = randomDropId;
			this.randomDropTimes = randomDropTimes;
		}

		public PercentDropCFGS ksClone()
		{
			return new PercentDropCFGS(randomDropId, randomDropTimes);
		}

		@Override
		public PercentDropCFGS kdClone()
		{
			PercentDropCFGS _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			randomDropId = is.popInteger();
			randomDropTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(randomDropId);
			os.pushInteger(randomDropTimes);
		}

		public int randomDropId;
		public int randomDropTimes;
	}

	public static class HeirloomCFGS implements Stream.IStreamable
	{

		public HeirloomCFGS() { }

		public HeirloomCFGS(int remainIndex, int maxPerfect, int dayMaxWipeTimes, int takeoutPerfect, 
		                    List<Integer> wipePerfectIn, List<Integer> wipePerfectOut, List<HeirloomPropCFGS> properties, List<HeirloomStrengthCFGS> strengths, 
		                    List<Prop> strengthProperties, List<Integer> strengthPropGet)
		{
			this.remainIndex = remainIndex;
			this.maxPerfect = maxPerfect;
			this.dayMaxWipeTimes = dayMaxWipeTimes;
			this.takeoutPerfect = takeoutPerfect;
			this.wipePerfectIn = wipePerfectIn;
			this.wipePerfectOut = wipePerfectOut;
			this.properties = properties;
			this.strengths = strengths;
			this.strengthProperties = strengthProperties;
			this.strengthPropGet = strengthPropGet;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			remainIndex = is.popInteger();
			maxPerfect = is.popInteger();
			dayMaxWipeTimes = is.popInteger();
			takeoutPerfect = is.popInteger();
			wipePerfectIn = is.popIntegerList();
			wipePerfectOut = is.popIntegerList();
			properties = is.popList(HeirloomPropCFGS.class);
			strengths = is.popList(HeirloomStrengthCFGS.class);
			strengthProperties = is.popList(Prop.class);
			strengthPropGet = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(remainIndex);
			os.pushInteger(maxPerfect);
			os.pushInteger(dayMaxWipeTimes);
			os.pushInteger(takeoutPerfect);
			os.pushIntegerList(wipePerfectIn);
			os.pushIntegerList(wipePerfectOut);
			os.pushList(properties);
			os.pushList(strengths);
			os.pushList(strengthProperties);
			os.pushIntegerList(strengthPropGet);
		}

		public int remainIndex;
		public int maxPerfect;
		public int dayMaxWipeTimes;
		public int takeoutPerfect;
		public List<Integer> wipePerfectIn;
		public List<Integer> wipePerfectOut;
		public List<HeirloomPropCFGS> properties;
		public List<HeirloomStrengthCFGS> strengths;
		public List<Prop> strengthProperties;
		public List<Integer> strengthPropGet;
	}

	public static class HeirloomStrengthCFGS implements Stream.IStreamable
	{

		public HeirloomStrengthCFGS() { }

		public HeirloomStrengthCFGS(List<Integer> propMax)
		{
			this.propMax = propMax;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			propMax = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(propMax);
		}

		public List<Integer> propMax;
	}

	public static class HeirloomPropCFGS implements Stream.IStreamable
	{

		public HeirloomPropCFGS() { }

		public HeirloomPropCFGS(int perfectDegree, List<AttrCFGS> properties)
		{
			this.perfectDegree = perfectDegree;
			this.properties = properties;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			perfectDegree = is.popInteger();
			properties = is.popList(AttrCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(perfectDegree);
			os.pushList(properties);
		}

		public int perfectDegree;
		public List<AttrCFGS> properties;
	}

	public static class RobotCFGS implements Stream.IStreamable
	{

		public RobotCFGS() { }

		public RobotCFGS(List<String> surNames, List<RobotOverviewCFGS> overviews, RobotCommonCFGS common)
		{
			this.surNames = surNames;
			this.overviews = overviews;
			this.common = common;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			surNames = is.popStringList();
			overviews = is.popList(RobotOverviewCFGS.class);
			if( common == null )
				common = new RobotCommonCFGS();
			is.pop(common);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushStringList(surNames);
			os.pushList(overviews);
			os.push(common);
		}

		public List<String> surNames;
		public List<RobotOverviewCFGS> overviews;
		public RobotCommonCFGS common;
	}

	public static class RobotOverviewCFGS implements Stream.IStreamable
	{

		public RobotOverviewCFGS() { }

		public RobotOverviewCFGS(String name, int gender)
		{
			this.name = name;
			this.gender = gender;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			name = is.popString();
			gender = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(name);
			os.pushInteger(gender);
		}

		public String name;
		public int gender;
	}

	public static class RobotCommonCFGS implements Stream.IStreamable
	{

		public RobotCommonCFGS() { }

		public RobotCommonCFGS(GradeCFGS arenaRank, List<RobotBroadcastTimeCFGS> broadcastTime, Map<Integer, Integer> openDays)
		{
			this.arenaRank = arenaRank;
			this.broadcastTime = broadcastTime;
			this.openDays = openDays;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( arenaRank == null )
				arenaRank = new GradeCFGS();
			is.pop(arenaRank);
			broadcastTime = is.popList(RobotBroadcastTimeCFGS.class);
			openDays = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(arenaRank);
			os.pushList(broadcastTime);
			os.pushIntegerIntegerMap(openDays);
		}

		public GradeCFGS arenaRank;
		public List<RobotBroadcastTimeCFGS> broadcastTime;
		public Map<Integer, Integer> openDays;
	}

	public static class RobotBroadcastTimeCFGS implements Stream.IStreamable
	{

		public RobotBroadcastTimeCFGS() { }

		public RobotBroadcastTimeCFGS(int floor, GradeCFGS transform, GradeCFGS arena)
		{
			this.floor = floor;
			this.transform = transform;
			this.arena = arena;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			floor = is.popInteger();
			if( transform == null )
				transform = new GradeCFGS();
			is.pop(transform);
			if( arena == null )
				arena = new GradeCFGS();
			is.pop(arena);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(floor);
			os.push(transform);
			os.push(arena);
		}

		public int floor;
		public GradeCFGS transform;
		public GradeCFGS arena;
	}

	public static class AuctionCFGS implements Stream.IStreamable
	{

		public AuctionCFGS() { }

		public AuctionCFGS(Set<Integer> types, List<Integer> lvls)
		{
			this.types = types;
			this.lvls = lvls;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			types = is.popIntegerTreeSet();
			lvls = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(types);
			os.pushIntegerList(lvls);
		}

		public Set<Integer> types;
		public List<Integer> lvls;
	}

	public static class ActivityLastCFGS implements Stream.IStreamable
	{

		public ActivityLastCFGS() { }

		public ActivityLastCFGS(List<Integer> cost, int arg1)
		{
			this.cost = cost;
			this.arg1 = arg1;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cost = is.popIntegerList();
			arg1 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(cost);
			os.pushInteger(arg1);
		}

		public List<Integer> cost;
		public int arg1;
	}

	public static class SteleCFGS implements Stream.IStreamable
	{

		public SteleCFGS() { }

		public SteleCFGS(SteleBaseCFGS base, List<SteleRewardCFGS> rankRewards, List<DummyGoods> joinRewards, List<SteleMineralTypeCFGS> mineralTypes, 
		                 List<SteleLevelMonsterCFGS> lvlMonsters)
		{
			this.base = base;
			this.rankRewards = rankRewards;
			this.joinRewards = joinRewards;
			this.mineralTypes = mineralTypes;
			this.lvlMonsters = lvlMonsters;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new SteleBaseCFGS();
			is.pop(base);
			rankRewards = is.popList(SteleRewardCFGS.class);
			joinRewards = is.popList(DummyGoods.class);
			mineralTypes = is.popList(SteleMineralTypeCFGS.class);
			lvlMonsters = is.popList(SteleLevelMonsterCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.pushList(rankRewards);
			os.pushList(joinRewards);
			os.pushList(mineralTypes);
			os.pushList(lvlMonsters);
		}

		public SteleBaseCFGS base;
		public List<SteleRewardCFGS> rankRewards;
		public List<DummyGoods> joinRewards;
		public List<SteleMineralTypeCFGS> mineralTypes;
		public List<SteleLevelMonsterCFGS> lvlMonsters;
	}

	public static class SteleBaseCFGS implements Stream.IStreamable
	{

		public SteleBaseCFGS() { }

		public SteleBaseCFGS(Set<Integer> openDays, int startTime, int lastTime, int lvlReq, 
		                     int showRanks, int maxRanks, int maxCards)
		{
			this.openDays = openDays;
			this.startTime = startTime;
			this.lastTime = lastTime;
			this.lvlReq = lvlReq;
			this.showRanks = showRanks;
			this.maxRanks = maxRanks;
			this.maxCards = maxCards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			openDays = is.popIntegerTreeSet();
			startTime = is.popInteger();
			lastTime = is.popInteger();
			lvlReq = is.popInteger();
			showRanks = is.popInteger();
			maxRanks = is.popInteger();
			maxCards = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(openDays);
			os.pushInteger(startTime);
			os.pushInteger(lastTime);
			os.pushInteger(lvlReq);
			os.pushInteger(showRanks);
			os.pushInteger(maxRanks);
			os.pushInteger(maxCards);
		}

		public Set<Integer> openDays;
		public int startTime;
		public int lastTime;
		public int lvlReq;
		public int showRanks;
		public int maxRanks;
		public int maxCards;
	}

	public static class SteleRewardCFGS implements Stream.IStreamable
	{

		public SteleRewardCFGS() { }

		public SteleRewardCFGS(int floor, List<DummyGoods> rewards)
		{
			this.floor = floor;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			floor = is.popInteger();
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(floor);
			os.pushList(rewards);
		}

		public int floor;
		public List<DummyGoods> rewards;
	}

	public static class SteleMineralTypeCFGS implements Stream.IStreamable
	{

		public SteleMineralTypeCFGS() { }

		public SteleMineralTypeCFGS(List<SteleMineralCFGS> minerals)
		{
			this.minerals = minerals;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			minerals = is.popList(SteleMineralCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(minerals);
		}

		public List<SteleMineralCFGS> minerals;
	}

	public static class SteleMineralCFGS implements Stream.IStreamable
	{

		public SteleMineralCFGS() { }

		public SteleMineralCFGS(int mineralID, int mineralTimes, MapLocation mapLocation, GradeCFGS mineralCards, 
		                        GradeCFGS memberCards, float refreshMonster)
		{
			this.mineralID = mineralID;
			this.mineralTimes = mineralTimes;
			this.mapLocation = mapLocation;
			this.mineralCards = mineralCards;
			this.memberCards = memberCards;
			this.refreshMonster = refreshMonster;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mineralID = is.popInteger();
			mineralTimes = is.popInteger();
			if( mapLocation == null )
				mapLocation = new MapLocation();
			is.pop(mapLocation);
			if( mineralCards == null )
				mineralCards = new GradeCFGS();
			is.pop(mineralCards);
			if( memberCards == null )
				memberCards = new GradeCFGS();
			is.pop(memberCards);
			refreshMonster = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mineralID);
			os.pushInteger(mineralTimes);
			os.push(mapLocation);
			os.push(mineralCards);
			os.push(memberCards);
			os.pushFloat(refreshMonster);
		}

		public int mineralID;
		public int mineralTimes;
		public MapLocation mapLocation;
		public GradeCFGS mineralCards;
		public GradeCFGS memberCards;
		public float refreshMonster;
	}

	public static class SteleLevelMonsterCFGS implements Stream.IStreamable
	{

		public SteleLevelMonsterCFGS() { }

		public SteleLevelMonsterCFGS(int level, int standByTime, List<SteleMonsterCFGS> monsters)
		{
			this.level = level;
			this.standByTime = standByTime;
			this.monsters = monsters;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			standByTime = is.popInteger();
			monsters = is.popList(SteleMonsterCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(standByTime);
			os.pushList(monsters);
		}

		public int level;
		public int standByTime;
		public List<SteleMonsterCFGS> monsters;
	}

	public static class SteleMonsterCFGS implements Stream.IStreamable
	{

		public SteleMonsterCFGS() { }

		public SteleMonsterCFGS(float weight, int monsterID, int count, byte broadcast)
		{
			this.weight = weight;
			this.monsterID = monsterID;
			this.count = count;
			this.broadcast = broadcast;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weight = is.popFloat();
			monsterID = is.popInteger();
			count = is.popInteger();
			broadcast = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(weight);
			os.pushInteger(monsterID);
			os.pushInteger(count);
			os.pushByte(broadcast);
		}

		public float weight;
		public int monsterID;
		public int count;
		public byte broadcast;
	}

	public static class JusticeMapCFGS implements Stream.IStreamable
	{

		public JusticeMapCFGS() { }

		public JusticeMapCFGS(int openLvl, int dayEnterTimes, int npcId, Set<Integer> openDay, 
		                      int chatDistance, int teamInviteChatInterval, List<LevelToMapIdCFGS> level2mapId, List<TimeSpan> openTimes, 
		                      List<MapLocation> npcPoints)
		{
			this.openLvl = openLvl;
			this.dayEnterTimes = dayEnterTimes;
			this.npcId = npcId;
			this.openDay = openDay;
			this.chatDistance = chatDistance;
			this.teamInviteChatInterval = teamInviteChatInterval;
			this.level2mapId = level2mapId;
			this.openTimes = openTimes;
			this.npcPoints = npcPoints;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			openLvl = is.popInteger();
			dayEnterTimes = is.popInteger();
			npcId = is.popInteger();
			openDay = is.popIntegerTreeSet();
			chatDistance = is.popInteger();
			teamInviteChatInterval = is.popInteger();
			level2mapId = is.popList(LevelToMapIdCFGS.class);
			openTimes = is.popList(TimeSpan.class);
			npcPoints = is.popList(MapLocation.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(openLvl);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(npcId);
			os.pushIntegerSet(openDay);
			os.pushInteger(chatDistance);
			os.pushInteger(teamInviteChatInterval);
			os.pushList(level2mapId);
			os.pushList(openTimes);
			os.pushList(npcPoints);
		}

		public int openLvl;
		public int dayEnterTimes;
		public int npcId;
		public Set<Integer> openDay;
		public int chatDistance;
		public int teamInviteChatInterval;
		public List<LevelToMapIdCFGS> level2mapId;
		public List<TimeSpan> openTimes;
		public List<MapLocation> npcPoints;
	}

	public static class LevelToMapIdCFGS implements Stream.IStreamable
	{

		public LevelToMapIdCFGS() { }

		public LevelToMapIdCFGS(int level, int mapId)
		{
			this.level = level;
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(mapId);
		}

		public int level;
		public int mapId;
	}

	public static class DemonHoleCFGS implements Stream.IStreamable
	{

		public DemonHoleCFGS() { }

		public DemonHoleCFGS(DemonHoleBaseCFGS base, List<DemonHoleGradeCFGS> grades, Map<Integer, DemonHoleBossCFGS> bosses)
		{
			this.base = base;
			this.grades = grades;
			this.bosses = bosses;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new DemonHoleBaseCFGS();
			is.pop(base);
			grades = is.popList(DemonHoleGradeCFGS.class);
			bosses = is.popIntegerTreeMap(DemonHoleBossCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.pushList(grades);
			os.pushIntegerMap(bosses);
		}

		public DemonHoleBaseCFGS base;
		public List<DemonHoleGradeCFGS> grades;
		public Map<Integer, DemonHoleBossCFGS> bosses;
	}

	public static class DemonHoleBaseCFGS implements Stream.IStreamable
	{

		public DemonHoleBaseCFGS() { }

		public DemonHoleBaseCFGS(int reviveBuffID, int enterCostItem, int dayEnterTimes, Set<Integer> openDays, 
		                         int startTime, int lastTime, List<DemonHoleBuffCFGS> deadBuffs, List<DemonHoleBuffCFGS> killBuffs, 
		                         int lvlReq, int transformLvlReq, int autoCloseTime, List<DummyGoods> roleDeadDrop)
		{
			this.reviveBuffID = reviveBuffID;
			this.enterCostItem = enterCostItem;
			this.dayEnterTimes = dayEnterTimes;
			this.openDays = openDays;
			this.startTime = startTime;
			this.lastTime = lastTime;
			this.deadBuffs = deadBuffs;
			this.killBuffs = killBuffs;
			this.lvlReq = lvlReq;
			this.transformLvlReq = transformLvlReq;
			this.autoCloseTime = autoCloseTime;
			this.roleDeadDrop = roleDeadDrop;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			reviveBuffID = is.popInteger();
			enterCostItem = is.popInteger();
			dayEnterTimes = is.popInteger();
			openDays = is.popIntegerTreeSet();
			startTime = is.popInteger();
			lastTime = is.popInteger();
			deadBuffs = is.popList(DemonHoleBuffCFGS.class);
			killBuffs = is.popList(DemonHoleBuffCFGS.class);
			lvlReq = is.popInteger();
			transformLvlReq = is.popInteger();
			autoCloseTime = is.popInteger();
			roleDeadDrop = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(reviveBuffID);
			os.pushInteger(enterCostItem);
			os.pushInteger(dayEnterTimes);
			os.pushIntegerSet(openDays);
			os.pushInteger(startTime);
			os.pushInteger(lastTime);
			os.pushList(deadBuffs);
			os.pushList(killBuffs);
			os.pushInteger(lvlReq);
			os.pushInteger(transformLvlReq);
			os.pushInteger(autoCloseTime);
			os.pushList(roleDeadDrop);
		}

		public int reviveBuffID;
		public int enterCostItem;
		public int dayEnterTimes;
		public Set<Integer> openDays;
		public int startTime;
		public int lastTime;
		public List<DemonHoleBuffCFGS> deadBuffs;
		public List<DemonHoleBuffCFGS> killBuffs;
		public int lvlReq;
		public int transformLvlReq;
		public int autoCloseTime;
		public List<DummyGoods> roleDeadDrop;
	}

	public static class DemonHoleBuffCFGS implements Stream.IStreamable
	{

		public DemonHoleBuffCFGS() { }

		public DemonHoleBuffCFGS(int times, int buffID)
		{
			this.times = times;
			this.buffID = buffID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
			buffID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
			os.pushInteger(buffID);
		}

		public int times;
		public int buffID;
	}

	public static class DemonHoleGradeCFGS implements Stream.IStreamable
	{

		public DemonHoleGradeCFGS() { }

		public DemonHoleGradeCFGS(int lvlFloor, int maxRoles, List<Integer> maps)
		{
			this.lvlFloor = lvlFloor;
			this.maxRoles = maxRoles;
			this.maps = maps;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvlFloor = is.popInteger();
			maxRoles = is.popInteger();
			maps = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvlFloor);
			os.pushInteger(maxRoles);
			os.pushIntegerList(maps);
		}

		public int lvlFloor;
		public int maxRoles;
		public List<Integer> maps;
	}

	public static class DemonHoleBossCFGS implements Stream.IStreamable
	{

		public DemonHoleBossCFGS() { }

		public DemonHoleBossCFGS(int bossID, int monsterID, List<ClassTypeDrop> rankDrops)
		{
			this.bossID = bossID;
			this.monsterID = monsterID;
			this.rankDrops = rankDrops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bossID = is.popInteger();
			monsterID = is.popInteger();
			rankDrops = is.popList(ClassTypeDrop.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bossID);
			os.pushInteger(monsterID);
			os.pushList(rankDrops);
		}

		public int bossID;
		public int monsterID;
		public List<ClassTypeDrop> rankDrops;
	}

	public static class BattleMapCFGS implements Stream.IStreamable
	{

		public BattleMapCFGS() { }

		public BattleMapCFGS(Set<Integer> allPackets)
		{
			this.allPackets = allPackets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			allPackets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(allPackets);
		}

		public Set<Integer> allPackets;
	}

	public static class EmergencyCFGS implements Stream.IStreamable
	{

		public EmergencyCFGS() { }

		public EmergencyCFGS(Set<Integer> openDay, int levelNeed, int prestigeTeamRatio, int prestigeDistance, 
		                     int openTime, int duration, int rankDisplayLimit, int rankSaveLimit, 
		                     Map<Integer, EmergencyActivityCFGS> activities, List<EmergencyRankCFGS> rankRewards)
		{
			this.openDay = openDay;
			this.levelNeed = levelNeed;
			this.prestigeTeamRatio = prestigeTeamRatio;
			this.prestigeDistance = prestigeDistance;
			this.openTime = openTime;
			this.duration = duration;
			this.rankDisplayLimit = rankDisplayLimit;
			this.rankSaveLimit = rankSaveLimit;
			this.activities = activities;
			this.rankRewards = rankRewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			openDay = is.popIntegerTreeSet();
			levelNeed = is.popInteger();
			prestigeTeamRatio = is.popInteger();
			prestigeDistance = is.popInteger();
			openTime = is.popInteger();
			duration = is.popInteger();
			rankDisplayLimit = is.popInteger();
			rankSaveLimit = is.popInteger();
			activities = is.popIntegerTreeMap(EmergencyActivityCFGS.class);
			rankRewards = is.popList(EmergencyRankCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(openDay);
			os.pushInteger(levelNeed);
			os.pushInteger(prestigeTeamRatio);
			os.pushInteger(prestigeDistance);
			os.pushInteger(openTime);
			os.pushInteger(duration);
			os.pushInteger(rankDisplayLimit);
			os.pushInteger(rankSaveLimit);
			os.pushIntegerMap(activities);
			os.pushList(rankRewards);
		}

		public Set<Integer> openDay;
		public int levelNeed;
		public int prestigeTeamRatio;
		public int prestigeDistance;
		public int openTime;
		public int duration;
		public int rankDisplayLimit;
		public int rankSaveLimit;
		public Map<Integer, EmergencyActivityCFGS> activities;
		public List<EmergencyRankCFGS> rankRewards;
	}

	public static class LucklyStarCFGS implements Stream.IStreamable
	{

		public LucklyStarCFGS() { }

		public LucklyStarCFGS(int startRole, int levelNeed, int starSendTimes, int roleRecvTimes, 
		                      int sameProReward, List<LucklyStarLevelRewardCFGS> rankRewards)
		{
			this.startRole = startRole;
			this.levelNeed = levelNeed;
			this.starSendTimes = starSendTimes;
			this.roleRecvTimes = roleRecvTimes;
			this.sameProReward = sameProReward;
			this.rankRewards = rankRewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			startRole = is.popInteger();
			levelNeed = is.popInteger();
			starSendTimes = is.popInteger();
			roleRecvTimes = is.popInteger();
			sameProReward = is.popInteger();
			rankRewards = is.popList(LucklyStarLevelRewardCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(startRole);
			os.pushInteger(levelNeed);
			os.pushInteger(starSendTimes);
			os.pushInteger(roleRecvTimes);
			os.pushInteger(sameProReward);
			os.pushList(rankRewards);
		}

		public int startRole;
		public int levelNeed;
		public int starSendTimes;
		public int roleRecvTimes;
		public int sameProReward;
		public List<LucklyStarLevelRewardCFGS> rankRewards;
	}

	public static class LucklyStarLevelRewardCFGS implements Stream.IStreamable
	{

		public LucklyStarLevelRewardCFGS() { }

		public LucklyStarLevelRewardCFGS(int level, List<DummyGoods> rewards)
		{
			this.level = level;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushList(rewards);
		}

		public int level;
		public List<DummyGoods> rewards;
	}

	public static class MasterGraduateTaskCFGS implements Stream.IStreamable
	{

		public MasterGraduateTaskCFGS() { }

		public MasterGraduateTaskCFGS(int id, int target, int score)
		{
			this.id = id;
			this.target = target;
			this.score = score;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			target = is.popInteger();
			score = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(target);
			os.pushInteger(score);
		}

		public int id;
		public int target;
		public int score;
	}

	public static class MasterGraduateRewardCFGS implements Stream.IStreamable
	{

		public MasterGraduateRewardCFGS() { }

		public MasterGraduateRewardCFGS(int minScore, List<DummyGoods> rewards)
		{
			this.minScore = minScore;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			minScore = is.popInteger();
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(minScore);
			os.pushList(rewards);
		}

		public int minScore;
		public List<DummyGoods> rewards;
	}

	public static class MasterCFGS implements Stream.IStreamable
	{

		public MasterCFGS() { }

		public MasterCFGS(int minMasterLvl, int minApprenticeLvl, int maxApprenticeLvl, int minGraduateLvl, 
		                  int maxApprenticeCount, int dismissCoolTime, int betrayCoolTime, int reqGraduateCoolTime, 
		                  int autoAcceptGraduateTime, int maxApplyMsgCount, int maxBetrayMsgReserveTime, int maxAnnouncementReserveTime, 
		                  int masterListPageSize, int maxAnnounceLength, Map<Integer, MasterGraduateTaskCFGS> graduateTasks, int minGraduateScore, 
		                  List<DummyGoods> graduateMasterRewards, List<MasterGraduateRewardCFGS> graduateApprenticeRewards)
		{
			this.minMasterLvl = minMasterLvl;
			this.minApprenticeLvl = minApprenticeLvl;
			this.maxApprenticeLvl = maxApprenticeLvl;
			this.minGraduateLvl = minGraduateLvl;
			this.maxApprenticeCount = maxApprenticeCount;
			this.dismissCoolTime = dismissCoolTime;
			this.betrayCoolTime = betrayCoolTime;
			this.reqGraduateCoolTime = reqGraduateCoolTime;
			this.autoAcceptGraduateTime = autoAcceptGraduateTime;
			this.maxApplyMsgCount = maxApplyMsgCount;
			this.maxBetrayMsgReserveTime = maxBetrayMsgReserveTime;
			this.maxAnnouncementReserveTime = maxAnnouncementReserveTime;
			this.masterListPageSize = masterListPageSize;
			this.maxAnnounceLength = maxAnnounceLength;
			this.graduateTasks = graduateTasks;
			this.minGraduateScore = minGraduateScore;
			this.graduateMasterRewards = graduateMasterRewards;
			this.graduateApprenticeRewards = graduateApprenticeRewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			minMasterLvl = is.popInteger();
			minApprenticeLvl = is.popInteger();
			maxApprenticeLvl = is.popInteger();
			minGraduateLvl = is.popInteger();
			maxApprenticeCount = is.popInteger();
			dismissCoolTime = is.popInteger();
			betrayCoolTime = is.popInteger();
			reqGraduateCoolTime = is.popInteger();
			autoAcceptGraduateTime = is.popInteger();
			maxApplyMsgCount = is.popInteger();
			maxBetrayMsgReserveTime = is.popInteger();
			maxAnnouncementReserveTime = is.popInteger();
			masterListPageSize = is.popInteger();
			maxAnnounceLength = is.popInteger();
			graduateTasks = is.popIntegerTreeMap(MasterGraduateTaskCFGS.class);
			minGraduateScore = is.popInteger();
			graduateMasterRewards = is.popList(DummyGoods.class);
			graduateApprenticeRewards = is.popList(MasterGraduateRewardCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(minMasterLvl);
			os.pushInteger(minApprenticeLvl);
			os.pushInteger(maxApprenticeLvl);
			os.pushInteger(minGraduateLvl);
			os.pushInteger(maxApprenticeCount);
			os.pushInteger(dismissCoolTime);
			os.pushInteger(betrayCoolTime);
			os.pushInteger(reqGraduateCoolTime);
			os.pushInteger(autoAcceptGraduateTime);
			os.pushInteger(maxApplyMsgCount);
			os.pushInteger(maxBetrayMsgReserveTime);
			os.pushInteger(maxAnnouncementReserveTime);
			os.pushInteger(masterListPageSize);
			os.pushInteger(maxAnnounceLength);
			os.pushIntegerMap(graduateTasks);
			os.pushInteger(minGraduateScore);
			os.pushList(graduateMasterRewards);
			os.pushList(graduateApprenticeRewards);
		}

		public int minMasterLvl;
		public int minApprenticeLvl;
		public int maxApprenticeLvl;
		public int minGraduateLvl;
		public int maxApprenticeCount;
		public int dismissCoolTime;
		public int betrayCoolTime;
		public int reqGraduateCoolTime;
		public int autoAcceptGraduateTime;
		public int maxApplyMsgCount;
		public int maxBetrayMsgReserveTime;
		public int maxAnnouncementReserveTime;
		public int masterListPageSize;
		public int maxAnnounceLength;
		public Map<Integer, MasterGraduateTaskCFGS> graduateTasks;
		public int minGraduateScore;
		public List<DummyGoods> graduateMasterRewards;
		public List<MasterGraduateRewardCFGS> graduateApprenticeRewards;
	}

	public static class EmergencyActivityCFGS implements Stream.IStreamable
	{

		public EmergencyActivityCFGS() { }

		public EmergencyActivityCFGS(int activityId, int mapId, List<TimeSpan> openTime, int maxRoleSize, 
		                             List<Integer> basePrestige)
		{
			this.activityId = activityId;
			this.mapId = mapId;
			this.openTime = openTime;
			this.maxRoleSize = maxRoleSize;
			this.basePrestige = basePrestige;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			activityId = is.popInteger();
			mapId = is.popInteger();
			openTime = is.popList(TimeSpan.class);
			maxRoleSize = is.popInteger();
			basePrestige = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(activityId);
			os.pushInteger(mapId);
			os.pushList(openTime);
			os.pushInteger(maxRoleSize);
			os.pushIntegerList(basePrestige);
		}

		public int activityId;
		public int mapId;
		public List<TimeSpan> openTime;
		public int maxRoleSize;
		public List<Integer> basePrestige;
	}

	public static class EmergencyRankCFGS implements Stream.IStreamable
	{

		public EmergencyRankCFGS() { }

		public EmergencyRankCFGS(int rank, List<DummyGoods> rewards)
		{
			this.rank = rank;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rank = is.popInteger();
			rewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rank);
			os.pushList(rewards);
		}

		public int rank;
		public List<DummyGoods> rewards;
	}

	public static class FightNpcGroupCFGS implements Stream.IStreamable
	{

		public FightNpcGroupCFGS() { }

		public FightNpcGroupCFGS(List<FightNpcCFGS> fightNpcs)
		{
			this.fightNpcs = fightNpcs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fightNpcs = is.popList(FightNpcCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(fightNpcs);
		}

		public List<FightNpcCFGS> fightNpcs;
	}

	public static class WizardPetCFGS implements Stream.IStreamable
	{

		public WizardPetCFGS() { }

		public WizardPetCFGS(int petId, List<String> channels, byte defaultHave, int defaultTime, 
		                     int buyCostId, int buyCostNum, int buyTime)
		{
			this.petId = petId;
			this.channels = channels;
			this.defaultHave = defaultHave;
			this.defaultTime = defaultTime;
			this.buyCostId = buyCostId;
			this.buyCostNum = buyCostNum;
			this.buyTime = buyTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			channels = is.popStringList();
			defaultHave = is.popByte();
			defaultTime = is.popInteger();
			buyCostId = is.popInteger();
			buyCostNum = is.popInteger();
			buyTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushStringList(channels);
			os.pushByte(defaultHave);
			os.pushInteger(defaultTime);
			os.pushInteger(buyCostId);
			os.pushInteger(buyCostNum);
			os.pushInteger(buyTime);
		}

		public int petId;
		public List<String> channels;
		public byte defaultHave;
		public int defaultTime;
		public int buyCostId;
		public int buyCostNum;
		public int buyTime;
	}

	public static class NpcTransfromFuncCFGS implements Stream.IStreamable
	{

		public NpcTransfromFuncCFGS() { }

		public NpcTransfromFuncCFGS(int transfromId, int mapId, Vector3 position, int line, 
		                            List<Integer> npcs, DummyGoods cost, List<Condition> conditions)
		{
			this.transfromId = transfromId;
			this.mapId = mapId;
			this.position = position;
			this.line = line;
			this.npcs = npcs;
			this.cost = cost;
			this.conditions = conditions;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			transfromId = is.popInteger();
			mapId = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			line = is.popInteger();
			npcs = is.popIntegerList();
			if( cost == null )
				cost = new DummyGoods();
			is.pop(cost);
			conditions = is.popList(Condition.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(transfromId);
			os.pushInteger(mapId);
			os.push(position);
			os.pushInteger(line);
			os.pushIntegerList(npcs);
			os.push(cost);
			os.pushList(conditions);
		}

		public int transfromId;
		public int mapId;
		public Vector3 position;
		public int line;
		public List<Integer> npcs;
		public DummyGoods cost;
		public List<Condition> conditions;
	}

	public static class NpcMapCFGS implements Stream.IStreamable
	{

		public NpcMapCFGS() { }

		public NpcMapCFGS(int npcmapId, int openLvl, int dayEnterTime, Set<Integer> opendays, 
		                  int mapstartDay, int mapendDay, int mapstartTime, int mapendTime, 
		                  List<LevelToMapIdCFGS> level2mapId)
		{
			this.npcmapId = npcmapId;
			this.openLvl = openLvl;
			this.dayEnterTime = dayEnterTime;
			this.opendays = opendays;
			this.mapstartDay = mapstartDay;
			this.mapendDay = mapendDay;
			this.mapstartTime = mapstartTime;
			this.mapendTime = mapendTime;
			this.level2mapId = level2mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcmapId = is.popInteger();
			openLvl = is.popInteger();
			dayEnterTime = is.popInteger();
			opendays = is.popIntegerTreeSet();
			mapstartDay = is.popInteger();
			mapendDay = is.popInteger();
			mapstartTime = is.popInteger();
			mapendTime = is.popInteger();
			level2mapId = is.popList(LevelToMapIdCFGS.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(npcmapId);
			os.pushInteger(openLvl);
			os.pushInteger(dayEnterTime);
			os.pushIntegerSet(opendays);
			os.pushInteger(mapstartDay);
			os.pushInteger(mapendDay);
			os.pushInteger(mapstartTime);
			os.pushInteger(mapendTime);
			os.pushList(level2mapId);
		}

		public int npcmapId;
		public int openLvl;
		public int dayEnterTime;
		public Set<Integer> opendays;
		public int mapstartDay;
		public int mapendDay;
		public int mapstartTime;
		public int mapendTime;
		public List<LevelToMapIdCFGS> level2mapId;
	}

	public static class NpcPrayCFGS implements Stream.IStreamable
	{

		public NpcPrayCFGS() { }

		public NpcPrayCFGS(int prayId, int levelReq, int dayJoinTime, List<DummyGoods> costs, 
		                   int startTime, int endTime, List<Integer> prayDrops)
		{
			this.prayId = prayId;
			this.levelReq = levelReq;
			this.dayJoinTime = dayJoinTime;
			this.costs = costs;
			this.startTime = startTime;
			this.endTime = endTime;
			this.prayDrops = prayDrops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			prayId = is.popInteger();
			levelReq = is.popInteger();
			dayJoinTime = is.popInteger();
			costs = is.popList(DummyGoods.class);
			startTime = is.popInteger();
			endTime = is.popInteger();
			prayDrops = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(prayId);
			os.pushInteger(levelReq);
			os.pushInteger(dayJoinTime);
			os.pushList(costs);
			os.pushInteger(startTime);
			os.pushInteger(endTime);
			os.pushIntegerList(prayDrops);
		}

		public int prayId;
		public int levelReq;
		public int dayJoinTime;
		public List<DummyGoods> costs;
		public int startTime;
		public int endTime;
		public List<Integer> prayDrops;
	}

	public static class PrayDropCFGS implements Stream.IStreamable
	{

		public PrayDropCFGS() { }

		public PrayDropCFGS(int prayDropId, int randomDropId)
		{
			this.prayDropId = prayDropId;
			this.randomDropId = randomDropId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			prayDropId = is.popInteger();
			randomDropId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(prayDropId);
			os.pushInteger(randomDropId);
		}

		public int prayDropId;
		public int randomDropId;
	}

	public static class MapSkillCFGS implements Stream.IStreamable
	{

		public MapSkillCFGS() { }

		public MapSkillCFGS(int isCommonCD, int commonCD, Map<Integer, MapSkillInstance> skills)
		{
			this.isCommonCD = isCommonCD;
			this.commonCD = commonCD;
			this.skills = skills;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			isCommonCD = is.popInteger();
			commonCD = is.popInteger();
			skills = is.popIntegerTreeMap(MapSkillInstance.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(isCommonCD);
			os.pushInteger(commonCD);
			os.pushIntegerMap(skills);
		}

		public int isCommonCD;
		public int commonCD;
		public Map<Integer, MapSkillInstance> skills;
	}

	public static class MapSkillInstance implements Stream.IStreamable
	{

		public MapSkillInstance() { }

		public MapSkillInstance(int skillId, int skillLvl, int skillTime)
		{
			this.skillId = skillId;
			this.skillLvl = skillLvl;
			this.skillTime = skillTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
			skillLvl = is.popInteger();
			skillTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
			os.pushInteger(skillLvl);
			os.pushInteger(skillTime);
		}

		public int skillId;
		public int skillLvl;
		public int skillTime;
	}

	public static class Condition implements Stream.IStreamable
	{

		public Condition() { }

		public Condition(int conditionType, int conditionArg)
		{
			this.conditionType = conditionType;
			this.conditionArg = conditionArg;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			conditionType = is.popInteger();
			conditionArg = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(conditionType);
			os.pushInteger(conditionArg);
		}

		public int conditionType;
		public int conditionArg;
	}

	public static class FightNpcCFGS implements Stream.IStreamable
	{

		public FightNpcCFGS() { }

		public FightNpcCFGS(int mapID, List<FightNpcCondCFGS> trigConds, List<FightNpcCondCFGS> openConds, int coolTime, 
		                    List<ClassTypeReward> rewards)
		{
			this.mapID = mapID;
			this.trigConds = trigConds;
			this.openConds = openConds;
			this.coolTime = coolTime;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapID = is.popInteger();
			trigConds = is.popList(FightNpcCondCFGS.class);
			openConds = is.popList(FightNpcCondCFGS.class);
			coolTime = is.popInteger();
			rewards = is.popList(ClassTypeReward.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapID);
			os.pushList(trigConds);
			os.pushList(openConds);
			os.pushInteger(coolTime);
			os.pushList(rewards);
		}

		public int mapID;
		public List<FightNpcCondCFGS> trigConds;
		public List<FightNpcCondCFGS> openConds;
		public int coolTime;
		public List<ClassTypeReward> rewards;
	}

	public static class FightNpcCondCFGS implements Stream.IStreamable
	{

		public FightNpcCondCFGS() { }

		public FightNpcCondCFGS(int type, int param)
		{
			this.type = type;
			this.param = param;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			param = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(param);
		}

		public int type;
		public int param;
	}

	public static class TowerDefenceCFGS implements Stream.IStreamable
	{

		public TowerDefenceCFGS() { }

		public TowerDefenceCFGS(TowerDefenceBaseCFGS base, List<FloorReward> mapRewards, List<FloorReward> rankRewards, List<DummyGoods> joinReward)
		{
			this.base = base;
			this.mapRewards = mapRewards;
			this.rankRewards = rankRewards;
			this.joinReward = joinReward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new TowerDefenceBaseCFGS();
			is.pop(base);
			mapRewards = is.popList(FloorReward.class);
			rankRewards = is.popList(FloorReward.class);
			joinReward = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.pushList(mapRewards);
			os.pushList(rankRewards);
			os.pushList(joinReward);
		}

		public TowerDefenceBaseCFGS base;
		public List<FloorReward> mapRewards;
		public List<FloorReward> rankRewards;
		public List<DummyGoods> joinReward;
	}

	public static class TowerDefenceBaseCFGS implements Stream.IStreamable
	{

		public TowerDefenceBaseCFGS() { }

		public TowerDefenceBaseCFGS(int mapID, int lvlReq, int dayEnterTimes, Set<Integer> openDays, 
		                            int startDate, int endDate, int startTime, int lastTime, 
		                            int protectID, Location protectLocation, List<Float> pops)
		{
			this.mapID = mapID;
			this.lvlReq = lvlReq;
			this.dayEnterTimes = dayEnterTimes;
			this.openDays = openDays;
			this.startDate = startDate;
			this.endDate = endDate;
			this.startTime = startTime;
			this.lastTime = lastTime;
			this.protectID = protectID;
			this.protectLocation = protectLocation;
			this.pops = pops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapID = is.popInteger();
			lvlReq = is.popInteger();
			dayEnterTimes = is.popInteger();
			openDays = is.popIntegerTreeSet();
			startDate = is.popInteger();
			endDate = is.popInteger();
			startTime = is.popInteger();
			lastTime = is.popInteger();
			protectID = is.popInteger();
			if( protectLocation == null )
				protectLocation = new Location();
			is.pop(protectLocation);
			pops = is.popFloatList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapID);
			os.pushInteger(lvlReq);
			os.pushInteger(dayEnterTimes);
			os.pushIntegerSet(openDays);
			os.pushInteger(startDate);
			os.pushInteger(endDate);
			os.pushInteger(startTime);
			os.pushInteger(lastTime);
			os.pushInteger(protectID);
			os.push(protectLocation);
			os.pushFloatList(pops);
		}

		public int mapID;
		public int lvlReq;
		public int dayEnterTimes;
		public Set<Integer> openDays;
		public int startDate;
		public int endDate;
		public int startTime;
		public int lastTime;
		public int protectID;
		public Location protectLocation;
		public List<Float> pops;
	}

	public static class GameDataCFGT implements Stream.IStreamable
	{

		public GameDataCFGT() { }

		public GameDataCFGT(Map<Integer, String> equip, Map<Integer, String> item)
		{
			this.equip = equip;
			this.item = item;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			equip = is.popIntegerStringTreeMap();
			item = is.popIntegerStringTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerStringMap(equip);
			os.pushIntegerStringMap(item);
		}

		public Map<Integer, String> equip;
		public Map<Integer, String> item;
	}

	public static class DBRegisterID implements Stream.IStreamable, Stream.KCloneable<DBRegisterID>, SStream.IStreamable
	{

		public DBRegisterID() { }

		public DBRegisterID(String gameId, int zoneId, String uid, String channel)
		{
			this.gameId = gameId;
			this.zoneId = zoneId;
			this.uid = uid;
			this.channel = channel;
		}

		public DBRegisterID ksClone()
		{
			return new DBRegisterID(gameId, zoneId, uid, channel);
		}

		@Override
		public DBRegisterID kdClone()
		{
			DBRegisterID _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gameId = is.popString();
			zoneId = is.popInteger();
			uid = is.popString();
			channel = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(gameId);
			os.pushInteger(zoneId);
			os.pushString(uid);
			os.pushString(channel);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			gameId = is.popString();
			zoneId = is.popInteger();
			uid = is.popString();
			channel = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(gameId);
			os.pushInteger(zoneId);
			os.pushString(uid);
			os.pushString(channel);
		}

		public String gameId;
		public int zoneId;
		public String uid;
		public String channel;
	}

	public static class DBRegister implements Stream.IStreamable, Stream.KCloneable<DBRegister>, SStream.IStreamable
	{

		public DBRegister() { }

		public DBRegister(DBRegisterID id, int createTime)
		{
			this.id = id;
			this.createTime = createTime;
		}

		public DBRegister ksClone()
		{
			return new DBRegister(id, createTime);
		}

		@Override
		public DBRegister kdClone()
		{
			DBRegister _kio_clobj = ksClone();
			_kio_clobj.id = Stream.clone(id);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( id == null )
				id = new DBRegisterID();
			is.pop(id);
			createTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(id);
			os.pushInteger(createTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.pop(DBRegisterID.class);
			createTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(id);
			os.pushInteger(createTime);
		}

		public DBRegisterID id;
		public int createTime;
	}

	public static class DBBanData implements Stream.IStreamable, Stream.KCloneable<DBBanData>, SStream.IStreamable
	{

		public DBBanData() { }

		public DBBanData(int banEndTime, String banReason)
		{
			this.banEndTime = banEndTime;
			this.banReason = banReason;
		}

		public DBBanData ksClone()
		{
			return new DBBanData(banEndTime, banReason);
		}

		@Override
		public DBBanData kdClone()
		{
			DBBanData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			banEndTime = is.popInteger();
			banReason = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(banEndTime);
			os.pushString(banReason);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			banEndTime = is.popInteger();
			banReason = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(banEndTime);
			os.pushString(banReason);
		}

		public int banEndTime;
		public String banReason;
	}

	public static class DBPayLog implements Stream.IStreamable, Stream.KCloneable<DBPayLog>, SStream.IStreamable
	{

		public static final byte ePayStatusReceive = 0;
		public static final byte ePayStatusFinish = 1;

		public DBPayLog() { }

		public DBPayLog(String orderId, int payRoleId, int payLevel, int timeStamp)
		{
			this.orderId = orderId;
			this.payRoleId = payRoleId;
			this.payLevel = payLevel;
			this.timeStamp = timeStamp;
		}

		public DBPayLog ksClone()
		{
			return new DBPayLog(orderId, payRoleId, payLevel, timeStamp);
		}

		@Override
		public DBPayLog kdClone()
		{
			DBPayLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			orderId = is.popString();
			payRoleId = is.popInteger();
			payLevel = is.popInteger();
			timeStamp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(orderId);
			os.pushInteger(payRoleId);
			os.pushInteger(payLevel);
			os.pushInteger(timeStamp);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			orderId = is.popString();
			payRoleId = is.popInteger();
			payLevel = is.popInteger();
			timeStamp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(orderId);
			os.pushInteger(payRoleId);
			os.pushInteger(payLevel);
			os.pushInteger(timeStamp);
		}

		public String orderId;
		public int payRoleId;
		public int payLevel;
		public int timeStamp;
	}

	public static class DBVipPay implements Stream.IStreamable, Stream.KCloneable<DBVipPay>, SStream.IStreamable
	{

		public DBVipPay() { }

		public DBVipPay(int vipLvl, int payPoints, int presentPoints, int gmPoints, 
		                int payDiamond, List<DBPayLog> paylog, Map<Integer, Integer> payLvlLog)
		{
			this.vipLvl = vipLvl;
			this.payPoints = payPoints;
			this.presentPoints = presentPoints;
			this.gmPoints = gmPoints;
			this.payDiamond = payDiamond;
			this.paylog = paylog;
			this.payLvlLog = payLvlLog;
		}

		public DBVipPay ksClone()
		{
			return new DBVipPay(vipLvl, payPoints, presentPoints, gmPoints, 
			                    payDiamond, paylog, payLvlLog);
		}

		@Override
		public DBVipPay kdClone()
		{
			DBVipPay _kio_clobj = ksClone();
			_kio_clobj.paylog = Stream.clone(paylog);
			_kio_clobj.payLvlLog = new TreeMap<Integer, Integer>(payLvlLog);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			vipLvl = is.popInteger();
			payPoints = is.popInteger();
			presentPoints = is.popInteger();
			gmPoints = is.popInteger();
			payDiamond = is.popInteger();
			paylog = is.popList(DBPayLog.class);
			payLvlLog = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(vipLvl);
			os.pushInteger(payPoints);
			os.pushInteger(presentPoints);
			os.pushInteger(gmPoints);
			os.pushInteger(payDiamond);
			os.pushList(paylog);
			os.pushIntegerIntegerMap(payLvlLog);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			vipLvl = is.popInteger();
			payPoints = is.popInteger();
			presentPoints = is.popInteger();
			gmPoints = is.popInteger();
			payDiamond = is.popInteger();
			paylog = is.popList(DBPayLog.class);
			payLvlLog = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(vipLvl);
			os.pushInteger(payPoints);
			os.pushInteger(presentPoints);
			os.pushInteger(gmPoints);
			os.pushInteger(payDiamond);
			os.pushList(paylog);
			os.pushIntegerIntegerMap(payLvlLog);
		}

		public int vipLvl;
		public int payPoints;
		public int presentPoints;
		public int gmPoints;
		public int payDiamond;
		public List<DBPayLog> paylog;
		public Map<Integer, Integer> payLvlLog;
	}

	public static class DBMail implements Stream.IStreamable, Stream.KCloneable<DBMail>, SStream.IStreamable
	{

		public static final byte eTypeTmpDrop = -1;
		public static final byte eTypeTmpTask = -2;
		public static final byte eTypeUser = 0;
		public static final byte eTypeSysWorld = 1;
		public static final byte eTypeSysGM = 2;
		public static final byte eTypeSysSectMap = 3;
		public static final byte eTypeSysArenaMap = 4;
		public static final byte eTypeSysAuctionBack = 5;
		public static final byte eTypeSysAuctionSale = 6;
		public static final byte eTypeSysQuizActivity = 7;
		public static final byte eTypeSysBWArenaMap = 8;
		public static final byte eTypeSysSectDeliverFail = 9;
		public static final byte eTypeSysFriendRename = 10;
		public static final byte eTypeSysBeRewrite = 11;
		public static final byte eTypeSysMarriage = 12;
		public static final byte eTypeSysSectGroupMapFinish = 13;
		public static final byte eTypeSysSectGroupMapQuickFinish = 14;
		public static final byte eTypeSysSectGroupMapPerson = 15;
		public static final byte eTypeSysSectGroupMapQuickPerson = 16;
		public static final byte eTypeSysVipMissVitGet = 17;
		public static final byte eTypeSysChiefTimeout = 18;
		public static final byte eTypeSysGetSectChiefByTimeout = 19;
		public static final byte eTypeSysSectFlagReward = 20;
		public static final byte eTypeSysSectFlagEndReward = 21;
		public static final byte eTypeSysGroupBuyReturn = 22;
		public static final byte eTypeSysSteleReward = 23;
		public static final byte eTypeSysEmergencyReward = 24;
		public static final byte eTypeSysDivoceItems = 25;
		public static final byte eTypeSysLegendMake = 26;
		public static final byte eTypeSysYYBGift = 27;
		public static final byte eTypeSysMasterAccept = 28;
		public static final byte eTypeSysMasterRefuseGraduate = 29;
		public static final byte eTypeSysMasterGraduateMasterReward = 30;
		public static final byte eTypeSysMasterGraduateApprenticeReward = 31;
		public static final byte eTypeSysMasterDismiss = 32;
		public static final byte eTypeSysPayRankReward = 33;
		public static final byte eTypeSysPayRankTip = 34;
		public static final byte eTypeSysConsumeRankReward = 35;
		public static final byte eTypeSysConsumeRankTip = 36;
		public static final byte eStateRead = 1;
		public static final byte eStateAttTaken = 2;

		public DBMail() { }

		public DBMail(int id, byte type, byte state, int fromID, 
		              String fromName, int sendTime, int lifeTime, String title, 
		              String content, List<GameItem> attachment, List<Integer> additional)
		{
			this.id = id;
			this.type = type;
			this.state = state;
			this.fromID = fromID;
			this.fromName = fromName;
			this.sendTime = sendTime;
			this.lifeTime = lifeTime;
			this.title = title;
			this.content = content;
			this.attachment = attachment;
			this.additional = additional;
		}

		public DBMail ksClone()
		{
			return new DBMail(id, type, state, fromID, 
			                  fromName, sendTime, lifeTime, title, 
			                  content, attachment, additional);
		}

		@Override
		public DBMail kdClone()
		{
			DBMail _kio_clobj = ksClone();
			_kio_clobj.attachment = Stream.clone(attachment);
			_kio_clobj.additional = new ArrayList<Integer>(additional);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popByte();
			state = is.popByte();
			fromID = is.popInteger();
			fromName = is.popString();
			sendTime = is.popInteger();
			lifeTime = is.popInteger();
			title = is.popString();
			content = is.popString();
			attachment = is.popList(GameItem.class);
			additional = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushByte(type);
			os.pushByte(state);
			os.pushInteger(fromID);
			os.pushString(fromName);
			os.pushInteger(sendTime);
			os.pushInteger(lifeTime);
			os.pushString(title);
			os.pushString(content);
			os.pushList(attachment);
			os.pushIntegerList(additional);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			type = is.popByte();
			state = is.popByte();
			fromID = is.popInteger();
			fromName = is.popString();
			sendTime = is.popInteger();
			lifeTime = is.popInteger();
			title = is.popString();
			content = is.popString();
			attachment = is.popList(GameItem.class);
			additional = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushByte(type);
			os.pushByte(state);
			os.pushInteger(fromID);
			os.pushString(fromName);
			os.pushInteger(sendTime);
			os.pushInteger(lifeTime);
			os.pushString(title);
			os.pushString(content);
			os.pushList(attachment);
			os.pushIntegerList(additional);
		}

		public int id;
		public byte type;
		public byte state;
		public int fromID;
		public String fromName;
		public int sendTime;
		public int lifeTime;
		public String title;
		public String content;
		public List<GameItem> attachment;
		public List<Integer> additional;
	}

	public static class DBWorldMail implements Stream.IStreamable, Stream.KCloneable<DBWorldMail>, SStream.IStreamable
	{

		public DBWorldMail() { }

		public DBWorldMail(int id, short lvlMin, short lvlMax, short vipMin, 
		                   short vipMax, Set<String> channelReq, int sendTime, int lifeTime, 
		                   String title, String content, List<DummyGoods> attachment)
		{
			this.id = id;
			this.lvlMin = lvlMin;
			this.lvlMax = lvlMax;
			this.vipMin = vipMin;
			this.vipMax = vipMax;
			this.channelReq = channelReq;
			this.sendTime = sendTime;
			this.lifeTime = lifeTime;
			this.title = title;
			this.content = content;
			this.attachment = attachment;
		}

		public DBWorldMail ksClone()
		{
			return new DBWorldMail(id, lvlMin, lvlMax, vipMin, 
			                       vipMax, channelReq, sendTime, lifeTime, 
			                       title, content, attachment);
		}

		@Override
		public DBWorldMail kdClone()
		{
			DBWorldMail _kio_clobj = ksClone();
			_kio_clobj.channelReq = new TreeSet<String>(channelReq);
			_kio_clobj.attachment = Stream.clone(attachment);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			lvlMin = is.popShort();
			lvlMax = is.popShort();
			vipMin = is.popShort();
			vipMax = is.popShort();
			channelReq = is.popStringTreeSet();
			sendTime = is.popInteger();
			lifeTime = is.popInteger();
			title = is.popString();
			content = is.popString();
			attachment = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushShort(lvlMin);
			os.pushShort(lvlMax);
			os.pushShort(vipMin);
			os.pushShort(vipMax);
			os.pushStringSet(channelReq);
			os.pushInteger(sendTime);
			os.pushInteger(lifeTime);
			os.pushString(title);
			os.pushString(content);
			os.pushList(attachment);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			lvlMin = is.popShort();
			lvlMax = is.popShort();
			vipMin = is.popShort();
			vipMax = is.popShort();
			channelReq = is.popStringTreeSet();
			sendTime = is.popInteger();
			lifeTime = is.popInteger();
			title = is.popString();
			content = is.popString();
			attachment = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushShort(lvlMin);
			os.pushShort(lvlMax);
			os.pushShort(vipMin);
			os.pushShort(vipMax);
			os.pushStringSet(channelReq);
			os.pushInteger(sendTime);
			os.pushInteger(lifeTime);
			os.pushString(title);
			os.pushString(content);
			os.pushList(attachment);
		}

		public int id;
		public short lvlMin;
		public short lvlMax;
		public short vipMin;
		public short vipMax;
		public Set<String> channelReq;
		public int sendTime;
		public int lifeTime;
		public String title;
		public String content;
		public List<DummyGoods> attachment;
	}

	public static class DBRollNotice implements Stream.IStreamable, Stream.KCloneable<DBRollNotice>, SStream.IStreamable
	{

		public DBRollNotice() { }

		public DBRollNotice(int id, int sendTime, int freq, int lifeTime, 
		                    String content, byte type)
		{
			this.id = id;
			this.sendTime = sendTime;
			this.freq = freq;
			this.lifeTime = lifeTime;
			this.content = content;
			this.type = type;
		}

		public DBRollNotice ksClone()
		{
			return new DBRollNotice(id, sendTime, freq, lifeTime, 
			                        content, type);
		}

		@Override
		public DBRollNotice kdClone()
		{
			DBRollNotice _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			sendTime = is.popInteger();
			freq = is.popInteger();
			lifeTime = is.popInteger();
			content = is.popString();
			type = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(sendTime);
			os.pushInteger(freq);
			os.pushInteger(lifeTime);
			os.pushString(content);
			os.pushByte(type);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			sendTime = is.popInteger();
			freq = is.popInteger();
			lifeTime = is.popInteger();
			content = is.popString();
			type = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(sendTime);
			os.pushInteger(freq);
			os.pushInteger(lifeTime);
			os.pushString(content);
			os.pushByte(type);
		}

		public int id;
		public int sendTime;
		public int freq;
		public int lifeTime;
		public String content;
		public byte type;
	}

	public static class DBMarriageBespeak implements Stream.IStreamable, Stream.KCloneable<DBMarriageBespeak>, SStream.IStreamable
	{

		public DBMarriageBespeak() { }

		public DBMarriageBespeak(int line, int timeIndex, int marriageId, int manId, 
		                         int ladyId, String manName, String ladyName, int time)
		{
			this.line = line;
			this.timeIndex = timeIndex;
			this.marriageId = marriageId;
			this.manId = manId;
			this.ladyId = ladyId;
			this.manName = manName;
			this.ladyName = ladyName;
			this.time = time;
		}

		public DBMarriageBespeak ksClone()
		{
			return new DBMarriageBespeak(line, timeIndex, marriageId, manId, 
			                             ladyId, manName, ladyName, time);
		}

		@Override
		public DBMarriageBespeak kdClone()
		{
			DBMarriageBespeak _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			line = is.popInteger();
			timeIndex = is.popInteger();
			marriageId = is.popInteger();
			manId = is.popInteger();
			ladyId = is.popInteger();
			manName = is.popString();
			ladyName = is.popString();
			time = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(line);
			os.pushInteger(timeIndex);
			os.pushInteger(marriageId);
			os.pushInteger(manId);
			os.pushInteger(ladyId);
			os.pushString(manName);
			os.pushString(ladyName);
			os.pushInteger(time);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			line = is.popInteger();
			timeIndex = is.popInteger();
			marriageId = is.popInteger();
			manId = is.popInteger();
			ladyId = is.popInteger();
			manName = is.popString();
			ladyName = is.popString();
			time = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(line);
			os.pushInteger(timeIndex);
			os.pushInteger(marriageId);
			os.pushInteger(manId);
			os.pushInteger(ladyId);
			os.pushString(manName);
			os.pushString(ladyName);
			os.pushInteger(time);
		}

		public int line;
		public int timeIndex;
		public int marriageId;
		public int manId;
		public int ladyId;
		public String manName;
		public String ladyName;
		public int time;
	}

	public static class MasterDetail implements Stream.IStreamable, Stream.KCloneable<MasterDetail>, SStream.IStreamable
	{

		public MasterDetail() { }

		public MasterDetail(int vip, int power, boolean online, int apprenticeCount, 
		                    String announce, RoleOverview overview)
		{
			this.vip = vip;
			this.power = power;
			this.online = online;
			this.apprenticeCount = apprenticeCount;
			this.announce = announce;
			this.overview = overview;
		}

		public MasterDetail ksClone()
		{
			return new MasterDetail(vip, power, online, apprenticeCount, 
			                        announce, overview);
		}

		@Override
		public MasterDetail kdClone()
		{
			MasterDetail _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			vip = is.popInteger();
			power = is.popInteger();
			online = is.popBoolean();
			apprenticeCount = is.popInteger();
			announce = is.popString();
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(vip);
			os.pushInteger(power);
			os.pushBoolean(online);
			os.pushInteger(apprenticeCount);
			os.pushString(announce);
			os.push(overview);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			vip = is.popInteger();
			power = is.popInteger();
			online = is.popBoolean();
			apprenticeCount = is.popInteger();
			announce = is.popString();
			overview = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(vip);
			os.pushInteger(power);
			os.pushBoolean(online);
			os.pushInteger(apprenticeCount);
			os.pushString(announce);
			os.push(overview);
		}

		public int vip;
		public int power;
		public boolean online;
		public int apprenticeCount;
		public String announce;
		public RoleOverview overview;
	}

	public static class ApprenticeDetail implements Stream.IStreamable, Stream.KCloneable<ApprenticeDetail>, SStream.IStreamable
	{

		public ApprenticeDetail() { }

		public ApprenticeDetail(int historyPoint, int historyActivity, boolean online, int score, 
		                        RoleOverview overview)
		{
			this.historyPoint = historyPoint;
			this.historyActivity = historyActivity;
			this.online = online;
			this.score = score;
			this.overview = overview;
		}

		public ApprenticeDetail ksClone()
		{
			return new ApprenticeDetail(historyPoint, historyActivity, online, score, 
			                            overview);
		}

		@Override
		public ApprenticeDetail kdClone()
		{
			ApprenticeDetail _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			historyPoint = is.popInteger();
			historyActivity = is.popInteger();
			online = is.popBoolean();
			score = is.popInteger();
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(historyPoint);
			os.pushInteger(historyActivity);
			os.pushBoolean(online);
			os.pushInteger(score);
			os.push(overview);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			historyPoint = is.popInteger();
			historyActivity = is.popInteger();
			online = is.popBoolean();
			score = is.popInteger();
			overview = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(historyPoint);
			os.pushInteger(historyActivity);
			os.pushBoolean(online);
			os.pushInteger(score);
			os.push(overview);
		}

		public int historyPoint;
		public int historyActivity;
		public boolean online;
		public int score;
		public RoleOverview overview;
	}

	public static class DBMasterTask implements Stream.IStreamable, Stream.KCloneable<DBMasterTask>, SStream.IStreamable
	{

		public DBMasterTask() { }

		public DBMasterTask(int taskType, int taskProgress)
		{
			this.taskType = taskType;
			this.taskProgress = taskProgress;
		}

		public DBMasterTask ksClone()
		{
			return new DBMasterTask(taskType, taskProgress);
		}

		@Override
		public DBMasterTask kdClone()
		{
			DBMasterTask _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskType = is.popInteger();
			taskProgress = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskType);
			os.pushInteger(taskProgress);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			taskType = is.popInteger();
			taskProgress = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(taskType);
			os.pushInteger(taskProgress);
		}

		public int taskType;
		public int taskProgress;
	}

	public static class DBMasterApply implements Stream.IStreamable, Stream.KCloneable<DBMasterApply>
	{

		public DBMasterApply() { }

		public DBMasterApply(int roleID, int applyTime, int firstApplyTime)
		{
			this.roleID = roleID;
			this.applyTime = applyTime;
			this.firstApplyTime = firstApplyTime;
		}

		public DBMasterApply ksClone()
		{
			return new DBMasterApply(roleID, applyTime, firstApplyTime);
		}

		@Override
		public DBMasterApply kdClone()
		{
			DBMasterApply _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			applyTime = is.popInteger();
			firstApplyTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(applyTime);
			os.pushInteger(firstApplyTime);
		}

		public int roleID;
		public int applyTime;
		public int firstApplyTime;
	}

	public static class DBMasterNotice implements Stream.IStreamable, Stream.KCloneable<DBMasterNotice>
	{

		public DBMasterNotice() { }

		public DBMasterNotice(int roleID, int eventTime)
		{
			this.roleID = roleID;
			this.eventTime = eventTime;
		}

		public DBMasterNotice ksClone()
		{
			return new DBMasterNotice(roleID, eventTime);
		}

		@Override
		public DBMasterNotice kdClone()
		{
			DBMasterNotice _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			eventTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(eventTime);
		}

		public int roleID;
		public int eventTime;
	}

	public static class DBMasterGraduateReq implements Stream.IStreamable, Stream.KCloneable<DBMasterGraduateReq>
	{

		public DBMasterGraduateReq() { }

		public DBMasterGraduateReq(int roleID, int applyTime, int firstApplyTime)
		{
			this.roleID = roleID;
			this.applyTime = applyTime;
			this.firstApplyTime = firstApplyTime;
		}

		public DBMasterGraduateReq ksClone()
		{
			return new DBMasterGraduateReq(roleID, applyTime, firstApplyTime);
		}

		@Override
		public DBMasterGraduateReq kdClone()
		{
			DBMasterGraduateReq _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			applyTime = is.popInteger();
			firstApplyTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(applyTime);
			os.pushInteger(firstApplyTime);
		}

		public int roleID;
		public int applyTime;
		public int firstApplyTime;
	}

	public static class DBMaster implements Stream.IStreamable, Stream.KCloneable<DBMaster>
	{

		public DBMaster() { }

		public DBMaster(int master, List<Integer> apprentices, int point, int historyPoint, 
		                int reputation, int lastDismissTime, int lastBetrayTime, int lastGraduateRequestTime, 
		                List<DBMasterTask> tasks, List<DBMasterApply> applyList, List<DBMasterNotice> betrayList, List<DBMasterGraduateReq> graduateReqList, 
		                int padding1, int padding2, int padding3, int padding4, 
		                int padding5)
		{
			this.master = master;
			this.apprentices = apprentices;
			this.point = point;
			this.historyPoint = historyPoint;
			this.reputation = reputation;
			this.lastDismissTime = lastDismissTime;
			this.lastBetrayTime = lastBetrayTime;
			this.lastGraduateRequestTime = lastGraduateRequestTime;
			this.tasks = tasks;
			this.applyList = applyList;
			this.betrayList = betrayList;
			this.graduateReqList = graduateReqList;
			this.padding1 = padding1;
			this.padding2 = padding2;
			this.padding3 = padding3;
			this.padding4 = padding4;
			this.padding5 = padding5;
		}

		public DBMaster ksClone()
		{
			return new DBMaster(master, apprentices, point, historyPoint, 
			                    reputation, lastDismissTime, lastBetrayTime, lastGraduateRequestTime, 
			                    tasks, applyList, betrayList, graduateReqList, 
			                    padding1, padding2, padding3, padding4, 
			                    padding5);
		}

		@Override
		public DBMaster kdClone()
		{
			DBMaster _kio_clobj = ksClone();
			_kio_clobj.apprentices = new ArrayList<Integer>(apprentices);
			_kio_clobj.tasks = Stream.clone(tasks);
			_kio_clobj.applyList = Stream.clone(applyList);
			_kio_clobj.betrayList = Stream.clone(betrayList);
			_kio_clobj.graduateReqList = Stream.clone(graduateReqList);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			master = is.popInteger();
			apprentices = is.popIntegerList();
			point = is.popInteger();
			historyPoint = is.popInteger();
			reputation = is.popInteger();
			lastDismissTime = is.popInteger();
			lastBetrayTime = is.popInteger();
			lastGraduateRequestTime = is.popInteger();
			tasks = is.popList(DBMasterTask.class);
			applyList = is.popList(DBMasterApply.class);
			betrayList = is.popList(DBMasterNotice.class);
			graduateReqList = is.popList(DBMasterGraduateReq.class);
			padding1 = is.popInteger();
			padding2 = is.popInteger();
			padding3 = is.popInteger();
			padding4 = is.popInteger();
			padding5 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(master);
			os.pushIntegerList(apprentices);
			os.pushInteger(point);
			os.pushInteger(historyPoint);
			os.pushInteger(reputation);
			os.pushInteger(lastDismissTime);
			os.pushInteger(lastBetrayTime);
			os.pushInteger(lastGraduateRequestTime);
			os.pushList(tasks);
			os.pushList(applyList);
			os.pushList(betrayList);
			os.pushList(graduateReqList);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
			os.pushInteger(padding3);
			os.pushInteger(padding4);
			os.pushInteger(padding5);
		}

		public int master;
		public List<Integer> apprentices;
		public int point;
		public int historyPoint;
		public int reputation;
		public int lastDismissTime;
		public int lastBetrayTime;
		public int lastGraduateRequestTime;
		public List<DBMasterTask> tasks;
		public List<DBMasterApply> applyList;
		public List<DBMasterNotice> betrayList;
		public List<DBMasterGraduateReq> graduateReqList;
		public int padding1;
		public int padding2;
		public int padding3;
		public int padding4;
		public int padding5;
	}

	public static class DBWearEquip implements Stream.IStreamable, Stream.KCloneable<DBWearEquip>, SStream.IStreamable
	{

		public DBWearEquip() { }

		public DBWearEquip(int wid, DBEquip equip)
		{
			this.wid = wid;
			this.equip = equip;
		}

		public DBWearEquip ksClone()
		{
			return new DBWearEquip(wid, equip);
		}

		@Override
		public DBWearEquip kdClone()
		{
			DBWearEquip _kio_clobj = ksClone();
			_kio_clobj.equip = Stream.clone(equip);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			wid = is.popInteger();
			if( equip == null )
				equip = new DBEquip();
			is.pop(equip);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(wid);
			os.push(equip);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			wid = is.popInteger();
			equip = is.pop(DBEquip.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(wid);
			os.push(equip);
		}

		public int wid;
		public DBEquip equip;
	}

	public static class DBEquip implements Stream.IStreamable, Stream.KCloneable<DBEquip>, SStream.IStreamable
	{

		public DBEquip() { }

		public DBEquip(String guid, int id, List<Integer> addValues, int durability, 
		               List<Prop> refine, List<Integer> legends)
		{
			this.guid = guid;
			this.id = id;
			this.addValues = addValues;
			this.durability = durability;
			this.refine = refine;
			this.legends = legends;
		}

		public DBEquip ksClone()
		{
			return new DBEquip(guid, id, addValues, durability, 
			                   refine, legends);
		}

		@Override
		public DBEquip kdClone()
		{
			DBEquip _kio_clobj = ksClone();
			_kio_clobj.addValues = new ArrayList<Integer>(addValues);
			_kio_clobj.refine = Stream.clone(refine);
			_kio_clobj.legends = new ArrayList<Integer>(legends);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			guid = is.popString();
			id = is.popInteger();
			addValues = is.popIntegerList();
			durability = is.popInteger();
			refine = is.popList(Prop.class);
			legends = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(guid);
			os.pushInteger(id);
			os.pushIntegerList(addValues);
			os.pushInteger(durability);
			os.pushList(refine);
			os.pushIntegerList(legends);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			guid = is.popString();
			id = is.popInteger();
			addValues = is.popIntegerList();
			durability = is.popInteger();
			refine = is.popList(Prop.class);
			legends = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(guid);
			os.pushInteger(id);
			os.pushIntegerList(addValues);
			os.pushInteger(durability);
			os.pushList(refine);
			os.pushIntegerList(legends);
		}

		public String guid;
		public int id;
		public List<Integer> addValues;
		public int durability = -1;
		public List<Prop> refine;
		public List<Integer> legends;
	}

	public static class DBMiscellaneous implements Stream.IStreamable, Stream.KCloneable<DBMiscellaneous>, SStream.IStreamable
	{

		public DBMiscellaneous() { }

		public DBMiscellaneous(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		public DBMiscellaneous ksClone()
		{
			return new DBMiscellaneous(id, count);
		}

		@Override
		public DBMiscellaneous kdClone()
		{
			DBMiscellaneous _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	public static class DBItemCells implements Stream.IStreamable, Stream.KCloneable<DBItemCells>, SStream.IStreamable
	{

		public DBItemCells() { }

		public DBItemCells(int cellSize, int expandTimes, Map<Integer, GameItem> items)
		{
			this.cellSize = cellSize;
			this.expandTimes = expandTimes;
			this.items = items;
		}

		public DBItemCells ksClone()
		{
			return new DBItemCells(cellSize, expandTimes, items);
		}

		@Override
		public DBItemCells kdClone()
		{
			DBItemCells _kio_clobj = ksClone();
			_kio_clobj.items = Stream.clone(items);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cellSize = is.popInteger();
			expandTimes = is.popInteger();
			items = is.popIntegerTreeMap(GameItem.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cellSize);
			os.pushInteger(expandTimes);
			os.pushIntegerMap(items);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			cellSize = is.popInteger();
			expandTimes = is.popInteger();
			items = is.popIntegerTreeMap(GameItem.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(cellSize);
			os.pushInteger(expandTimes);
			os.pushIntegerMap(items);
		}

		public int cellSize;
		public int expandTimes;
		public Map<Integer, GameItem> items;
	}

	public static class DBRecoverPoint implements Stream.IStreamable, Stream.KCloneable<DBRecoverPoint>, SStream.IStreamable
	{

		public DBRecoverPoint() { }

		public DBRecoverPoint(int value, int recoverTime)
		{
			this.value = value;
			this.recoverTime = recoverTime;
		}

		public DBRecoverPoint ksClone()
		{
			return new DBRecoverPoint(value, recoverTime);
		}

		@Override
		public DBRecoverPoint kdClone()
		{
			DBRecoverPoint _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			value = is.popInteger();
			recoverTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(value);
			os.pushInteger(recoverTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			value = is.popInteger();
			recoverTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(value);
			os.pushInteger(recoverTime);
		}

		public int value;
		public int recoverTime;
	}

	public static class DBVitality implements Stream.IStreamable, Stream.KCloneable<DBVitality>, SStream.IStreamable
	{

		public DBVitality() { }

		public DBVitality(int value, int recoverTime)
		{
			this.value = value;
			this.recoverTime = recoverTime;
		}

		public DBVitality ksClone()
		{
			return new DBVitality(value, recoverTime);
		}

		@Override
		public DBVitality kdClone()
		{
			DBVitality _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			value = is.popInteger();
			recoverTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(value);
			os.pushInteger(recoverTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			value = is.popInteger();
			recoverTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(value);
			os.pushInteger(recoverTime);
		}

		public int value;
		public int recoverTime;
	}

	public static class DBActivity implements Stream.IStreamable, Stream.KCloneable<DBActivity>, SStream.IStreamable
	{

		public DBActivity() { }

		public DBActivity(int value)
		{
			this.value = value;
		}

		public DBActivity ksClone()
		{
			return new DBActivity(value);
		}

		@Override
		public DBActivity kdClone()
		{
			DBActivity _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(value);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(value);
		}

		public int value;
	}

	public static class DBRoleProperties implements Stream.IStreamable, Stream.KCloneable<DBRoleProperties>, SStream.IStreamable
	{

		public DBRoleProperties() { }

		public DBRoleProperties(int equipEnergy, int gemEnergy, int runeEnergy)
		{
			this.equipEnergy = equipEnergy;
			this.gemEnergy = gemEnergy;
			this.runeEnergy = runeEnergy;
		}

		public DBRoleProperties ksClone()
		{
			return new DBRoleProperties(equipEnergy, gemEnergy, runeEnergy);
		}

		@Override
		public DBRoleProperties kdClone()
		{
			DBRoleProperties _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			equipEnergy = is.popInteger();
			gemEnergy = is.popInteger();
			runeEnergy = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(equipEnergy);
			os.pushInteger(gemEnergy);
			os.pushInteger(runeEnergy);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			equipEnergy = is.popInteger();
			gemEnergy = is.popInteger();
			runeEnergy = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(equipEnergy);
			os.pushInteger(gemEnergy);
			os.pushInteger(runeEnergy);
		}

		public int equipEnergy;
		public int gemEnergy;
		public int runeEnergy;
	}

	public static class DBShopGoods implements Stream.IStreamable, Stream.KCloneable<DBShopGoods>, SStream.IStreamable
	{

		public DBShopGoods() { }

		public DBShopGoods(int id, int buyTimes)
		{
			this.id = id;
			this.buyTimes = buyTimes;
		}

		public DBShopGoods ksClone()
		{
			return new DBShopGoods(id, buyTimes);
		}

		@Override
		public DBShopGoods kdClone()
		{
			DBShopGoods _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buyTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buyTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			buyTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buyTimes);
		}

		public int id;
		public int buyTimes;
	}

	public static class DBShop implements Stream.IStreamable, Stream.KCloneable<DBShop>, SStream.IStreamable
	{

		public DBShop() { }

		public DBShop(int type, int refreshTimes, int stamp, List<DBShopGoods> goods)
		{
			this.type = type;
			this.refreshTimes = refreshTimes;
			this.stamp = stamp;
			this.goods = goods;
		}

		public DBShop ksClone()
		{
			return new DBShop(type, refreshTimes, stamp, goods);
		}

		@Override
		public DBShop kdClone()
		{
			DBShop _kio_clobj = ksClone();
			_kio_clobj.goods = Stream.clone(goods);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			refreshTimes = is.popInteger();
			stamp = is.popInteger();
			goods = is.popList(DBShopGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(refreshTimes);
			os.pushInteger(stamp);
			os.pushList(goods);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			type = is.popInteger();
			refreshTimes = is.popInteger();
			stamp = is.popInteger();
			goods = is.popList(DBShopGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(type);
			os.pushInteger(refreshTimes);
			os.pushInteger(stamp);
			os.pushList(goods);
		}

		public int type;
		public int refreshTimes;
		public int stamp;
		public List<DBShopGoods> goods;
	}

	public static class DBGambleShopGoods implements Stream.IStreamable, Stream.KCloneable<DBGambleShopGoods>, SStream.IStreamable
	{

		public DBGambleShopGoods() { }

		public DBGambleShopGoods(int id, int buyTimes)
		{
			this.id = id;
			this.buyTimes = buyTimes;
		}

		public DBGambleShopGoods ksClone()
		{
			return new DBGambleShopGoods(id, buyTimes);
		}

		@Override
		public DBGambleShopGoods kdClone()
		{
			DBGambleShopGoods _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buyTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buyTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			buyTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buyTimes);
		}

		public int id;
		public int buyTimes;
	}

	public static class DBGambleShop implements Stream.IStreamable, Stream.KCloneable<DBGambleShop>, SStream.IStreamable
	{

		public DBGambleShop() { }

		public DBGambleShop(int type, int refreshTimes, int stamp, List<DBGambleShopGoods> goods)
		{
			this.type = type;
			this.refreshTimes = refreshTimes;
			this.stamp = stamp;
			this.goods = goods;
		}

		public DBGambleShop ksClone()
		{
			return new DBGambleShop(type, refreshTimes, stamp, goods);
		}

		@Override
		public DBGambleShop kdClone()
		{
			DBGambleShop _kio_clobj = ksClone();
			_kio_clobj.goods = Stream.clone(goods);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			refreshTimes = is.popInteger();
			stamp = is.popInteger();
			goods = is.popList(DBGambleShopGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(refreshTimes);
			os.pushInteger(stamp);
			os.pushList(goods);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			type = is.popInteger();
			refreshTimes = is.popInteger();
			stamp = is.popInteger();
			goods = is.popList(DBGambleShopGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(type);
			os.pushInteger(refreshTimes);
			os.pushInteger(stamp);
			os.pushList(goods);
		}

		public int type;
		public int refreshTimes;
		public int stamp;
		public List<DBGambleShopGoods> goods;
	}

	public static class DBSkill implements Stream.IStreamable, Stream.KCloneable<DBSkill>, SStream.IStreamable
	{

		public DBSkill() { }

		public DBSkill(int id, int level, int bourn)
		{
			this.id = id;
			this.level = level;
			this.bourn = bourn;
		}

		public DBSkill ksClone()
		{
			return new DBSkill(id, level, bourn);
		}

		@Override
		public DBSkill kdClone()
		{
			DBSkill _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			bourn = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(bourn);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			bourn = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(bourn);
		}

		public int id;
		public int level;
		public int bourn;
	}

	public static class DBCurSkill implements Stream.IStreamable, Stream.KCloneable<DBCurSkill>, SStream.IStreamable
	{

		public DBCurSkill() { }

		public DBCurSkill(List<Integer> curSkills)
		{
			this.curSkills = curSkills;
		}

		public DBCurSkill ksClone()
		{
			return new DBCurSkill(curSkills);
		}

		@Override
		public DBCurSkill kdClone()
		{
			DBCurSkill _kio_clobj = ksClone();
			_kio_clobj.curSkills = new ArrayList<Integer>(curSkills);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curSkills = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(curSkills);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			curSkills = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerList(curSkills);
		}

		public List<Integer> curSkills;
	}

	public static class DBSpirit implements Stream.IStreamable, Stream.KCloneable<DBSpirit>, SStream.IStreamable
	{

		public DBSpirit() { }

		public DBSpirit(int id, int level)
		{
			this.id = id;
			this.level = level;
		}

		public DBSpirit ksClone()
		{
			return new DBSpirit(id, level);
		}

		@Override
		public DBSpirit kdClone()
		{
			DBSpirit _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
		}

		public int id;
		public int level;
	}

	public static class DBEquipPart implements Stream.IStreamable, Stream.KCloneable<DBEquipPart>, SStream.IStreamable
	{

		public DBEquipPart() { }

		public DBEquipPart(int id, int eqGrowLvl, int eqEvoLvl, List<Integer> eqSlots, 
		                   int upcnt)
		{
			this.id = id;
			this.eqGrowLvl = eqGrowLvl;
			this.eqEvoLvl = eqEvoLvl;
			this.eqSlots = eqSlots;
			this.upcnt = upcnt;
		}

		public DBEquipPart ksClone()
		{
			return new DBEquipPart(id, eqGrowLvl, eqEvoLvl, eqSlots, 
			                       upcnt);
		}

		@Override
		public DBEquipPart kdClone()
		{
			DBEquipPart _kio_clobj = ksClone();
			_kio_clobj.eqSlots = new ArrayList<Integer>(eqSlots);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			eqGrowLvl = is.popInteger();
			eqEvoLvl = is.popInteger();
			eqSlots = is.popIntegerList();
			upcnt = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(eqGrowLvl);
			os.pushInteger(eqEvoLvl);
			os.pushIntegerList(eqSlots);
			os.pushInteger(upcnt);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			eqGrowLvl = is.popInteger();
			eqEvoLvl = is.popInteger();
			eqSlots = is.popIntegerList();
			upcnt = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(eqGrowLvl);
			os.pushInteger(eqEvoLvl);
			os.pushIntegerList(eqSlots);
			os.pushInteger(upcnt);
		}

		public int id;
		public int eqGrowLvl;
		public int eqEvoLvl;
		public List<Integer> eqSlots;
		public int upcnt;
	}

	public static class DBWeapon implements Stream.IStreamable, Stream.KCloneable<DBWeapon>, SStream.IStreamable
	{

		public DBWeapon() { }

		public DBWeapon(int id, int level, int exp, int star, 
		                int fightPower, List<Integer> skills, List<Integer> talent, int canUseTalentPoint, 
		                WeaponUSkill uniqueSkill, byte form)
		{
			this.id = id;
			this.level = level;
			this.exp = exp;
			this.star = star;
			this.fightPower = fightPower;
			this.skills = skills;
			this.talent = talent;
			this.canUseTalentPoint = canUseTalentPoint;
			this.uniqueSkill = uniqueSkill;
			this.form = form;
		}

		public DBWeapon ksClone()
		{
			return new DBWeapon(id, level, exp, star, 
			                    fightPower, skills, talent, canUseTalentPoint, 
			                    uniqueSkill, form);
		}

		@Override
		public DBWeapon kdClone()
		{
			DBWeapon _kio_clobj = ksClone();
			_kio_clobj.skills = new ArrayList<Integer>(skills);
			_kio_clobj.talent = new ArrayList<Integer>(talent);
			_kio_clobj.uniqueSkill = Stream.clone(uniqueSkill);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			exp = is.popInteger();
			star = is.popInteger();
			fightPower = is.popInteger();
			skills = is.popIntegerList();
			talent = is.popIntegerList();
			canUseTalentPoint = is.popInteger();
			if( uniqueSkill == null )
				uniqueSkill = new WeaponUSkill();
			is.pop(uniqueSkill);
			form = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(exp);
			os.pushInteger(star);
			os.pushInteger(fightPower);
			os.pushIntegerList(skills);
			os.pushIntegerList(talent);
			os.pushInteger(canUseTalentPoint);
			os.push(uniqueSkill);
			os.pushByte(form);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			exp = is.popInteger();
			star = is.popInteger();
			fightPower = is.popInteger();
			skills = is.popIntegerList();
			talent = is.popIntegerList();
			canUseTalentPoint = is.popInteger();
			uniqueSkill = is.pop(WeaponUSkill.class);
			form = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(exp);
			os.pushInteger(star);
			os.pushInteger(fightPower);
			os.pushIntegerList(skills);
			os.pushIntegerList(talent);
			os.pushInteger(canUseTalentPoint);
			os.push(uniqueSkill);
			os.pushByte(form);
		}

		public int id;
		public int level;
		public int exp;
		public int star;
		public int fightPower;
		public List<Integer> skills;
		public List<Integer> talent;
		public int canUseTalentPoint;
		public WeaponUSkill uniqueSkill;
		public byte form;
	}

	public static class WeaponUSkill implements Stream.IStreamable, Stream.KCloneable<WeaponUSkill>, SStream.IStreamable
	{

		public WeaponUSkill() { }

		public WeaponUSkill(byte open, int master)
		{
			this.open = open;
			this.master = master;
		}

		public WeaponUSkill ksClone()
		{
			return new WeaponUSkill(open, master);
		}

		@Override
		public WeaponUSkill kdClone()
		{
			WeaponUSkill _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popByte();
			master = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(open);
			os.pushInteger(master);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popByte();
			master = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushByte(open);
			os.pushInteger(master);
		}

		public byte open;
		public int master;
	}

	public static class DBWeaponMapLog implements Stream.IStreamable, Stream.KCloneable<DBWeaponMapLog>, SStream.IStreamable
	{

		public DBWeaponMapLog() { }

		public DBWeaponMapLog(int dayEnterTimes, int enterTimes, Map<Integer, Integer> logs)
		{
			this.dayEnterTimes = dayEnterTimes;
			this.enterTimes = enterTimes;
			this.logs = logs;
		}

		public DBWeaponMapLog ksClone()
		{
			return new DBWeaponMapLog(dayEnterTimes, enterTimes, logs);
		}

		@Override
		public DBWeaponMapLog kdClone()
		{
			DBWeaponMapLog _kio_clobj = ksClone();
			_kio_clobj.logs = new TreeMap<Integer, Integer>(logs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayEnterTimes = is.popInteger();
			enterTimes = is.popInteger();
			logs = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayEnterTimes);
			os.pushInteger(enterTimes);
			os.pushIntegerIntegerMap(logs);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayEnterTimes = is.popInteger();
			enterTimes = is.popInteger();
			logs = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dayEnterTimes);
			os.pushInteger(enterTimes);
			os.pushIntegerIntegerMap(logs);
		}

		public int dayEnterTimes;
		public int enterTimes;
		public Map<Integer, Integer> logs;
	}

	public static class DBBuff implements Stream.IStreamable, Stream.KCloneable<DBBuff>, SStream.IStreamable
	{

		public DBBuff() { }

		public DBBuff(long endTime, Buff buff)
		{
			this.endTime = endTime;
			this.buff = buff;
		}

		public DBBuff ksClone()
		{
			return new DBBuff(endTime, buff);
		}

		@Override
		public DBBuff kdClone()
		{
			DBBuff _kio_clobj = ksClone();
			_kio_clobj.buff = Stream.clone(buff);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			endTime = is.popLong();
			if( buff == null )
				buff = new Buff();
			is.pop(buff);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushLong(endTime);
			os.push(buff);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			endTime = is.popLong();
			buff = is.pop(Buff.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushLong(endTime);
			os.push(buff);
		}

		public long endTime;
		public Buff buff;
	}

	public static class CBuff implements Stream.IStreamable, Stream.KCloneable<CBuff>, SStream.IStreamable
	{

		public CBuff() { }

		public CBuff(int remainTime, Buff buff)
		{
			this.remainTime = remainTime;
			this.buff = buff;
		}

		public CBuff ksClone()
		{
			return new CBuff(remainTime, buff);
		}

		@Override
		public CBuff kdClone()
		{
			CBuff _kio_clobj = ksClone();
			_kio_clobj.buff = Stream.clone(buff);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			remainTime = is.popInteger();
			if( buff == null )
				buff = new Buff();
			is.pop(buff);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(remainTime);
			os.push(buff);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			remainTime = is.popInteger();
			buff = is.pop(Buff.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(remainTime);
			os.push(buff);
		}

		public int remainTime;
		public Buff buff;
	}

	public static class Buff implements Stream.IStreamable, Stream.KCloneable<Buff>, SStream.IStreamable
	{

		public Buff() { }

		public Buff(int id, int overLays, int value, int attackerType)
		{
			this.id = id;
			this.overLays = overLays;
			this.value = value;
			this.attackerType = attackerType;
		}

		public Buff ksClone()
		{
			return new Buff(id, overLays, value, attackerType);
		}

		@Override
		public Buff kdClone()
		{
			Buff _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			overLays = is.popInteger();
			value = is.popInteger();
			attackerType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(overLays);
			os.pushInteger(value);
			os.pushInteger(attackerType);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			overLays = is.popInteger();
			value = is.popInteger();
			attackerType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(overLays);
			os.pushInteger(value);
			os.pushInteger(attackerType);
		}

		public int id;
		public int overLays;
		public int value;
		public int attackerType;
	}

	public static class DBMainTask implements Stream.IStreamable, Stream.KCloneable<DBMainTask>, SStream.IStreamable
	{

		public DBMainTask() { }

		public DBMainTask(int id, int value, byte state, int receiveTime)
		{
			this.id = id;
			this.value = value;
			this.state = state;
			this.receiveTime = receiveTime;
		}

		public DBMainTask ksClone()
		{
			return new DBMainTask(id, value, state, receiveTime);
		}

		@Override
		public DBMainTask kdClone()
		{
			DBMainTask _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			state = is.popByte();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushByte(state);
			os.pushInteger(receiveTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			state = is.popByte();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushByte(state);
			os.pushInteger(receiveTime);
		}

		public int id;
		public int value;
		public byte state;
		public int receiveTime;
	}

	public static class DBAlterState implements Stream.IStreamable, Stream.KCloneable<DBAlterState>, SStream.IStreamable
	{

		public DBAlterState() { }

		public DBAlterState(int alterID, int attrEndTime)
		{
			this.alterID = alterID;
			this.attrEndTime = attrEndTime;
		}

		public DBAlterState ksClone()
		{
			return new DBAlterState(alterID, attrEndTime);
		}

		@Override
		public DBAlterState kdClone()
		{
			DBAlterState _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			alterID = is.popInteger();
			attrEndTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(alterID);
			os.pushInteger(attrEndTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			alterID = is.popInteger();
			attrEndTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(alterID);
			os.pushInteger(attrEndTime);
		}

		public int alterID;
		public int attrEndTime;
	}

	public static class DBWeaponTask implements Stream.IStreamable, Stream.KCloneable<DBWeaponTask>, SStream.IStreamable
	{

		public DBWeaponTask() { }

		public DBWeaponTask(int type, int id, List<Integer> values, int dayLoopCount, 
		                    int receiveTime)
		{
			this.type = type;
			this.id = id;
			this.values = values;
			this.dayLoopCount = dayLoopCount;
			this.receiveTime = receiveTime;
		}

		public DBWeaponTask ksClone()
		{
			return new DBWeaponTask(type, id, values, dayLoopCount, 
			                        receiveTime);
		}

		@Override
		public DBWeaponTask kdClone()
		{
			DBWeaponTask _kio_clobj = ksClone();
			_kio_clobj.values = new ArrayList<Integer>(values);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			id = is.popInteger();
			values = is.popIntegerList();
			dayLoopCount = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(id);
			os.pushIntegerList(values);
			os.pushInteger(dayLoopCount);
			os.pushInteger(receiveTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			type = is.popInteger();
			id = is.popInteger();
			values = is.popIntegerList();
			dayLoopCount = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(type);
			os.pushInteger(id);
			os.pushIntegerList(values);
			os.pushInteger(dayLoopCount);
			os.pushInteger(receiveTime);
		}

		public int type;
		public int id;
		public List<Integer> values;
		public int dayLoopCount;
		public int receiveTime;
	}

	public static class DBPetTask implements Stream.IStreamable, Stream.KCloneable<DBPetTask>, SStream.IStreamable
	{

		public DBPetTask() { }

		public DBPetTask(int id, int value)
		{
			this.id = id;
			this.value = value;
		}

		public DBPetTask ksClone()
		{
			return new DBPetTask(id, value);
		}

		@Override
		public DBPetTask kdClone()
		{
			DBPetTask _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
		}

		public int id;
		public int value;
	}

	public static class DBPetLifeTask implements Stream.IStreamable, Stream.KCloneable<DBPetLifeTask>, SStream.IStreamable
	{

		public DBPetLifeTask() { }

		public DBPetLifeTask(int id, int value, int reward)
		{
			this.id = id;
			this.value = value;
			this.reward = reward;
		}

		public DBPetLifeTask ksClone()
		{
			return new DBPetLifeTask(id, value, reward);
		}

		@Override
		public DBPetLifeTask kdClone()
		{
			DBPetLifeTask _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			reward = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushInteger(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			reward = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushInteger(reward);
		}

		public int id;
		public int value;
		public int reward;
	}

	public static class DBDIYSkillData implements Stream.IStreamable, Stream.KCloneable<DBDIYSkillData>, SStream.IStreamable
	{

		public DBDIYSkillData() { }

		public DBDIYSkillData(int gradeId, List<Float> damageArgs, float atrDecrease, float acrDecrease, 
		                      int skillActionID, byte damageTimes, int cd, int addSP, 
		                      List<Integer> scope, List<DBDIYBUFF> buffs)
		{
			this.gradeId = gradeId;
			this.damageArgs = damageArgs;
			this.atrDecrease = atrDecrease;
			this.acrDecrease = acrDecrease;
			this.skillActionID = skillActionID;
			this.damageTimes = damageTimes;
			this.cd = cd;
			this.addSP = addSP;
			this.scope = scope;
			this.buffs = buffs;
		}

		public DBDIYSkillData ksClone()
		{
			return new DBDIYSkillData(gradeId, damageArgs, atrDecrease, acrDecrease, 
			                          skillActionID, damageTimes, cd, addSP, 
			                          scope, buffs);
		}

		@Override
		public DBDIYSkillData kdClone()
		{
			DBDIYSkillData _kio_clobj = ksClone();
			_kio_clobj.damageArgs = new ArrayList<Float>(damageArgs);
			_kio_clobj.scope = new ArrayList<Integer>(scope);
			_kio_clobj.buffs = Stream.clone(buffs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gradeId = is.popInteger();
			damageArgs = is.popFloatList();
			atrDecrease = is.popFloat();
			acrDecrease = is.popFloat();
			skillActionID = is.popInteger();
			damageTimes = is.popByte();
			cd = is.popInteger();
			addSP = is.popInteger();
			scope = is.popIntegerList();
			buffs = is.popList(DBDIYBUFF.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(gradeId);
			os.pushFloatList(damageArgs);
			os.pushFloat(atrDecrease);
			os.pushFloat(acrDecrease);
			os.pushInteger(skillActionID);
			os.pushByte(damageTimes);
			os.pushInteger(cd);
			os.pushInteger(addSP);
			os.pushIntegerList(scope);
			os.pushList(buffs);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			gradeId = is.popInteger();
			damageArgs = is.popFloatList();
			atrDecrease = is.popFloat();
			acrDecrease = is.popFloat();
			skillActionID = is.popInteger();
			damageTimes = is.popByte();
			cd = is.popInteger();
			addSP = is.popInteger();
			scope = is.popIntegerList();
			buffs = is.popList(DBDIYBUFF.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(gradeId);
			os.pushFloatList(damageArgs);
			os.pushFloat(atrDecrease);
			os.pushFloat(acrDecrease);
			os.pushInteger(skillActionID);
			os.pushByte(damageTimes);
			os.pushInteger(cd);
			os.pushInteger(addSP);
			os.pushIntegerList(scope);
			os.pushList(buffs);
		}

		public int gradeId;
		public List<Float> damageArgs;
		public float atrDecrease;
		public float acrDecrease;
		public int skillActionID;
		public byte damageTimes;
		public int cd;
		public int addSP;
		public List<Integer> scope;
		public List<DBDIYBUFF> buffs;
	}

	public static class DBDIYBUFF implements Stream.IStreamable, Stream.KCloneable<DBDIYBUFF>, SStream.IStreamable
	{

		public DBDIYBUFF() { }

		public DBDIYBUFF(SubStatus status, int loopTime, int affectValue)
		{
			this.status = status;
			this.loopTime = loopTime;
			this.affectValue = affectValue;
		}

		public DBDIYBUFF ksClone()
		{
			return new DBDIYBUFF(status, loopTime, affectValue);
		}

		@Override
		public DBDIYBUFF kdClone()
		{
			DBDIYBUFF _kio_clobj = ksClone();
			_kio_clobj.status = Stream.clone(status);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( status == null )
				status = new SubStatus();
			is.pop(status);
			loopTime = is.popInteger();
			affectValue = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(status);
			os.pushInteger(loopTime);
			os.pushInteger(affectValue);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			status = is.pop(SubStatus.class);
			loopTime = is.popInteger();
			affectValue = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(status);
			os.pushInteger(loopTime);
			os.pushInteger(affectValue);
		}

		public SubStatus status;
		public int loopTime;
		public int affectValue;
	}

	public static class DBDiySkill implements Stream.IStreamable, Stream.KCloneable<DBDiySkill>, SStream.IStreamable
	{

		public DBDiySkill() { }

		public DBDiySkill(int id, String name, int iconId, DBDIYSkillData diySkillData)
		{
			this.id = id;
			this.name = name;
			this.iconId = iconId;
			this.diySkillData = diySkillData;
		}

		public DBDiySkill ksClone()
		{
			return new DBDiySkill(id, name, iconId, diySkillData);
		}

		@Override
		public DBDiySkill kdClone()
		{
			DBDiySkill _kio_clobj = ksClone();
			_kio_clobj.diySkillData = Stream.clone(diySkillData);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			iconId = is.popInteger();
			if( diySkillData == null )
				diySkillData = new DBDIYSkillData();
			is.pop(diySkillData);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(iconId);
			os.push(diySkillData);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			iconId = is.popInteger();
			diySkillData = is.pop(DBDIYSkillData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(iconId);
			os.push(diySkillData);
		}

		public int id;
		public String name;
		public int iconId;
		public DBDIYSkillData diySkillData;
	}

	public static class DBRoleDiySkillData implements Stream.IStreamable, Stream.KCloneable<DBRoleDiySkillData>, SStream.IStreamable
	{

		public DBRoleDiySkillData() { }

		public DBRoleDiySkillData(int level, int exp, int slot, int curSkillId, 
		                          int dayUnlockCount, int dayCreateCount, int dayBuyCount, int historyCreateCount, 
		                          List<DBDiySkill> diySkills, DBDIYSkillData tmpDiySkill, DBDiySkill borrowDiySkill, int borrowTime)
		{
			this.level = level;
			this.exp = exp;
			this.slot = slot;
			this.curSkillId = curSkillId;
			this.dayUnlockCount = dayUnlockCount;
			this.dayCreateCount = dayCreateCount;
			this.dayBuyCount = dayBuyCount;
			this.historyCreateCount = historyCreateCount;
			this.diySkills = diySkills;
			this.tmpDiySkill = tmpDiySkill;
			this.borrowDiySkill = borrowDiySkill;
			this.borrowTime = borrowTime;
		}

		public DBRoleDiySkillData ksClone()
		{
			return new DBRoleDiySkillData(level, exp, slot, curSkillId, 
			                              dayUnlockCount, dayCreateCount, dayBuyCount, historyCreateCount, 
			                              diySkills, tmpDiySkill, borrowDiySkill, borrowTime);
		}

		@Override
		public DBRoleDiySkillData kdClone()
		{
			DBRoleDiySkillData _kio_clobj = ksClone();
			_kio_clobj.diySkills = Stream.clone(diySkills);
			_kio_clobj.tmpDiySkill = Stream.cloneNullable(tmpDiySkill);
			_kio_clobj.borrowDiySkill = Stream.cloneNullable(borrowDiySkill);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			exp = is.popInteger();
			slot = is.popInteger();
			curSkillId = is.popInteger();
			dayUnlockCount = is.popInteger();
			dayCreateCount = is.popInteger();
			dayBuyCount = is.popInteger();
			historyCreateCount = is.popInteger();
			diySkills = is.popList(DBDiySkill.class);
			tmpDiySkill = is.popNullable(DBDIYSkillData.class);
			borrowDiySkill = is.popNullable(DBDiySkill.class);
			borrowTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(exp);
			os.pushInteger(slot);
			os.pushInteger(curSkillId);
			os.pushInteger(dayUnlockCount);
			os.pushInteger(dayCreateCount);
			os.pushInteger(dayBuyCount);
			os.pushInteger(historyCreateCount);
			os.pushList(diySkills);
			os.pushNullable(tmpDiySkill);
			os.pushNullable(borrowDiySkill);
			os.pushInteger(borrowTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			level = is.popInteger();
			exp = is.popInteger();
			slot = is.popInteger();
			curSkillId = is.popInteger();
			dayUnlockCount = is.popInteger();
			dayCreateCount = is.popInteger();
			dayBuyCount = is.popInteger();
			historyCreateCount = is.popInteger();
			diySkills = is.popList(DBDiySkill.class);
			tmpDiySkill = is.pop(DBDIYSkillData.class);
			borrowDiySkill = is.pop(DBDiySkill.class);
			borrowTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(level);
			os.pushInteger(exp);
			os.pushInteger(slot);
			os.pushInteger(curSkillId);
			os.pushInteger(dayUnlockCount);
			os.pushInteger(dayCreateCount);
			os.pushInteger(dayBuyCount);
			os.pushInteger(historyCreateCount);
			os.pushList(diySkills);
			os.push(tmpDiySkill);
			os.push(borrowDiySkill);
			os.pushInteger(borrowTime);
		}

		public int level;
		public int exp;
		public int slot;
		public int curSkillId;
		public int dayUnlockCount;
		public int dayCreateCount;
		public int dayBuyCount;
		public int historyCreateCount;
		public List<DBDiySkill> diySkills;
		public DBDIYSkillData tmpDiySkill;
		public DBDiySkill borrowDiySkill;
		public int borrowTime;
	}

	public static class DBMarriageTask implements Stream.IStreamable, Stream.KCloneable<DBMarriageTask>, SStream.IStreamable
	{

		public DBMarriageTask() { }

		public DBMarriageTask(DBMarriageSeriesTask series, DBMarriageLoopTask loop, byte open)
		{
			this.series = series;
			this.loop = loop;
			this.open = open;
		}

		public DBMarriageTask ksClone()
		{
			return new DBMarriageTask(series, loop, open);
		}

		@Override
		public DBMarriageTask kdClone()
		{
			DBMarriageTask _kio_clobj = ksClone();
			_kio_clobj.series = Stream.clone(series);
			_kio_clobj.loop = Stream.clone(loop);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( series == null )
				series = new DBMarriageSeriesTask();
			is.pop(series);
			if( loop == null )
				loop = new DBMarriageLoopTask();
			is.pop(loop);
			open = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(series);
			os.push(loop);
			os.pushByte(open);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			series = is.pop(DBMarriageSeriesTask.class);
			loop = is.pop(DBMarriageLoopTask.class);
			open = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(series);
			os.push(loop);
			os.pushByte(open);
		}

		public DBMarriageSeriesTask series;
		public DBMarriageLoopTask loop;
		public byte open;
	}

	public static class DBMarriageSeriesTask implements Stream.IStreamable, Stream.KCloneable<DBMarriageSeriesTask>, SStream.IStreamable
	{

		public DBMarriageSeriesTask() { }

		public DBMarriageSeriesTask(int group, int id, int value, byte state, 
		                            int receiveTime)
		{
			this.group = group;
			this.id = id;
			this.value = value;
			this.state = state;
			this.receiveTime = receiveTime;
		}

		public DBMarriageSeriesTask ksClone()
		{
			return new DBMarriageSeriesTask(group, id, value, state, 
			                                receiveTime);
		}

		@Override
		public DBMarriageSeriesTask kdClone()
		{
			DBMarriageSeriesTask _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			group = is.popInteger();
			id = is.popInteger();
			value = is.popInteger();
			state = is.popByte();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(group);
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushByte(state);
			os.pushInteger(receiveTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			group = is.popInteger();
			id = is.popInteger();
			value = is.popInteger();
			state = is.popByte();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(group);
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushByte(state);
			os.pushInteger(receiveTime);
		}

		public int group;
		public int id;
		public int value;
		public byte state;
		public int receiveTime;
	}

	public static class DBMarriageLoopTask implements Stream.IStreamable, Stream.KCloneable<DBMarriageLoopTask>, SStream.IStreamable
	{

		public DBMarriageLoopTask() { }

		public DBMarriageLoopTask(int id, int value, byte state, int leftCount, 
		                          int receiveTime)
		{
			this.id = id;
			this.value = value;
			this.state = state;
			this.leftCount = leftCount;
			this.receiveTime = receiveTime;
		}

		public DBMarriageLoopTask ksClone()
		{
			return new DBMarriageLoopTask(id, value, state, leftCount, 
			                              receiveTime);
		}

		@Override
		public DBMarriageLoopTask kdClone()
		{
			DBMarriageLoopTask _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			state = is.popByte();
			leftCount = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushByte(state);
			os.pushInteger(leftCount);
			os.pushInteger(receiveTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			state = is.popByte();
			leftCount = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushByte(state);
			os.pushInteger(leftCount);
			os.pushInteger(receiveTime);
		}

		public int id;
		public int value;
		public byte state;
		public int leftCount;
		public int receiveTime;
	}

	public static class DBCheckInLog implements Stream.IStreamable, Stream.KCloneable<DBCheckInLog>, SStream.IStreamable
	{

		public DBCheckInLog() { }

		public DBCheckInLog(int checkinId, int finishedDays, int lastCheckInDaySeq)
		{
			this.checkinId = checkinId;
			this.finishedDays = finishedDays;
			this.lastCheckInDaySeq = lastCheckInDaySeq;
		}

		public DBCheckInLog ksClone()
		{
			return new DBCheckInLog(checkinId, finishedDays, lastCheckInDaySeq);
		}

		@Override
		public DBCheckInLog kdClone()
		{
			DBCheckInLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			checkinId = is.popInteger();
			finishedDays = is.popInteger();
			lastCheckInDaySeq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(checkinId);
			os.pushInteger(finishedDays);
			os.pushInteger(lastCheckInDaySeq);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			checkinId = is.popInteger();
			finishedDays = is.popInteger();
			lastCheckInDaySeq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(checkinId);
			os.pushInteger(finishedDays);
			os.pushInteger(lastCheckInDaySeq);
		}

		public int checkinId;
		public int finishedDays;
		public int lastCheckInDaySeq;
	}

	public static class DBGoodsBuyLog implements Stream.IStreamable, Stream.KCloneable<DBGoodsBuyLog>, SStream.IStreamable
	{

		public DBGoodsBuyLog() { }

		public DBGoodsBuyLog(int id, int allBuyTimes, int dayBuyTimes, int weekBuyTimes)
		{
			this.id = id;
			this.allBuyTimes = allBuyTimes;
			this.dayBuyTimes = dayBuyTimes;
			this.weekBuyTimes = weekBuyTimes;
		}

		public DBGoodsBuyLog ksClone()
		{
			return new DBGoodsBuyLog(id, allBuyTimes, dayBuyTimes, weekBuyTimes);
		}

		@Override
		public DBGoodsBuyLog kdClone()
		{
			DBGoodsBuyLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			allBuyTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
			weekBuyTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(allBuyTimes);
			os.pushInteger(dayBuyTimes);
			os.pushInteger(weekBuyTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			allBuyTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
			weekBuyTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(allBuyTimes);
			os.pushInteger(dayBuyTimes);
			os.pushInteger(weekBuyTimes);
		}

		public int id;
		public int allBuyTimes;
		public int dayBuyTimes;
		public int weekBuyTimes;
	}

	public static class DBRoleMallLog implements Stream.IStreamable, Stream.KCloneable<DBRoleMallLog>, SStream.IStreamable
	{

		public DBRoleMallLog() { }

		public DBRoleMallLog(int id, int logTime, Map<Integer, DBGoodsBuyLog> fbuyLogs, Map<Integer, DBGoodsBuyLog> rbuyLogs)
		{
			this.id = id;
			this.logTime = logTime;
			this.fbuyLogs = fbuyLogs;
			this.rbuyLogs = rbuyLogs;
		}

		public DBRoleMallLog ksClone()
		{
			return new DBRoleMallLog(id, logTime, fbuyLogs, rbuyLogs);
		}

		@Override
		public DBRoleMallLog kdClone()
		{
			DBRoleMallLog _kio_clobj = ksClone();
			_kio_clobj.fbuyLogs = Stream.clone(fbuyLogs);
			_kio_clobj.rbuyLogs = Stream.clone(rbuyLogs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			logTime = is.popInteger();
			fbuyLogs = is.popIntegerTreeMap(DBGoodsBuyLog.class);
			rbuyLogs = is.popIntegerTreeMap(DBGoodsBuyLog.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(logTime);
			os.pushIntegerMap(fbuyLogs);
			os.pushIntegerMap(rbuyLogs);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			logTime = is.popInteger();
			fbuyLogs = is.popIntegerTreeMap(DBGoodsBuyLog.class);
			rbuyLogs = is.popIntegerTreeMap(DBGoodsBuyLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(logTime);
			os.pushIntegerMap(fbuyLogs);
			os.pushIntegerMap(rbuyLogs);
		}

		public int id;
		public int logTime;
		public Map<Integer, DBGoodsBuyLog> fbuyLogs;
		public Map<Integer, DBGoodsBuyLog> rbuyLogs;
	}

	public static class DBRoleFirstPayGiftLog implements Stream.IStreamable, Stream.KCloneable<DBRoleFirstPayGiftLog>, SStream.IStreamable
	{

		public DBRoleFirstPayGiftLog() { }

		public DBRoleFirstPayGiftLog(int id, int pay, int reward)
		{
			this.id = id;
			this.pay = pay;
			this.reward = reward;
		}

		public DBRoleFirstPayGiftLog ksClone()
		{
			return new DBRoleFirstPayGiftLog(id, pay, reward);
		}

		@Override
		public DBRoleFirstPayGiftLog kdClone()
		{
			DBRoleFirstPayGiftLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			pay = is.popInteger();
			reward = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(pay);
			os.pushInteger(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			pay = is.popInteger();
			reward = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(pay);
			os.pushInteger(reward);
		}

		public int id;
		public int pay;
		public int reward;
	}

	public static class DBRoleDailyPayGiftLog implements Stream.IStreamable, Stream.KCloneable<DBRoleDailyPayGiftLog>, SStream.IStreamable
	{

		public DBRoleDailyPayGiftLog() { }

		public DBRoleDailyPayGiftLog(int id, Map<Integer, Integer> pay, Set<Integer> reward)
		{
			this.id = id;
			this.pay = pay;
			this.reward = reward;
		}

		public DBRoleDailyPayGiftLog ksClone()
		{
			return new DBRoleDailyPayGiftLog(id, pay, reward);
		}

		@Override
		public DBRoleDailyPayGiftLog kdClone()
		{
			DBRoleDailyPayGiftLog _kio_clobj = ksClone();
			_kio_clobj.pay = new TreeMap<Integer, Integer>(pay);
			_kio_clobj.reward = new TreeSet<Integer>(reward);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			pay = is.popIntegerIntegerTreeMap();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerIntegerMap(pay);
			os.pushIntegerSet(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			pay = is.popIntegerIntegerTreeMap();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushIntegerIntegerMap(pay);
			os.pushIntegerSet(reward);
		}

		public int id;
		public Map<Integer, Integer> pay;
		public Set<Integer> reward;
	}

	public static class DBRoleLastPayGiftLog implements Stream.IStreamable, Stream.KCloneable<DBRoleLastPayGiftLog>, SStream.IStreamable
	{

		public DBRoleLastPayGiftLog() { }

		public DBRoleLastPayGiftLog(int id, Map<Integer, Integer> dayPayNum, Set<Integer> payDay, Set<Integer> reward)
		{
			this.id = id;
			this.dayPayNum = dayPayNum;
			this.payDay = payDay;
			this.reward = reward;
		}

		public DBRoleLastPayGiftLog ksClone()
		{
			return new DBRoleLastPayGiftLog(id, dayPayNum, payDay, reward);
		}

		@Override
		public DBRoleLastPayGiftLog kdClone()
		{
			DBRoleLastPayGiftLog _kio_clobj = ksClone();
			_kio_clobj.dayPayNum = new TreeMap<Integer, Integer>(dayPayNum);
			_kio_clobj.payDay = new TreeSet<Integer>(payDay);
			_kio_clobj.reward = new TreeSet<Integer>(reward);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			dayPayNum = is.popIntegerIntegerTreeMap();
			payDay = is.popIntegerTreeSet();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerIntegerMap(dayPayNum);
			os.pushIntegerSet(payDay);
			os.pushIntegerSet(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			dayPayNum = is.popIntegerIntegerTreeMap();
			payDay = is.popIntegerTreeSet();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushIntegerIntegerMap(dayPayNum);
			os.pushIntegerSet(payDay);
			os.pushIntegerSet(reward);
		}

		public int id;
		public Map<Integer, Integer> dayPayNum;
		public Set<Integer> payDay;
		public Set<Integer> reward;
	}

	public static class DBRoleActivityChallengeGiftLog implements Stream.IStreamable, Stream.KCloneable<DBRoleActivityChallengeGiftLog>, SStream.IStreamable
	{

		public DBRoleActivityChallengeGiftLog() { }

		public DBRoleActivityChallengeGiftLog(int id, Map<Integer, DBRoleChallengeGiftLog> reward)
		{
			this.id = id;
			this.reward = reward;
		}

		public DBRoleActivityChallengeGiftLog ksClone()
		{
			return new DBRoleActivityChallengeGiftLog(id, reward);
		}

		@Override
		public DBRoleActivityChallengeGiftLog kdClone()
		{
			DBRoleActivityChallengeGiftLog _kio_clobj = ksClone();
			_kio_clobj.reward = Stream.clone(reward);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			reward = is.popIntegerTreeMap(DBRoleChallengeGiftLog.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerMap(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			reward = is.popIntegerTreeMap(DBRoleChallengeGiftLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushIntegerMap(reward);
		}

		public int id;
		public Map<Integer, DBRoleChallengeGiftLog> reward;
	}

	public static class DBRoleChallengeGiftLog implements Stream.IStreamable, Stream.KCloneable<DBRoleChallengeGiftLog>, SStream.IStreamable
	{

		public DBRoleChallengeGiftLog() { }

		public DBRoleChallengeGiftLog(int id, int times, Set<Integer> reward)
		{
			this.id = id;
			this.times = times;
			this.reward = reward;
		}

		public DBRoleChallengeGiftLog ksClone()
		{
			return new DBRoleChallengeGiftLog(id, times, reward);
		}

		@Override
		public DBRoleChallengeGiftLog kdClone()
		{
			DBRoleChallengeGiftLog _kio_clobj = ksClone();
			_kio_clobj.reward = new TreeSet<Integer>(reward);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			times = is.popInteger();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(times);
			os.pushIntegerSet(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			times = is.popInteger();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(times);
			os.pushIntegerSet(reward);
		}

		public int id;
		public int times;
		public Set<Integer> reward;
	}

	public static class DBRolePayGiftLog implements Stream.IStreamable, Stream.KCloneable<DBRolePayGiftLog>, SStream.IStreamable
	{

		public DBRolePayGiftLog() { }

		public DBRolePayGiftLog(int id, int pay, Set<Integer> rewards)
		{
			this.id = id;
			this.pay = pay;
			this.rewards = rewards;
		}

		public DBRolePayGiftLog ksClone()
		{
			return new DBRolePayGiftLog(id, pay, rewards);
		}

		@Override
		public DBRolePayGiftLog kdClone()
		{
			DBRolePayGiftLog _kio_clobj = ksClone();
			_kio_clobj.rewards = new TreeSet<Integer>(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			pay = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(pay);
			os.pushIntegerSet(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			pay = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(pay);
			os.pushIntegerSet(rewards);
		}

		public int id;
		public int pay;
		public Set<Integer> rewards;
	}

	public static class DBRoleConsumeGiftLog implements Stream.IStreamable, Stream.KCloneable<DBRoleConsumeGiftLog>, SStream.IStreamable
	{

		public DBRoleConsumeGiftLog() { }

		public DBRoleConsumeGiftLog(int id, int consume, Set<Integer> rewards)
		{
			this.id = id;
			this.consume = consume;
			this.rewards = rewards;
		}

		public DBRoleConsumeGiftLog ksClone()
		{
			return new DBRoleConsumeGiftLog(id, consume, rewards);
		}

		@Override
		public DBRoleConsumeGiftLog kdClone()
		{
			DBRoleConsumeGiftLog _kio_clobj = ksClone();
			_kio_clobj.rewards = new TreeSet<Integer>(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			consume = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(consume);
			os.pushIntegerSet(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			consume = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(consume);
			os.pushIntegerSet(rewards);
		}

		public int id;
		public int consume;
		public Set<Integer> rewards;
	}

	public static class DBRoleUpgradeGiftLog implements Stream.IStreamable, Stream.KCloneable<DBRoleUpgradeGiftLog>, SStream.IStreamable
	{

		public DBRoleUpgradeGiftLog() { }

		public DBRoleUpgradeGiftLog(int id, Set<Integer> rewards)
		{
			this.id = id;
			this.rewards = rewards;
		}

		public DBRoleUpgradeGiftLog ksClone()
		{
			return new DBRoleUpgradeGiftLog(id, rewards);
		}

		@Override
		public DBRoleUpgradeGiftLog kdClone()
		{
			DBRoleUpgradeGiftLog _kio_clobj = ksClone();
			_kio_clobj.rewards = new TreeSet<Integer>(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerSet(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushIntegerSet(rewards);
		}

		public int id;
		public Set<Integer> rewards;
	}

	public static class DBRoleInvestmentFundLog implements Stream.IStreamable, Stream.KCloneable<DBRoleInvestmentFundLog>, SStream.IStreamable
	{

		public DBRoleInvestmentFundLog() { }

		public DBRoleInvestmentFundLog(int id, int buyTime, Set<Integer> rewards)
		{
			this.id = id;
			this.buyTime = buyTime;
			this.rewards = rewards;
		}

		public DBRoleInvestmentFundLog ksClone()
		{
			return new DBRoleInvestmentFundLog(id, buyTime, rewards);
		}

		@Override
		public DBRoleInvestmentFundLog kdClone()
		{
			DBRoleInvestmentFundLog _kio_clobj = ksClone();
			_kio_clobj.rewards = new TreeSet<Integer>(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buyTime = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buyTime);
			os.pushIntegerSet(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			buyTime = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buyTime);
			os.pushIntegerSet(rewards);
		}

		public int id;
		public int buyTime;
		public Set<Integer> rewards;
	}

	public static class DBRoleGrowthFundLog implements Stream.IStreamable, Stream.KCloneable<DBRoleGrowthFundLog>, SStream.IStreamable
	{

		public DBRoleGrowthFundLog() { }

		public DBRoleGrowthFundLog(int id, int buyCount, Set<Integer> rewards)
		{
			this.id = id;
			this.buyCount = buyCount;
			this.rewards = rewards;
		}

		public DBRoleGrowthFundLog ksClone()
		{
			return new DBRoleGrowthFundLog(id, buyCount, rewards);
		}

		@Override
		public DBRoleGrowthFundLog kdClone()
		{
			DBRoleGrowthFundLog _kio_clobj = ksClone();
			_kio_clobj.rewards = new TreeSet<Integer>(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buyCount = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buyCount);
			os.pushIntegerSet(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			buyCount = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buyCount);
			os.pushIntegerSet(rewards);
		}

		public int id;
		public int buyCount;
		public Set<Integer> rewards;
	}

	public static class DBRoleExchangeGiftLog implements Stream.IStreamable, Stream.KCloneable<DBRoleExchangeGiftLog>, SStream.IStreamable
	{

		public DBRoleExchangeGiftLog() { }

		public DBRoleExchangeGiftLog(int id, Map<Integer, Integer> exchangeCount)
		{
			this.id = id;
			this.exchangeCount = exchangeCount;
		}

		public DBRoleExchangeGiftLog ksClone()
		{
			return new DBRoleExchangeGiftLog(id, exchangeCount);
		}

		@Override
		public DBRoleExchangeGiftLog kdClone()
		{
			DBRoleExchangeGiftLog _kio_clobj = ksClone();
			_kio_clobj.exchangeCount = new TreeMap<Integer, Integer>(exchangeCount);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			exchangeCount = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerIntegerMap(exchangeCount);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			exchangeCount = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushIntegerIntegerMap(exchangeCount);
		}

		public int id;
		public Map<Integer, Integer> exchangeCount;
	}

	public static class DBRoleLoginGiftLog implements Stream.IStreamable, Stream.KCloneable<DBRoleLoginGiftLog>, SStream.IStreamable
	{

		public DBRoleLoginGiftLog() { }

		public DBRoleLoginGiftLog(int id, int loginDays, int lastLoginTime, Set<Integer> rewards)
		{
			this.id = id;
			this.loginDays = loginDays;
			this.lastLoginTime = lastLoginTime;
			this.rewards = rewards;
		}

		public DBRoleLoginGiftLog ksClone()
		{
			return new DBRoleLoginGiftLog(id, loginDays, lastLoginTime, rewards);
		}

		@Override
		public DBRoleLoginGiftLog kdClone()
		{
			DBRoleLoginGiftLog _kio_clobj = ksClone();
			_kio_clobj.rewards = new TreeSet<Integer>(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			loginDays = is.popInteger();
			lastLoginTime = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(loginDays);
			os.pushInteger(lastLoginTime);
			os.pushIntegerSet(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			loginDays = is.popInteger();
			lastLoginTime = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(loginDays);
			os.pushInteger(lastLoginTime);
			os.pushIntegerSet(rewards);
		}

		public int id;
		public int loginDays;
		public int lastLoginTime;
		public Set<Integer> rewards;
	}

	public static class DBGroupBuy implements Stream.IStreamable, Stream.KCloneable<DBGroupBuy>
	{

		public DBGroupBuy() { }

		public DBGroupBuy(int id, Map<Integer, Integer> buyLogs, Set<Integer> buyRoles)
		{
			this.id = id;
			this.buyLogs = buyLogs;
			this.buyRoles = buyRoles;
		}

		public DBGroupBuy ksClone()
		{
			return new DBGroupBuy(id, buyLogs, buyRoles);
		}

		@Override
		public DBGroupBuy kdClone()
		{
			DBGroupBuy _kio_clobj = ksClone();
			_kio_clobj.buyLogs = new TreeMap<Integer, Integer>(buyLogs);
			_kio_clobj.buyRoles = new TreeSet<Integer>(buyRoles);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buyLogs = is.popIntegerIntegerTreeMap();
			buyRoles = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerIntegerMap(buyLogs);
			os.pushIntegerSet(buyRoles);
		}

		public int id;
		public Map<Integer, Integer> buyLogs;
		public Set<Integer> buyRoles;
	}

	public static class DBGoodsGroupBuyLog implements Stream.IStreamable, Stream.KCloneable<DBGoodsGroupBuyLog>, SStream.IStreamable
	{

		public DBGoodsGroupBuyLog() { }

		public DBGoodsGroupBuyLog(int id, int allBuyTimes, int dayBuyTimes)
		{
			this.id = id;
			this.allBuyTimes = allBuyTimes;
			this.dayBuyTimes = dayBuyTimes;
		}

		public DBGoodsGroupBuyLog ksClone()
		{
			return new DBGoodsGroupBuyLog(id, allBuyTimes, dayBuyTimes);
		}

		@Override
		public DBGoodsGroupBuyLog kdClone()
		{
			DBGoodsGroupBuyLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			allBuyTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(allBuyTimes);
			os.pushInteger(dayBuyTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			allBuyTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(allBuyTimes);
			os.pushInteger(dayBuyTimes);
		}

		public int id;
		public int allBuyTimes;
		public int dayBuyTimes;
	}

	public static class DBRoleGroupBuyLog implements Stream.IStreamable, Stream.KCloneable<DBRoleGroupBuyLog>, SStream.IStreamable
	{

		public DBRoleGroupBuyLog() { }

		public DBRoleGroupBuyLog(int logTime, Map<Integer, DBGoodsGroupBuyLog> logs)
		{
			this.logTime = logTime;
			this.logs = logs;
		}

		public DBRoleGroupBuyLog ksClone()
		{
			return new DBRoleGroupBuyLog(logTime, logs);
		}

		@Override
		public DBRoleGroupBuyLog kdClone()
		{
			DBRoleGroupBuyLog _kio_clobj = ksClone();
			_kio_clobj.logs = Stream.clone(logs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			logTime = is.popInteger();
			logs = is.popIntegerTreeMap(DBGoodsGroupBuyLog.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(logTime);
			os.pushIntegerMap(logs);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			logTime = is.popInteger();
			logs = is.popIntegerTreeMap(DBGoodsGroupBuyLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(logTime);
			os.pushIntegerMap(logs);
		}

		public int logTime;
		public Map<Integer, DBGoodsGroupBuyLog> logs;
	}

	public static class DBRoleFlashSaleLog implements Stream.IStreamable, Stream.KCloneable<DBRoleFlashSaleLog>, SStream.IStreamable
	{

		public DBRoleFlashSaleLog() { }

		public DBRoleFlashSaleLog(int logTime, Map<Integer, Integer> logs)
		{
			this.logTime = logTime;
			this.logs = logs;
		}

		public DBRoleFlashSaleLog ksClone()
		{
			return new DBRoleFlashSaleLog(logTime, logs);
		}

		@Override
		public DBRoleFlashSaleLog kdClone()
		{
			DBRoleFlashSaleLog _kio_clobj = ksClone();
			_kio_clobj.logs = new TreeMap<Integer, Integer>(logs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			logTime = is.popInteger();
			logs = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(logTime);
			os.pushIntegerIntegerMap(logs);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			logTime = is.popInteger();
			logs = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(logTime);
			os.pushIntegerIntegerMap(logs);
		}

		public int logTime;
		public Map<Integer, Integer> logs;
	}

	public static class DBRoleUpgradePurchaseLog implements Stream.IStreamable, Stream.KCloneable<DBRoleUpgradePurchaseLog>, SStream.IStreamable
	{

		public DBRoleUpgradePurchaseLog() { }

		public DBRoleUpgradePurchaseLog(int id, int reward)
		{
			this.id = id;
			this.reward = reward;
		}

		public DBRoleUpgradePurchaseLog ksClone()
		{
			return new DBRoleUpgradePurchaseLog(id, reward);
		}

		@Override
		public DBRoleUpgradePurchaseLog kdClone()
		{
			DBRoleUpgradePurchaseLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			reward = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			reward = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(reward);
		}

		public int id;
		public int reward;
	}

	public static class DBRoleDirectPurchaseLog implements Stream.IStreamable, Stream.KCloneable<DBRoleDirectPurchaseLog>, SStream.IStreamable
	{

		public DBRoleDirectPurchaseLog() { }

		public DBRoleDirectPurchaseLog(int id, int lastRewardTime, Map<Integer, Integer> rewardTimes)
		{
			this.id = id;
			this.lastRewardTime = lastRewardTime;
			this.rewardTimes = rewardTimes;
		}

		public DBRoleDirectPurchaseLog ksClone()
		{
			return new DBRoleDirectPurchaseLog(id, lastRewardTime, rewardTimes);
		}

		@Override
		public DBRoleDirectPurchaseLog kdClone()
		{
			DBRoleDirectPurchaseLog _kio_clobj = ksClone();
			_kio_clobj.rewardTimes = new TreeMap<Integer, Integer>(rewardTimes);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			lastRewardTime = is.popInteger();
			rewardTimes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(lastRewardTime);
			os.pushIntegerIntegerMap(rewardTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			lastRewardTime = is.popInteger();
			rewardTimes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(lastRewardTime);
			os.pushIntegerIntegerMap(rewardTimes);
		}

		public int id;
		public int lastRewardTime;
		public Map<Integer, Integer> rewardTimes;
	}

	public static class DBRoleOneArmBanditLog implements Stream.IStreamable, Stream.KCloneable<DBRoleOneArmBanditLog>, SStream.IStreamable
	{

		public DBRoleOneArmBanditLog() { }

		public DBRoleOneArmBanditLog(int id, int pay, int useTimes)
		{
			this.id = id;
			this.pay = pay;
			this.useTimes = useTimes;
		}

		public DBRoleOneArmBanditLog ksClone()
		{
			return new DBRoleOneArmBanditLog(id, pay, useTimes);
		}

		@Override
		public DBRoleOneArmBanditLog kdClone()
		{
			DBRoleOneArmBanditLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			pay = is.popInteger();
			useTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(pay);
			os.pushInteger(useTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			pay = is.popInteger();
			useTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(pay);
			os.pushInteger(useTimes);
		}

		public int id;
		public int pay;
		public int useTimes;
	}

	public static class DBRoleLuckyRollerLog implements Stream.IStreamable, Stream.KCloneable<DBRoleLuckyRollerLog>, SStream.IStreamable
	{

		public DBRoleLuckyRollerLog() { }

		public DBRoleLuckyRollerLog(int id, int seq, int lastPlayTime, int dayPlayTimes)
		{
			this.id = id;
			this.seq = seq;
			this.lastPlayTime = lastPlayTime;
			this.dayPlayTimes = dayPlayTimes;
		}

		public DBRoleLuckyRollerLog ksClone()
		{
			return new DBRoleLuckyRollerLog(id, seq, lastPlayTime, dayPlayTimes);
		}

		@Override
		public DBRoleLuckyRollerLog kdClone()
		{
			DBRoleLuckyRollerLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			seq = is.popInteger();
			lastPlayTime = is.popInteger();
			dayPlayTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(seq);
			os.pushInteger(lastPlayTime);
			os.pushInteger(dayPlayTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			seq = is.popInteger();
			lastPlayTime = is.popInteger();
			dayPlayTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(seq);
			os.pushInteger(lastPlayTime);
			os.pushInteger(dayPlayTimes);
		}

		public int id;
		public int seq;
		public int lastPlayTime;
		public int dayPlayTimes;
	}

	public static class DBRoleGiftPackageLog implements Stream.IStreamable, Stream.KCloneable<DBRoleGiftPackageLog>
	{

		public DBRoleGiftPackageLog() { }

		public DBRoleGiftPackageLog(int id, Set<String> logs)
		{
			this.id = id;
			this.logs = logs;
		}

		public DBRoleGiftPackageLog ksClone()
		{
			return new DBRoleGiftPackageLog(id, logs);
		}

		@Override
		public DBRoleGiftPackageLog kdClone()
		{
			DBRoleGiftPackageLog _kio_clobj = ksClone();
			_kio_clobj.logs = new TreeSet<String>(logs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			logs = is.popStringTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushStringSet(logs);
		}

		public int id;
		public Set<String> logs;
	}

	public static class DBGiftPack implements Stream.IStreamable, Stream.KCloneable<DBGiftPack>
	{

		public DBGiftPack() { }

		public DBGiftPack(int id, Map<String, Integer> useCount)
		{
			this.id = id;
			this.useCount = useCount;
		}

		public DBGiftPack ksClone()
		{
			return new DBGiftPack(id, useCount);
		}

		@Override
		public DBGiftPack kdClone()
		{
			DBGiftPack _kio_clobj = ksClone();
			_kio_clobj.useCount = new TreeMap<String, Integer>(useCount);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			useCount = is.popStringIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushStringIntegerMap(useCount);
		}

		public int id;
		public Map<String, Integer> useCount;
	}

	public static class DBActivityRank implements Stream.IStreamable, Stream.KCloneable<DBActivityRank>, SStream.IStreamable
	{

		public DBActivityRank() { }

		public DBActivityRank(int id, int lastTipMailDay, List<RankRole> ranks)
		{
			this.id = id;
			this.lastTipMailDay = lastTipMailDay;
			this.ranks = ranks;
		}

		public DBActivityRank ksClone()
		{
			return new DBActivityRank(id, lastTipMailDay, ranks);
		}

		@Override
		public DBActivityRank kdClone()
		{
			DBActivityRank _kio_clobj = ksClone();
			_kio_clobj.ranks = Stream.clone(ranks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			lastTipMailDay = is.popInteger();
			ranks = is.popList(RankRole.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(lastTipMailDay);
			os.pushList(ranks);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			lastTipMailDay = is.popInteger();
			ranks = is.popList(RankRole.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(lastTipMailDay);
			os.pushList(ranks);
		}

		public int id;
		public int lastTipMailDay;
		public List<RankRole> ranks;
	}

	public static class DBRolePayRankLog implements Stream.IStreamable, Stream.KCloneable<DBRolePayRankLog>, SStream.IStreamable
	{

		public DBRolePayRankLog() { }

		public DBRolePayRankLog(int id, int pay)
		{
			this.id = id;
			this.pay = pay;
		}

		public DBRolePayRankLog ksClone()
		{
			return new DBRolePayRankLog(id, pay);
		}

		@Override
		public DBRolePayRankLog kdClone()
		{
			DBRolePayRankLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			pay = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(pay);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			pay = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(pay);
		}

		public int id;
		public int pay;
	}

	public static class DBRoleConsumeRankLog implements Stream.IStreamable, Stream.KCloneable<DBRoleConsumeRankLog>, SStream.IStreamable
	{

		public DBRoleConsumeRankLog() { }

		public DBRoleConsumeRankLog(int id, int consume)
		{
			this.id = id;
			this.consume = consume;
		}

		public DBRoleConsumeRankLog ksClone()
		{
			return new DBRoleConsumeRankLog(id, consume);
		}

		@Override
		public DBRoleConsumeRankLog kdClone()
		{
			DBRoleConsumeRankLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			consume = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(consume);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			consume = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(consume);
		}

		public int id;
		public int consume;
	}

	public static class DBGameConfData implements Stream.IStreamable, Stream.KCloneable<DBGameConfData>
	{

		public DBGameConfData() { }

		public DBGameConfData(Map<Integer, DBGroupBuy> groupBuy, Map<Integer, DBGiftPack> giftPack, Map<Integer, DBActivityRank> payRank, Map<Integer, DBActivityRank> consumeRank, 
		                      byte padding13, byte padding14, int padding2)
		{
			this.groupBuy = groupBuy;
			this.giftPack = giftPack;
			this.payRank = payRank;
			this.consumeRank = consumeRank;
			this.padding13 = padding13;
			this.padding14 = padding14;
			this.padding2 = padding2;
		}

		public DBGameConfData ksClone()
		{
			return new DBGameConfData(groupBuy, giftPack, payRank, consumeRank, 
			                          padding13, padding14, padding2);
		}

		@Override
		public DBGameConfData kdClone()
		{
			DBGameConfData _kio_clobj = ksClone();
			_kio_clobj.groupBuy = Stream.clone(groupBuy);
			_kio_clobj.giftPack = Stream.clone(giftPack);
			_kio_clobj.payRank = Stream.clone(payRank);
			_kio_clobj.consumeRank = Stream.clone(consumeRank);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupBuy = is.popIntegerTreeMap(DBGroupBuy.class);
			giftPack = is.popIntegerTreeMap(DBGiftPack.class);
			payRank = is.popIntegerTreeMap(DBActivityRank.class);
			consumeRank = is.popIntegerTreeMap(DBActivityRank.class);
			padding13 = is.popByte();
			padding14 = is.popByte();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(groupBuy);
			os.pushIntegerMap(giftPack);
			os.pushIntegerMap(payRank);
			os.pushIntegerMap(consumeRank);
			os.pushByte(padding13);
			os.pushByte(padding14);
			os.pushInteger(padding2);
		}

		public Map<Integer, DBGroupBuy> groupBuy;
		public Map<Integer, DBGiftPack> giftPack;
		public Map<Integer, DBActivityRank> payRank;
		public Map<Integer, DBActivityRank> consumeRank;
		public byte padding13;
		public byte padding14;
		public int padding2;
	}

	public static class DBArenaReward implements Stream.IStreamable, Stream.KCloneable<DBArenaReward>, SStream.IStreamable
	{

		public DBArenaReward() { }

		public DBArenaReward(int rewardTime, Map<Integer, Integer> rewardRoles)
		{
			this.rewardTime = rewardTime;
			this.rewardRoles = rewardRoles;
		}

		public DBArenaReward ksClone()
		{
			return new DBArenaReward(rewardTime, rewardRoles);
		}

		@Override
		public DBArenaReward kdClone()
		{
			DBArenaReward _kio_clobj = ksClone();
			_kio_clobj.rewardRoles = new HashMap<Integer, Integer>(rewardRoles);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewardTime = is.popInteger();
			rewardRoles = is.popIntegerIntegerHashMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rewardTime);
			os.pushIntegerIntegerMap(rewardRoles);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rewardTime = is.popInteger();
			rewardRoles = is.popIntegerIntegerHashMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(rewardTime);
			os.pushIntegerIntegerMap(rewardRoles);
		}

		public int rewardTime;
		// role - rank
		public Map<Integer, Integer> rewardRoles;
	}

	// 普通竞技场
	public static class DBArena implements Stream.IStreamable, Stream.KCloneable<DBArena>, SStream.IStreamable
	{

		public DBArena() { }

		public DBArena(Map<Integer, Integer> normal, DBArenaReward reward, int padding)
		{
			this.normal = normal;
			this.reward = reward;
			this.padding = padding;
		}

		public DBArena ksClone()
		{
			return new DBArena(normal, reward, padding);
		}

		@Override
		public DBArena kdClone()
		{
			DBArena _kio_clobj = ksClone();
			_kio_clobj.normal = new HashMap<Integer, Integer>(normal);
			_kio_clobj.reward = Stream.clone(reward);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			normal = is.popIntegerIntegerHashMap();
			if( reward == null )
				reward = new DBArenaReward();
			is.pop(reward);
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(normal);
			os.push(reward);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			normal = is.popIntegerIntegerHashMap();
			reward = is.pop(DBArenaReward.class);
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(normal);
			os.push(reward);
			os.pushInteger(padding);
		}

		// rank - role
		public Map<Integer, Integer> normal;
		public DBArenaReward reward;
		public int padding;
	}

	// 会武
	public static class DBSuperArenaData implements Stream.IStreamable, Stream.KCloneable<DBSuperArenaData>, SStream.IStreamable
	{

		public DBSuperArenaData() { }

		public DBSuperArenaData(DBRoleRanks weekRank, DBRoleRanks historyRank, int weekRankLastClearWeek, int padding)
		{
			this.weekRank = weekRank;
			this.historyRank = historyRank;
			this.weekRankLastClearWeek = weekRankLastClearWeek;
			this.padding = padding;
		}

		public DBSuperArenaData ksClone()
		{
			return new DBSuperArenaData(weekRank, historyRank, weekRankLastClearWeek, padding);
		}

		@Override
		public DBSuperArenaData kdClone()
		{
			DBSuperArenaData _kio_clobj = ksClone();
			_kio_clobj.weekRank = Stream.clone(weekRank);
			_kio_clobj.historyRank = Stream.clone(historyRank);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( weekRank == null )
				weekRank = new DBRoleRanks();
			is.pop(weekRank);
			if( historyRank == null )
				historyRank = new DBRoleRanks();
			is.pop(historyRank);
			weekRankLastClearWeek = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(weekRank);
			os.push(historyRank);
			os.pushInteger(weekRankLastClearWeek);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			weekRank = is.pop(DBRoleRanks.class);
			historyRank = is.pop(DBRoleRanks.class);
			weekRankLastClearWeek = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(weekRank);
			os.push(historyRank);
			os.pushInteger(weekRankLastClearWeek);
			os.pushInteger(padding);
		}

		public DBRoleRanks weekRank;
		public DBRoleRanks historyRank;
		public int weekRankLastClearWeek;
		public int padding;
	}

	public static class DBBWArena implements Stream.IStreamable, Stream.KCloneable<DBBWArena>, SStream.IStreamable
	{

		public DBBWArena() { }

		public DBBWArena(List<BWArenaRankRole> whiteRanks, List<BWArenaRankRole> whiteSnapshot, List<BWArenaRankRole> blackRanks, List<BWArenaRankRole> blackSnapshot, 
		                 Map<Integer, BWArenaRewardRole> whiteRankRewards, Map<Integer, BWArenaRewardRole> blackRankRewards, int rankRefreshStamp, int rankRewardStamp, 
		                 Map<Integer, DBBWArenaLvlCache> lvlCaches, int padding)
		{
			this.whiteRanks = whiteRanks;
			this.whiteSnapshot = whiteSnapshot;
			this.blackRanks = blackRanks;
			this.blackSnapshot = blackSnapshot;
			this.whiteRankRewards = whiteRankRewards;
			this.blackRankRewards = blackRankRewards;
			this.rankRefreshStamp = rankRefreshStamp;
			this.rankRewardStamp = rankRewardStamp;
			this.lvlCaches = lvlCaches;
			this.padding = padding;
		}

		public DBBWArena ksClone()
		{
			return new DBBWArena(whiteRanks, whiteSnapshot, blackRanks, blackSnapshot, 
			                     whiteRankRewards, blackRankRewards, rankRefreshStamp, rankRewardStamp, 
			                     lvlCaches, padding);
		}

		@Override
		public DBBWArena kdClone()
		{
			DBBWArena _kio_clobj = ksClone();
			_kio_clobj.whiteRanks = Stream.clone(whiteRanks);
			_kio_clobj.whiteSnapshot = Stream.clone(whiteSnapshot);
			_kio_clobj.blackRanks = Stream.clone(blackRanks);
			_kio_clobj.blackSnapshot = Stream.clone(blackSnapshot);
			_kio_clobj.whiteRankRewards = Stream.clone(whiteRankRewards);
			_kio_clobj.blackRankRewards = Stream.clone(blackRankRewards);
			_kio_clobj.lvlCaches = Stream.clone(lvlCaches);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			whiteRanks = is.popList(BWArenaRankRole.class);
			whiteSnapshot = is.popList(BWArenaRankRole.class);
			blackRanks = is.popList(BWArenaRankRole.class);
			blackSnapshot = is.popList(BWArenaRankRole.class);
			whiteRankRewards = is.popIntegerTreeMap(BWArenaRewardRole.class);
			blackRankRewards = is.popIntegerTreeMap(BWArenaRewardRole.class);
			rankRefreshStamp = is.popInteger();
			rankRewardStamp = is.popInteger();
			lvlCaches = is.popIntegerTreeMap(DBBWArenaLvlCache.class);
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(whiteRanks);
			os.pushList(whiteSnapshot);
			os.pushList(blackRanks);
			os.pushList(blackSnapshot);
			os.pushIntegerMap(whiteRankRewards);
			os.pushIntegerMap(blackRankRewards);
			os.pushInteger(rankRefreshStamp);
			os.pushInteger(rankRewardStamp);
			os.pushIntegerMap(lvlCaches);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			whiteRanks = is.popList(BWArenaRankRole.class);
			whiteSnapshot = is.popList(BWArenaRankRole.class);
			blackRanks = is.popList(BWArenaRankRole.class);
			blackSnapshot = is.popList(BWArenaRankRole.class);
			whiteRankRewards = is.popIntegerTreeMap(BWArenaRewardRole.class);
			blackRankRewards = is.popIntegerTreeMap(BWArenaRewardRole.class);
			rankRefreshStamp = is.popInteger();
			rankRewardStamp = is.popInteger();
			lvlCaches = is.popIntegerTreeMap(DBBWArenaLvlCache.class);
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushList(whiteRanks);
			os.pushList(whiteSnapshot);
			os.pushList(blackRanks);
			os.pushList(blackSnapshot);
			os.pushIntegerMap(whiteRankRewards);
			os.pushIntegerMap(blackRankRewards);
			os.pushInteger(rankRefreshStamp);
			os.pushInteger(rankRewardStamp);
			os.pushIntegerMap(lvlCaches);
			os.pushInteger(padding);
		}

		public List<BWArenaRankRole> whiteRanks;
		public List<BWArenaRankRole> whiteSnapshot;
		public List<BWArenaRankRole> blackRanks;
		public List<BWArenaRankRole> blackSnapshot;
		public Map<Integer, BWArenaRewardRole> whiteRankRewards;
		public Map<Integer, BWArenaRewardRole> blackRankRewards;
		public int rankRefreshStamp;
		public int rankRewardStamp;
		public Map<Integer, DBBWArenaLvlCache> lvlCaches;
		public int padding;
	}

	public static class DBBWArenaLvlCache implements Stream.IStreamable, Stream.KCloneable<DBBWArenaLvlCache>, SStream.IStreamable
	{

		public DBBWArenaLvlCache() { }

		public DBBWArenaLvlCache(Map<Integer, Byte> cache)
		{
			this.cache = cache;
		}

		public DBBWArenaLvlCache ksClone()
		{
			return new DBBWArenaLvlCache(cache);
		}

		@Override
		public DBBWArenaLvlCache kdClone()
		{
			DBBWArenaLvlCache _kio_clobj = ksClone();
			_kio_clobj.cache = new TreeMap<Integer, Byte>(cache);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cache = is.popIntegerByteTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerByteMap(cache);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			cache = is.popIntegerByteTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerByteMap(cache);
		}

		public Map<Integer, Byte> cache;
	}

	public static class BWArenaRankRole implements Stream.IStreamable, Stream.KCloneable<BWArenaRankRole>, SStream.IStreamable
	{

		public BWArenaRankRole() { }

		public BWArenaRankRole(RoleSocial roleSocial, int lvl, int score)
		{
			this.roleSocial = roleSocial;
			this.lvl = lvl;
			this.score = score;
		}

		public BWArenaRankRole ksClone()
		{
			return new BWArenaRankRole(roleSocial, lvl, score);
		}

		@Override
		public BWArenaRankRole kdClone()
		{
			BWArenaRankRole _kio_clobj = ksClone();
			_kio_clobj.roleSocial = Stream.clone(roleSocial);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( roleSocial == null )
				roleSocial = new RoleSocial();
			is.pop(roleSocial);
			lvl = is.popInteger();
			score = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(roleSocial);
			os.pushInteger(lvl);
			os.pushInteger(score);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleSocial = is.pop(RoleSocial.class);
			lvl = is.popInteger();
			score = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(roleSocial);
			os.pushInteger(lvl);
			os.pushInteger(score);
		}

		public RoleSocial roleSocial;
		public int lvl;
		public int score;
	}

	public static class BWArenaRewardRole implements Stream.IStreamable, Stream.KCloneable<BWArenaRewardRole>, SStream.IStreamable
	{

		public BWArenaRewardRole() { }

		public BWArenaRewardRole(int id, String name, int rank)
		{
			this.id = id;
			this.name = name;
			this.rank = rank;
		}

		public BWArenaRewardRole ksClone()
		{
			return new BWArenaRewardRole(id, name, rank);
		}

		@Override
		public BWArenaRewardRole kdClone()
		{
			BWArenaRewardRole _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			rank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(rank);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			rank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(rank);
		}

		public int id;
		public String name;
		public int rank;
	}

	public static class RoleNormalArenaData implements Stream.IStreamable, Stream.KCloneable<RoleNormalArenaData>, SStream.IStreamable
	{

		public RoleNormalArenaData() { }

		public RoleNormalArenaData(int winTimes, int enterTimes, int point, int historyPoint, 
		                           int score, List<Integer> rewardScores, int timesUsed, int timesBuy, 
		                           int lastFightTime, int bestRank, List<Integer> defencePets, List<DBRoleArenaLog> logs, 
		                           int top500Days, int curTop500Days, byte hideDefence, int padding)
		{
			this.winTimes = winTimes;
			this.enterTimes = enterTimes;
			this.point = point;
			this.historyPoint = historyPoint;
			this.score = score;
			this.rewardScores = rewardScores;
			this.timesUsed = timesUsed;
			this.timesBuy = timesBuy;
			this.lastFightTime = lastFightTime;
			this.bestRank = bestRank;
			this.defencePets = defencePets;
			this.logs = logs;
			this.top500Days = top500Days;
			this.curTop500Days = curTop500Days;
			this.hideDefence = hideDefence;
			this.padding = padding;
		}

		public RoleNormalArenaData ksClone()
		{
			return new RoleNormalArenaData(winTimes, enterTimes, point, historyPoint, 
			                               score, rewardScores, timesUsed, timesBuy, 
			                               lastFightTime, bestRank, defencePets, logs, 
			                               top500Days, curTop500Days, hideDefence, padding);
		}

		@Override
		public RoleNormalArenaData kdClone()
		{
			RoleNormalArenaData _kio_clobj = ksClone();
			_kio_clobj.rewardScores = new ArrayList<Integer>(rewardScores);
			_kio_clobj.defencePets = new ArrayList<Integer>(defencePets);
			_kio_clobj.logs = Stream.clone(logs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			winTimes = is.popInteger();
			enterTimes = is.popInteger();
			point = is.popInteger();
			historyPoint = is.popInteger();
			score = is.popInteger();
			rewardScores = is.popIntegerList();
			timesUsed = is.popInteger();
			timesBuy = is.popInteger();
			lastFightTime = is.popInteger();
			bestRank = is.popInteger();
			defencePets = is.popIntegerList();
			logs = is.popList(DBRoleArenaLog.class);
			top500Days = is.popInteger();
			curTop500Days = is.popInteger();
			hideDefence = is.popByte();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(winTimes);
			os.pushInteger(enterTimes);
			os.pushInteger(point);
			os.pushInteger(historyPoint);
			os.pushInteger(score);
			os.pushIntegerList(rewardScores);
			os.pushInteger(timesUsed);
			os.pushInteger(timesBuy);
			os.pushInteger(lastFightTime);
			os.pushInteger(bestRank);
			os.pushIntegerList(defencePets);
			os.pushList(logs);
			os.pushInteger(top500Days);
			os.pushInteger(curTop500Days);
			os.pushByte(hideDefence);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			winTimes = is.popInteger();
			enterTimes = is.popInteger();
			point = is.popInteger();
			historyPoint = is.popInteger();
			score = is.popInteger();
			rewardScores = is.popIntegerList();
			timesUsed = is.popInteger();
			timesBuy = is.popInteger();
			lastFightTime = is.popInteger();
			bestRank = is.popInteger();
			defencePets = is.popIntegerList();
			logs = is.popList(DBRoleArenaLog.class);
			top500Days = is.popInteger();
			curTop500Days = is.popInteger();
			hideDefence = is.popByte();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(winTimes);
			os.pushInteger(enterTimes);
			os.pushInteger(point);
			os.pushInteger(historyPoint);
			os.pushInteger(score);
			os.pushIntegerList(rewardScores);
			os.pushInteger(timesUsed);
			os.pushInteger(timesBuy);
			os.pushInteger(lastFightTime);
			os.pushInteger(bestRank);
			os.pushIntegerList(defencePets);
			os.pushList(logs);
			os.pushInteger(top500Days);
			os.pushInteger(curTop500Days);
			os.pushByte(hideDefence);
			os.pushInteger(padding);
		}

		public int winTimes;
		public int enterTimes;
		public int point;
		public int historyPoint;
		public int score;
		public List<Integer> rewardScores;
		public int timesUsed;
		public int timesBuy;
		public int lastFightTime;
		public int bestRank;
		public List<Integer> defencePets;
		public List<DBRoleArenaLog> logs;
		public int top500Days;
		public int curTop500Days;
		public byte hideDefence;
		public int padding;
	}

	public static class RoleSuperArenaData implements Stream.IStreamable, Stream.KCloneable<RoleSuperArenaData>, SStream.IStreamable
	{

		public RoleSuperArenaData() { }

		public RoleSuperArenaData(int weekHonor, int rankClearTime, int point, int historyPoint, 
		                          Map<Integer, SuperArenaLog> logs, Set<Integer> pets, int padding)
		{
			this.weekHonor = weekHonor;
			this.rankClearTime = rankClearTime;
			this.point = point;
			this.historyPoint = historyPoint;
			this.logs = logs;
			this.pets = pets;
			this.padding = padding;
		}

		public RoleSuperArenaData ksClone()
		{
			return new RoleSuperArenaData(weekHonor, rankClearTime, point, historyPoint, 
			                              logs, pets, padding);
		}

		@Override
		public RoleSuperArenaData kdClone()
		{
			RoleSuperArenaData _kio_clobj = ksClone();
			_kio_clobj.logs = Stream.clone(logs);
			_kio_clobj.pets = new TreeSet<Integer>(pets);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weekHonor = is.popInteger();
			rankClearTime = is.popInteger();
			point = is.popInteger();
			historyPoint = is.popInteger();
			logs = is.popIntegerTreeMap(SuperArenaLog.class);
			pets = is.popIntegerTreeSet();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weekHonor);
			os.pushInteger(rankClearTime);
			os.pushInteger(point);
			os.pushInteger(historyPoint);
			os.pushIntegerMap(logs);
			os.pushIntegerSet(pets);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			weekHonor = is.popInteger();
			rankClearTime = is.popInteger();
			point = is.popInteger();
			historyPoint = is.popInteger();
			logs = is.popIntegerTreeMap(SuperArenaLog.class);
			pets = is.popIntegerTreeSet();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(weekHonor);
			os.pushInteger(rankClearTime);
			os.pushInteger(point);
			os.pushInteger(historyPoint);
			os.pushIntegerMap(logs);
			os.pushIntegerSet(pets);
			os.pushInteger(padding);
		}

		public int weekHonor;
		public int rankClearTime;
		public int point;
		public int historyPoint;
		public Map<Integer, SuperArenaLog> logs;
		public Set<Integer> pets;
		public int padding;
	}

	public static class SuperArenaLog implements Stream.IStreamable, Stream.KCloneable<SuperArenaLog>, SStream.IStreamable
	{

		public SuperArenaLog() { }

		public SuperArenaLog(int dayEnterTimes, int enterTimes, int winTimes, int dayHonor, 
		                     int padding, short dayFailedStreak, short elo)
		{
			this.dayEnterTimes = dayEnterTimes;
			this.enterTimes = enterTimes;
			this.winTimes = winTimes;
			this.dayHonor = dayHonor;
			this.padding = padding;
			this.dayFailedStreak = dayFailedStreak;
			this.elo = elo;
		}

		public SuperArenaLog ksClone()
		{
			return new SuperArenaLog(dayEnterTimes, enterTimes, winTimes, dayHonor, 
			                         padding, dayFailedStreak, elo);
		}

		@Override
		public SuperArenaLog kdClone()
		{
			SuperArenaLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayEnterTimes = is.popInteger();
			enterTimes = is.popInteger();
			winTimes = is.popInteger();
			dayHonor = is.popInteger();
			padding = is.popInteger();
			dayFailedStreak = is.popShort();
			elo = is.popShort();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayEnterTimes);
			os.pushInteger(enterTimes);
			os.pushInteger(winTimes);
			os.pushInteger(dayHonor);
			os.pushInteger(padding);
			os.pushShort(dayFailedStreak);
			os.pushShort(elo);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayEnterTimes = is.popInteger();
			enterTimes = is.popInteger();
			winTimes = is.popInteger();
			dayHonor = is.popInteger();
			padding = is.popInteger();
			dayFailedStreak = is.popShort();
			elo = is.popShort();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dayEnterTimes);
			os.pushInteger(enterTimes);
			os.pushInteger(winTimes);
			os.pushInteger(dayHonor);
			os.pushInteger(padding);
			os.pushShort(dayFailedStreak);
			os.pushShort(elo);
		}

		public int dayEnterTimes;
		public int enterTimes;
		public int winTimes;
		public int dayHonor;
		public int padding;
		public short dayFailedStreak;
		public short elo;
	}

	public static class DBRoleArenaData implements Stream.IStreamable, Stream.KCloneable<DBRoleArenaData>, SStream.IStreamable
	{

		public DBRoleArenaData() { }

		public DBRoleArenaData(RoleNormalArenaData normal, RoleSuperArenaData superarena, RoleBWArenaData bwarena, int padding)
		{
			this.normal = normal;
			this.superarena = superarena;
			this.bwarena = bwarena;
			this.padding = padding;
		}

		public DBRoleArenaData ksClone()
		{
			return new DBRoleArenaData(normal, superarena, bwarena, padding);
		}

		@Override
		public DBRoleArenaData kdClone()
		{
			DBRoleArenaData _kio_clobj = ksClone();
			_kio_clobj.normal = Stream.clone(normal);
			_kio_clobj.superarena = Stream.clone(superarena);
			_kio_clobj.bwarena = Stream.clone(bwarena);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( normal == null )
				normal = new RoleNormalArenaData();
			is.pop(normal);
			if( superarena == null )
				superarena = new RoleSuperArenaData();
			is.pop(superarena);
			if( bwarena == null )
				bwarena = new RoleBWArenaData();
			is.pop(bwarena);
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(normal);
			os.push(superarena);
			os.push(bwarena);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			normal = is.pop(RoleNormalArenaData.class);
			superarena = is.pop(RoleSuperArenaData.class);
			bwarena = is.pop(RoleBWArenaData.class);
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(normal);
			os.push(superarena);
			os.push(bwarena);
			os.pushInteger(padding);
		}

		public RoleNormalArenaData normal;
		public RoleSuperArenaData superarena;
		public RoleBWArenaData bwarena;
		public int padding;
	}

	public static class DBRoleArenaLog implements Stream.IStreamable, Stream.KCloneable<DBRoleArenaLog>, SStream.IStreamable
	{

		public DBRoleArenaLog() { }

		public DBRoleArenaLog(int time, int win, int attackingSideRank, int defendingSideRank, 
		                      BattleArrayProfile attackingSide, BattleArrayProfile defendingSide)
		{
			this.time = time;
			this.win = win;
			this.attackingSideRank = attackingSideRank;
			this.defendingSideRank = defendingSideRank;
			this.attackingSide = attackingSide;
			this.defendingSide = defendingSide;
		}

		public DBRoleArenaLog ksClone()
		{
			return new DBRoleArenaLog(time, win, attackingSideRank, defendingSideRank, 
			                          attackingSide, defendingSide);
		}

		@Override
		public DBRoleArenaLog kdClone()
		{
			DBRoleArenaLog _kio_clobj = ksClone();
			_kio_clobj.attackingSide = Stream.clone(attackingSide);
			_kio_clobj.defendingSide = Stream.clone(defendingSide);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			time = is.popInteger();
			win = is.popInteger();
			attackingSideRank = is.popInteger();
			defendingSideRank = is.popInteger();
			if( attackingSide == null )
				attackingSide = new BattleArrayProfile();
			is.pop(attackingSide);
			if( defendingSide == null )
				defendingSide = new BattleArrayProfile();
			is.pop(defendingSide);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(time);
			os.pushInteger(win);
			os.pushInteger(attackingSideRank);
			os.pushInteger(defendingSideRank);
			os.push(attackingSide);
			os.push(defendingSide);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			time = is.popInteger();
			win = is.popInteger();
			attackingSideRank = is.popInteger();
			defendingSideRank = is.popInteger();
			attackingSide = is.pop(BattleArrayProfile.class);
			defendingSide = is.pop(BattleArrayProfile.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(time);
			os.pushInteger(win);
			os.pushInteger(attackingSideRank);
			os.pushInteger(defendingSideRank);
			os.push(attackingSide);
			os.push(defendingSide);
		}

		public int time;
		public int win;
		public int attackingSideRank;
		public int defendingSideRank;
		public BattleArrayProfile attackingSide;
		public BattleArrayProfile defendingSide;
	}

	public static class RoleBWArenaData implements Stream.IStreamable, Stream.KCloneable<RoleBWArenaData>, SStream.IStreamable
	{

		public RoleBWArenaData() { }

		public RoleBWArenaData(int winTimes, int timesUsed, int timesBuy, int timesRefresh, 
		                       Set<Integer> pets, int lvl, int exp, int rankScore, 
		                       int rewardScore, Map<Integer, Integer> curEnemies, int lastScoreClearWeek, List<DBRoleArenaLog> logs, 
		                       int padding)
		{
			this.winTimes = winTimes;
			this.timesUsed = timesUsed;
			this.timesBuy = timesBuy;
			this.timesRefresh = timesRefresh;
			this.pets = pets;
			this.lvl = lvl;
			this.exp = exp;
			this.rankScore = rankScore;
			this.rewardScore = rewardScore;
			this.curEnemies = curEnemies;
			this.lastScoreClearWeek = lastScoreClearWeek;
			this.logs = logs;
			this.padding = padding;
		}

		public RoleBWArenaData ksClone()
		{
			return new RoleBWArenaData(winTimes, timesUsed, timesBuy, timesRefresh, 
			                           pets, lvl, exp, rankScore, 
			                           rewardScore, curEnemies, lastScoreClearWeek, logs, 
			                           padding);
		}

		@Override
		public RoleBWArenaData kdClone()
		{
			RoleBWArenaData _kio_clobj = ksClone();
			_kio_clobj.pets = new TreeSet<Integer>(pets);
			_kio_clobj.curEnemies = new TreeMap<Integer, Integer>(curEnemies);
			_kio_clobj.logs = Stream.clone(logs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			winTimes = is.popInteger();
			timesUsed = is.popInteger();
			timesBuy = is.popInteger();
			timesRefresh = is.popInteger();
			pets = is.popIntegerTreeSet();
			lvl = is.popInteger();
			exp = is.popInteger();
			rankScore = is.popInteger();
			rewardScore = is.popInteger();
			curEnemies = is.popIntegerIntegerTreeMap();
			lastScoreClearWeek = is.popInteger();
			logs = is.popList(DBRoleArenaLog.class);
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(winTimes);
			os.pushInteger(timesUsed);
			os.pushInteger(timesBuy);
			os.pushInteger(timesRefresh);
			os.pushIntegerSet(pets);
			os.pushInteger(lvl);
			os.pushInteger(exp);
			os.pushInteger(rankScore);
			os.pushInteger(rewardScore);
			os.pushIntegerIntegerMap(curEnemies);
			os.pushInteger(lastScoreClearWeek);
			os.pushList(logs);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			winTimes = is.popInteger();
			timesUsed = is.popInteger();
			timesBuy = is.popInteger();
			timesRefresh = is.popInteger();
			pets = is.popIntegerTreeSet();
			lvl = is.popInteger();
			exp = is.popInteger();
			rankScore = is.popInteger();
			rewardScore = is.popInteger();
			curEnemies = is.popIntegerIntegerTreeMap();
			lastScoreClearWeek = is.popInteger();
			logs = is.popList(DBRoleArenaLog.class);
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(winTimes);
			os.pushInteger(timesUsed);
			os.pushInteger(timesBuy);
			os.pushInteger(timesRefresh);
			os.pushIntegerSet(pets);
			os.pushInteger(lvl);
			os.pushInteger(exp);
			os.pushInteger(rankScore);
			os.pushInteger(rewardScore);
			os.pushIntegerIntegerMap(curEnemies);
			os.pushInteger(lastScoreClearWeek);
			os.pushList(logs);
			os.pushInteger(padding);
		}

		public int winTimes;
		public int timesUsed;
		public int timesBuy;
		public int timesRefresh;
		public Set<Integer> pets;
		public int lvl;
		public int exp;
		public int rankScore;
		public int rewardScore;
		public Map<Integer, Integer> curEnemies;
		public int lastScoreClearWeek;
		public List<DBRoleArenaLog> logs;
		public int padding;
	}

	public static class DBRoleForceWar implements Stream.IStreamable, Stream.KCloneable<DBRoleForceWar>, SStream.IStreamable
	{

		public DBRoleForceWar() { }

		public DBRoleForceWar(int weekFeats, int totalFeats, int punishEndTime, int rankClearTime, 
		                      ForceWarLog log, int padding1, int padding2)
		{
			this.weekFeats = weekFeats;
			this.totalFeats = totalFeats;
			this.punishEndTime = punishEndTime;
			this.rankClearTime = rankClearTime;
			this.log = log;
			this.padding1 = padding1;
			this.padding2 = padding2;
		}

		public DBRoleForceWar ksClone()
		{
			return new DBRoleForceWar(weekFeats, totalFeats, punishEndTime, rankClearTime, 
			                          log, padding1, padding2);
		}

		@Override
		public DBRoleForceWar kdClone()
		{
			DBRoleForceWar _kio_clobj = ksClone();
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weekFeats = is.popInteger();
			totalFeats = is.popInteger();
			punishEndTime = is.popInteger();
			rankClearTime = is.popInteger();
			if( log == null )
				log = new ForceWarLog();
			is.pop(log);
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weekFeats);
			os.pushInteger(totalFeats);
			os.pushInteger(punishEndTime);
			os.pushInteger(rankClearTime);
			os.push(log);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			weekFeats = is.popInteger();
			totalFeats = is.popInteger();
			punishEndTime = is.popInteger();
			rankClearTime = is.popInteger();
			log = is.pop(ForceWarLog.class);
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(weekFeats);
			os.pushInteger(totalFeats);
			os.pushInteger(punishEndTime);
			os.pushInteger(rankClearTime);
			os.push(log);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		public int weekFeats;
		public int totalFeats;
		public int punishEndTime;
		public int rankClearTime;
		public ForceWarLog log;
		public int padding1;
		public int padding2;
	}

	public static class ForceWarLog implements Stream.IStreamable, Stream.KCloneable<ForceWarLog>, SStream.IStreamable
	{

		public ForceWarLog() { }

		public ForceWarLog(int dayEnterTimes, int enterTimes, int winTimes, int bestRank, 
		                   int dayFailedStreak)
		{
			this.dayEnterTimes = dayEnterTimes;
			this.enterTimes = enterTimes;
			this.winTimes = winTimes;
			this.bestRank = bestRank;
			this.dayFailedStreak = dayFailedStreak;
		}

		public ForceWarLog ksClone()
		{
			return new ForceWarLog(dayEnterTimes, enterTimes, winTimes, bestRank, 
			                       dayFailedStreak);
		}

		@Override
		public ForceWarLog kdClone()
		{
			ForceWarLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayEnterTimes = is.popInteger();
			enterTimes = is.popInteger();
			winTimes = is.popInteger();
			bestRank = is.popInteger();
			dayFailedStreak = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayEnterTimes);
			os.pushInteger(enterTimes);
			os.pushInteger(winTimes);
			os.pushInteger(bestRank);
			os.pushInteger(dayFailedStreak);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayEnterTimes = is.popInteger();
			enterTimes = is.popInteger();
			winTimes = is.popInteger();
			bestRank = is.popInteger();
			dayFailedStreak = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dayEnterTimes);
			os.pushInteger(enterTimes);
			os.pushInteger(winTimes);
			os.pushInteger(bestRank);
			os.pushInteger(dayFailedStreak);
		}

		public int dayEnterTimes;
		public int enterTimes;
		public int winTimes;
		public int bestRank;
		public int dayFailedStreak;
	}

	public static class DBFriend implements Stream.IStreamable, Stream.KCloneable<DBFriend>, SStream.IStreamable
	{

		public DBFriend() { }

		public DBFriend(int focusValue, int addTime, byte receiveVit)
		{
			this.focusValue = focusValue;
			this.addTime = addTime;
			this.receiveVit = receiveVit;
		}

		public DBFriend ksClone()
		{
			return new DBFriend(focusValue, addTime, receiveVit);
		}

		@Override
		public DBFriend kdClone()
		{
			DBFriend _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			focusValue = is.popInteger();
			addTime = is.popInteger();
			receiveVit = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(focusValue);
			os.pushInteger(addTime);
			os.pushByte(receiveVit);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			focusValue = is.popInteger();
			addTime = is.popInteger();
			receiveVit = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(focusValue);
			os.pushInteger(addTime);
			os.pushByte(receiveVit);
		}

		public int focusValue;
		public int addTime;
		public byte receiveVit;
	}

	public static class DBFriendData implements Stream.IStreamable, Stream.KCloneable<DBFriendData>, SStream.IStreamable
	{

		public DBFriendData() { }

		public DBFriendData(Map<Integer, DBFriend> friends, Set<Integer> sendVitRoles, Set<Integer> fans, Map<Integer, Integer> enemys, 
		                    int dayVitTakeTimes, int vitLvl, int vitExp, String personalMsg, 
		                    Set<Long> giveFlower, Set<Long> acceptFlower, int charm, int historyMaxFriends, 
		                    Map<Integer, Integer> blacklist)
		{
			this.friends = friends;
			this.sendVitRoles = sendVitRoles;
			this.fans = fans;
			this.enemys = enemys;
			this.dayVitTakeTimes = dayVitTakeTimes;
			this.vitLvl = vitLvl;
			this.vitExp = vitExp;
			this.personalMsg = personalMsg;
			this.giveFlower = giveFlower;
			this.acceptFlower = acceptFlower;
			this.charm = charm;
			this.historyMaxFriends = historyMaxFriends;
			this.blacklist = blacklist;
		}

		public DBFriendData ksClone()
		{
			return new DBFriendData(friends, sendVitRoles, fans, enemys, 
			                        dayVitTakeTimes, vitLvl, vitExp, personalMsg, 
			                        giveFlower, acceptFlower, charm, historyMaxFriends, 
			                        blacklist);
		}

		@Override
		public DBFriendData kdClone()
		{
			DBFriendData _kio_clobj = ksClone();
			_kio_clobj.friends = Stream.clone(friends);
			_kio_clobj.sendVitRoles = new TreeSet<Integer>(sendVitRoles);
			_kio_clobj.fans = new TreeSet<Integer>(fans);
			_kio_clobj.enemys = new TreeMap<Integer, Integer>(enemys);
			_kio_clobj.giveFlower = new TreeSet<Long>(giveFlower);
			_kio_clobj.acceptFlower = new TreeSet<Long>(acceptFlower);
			_kio_clobj.blacklist = new TreeMap<Integer, Integer>(blacklist);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			friends = is.popIntegerTreeMap(DBFriend.class);
			sendVitRoles = is.popIntegerTreeSet();
			fans = is.popIntegerTreeSet();
			enemys = is.popIntegerIntegerTreeMap();
			dayVitTakeTimes = is.popInteger();
			vitLvl = is.popInteger();
			vitExp = is.popInteger();
			personalMsg = is.popString();
			giveFlower = is.popLongTreeSet();
			acceptFlower = is.popLongTreeSet();
			charm = is.popInteger();
			historyMaxFriends = is.popInteger();
			blacklist = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(friends);
			os.pushIntegerSet(sendVitRoles);
			os.pushIntegerSet(fans);
			os.pushIntegerIntegerMap(enemys);
			os.pushInteger(dayVitTakeTimes);
			os.pushInteger(vitLvl);
			os.pushInteger(vitExp);
			os.pushString(personalMsg);
			os.pushLongSet(giveFlower);
			os.pushLongSet(acceptFlower);
			os.pushInteger(charm);
			os.pushInteger(historyMaxFriends);
			os.pushIntegerIntegerMap(blacklist);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			friends = is.popIntegerTreeMap(DBFriend.class);
			sendVitRoles = is.popIntegerTreeSet();
			fans = is.popIntegerTreeSet();
			enemys = is.popIntegerIntegerTreeMap();
			dayVitTakeTimes = is.popInteger();
			vitLvl = is.popInteger();
			vitExp = is.popInteger();
			personalMsg = is.popString();
			giveFlower = is.popLongTreeSet();
			acceptFlower = is.popLongTreeSet();
			charm = is.popInteger();
			historyMaxFriends = is.popInteger();
			blacklist = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerMap(friends);
			os.pushIntegerSet(sendVitRoles);
			os.pushIntegerSet(fans);
			os.pushIntegerIntegerMap(enemys);
			os.pushInteger(dayVitTakeTimes);
			os.pushInteger(vitLvl);
			os.pushInteger(vitExp);
			os.pushString(personalMsg);
			os.pushLongSet(giveFlower);
			os.pushLongSet(acceptFlower);
			os.pushInteger(charm);
			os.pushInteger(historyMaxFriends);
			os.pushIntegerIntegerMap(blacklist);
		}

		public Map<Integer, DBFriend> friends;
		public Set<Integer> sendVitRoles;
		public Set<Integer> fans;
		public Map<Integer, Integer> enemys;
		public int dayVitTakeTimes;
		public int vitLvl;
		public int vitExp;
		public String personalMsg;
		public Set<Long> giveFlower;
		public Set<Long> acceptFlower;
		public int charm;
		public int historyMaxFriends;
		public Map<Integer, Integer> blacklist;
	}

	public static class DBTempVIP implements Stream.IStreamable, Stream.KCloneable<DBTempVIP>, SStream.IStreamable
	{

		public DBTempVIP() { }

		public DBTempVIP(int vipLvl, int vipEndtime)
		{
			this.vipLvl = vipLvl;
			this.vipEndtime = vipEndtime;
		}

		public DBTempVIP ksClone()
		{
			return new DBTempVIP(vipLvl, vipEndtime);
		}

		@Override
		public DBTempVIP kdClone()
		{
			DBTempVIP _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			vipLvl = is.popInteger();
			vipEndtime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(vipLvl);
			os.pushInteger(vipEndtime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			vipLvl = is.popInteger();
			vipEndtime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(vipLvl);
			os.pushInteger(vipEndtime);
		}

		public int vipLvl;
		public int vipEndtime;
	}

	public static class DBDailyVitData implements Stream.IStreamable, Stream.KCloneable<DBDailyVitData>, SStream.IStreamable
	{

		public DBDailyVitData() { }

		public DBDailyVitData(int lastReceiveVitTime, Set<Integer> reward)
		{
			this.lastReceiveVitTime = lastReceiveVitTime;
			this.reward = reward;
		}

		public DBDailyVitData ksClone()
		{
			return new DBDailyVitData(lastReceiveVitTime, reward);
		}

		@Override
		public DBDailyVitData kdClone()
		{
			DBDailyVitData _kio_clobj = ksClone();
			_kio_clobj.reward = new TreeSet<Integer>(reward);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastReceiveVitTime = is.popInteger();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lastReceiveVitTime);
			os.pushIntegerSet(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lastReceiveVitTime = is.popInteger();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(lastReceiveVitTime);
			os.pushIntegerSet(reward);
		}

		public int lastReceiveVitTime;
		public Set<Integer> reward;
	}

	public static class DBMonthlyCardData implements Stream.IStreamable, Stream.KCloneable<DBMonthlyCardData>, SStream.IStreamable
	{

		public DBMonthlyCardData() { }

		public DBMonthlyCardData(int monthlyCardEndTime, byte reward)
		{
			this.monthlyCardEndTime = monthlyCardEndTime;
			this.reward = reward;
		}

		public DBMonthlyCardData ksClone()
		{
			return new DBMonthlyCardData(monthlyCardEndTime, reward);
		}

		@Override
		public DBMonthlyCardData kdClone()
		{
			DBMonthlyCardData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			monthlyCardEndTime = is.popInteger();
			reward = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(monthlyCardEndTime);
			os.pushByte(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			monthlyCardEndTime = is.popInteger();
			reward = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(monthlyCardEndTime);
			os.pushByte(reward);
		}

		public int monthlyCardEndTime;
		public byte reward;
	}

	public static class DBSpecialCardData implements Stream.IStreamable, Stream.KCloneable<DBSpecialCardData>, SStream.IStreamable
	{

		public DBSpecialCardData() { }

		public DBSpecialCardData(int cardEndTime, byte reward)
		{
			this.cardEndTime = cardEndTime;
			this.reward = reward;
		}

		public DBSpecialCardData ksClone()
		{
			return new DBSpecialCardData(cardEndTime, reward);
		}

		@Override
		public DBSpecialCardData kdClone()
		{
			DBSpecialCardData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cardEndTime = is.popInteger();
			reward = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cardEndTime);
			os.pushByte(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			cardEndTime = is.popInteger();
			reward = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(cardEndTime);
			os.pushByte(reward);
		}

		public int cardEndTime;
		public byte reward;
	}

	public static class SectTask implements Stream.IStreamable, Stream.KCloneable<SectTask>, SStream.IStreamable
	{

		public SectTask() { }

		public SectTask(int sid, int taskId)
		{
			this.sid = sid;
			this.taskId = taskId;
		}

		public SectTask ksClone()
		{
			return new SectTask(sid, taskId);
		}

		@Override
		public SectTask kdClone()
		{
			SectTask _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sid = is.popInteger();
			taskId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sid);
			os.pushInteger(taskId);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			sid = is.popInteger();
			taskId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(sid);
			os.pushInteger(taskId);
		}

		// 任务刷新后的序号Id
		public int sid;
		public int taskId;
	}

	public static class SectReceivedTask implements Stream.IStreamable, Stream.KCloneable<SectReceivedTask>, SStream.IStreamable
	{

		public SectReceivedTask() { }

		public SectReceivedTask(SectTask task, int value, int ownerId, String ownerName, 
		                        int receiveTime)
		{
			this.task = task;
			this.value = value;
			this.ownerId = ownerId;
			this.ownerName = ownerName;
			this.receiveTime = receiveTime;
		}

		public SectReceivedTask ksClone()
		{
			return new SectReceivedTask(task, value, ownerId, ownerName, 
			                            receiveTime);
		}

		@Override
		public SectReceivedTask kdClone()
		{
			SectReceivedTask _kio_clobj = ksClone();
			_kio_clobj.task = Stream.clone(task);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( task == null )
				task = new SectTask();
			is.pop(task);
			value = is.popInteger();
			ownerId = is.popInteger();
			ownerName = is.popString();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(task);
			os.pushInteger(value);
			os.pushInteger(ownerId);
			os.pushString(ownerName);
			os.pushInteger(receiveTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			task = is.pop(SectTask.class);
			value = is.popInteger();
			ownerId = is.popInteger();
			ownerName = is.popString();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(task);
			os.pushInteger(value);
			os.pushInteger(ownerId);
			os.pushString(ownerName);
			os.pushInteger(receiveTime);
		}

		public SectTask task;
		public int value;
		public int ownerId;
		public String ownerName;
		public int receiveTime;
	}

	public static class SectFinishedSelfTask implements Stream.IStreamable, Stream.KCloneable<SectFinishedSelfTask>, SStream.IStreamable
	{

		public SectFinishedSelfTask() { }

		public SectFinishedSelfTask(SectTask task, int shared)
		{
			this.task = task;
			this.shared = shared;
		}

		public SectFinishedSelfTask ksClone()
		{
			return new SectFinishedSelfTask(task, shared);
		}

		@Override
		public SectFinishedSelfTask kdClone()
		{
			SectFinishedSelfTask _kio_clobj = ksClone();
			_kio_clobj.task = Stream.clone(task);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( task == null )
				task = new SectTask();
			is.pop(task);
			shared = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(task);
			os.pushInteger(shared);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			task = is.pop(SectTask.class);
			shared = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(task);
			os.pushInteger(shared);
		}

		public SectTask task;
		// 是否共享
		public int shared;
	}

	public static class SectFinishedSharedTask implements Stream.IStreamable, Stream.KCloneable<SectFinishedSharedTask>, SStream.IStreamable
	{

		public SectFinishedSharedTask() { }

		public SectFinishedSharedTask(int roleId, Set<Integer> tasks)
		{
			this.roleId = roleId;
			this.tasks = tasks;
		}

		public SectFinishedSharedTask ksClone()
		{
			return new SectFinishedSharedTask(roleId, tasks);
		}

		@Override
		public SectFinishedSharedTask kdClone()
		{
			SectFinishedSharedTask _kio_clobj = ksClone();
			_kio_clobj.tasks = new TreeSet<Integer>(tasks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			tasks = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushIntegerSet(tasks);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleId = is.popInteger();
			tasks = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(roleId);
			os.pushIntegerSet(tasks);
		}

		public int roleId;
		public Set<Integer> tasks;
	}

	public static class RoleSectTask implements Stream.IStreamable, Stream.KCloneable<RoleSectTask>, SStream.IStreamable
	{

		public RoleSectTask() { }

		public RoleSectTask(int maxSeqId, int lastRefreshTime, int dayRefreshCount, Map<Integer, SectTask> refreshedTasks, 
		                    Map<Integer, SectFinishedSelfTask> finishedSelfTasks, Map<Integer, SectFinishedSharedTask> finishedSharedTasks, SectReceivedTask curTask, int stCancelTime)
		{
			this.maxSeqId = maxSeqId;
			this.lastRefreshTime = lastRefreshTime;
			this.dayRefreshCount = dayRefreshCount;
			this.refreshedTasks = refreshedTasks;
			this.finishedSelfTasks = finishedSelfTasks;
			this.finishedSharedTasks = finishedSharedTasks;
			this.curTask = curTask;
			this.stCancelTime = stCancelTime;
		}

		public RoleSectTask ksClone()
		{
			return new RoleSectTask(maxSeqId, lastRefreshTime, dayRefreshCount, refreshedTasks, 
			                        finishedSelfTasks, finishedSharedTasks, curTask, stCancelTime);
		}

		@Override
		public RoleSectTask kdClone()
		{
			RoleSectTask _kio_clobj = ksClone();
			_kio_clobj.refreshedTasks = Stream.clone(refreshedTasks);
			_kio_clobj.finishedSelfTasks = Stream.clone(finishedSelfTasks);
			_kio_clobj.finishedSharedTasks = Stream.clone(finishedSharedTasks);
			_kio_clobj.curTask = Stream.clone(curTask);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			maxSeqId = is.popInteger();
			lastRefreshTime = is.popInteger();
			dayRefreshCount = is.popInteger();
			refreshedTasks = is.popIntegerTreeMap(SectTask.class);
			finishedSelfTasks = is.popIntegerTreeMap(SectFinishedSelfTask.class);
			finishedSharedTasks = is.popIntegerTreeMap(SectFinishedSharedTask.class);
			if( curTask == null )
				curTask = new SectReceivedTask();
			is.pop(curTask);
			stCancelTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(maxSeqId);
			os.pushInteger(lastRefreshTime);
			os.pushInteger(dayRefreshCount);
			os.pushIntegerMap(refreshedTasks);
			os.pushIntegerMap(finishedSelfTasks);
			os.pushIntegerMap(finishedSharedTasks);
			os.push(curTask);
			os.pushInteger(stCancelTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			maxSeqId = is.popInteger();
			lastRefreshTime = is.popInteger();
			dayRefreshCount = is.popInteger();
			refreshedTasks = is.popIntegerTreeMap(SectTask.class);
			finishedSelfTasks = is.popIntegerTreeMap(SectFinishedSelfTask.class);
			finishedSharedTasks = is.popIntegerTreeMap(SectFinishedSharedTask.class);
			curTask = is.pop(SectReceivedTask.class);
			stCancelTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(maxSeqId);
			os.pushInteger(lastRefreshTime);
			os.pushInteger(dayRefreshCount);
			os.pushIntegerMap(refreshedTasks);
			os.pushIntegerMap(finishedSelfTasks);
			os.pushIntegerMap(finishedSharedTasks);
			os.push(curTask);
			os.pushInteger(stCancelTime);
		}

		public int maxSeqId;
		public int lastRefreshTime;
		public int dayRefreshCount;
		public Map<Integer, SectTask> refreshedTasks;
		public Map<Integer, SectFinishedSelfTask> finishedSelfTasks;
		public Map<Integer, SectFinishedSharedTask> finishedSharedTasks;
		public SectReceivedTask curTask;
		public int stCancelTime;
	}

	public static class SectRoleSharedTask implements Stream.IStreamable, Stream.KCloneable<SectRoleSharedTask>, SStream.IStreamable
	{

		public SectRoleSharedTask() { }

		public SectRoleSharedTask(SectTask task, int sharedTime, int receivedByTimes, int leftRewardTimes)
		{
			this.task = task;
			this.sharedTime = sharedTime;
			this.receivedByTimes = receivedByTimes;
			this.leftRewardTimes = leftRewardTimes;
		}

		public SectRoleSharedTask ksClone()
		{
			return new SectRoleSharedTask(task, sharedTime, receivedByTimes, leftRewardTimes);
		}

		@Override
		public SectRoleSharedTask kdClone()
		{
			SectRoleSharedTask _kio_clobj = ksClone();
			_kio_clobj.task = Stream.clone(task);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( task == null )
				task = new SectTask();
			is.pop(task);
			sharedTime = is.popInteger();
			receivedByTimes = is.popInteger();
			leftRewardTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(task);
			os.pushInteger(sharedTime);
			os.pushInteger(receivedByTimes);
			os.pushInteger(leftRewardTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			task = is.pop(SectTask.class);
			sharedTime = is.popInteger();
			receivedByTimes = is.popInteger();
			leftRewardTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(task);
			os.pushInteger(sharedTime);
			os.pushInteger(receivedByTimes);
			os.pushInteger(leftRewardTimes);
		}

		public SectTask task;
		public int sharedTime;
		public int receivedByTimes;
		public int leftRewardTimes;
	}

	public static class SectRoleSharedTasks implements Stream.IStreamable, Stream.KCloneable<SectRoleSharedTasks>, SStream.IStreamable
	{

		public SectRoleSharedTasks() { }

		public SectRoleSharedTasks(int ownerId, String ownerName, Map<Integer, SectRoleSharedTask> tasks)
		{
			this.ownerId = ownerId;
			this.ownerName = ownerName;
			this.tasks = tasks;
		}

		public SectRoleSharedTasks ksClone()
		{
			return new SectRoleSharedTasks(ownerId, ownerName, tasks);
		}

		@Override
		public SectRoleSharedTasks kdClone()
		{
			SectRoleSharedTasks _kio_clobj = ksClone();
			_kio_clobj.tasks = Stream.clone(tasks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ownerId = is.popInteger();
			ownerName = is.popString();
			tasks = is.popIntegerTreeMap(SectRoleSharedTask.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ownerId);
			os.pushString(ownerName);
			os.pushIntegerMap(tasks);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			ownerId = is.popInteger();
			ownerName = is.popString();
			tasks = is.popIntegerTreeMap(SectRoleSharedTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(ownerId);
			os.pushString(ownerName);
			os.pushIntegerMap(tasks);
		}

		public int ownerId;
		public String ownerName;
		public Map<Integer, SectRoleSharedTask> tasks;
	}

	public static class SectSelfTaskInfo implements Stream.IStreamable, Stream.KCloneable<SectSelfTaskInfo>, SStream.IStreamable
	{

		public SectSelfTaskInfo() { }

		public SectSelfTaskInfo(int dayRefreshCount, int dayFinishedCount, List<SectTask> tasks)
		{
			this.dayRefreshCount = dayRefreshCount;
			this.dayFinishedCount = dayFinishedCount;
			this.tasks = tasks;
		}

		public SectSelfTaskInfo ksClone()
		{
			return new SectSelfTaskInfo(dayRefreshCount, dayFinishedCount, tasks);
		}

		@Override
		public SectSelfTaskInfo kdClone()
		{
			SectSelfTaskInfo _kio_clobj = ksClone();
			_kio_clobj.tasks = Stream.clone(tasks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayRefreshCount = is.popInteger();
			dayFinishedCount = is.popInteger();
			tasks = is.popList(SectTask.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayRefreshCount);
			os.pushInteger(dayFinishedCount);
			os.pushList(tasks);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayRefreshCount = is.popInteger();
			dayFinishedCount = is.popInteger();
			tasks = is.popList(SectTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dayRefreshCount);
			os.pushInteger(dayFinishedCount);
			os.pushList(tasks);
		}

		public int dayRefreshCount;
		public int dayFinishedCount;
		public List<SectTask> tasks;
	}

	public static class SectSharedTask implements Stream.IStreamable, Stream.KCloneable<SectSharedTask>, SStream.IStreamable
	{

		public SectSharedTask() { }

		public SectSharedTask(int ownerId, String ownerName, List<SectTask> task)
		{
			this.ownerId = ownerId;
			this.ownerName = ownerName;
			this.task = task;
		}

		public SectSharedTask ksClone()
		{
			return new SectSharedTask(ownerId, ownerName, task);
		}

		@Override
		public SectSharedTask kdClone()
		{
			SectSharedTask _kio_clobj = ksClone();
			_kio_clobj.task = Stream.clone(task);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ownerId = is.popInteger();
			ownerName = is.popString();
			task = is.popList(SectTask.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ownerId);
			os.pushString(ownerName);
			os.pushList(task);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			ownerId = is.popInteger();
			ownerName = is.popString();
			task = is.popList(SectTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(ownerId);
			os.pushString(ownerName);
			os.pushList(task);
		}

		public int ownerId;
		public String ownerName;
		public List<SectTask> task;
	}

	public static class DBPet implements Stream.IStreamable, Stream.KCloneable<DBPet>, SStream.IStreamable
	{

		public DBPet() { }

		public DBPet(FightPet fightPet, int exp, int coPracticeExp, int transformLvl, 
		             Set<Integer> mapLogs, int dailyCompleteTask, DBPetTask task, DBPetLifeTask lifetask, 
		             int exploit)
		{
			this.fightPet = fightPet;
			this.exp = exp;
			this.coPracticeExp = coPracticeExp;
			this.transformLvl = transformLvl;
			this.mapLogs = mapLogs;
			this.dailyCompleteTask = dailyCompleteTask;
			this.task = task;
			this.lifetask = lifetask;
			this.exploit = exploit;
		}

		public DBPet ksClone()
		{
			return new DBPet(fightPet, exp, coPracticeExp, transformLvl, 
			                 mapLogs, dailyCompleteTask, task, lifetask, 
			                 exploit);
		}

		@Override
		public DBPet kdClone()
		{
			DBPet _kio_clobj = ksClone();
			_kio_clobj.fightPet = Stream.clone(fightPet);
			_kio_clobj.mapLogs = new TreeSet<Integer>(mapLogs);
			_kio_clobj.task = Stream.clone(task);
			_kio_clobj.lifetask = Stream.clone(lifetask);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( fightPet == null )
				fightPet = new FightPet();
			is.pop(fightPet);
			exp = is.popInteger();
			coPracticeExp = is.popInteger();
			transformLvl = is.popInteger();
			mapLogs = is.popIntegerTreeSet();
			dailyCompleteTask = is.popInteger();
			if( task == null )
				task = new DBPetTask();
			is.pop(task);
			if( lifetask == null )
				lifetask = new DBPetLifeTask();
			is.pop(lifetask);
			exploit = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(fightPet);
			os.pushInteger(exp);
			os.pushInteger(coPracticeExp);
			os.pushInteger(transformLvl);
			os.pushIntegerSet(mapLogs);
			os.pushInteger(dailyCompleteTask);
			os.push(task);
			os.push(lifetask);
			os.pushInteger(exploit);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			fightPet = is.pop(FightPet.class);
			exp = is.popInteger();
			coPracticeExp = is.popInteger();
			transformLvl = is.popInteger();
			mapLogs = is.popIntegerTreeSet();
			dailyCompleteTask = is.popInteger();
			task = is.pop(DBPetTask.class);
			lifetask = is.pop(DBPetLifeTask.class);
			exploit = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(fightPet);
			os.pushInteger(exp);
			os.pushInteger(coPracticeExp);
			os.pushInteger(transformLvl);
			os.pushIntegerSet(mapLogs);
			os.pushInteger(dailyCompleteTask);
			os.push(task);
			os.push(lifetask);
			os.pushInteger(exploit);
		}

		public FightPet fightPet;
		public int exp;
		public int coPracticeExp;
		public int transformLvl;
		public Set<Integer> mapLogs;
		public int dailyCompleteTask;
		public DBPetTask task;
		public DBPetLifeTask lifetask;
		public int exploit;
	}

	public static class PetSpirit implements Stream.IStreamable, Stream.KCloneable<PetSpirit>, SStream.IStreamable
	{

		public PetSpirit() { }

		public PetSpirit(int id, int level)
		{
			this.id = id;
			this.level = level;
		}

		public PetSpirit ksClone()
		{
			return new PetSpirit(id, level);
		}

		@Override
		public PetSpirit kdClone()
		{
			PetSpirit _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
		}

		public int id;
		public int level;
	}

	public static class DBSuite implements Stream.IStreamable, Stream.KCloneable<DBSuite>, SStream.IStreamable
	{

		public DBSuite() { }

		public DBSuite(int id, Set<Integer> collect)
		{
			this.id = id;
			this.collect = collect;
		}

		public DBSuite ksClone()
		{
			return new DBSuite(id, collect);
		}

		@Override
		public DBSuite kdClone()
		{
			DBSuite _kio_clobj = ksClone();
			_kio_clobj.collect = new TreeSet<Integer>(collect);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			collect = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerSet(collect);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			collect = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushIntegerSet(collect);
		}

		public int id;
		public Set<Integer> collect;
	}

	public static class DBNormalMapCopyLog implements Stream.IStreamable, Stream.KCloneable<DBNormalMapCopyLog>, SStream.IStreamable
	{

		public DBNormalMapCopyLog() { }

		public DBNormalMapCopyLog(int finishTimes, int enterTimes, int bestScore, int dayEnterTimes, 
		                          int dayBuyTimes, int rewardTimes)
		{
			this.finishTimes = finishTimes;
			this.enterTimes = enterTimes;
			this.bestScore = bestScore;
			this.dayEnterTimes = dayEnterTimes;
			this.dayBuyTimes = dayBuyTimes;
			this.rewardTimes = rewardTimes;
		}

		public DBNormalMapCopyLog ksClone()
		{
			return new DBNormalMapCopyLog(finishTimes, enterTimes, bestScore, dayEnterTimes, 
			                              dayBuyTimes, rewardTimes);
		}

		@Override
		public DBNormalMapCopyLog kdClone()
		{
			DBNormalMapCopyLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			finishTimes = is.popInteger();
			enterTimes = is.popInteger();
			bestScore = is.popInteger();
			dayEnterTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
			rewardTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(finishTimes);
			os.pushInteger(enterTimes);
			os.pushInteger(bestScore);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(dayBuyTimes);
			os.pushInteger(rewardTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			finishTimes = is.popInteger();
			enterTimes = is.popInteger();
			bestScore = is.popInteger();
			dayEnterTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
			rewardTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(finishTimes);
			os.pushInteger(enterTimes);
			os.pushInteger(bestScore);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(dayBuyTimes);
			os.pushInteger(rewardTimes);
		}

		public int finishTimes;
		public int enterTimes;
		public int bestScore;
		public int dayEnterTimes;
		public int dayBuyTimes;
		public int rewardTimes;
	}

	public static class DBActivityMapGroupLog implements Stream.IStreamable, Stream.KCloneable<DBActivityMapGroupLog>, SStream.IStreamable
	{

		public DBActivityMapGroupLog() { }

		public DBActivityMapGroupLog(int historyEnterTimes, Set<Integer> enterMaps, int dayEnterTimes, int dayBuyTimes, 
		                             Map<Integer, Integer> records)
		{
			this.historyEnterTimes = historyEnterTimes;
			this.enterMaps = enterMaps;
			this.dayEnterTimes = dayEnterTimes;
			this.dayBuyTimes = dayBuyTimes;
			this.records = records;
		}

		public DBActivityMapGroupLog ksClone()
		{
			return new DBActivityMapGroupLog(historyEnterTimes, enterMaps, dayEnterTimes, dayBuyTimes, 
			                                 records);
		}

		@Override
		public DBActivityMapGroupLog kdClone()
		{
			DBActivityMapGroupLog _kio_clobj = ksClone();
			_kio_clobj.enterMaps = new TreeSet<Integer>(enterMaps);
			_kio_clobj.records = new TreeMap<Integer, Integer>(records);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			historyEnterTimes = is.popInteger();
			enterMaps = is.popIntegerTreeSet();
			dayEnterTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
			records = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(historyEnterTimes);
			os.pushIntegerSet(enterMaps);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(dayBuyTimes);
			os.pushIntegerIntegerMap(records);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			historyEnterTimes = is.popInteger();
			enterMaps = is.popIntegerTreeSet();
			dayEnterTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
			records = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(historyEnterTimes);
			os.pushIntegerSet(enterMaps);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(dayBuyTimes);
			os.pushIntegerIntegerMap(records);
		}

		public int historyEnterTimes;
		public Set<Integer> enterMaps;
		public int dayEnterTimes;
		public int dayBuyTimes;
		public Map<Integer, Integer> records;
	}

	public static class DBRoleTowerDefence implements Stream.IStreamable, Stream.KCloneable<DBRoleTowerDefence>
	{

		public DBRoleTowerDefence() { }

		public DBRoleTowerDefence(Map<Integer, DBTowerDefenceMapLog> logs, int padding1, int padding2)
		{
			this.logs = logs;
			this.padding1 = padding1;
			this.padding2 = padding2;
		}

		public DBRoleTowerDefence ksClone()
		{
			return new DBRoleTowerDefence(logs, padding1, padding2);
		}

		@Override
		public DBRoleTowerDefence kdClone()
		{
			DBRoleTowerDefence _kio_clobj = ksClone();
			_kio_clobj.logs = Stream.clone(logs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			logs = is.popIntegerTreeMap(DBTowerDefenceMapLog.class);
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(logs);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		public Map<Integer, DBTowerDefenceMapLog> logs;
		public int padding1;
		public int padding2;
	}

	public static class DBTowerDefenceMapLog implements Stream.IStreamable, Stream.KCloneable<DBTowerDefenceMapLog>, SStream.IStreamable
	{

		public DBTowerDefenceMapLog() { }

		public DBTowerDefenceMapLog(int finishTimes, int enterTimes, int dayEnterTimes, int dayBuyTimes, 
		                            int bestCount, int bestScore, int useTime, int padding)
		{
			this.finishTimes = finishTimes;
			this.enterTimes = enterTimes;
			this.dayEnterTimes = dayEnterTimes;
			this.dayBuyTimes = dayBuyTimes;
			this.bestCount = bestCount;
			this.bestScore = bestScore;
			this.useTime = useTime;
			this.padding = padding;
		}

		public DBTowerDefenceMapLog ksClone()
		{
			return new DBTowerDefenceMapLog(finishTimes, enterTimes, dayEnterTimes, dayBuyTimes, 
			                                bestCount, bestScore, useTime, padding);
		}

		@Override
		public DBTowerDefenceMapLog kdClone()
		{
			DBTowerDefenceMapLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			finishTimes = is.popInteger();
			enterTimes = is.popInteger();
			dayEnterTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
			bestCount = is.popInteger();
			bestScore = is.popInteger();
			useTime = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(finishTimes);
			os.pushInteger(enterTimes);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(dayBuyTimes);
			os.pushInteger(bestCount);
			os.pushInteger(bestScore);
			os.pushInteger(useTime);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			finishTimes = is.popInteger();
			enterTimes = is.popInteger();
			dayEnterTimes = is.popInteger();
			dayBuyTimes = is.popInteger();
			bestCount = is.popInteger();
			bestScore = is.popInteger();
			useTime = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(finishTimes);
			os.pushInteger(enterTimes);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(dayBuyTimes);
			os.pushInteger(bestCount);
			os.pushInteger(bestScore);
			os.pushInteger(useTime);
			os.pushInteger(padding);
		}

		public int finishTimes;
		public int enterTimes;
		public int dayEnterTimes;
		public int dayBuyTimes;
		public int bestCount;
		public int bestScore;
		public int useTime;
		public int padding;
	}

	public static class DBCurPet implements Stream.IStreamable, Stream.KCloneable<DBCurPet>, SStream.IStreamable
	{

		public DBCurPet() { }

		public DBCurPet(List<Integer> curPets)
		{
			this.curPets = curPets;
		}

		public DBCurPet ksClone()
		{
			return new DBCurPet(curPets);
		}

		@Override
		public DBCurPet kdClone()
		{
			DBCurPet _kio_clobj = ksClone();
			_kio_clobj.curPets = new ArrayList<Integer>(curPets);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curPets = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(curPets);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			curPets = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerList(curPets);
		}

		public List<Integer> curPets;
	}

	public static class DBSectAura implements Stream.IStreamable, Stream.KCloneable<DBSectAura>, SStream.IStreamable
	{

		public DBSectAura() { }

		public DBSectAura(int id, int level, Map<Integer, Integer> items)
		{
			this.id = id;
			this.level = level;
			this.items = items;
		}

		public DBSectAura ksClone()
		{
			return new DBSectAura(id, level, items);
		}

		@Override
		public DBSectAura kdClone()
		{
			DBSectAura _kio_clobj = ksClone();
			_kio_clobj.items = new TreeMap<Integer, Integer>(items);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushIntegerIntegerMap(items);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushIntegerIntegerMap(items);
		}

		public int id;
		public int level;
		public Map<Integer, Integer> items;
	}

	public static class DBSectHistory implements Stream.IStreamable, Stream.KCloneable<DBSectHistory>, SStream.IStreamable
	{

		public static final byte SectEventCreate = 1;
		public static final byte SectEventJoin = 2;
		public static final byte SectEventLeave = 3;
		public static final byte SectEventKick = 4;
		public static final byte SectEventAsChief = 5;
		public static final byte SectEventAsDeputy = 6;
		public static final byte SectEventUpElder = 7;
		public static final byte SectEventDownElder = 8;
		public static final byte SectEventAsMember = 9;
		public static final byte SectEventSectUpLvl = 10;
		public static final byte SectEventSkillUpLvl = 11;
		public static final byte SectEventAccelerate = 12;
		public static final byte SectEventAuraAddExp = 13;
		public static final byte SectEventWorship = 14;
		public static final byte SectEventBanquet = 15;
		public static final byte SectEventJoinBanquet = 16;
		public static final byte SectEventResetMap = 17;
		public static final byte SectEventFightMap = 18;
		public static final byte SectEventAssignRewards = 19;
		public static final byte SectEventResetGroupMap = 20;
		public static final byte SectEventChangeChiefByTimeout = 21;
		public static final byte SectEventFlagLoss = 22;
		public static final byte SectEventFlagGet = 23;
		public static final byte SectEventFlagReward = 24;

		public DBSectHistory() { }

		public DBSectHistory(int time, int eid, String memberName, String operatorName, 
		                     int arg, int arg2)
		{
			this.time = time;
			this.eid = eid;
			this.memberName = memberName;
			this.operatorName = operatorName;
			this.arg = arg;
			this.arg2 = arg2;
		}

		public DBSectHistory ksClone()
		{
			return new DBSectHistory(time, eid, memberName, operatorName, 
			                         arg, arg2);
		}

		@Override
		public DBSectHistory kdClone()
		{
			DBSectHistory _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			time = is.popInteger();
			eid = is.popInteger();
			memberName = is.popString();
			operatorName = is.popString();
			arg = is.popInteger();
			arg2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(time);
			os.pushInteger(eid);
			os.pushString(memberName);
			os.pushString(operatorName);
			os.pushInteger(arg);
			os.pushInteger(arg2);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			time = is.popInteger();
			eid = is.popInteger();
			memberName = is.popString();
			operatorName = is.popString();
			arg = is.popInteger();
			arg2 = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(time);
			os.pushInteger(eid);
			os.pushString(memberName);
			os.pushString(operatorName);
			os.pushInteger(arg);
			os.pushInteger(arg2);
		}

		public int time;
		public int eid;
		public String memberName;
		public String operatorName;
		public int arg;
		public int arg2;
	}

	public static class SectShareTaskLibInfo implements Stream.IStreamable, Stream.KCloneable<SectShareTaskLibInfo>, SStream.IStreamable
	{

		public SectShareTaskLibInfo() { }

		public SectShareTaskLibInfo(int roleId, int taskId, int count)
		{
			this.roleId = roleId;
			this.taskId = taskId;
			this.count = count;
		}

		public SectShareTaskLibInfo ksClone()
		{
			return new SectShareTaskLibInfo(roleId, taskId, count);
		}

		@Override
		public SectShareTaskLibInfo kdClone()
		{
			SectShareTaskLibInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			taskId = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(taskId);
			os.pushInteger(count);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleId = is.popInteger();
			taskId = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(taskId);
			os.pushInteger(count);
		}

		public int roleId;
		public int taskId;
		public int count;
	}

	public static class SectTaskResetInfo implements Stream.IStreamable, Stream.KCloneable<SectTaskResetInfo>, SStream.IStreamable
	{

		public SectTaskResetInfo() { }

		public SectTaskResetInfo(List<Integer> tasks, int resetTime)
		{
			this.tasks = tasks;
			this.resetTime = resetTime;
		}

		public SectTaskResetInfo ksClone()
		{
			return new SectTaskResetInfo(tasks, resetTime);
		}

		@Override
		public SectTaskResetInfo kdClone()
		{
			SectTaskResetInfo _kio_clobj = ksClone();
			_kio_clobj.tasks = new ArrayList<Integer>(tasks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tasks = is.popIntegerList();
			resetTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(tasks);
			os.pushInteger(resetTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			tasks = is.popIntegerList();
			resetTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerList(tasks);
			os.pushInteger(resetTime);
		}

		public List<Integer> tasks;
		public int resetTime;
	}

	public static class DBSectShareTaskInfo implements Stream.IStreamable, Stream.KCloneable<DBSectShareTaskInfo>, SStream.IStreamable
	{

		public DBSectShareTaskInfo() { }

		public DBSectShareTaskInfo(int residual, int alreadyAward)
		{
			this.residual = residual;
			this.alreadyAward = alreadyAward;
		}

		public DBSectShareTaskInfo ksClone()
		{
			return new DBSectShareTaskInfo(residual, alreadyAward);
		}

		@Override
		public DBSectShareTaskInfo kdClone()
		{
			DBSectShareTaskInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			residual = is.popInteger();
			alreadyAward = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(residual);
			os.pushInteger(alreadyAward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			residual = is.popInteger();
			alreadyAward = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(residual);
			os.pushInteger(alreadyAward);
		}

		public int residual;
		public int alreadyAward;
	}

	public static class DBSectMember implements Stream.IStreamable, Stream.KCloneable<DBSectMember>, SStream.IStreamable
	{

		public DBSectMember() { }

		public DBSectMember(SectMember data, SectWorshipedData worshiped, int padding)
		{
			this.data = data;
			this.worshiped = worshiped;
			this.padding = padding;
		}

		public DBSectMember ksClone()
		{
			return new DBSectMember(data, worshiped, padding);
		}

		@Override
		public DBSectMember kdClone()
		{
			DBSectMember _kio_clobj = ksClone();
			_kio_clobj.data = Stream.clone(data);
			_kio_clobj.worshiped = Stream.clone(worshiped);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( data == null )
				data = new SectMember();
			is.pop(data);
			if( worshiped == null )
				worshiped = new SectWorshipedData();
			is.pop(worshiped);
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(data);
			os.push(worshiped);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			data = is.pop(SectMember.class);
			worshiped = is.pop(SectWorshipedData.class);
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(data);
			os.push(worshiped);
			os.pushInteger(padding);
		}

		public SectMember data;
		public SectWorshipedData worshiped;
		public int padding;
	}

	public static class DBRoleSectData implements Stream.IStreamable, Stream.KCloneable<DBRoleSectData>, SStream.IStreamable
	{

		public DBRoleSectData() { }

		public DBRoleSectData(RoleSectData data, RoleSectTask task, int dayFinishTime, int padding)
		{
			this.data = data;
			this.task = task;
			this.dayFinishTime = dayFinishTime;
			this.padding = padding;
		}

		public DBRoleSectData ksClone()
		{
			return new DBRoleSectData(data, task, dayFinishTime, padding);
		}

		@Override
		public DBRoleSectData kdClone()
		{
			DBRoleSectData _kio_clobj = ksClone();
			_kio_clobj.data = Stream.clone(data);
			_kio_clobj.task = Stream.clone(task);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( data == null )
				data = new RoleSectData();
			is.pop(data);
			if( task == null )
				task = new RoleSectTask();
			is.pop(task);
			dayFinishTime = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(data);
			os.push(task);
			os.pushInteger(dayFinishTime);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			data = is.pop(RoleSectData.class);
			task = is.pop(RoleSectTask.class);
			dayFinishTime = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(data);
			os.push(task);
			os.pushInteger(dayFinishTime);
			os.pushInteger(padding);
		}

		public RoleSectData data;
		public RoleSectTask task;
		public int dayFinishTime;
		public int padding;
	}

	public static class DBDailyTask implements Stream.IStreamable, Stream.KCloneable<DBDailyTask>, SStream.IStreamable
	{

		public DBDailyTask() { }

		public DBDailyTask(int id, int times, int rewards)
		{
			this.id = id;
			this.times = times;
			this.rewards = rewards;
		}

		public DBDailyTask ksClone()
		{
			return new DBDailyTask(id, times, rewards);
		}

		@Override
		public DBDailyTask kdClone()
		{
			DBDailyTask _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			times = is.popInteger();
			rewards = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(times);
			os.pushInteger(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			times = is.popInteger();
			rewards = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(times);
			os.pushInteger(rewards);
		}

		public int id;
		public int times;
		public int rewards;
	}

	public static class DBQuizGift implements Stream.IStreamable, Stream.KCloneable<DBQuizGift>, SStream.IStreamable
	{

		public DBQuizGift() { }

		public DBQuizGift(int bonus, int expReward, int doubleBonusUsed, int continuousRightAnswer, 
		                  int lastAnsweredQuestionSeq, int lastAnsweredQuestionResult)
		{
			this.bonus = bonus;
			this.expReward = expReward;
			this.doubleBonusUsed = doubleBonusUsed;
			this.continuousRightAnswer = continuousRightAnswer;
			this.lastAnsweredQuestionSeq = lastAnsweredQuestionSeq;
			this.lastAnsweredQuestionResult = lastAnsweredQuestionResult;
		}

		public DBQuizGift ksClone()
		{
			return new DBQuizGift(bonus, expReward, doubleBonusUsed, continuousRightAnswer, 
			                      lastAnsweredQuestionSeq, lastAnsweredQuestionResult);
		}

		@Override
		public DBQuizGift kdClone()
		{
			DBQuizGift _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bonus = is.popInteger();
			expReward = is.popInteger();
			doubleBonusUsed = is.popInteger();
			continuousRightAnswer = is.popInteger();
			lastAnsweredQuestionSeq = is.popInteger();
			lastAnsweredQuestionResult = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bonus);
			os.pushInteger(expReward);
			os.pushInteger(doubleBonusUsed);
			os.pushInteger(continuousRightAnswer);
			os.pushInteger(lastAnsweredQuestionSeq);
			os.pushInteger(lastAnsweredQuestionResult);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			bonus = is.popInteger();
			expReward = is.popInteger();
			doubleBonusUsed = is.popInteger();
			continuousRightAnswer = is.popInteger();
			lastAnsweredQuestionSeq = is.popInteger();
			lastAnsweredQuestionResult = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(bonus);
			os.pushInteger(expReward);
			os.pushInteger(doubleBonusUsed);
			os.pushInteger(continuousRightAnswer);
			os.pushInteger(lastAnsweredQuestionSeq);
			os.pushInteger(lastAnsweredQuestionResult);
		}

		public int bonus;
		public int expReward;
		public int doubleBonusUsed;
		public int continuousRightAnswer;
		public int lastAnsweredQuestionSeq;
		public int lastAnsweredQuestionResult;
	}

	public static class DBLuckyWheel implements Stream.IStreamable, Stream.KCloneable<DBLuckyWheel>, SStream.IStreamable
	{

		public DBLuckyWheel() { }

		public DBLuckyWheel(int totalDrawTimes, int buyTimes, int Id)
		{
			this.totalDrawTimes = totalDrawTimes;
			this.buyTimes = buyTimes;
			this.Id = Id;
		}

		public DBLuckyWheel ksClone()
		{
			return new DBLuckyWheel(totalDrawTimes, buyTimes, Id);
		}

		@Override
		public DBLuckyWheel kdClone()
		{
			DBLuckyWheel _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			totalDrawTimes = is.popInteger();
			buyTimes = is.popInteger();
			Id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(totalDrawTimes);
			os.pushInteger(buyTimes);
			os.pushInteger(Id);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			totalDrawTimes = is.popInteger();
			buyTimes = is.popInteger();
			Id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(totalDrawTimes);
			os.pushInteger(buyTimes);
			os.pushInteger(Id);
		}

		public int totalDrawTimes;
		public int buyTimes;
		public int Id;
	}

	public static class DBChallengeTask implements Stream.IStreamable, Stream.KCloneable<DBChallengeTask>, SStream.IStreamable
	{

		public DBChallengeTask() { }

		public DBChallengeTask(int type, int seq, byte reward)
		{
			this.type = type;
			this.seq = seq;
			this.reward = reward;
		}

		public DBChallengeTask ksClone()
		{
			return new DBChallengeTask(type, seq, reward);
		}

		@Override
		public DBChallengeTask kdClone()
		{
			DBChallengeTask _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			seq = is.popInteger();
			reward = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(seq);
			os.pushByte(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			type = is.popInteger();
			seq = is.popInteger();
			reward = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(type);
			os.pushInteger(seq);
			os.pushByte(reward);
		}

		public int type;
		public int seq;
		public byte reward;
	}

	public static class DBFame implements Stream.IStreamable, Stream.KCloneable<DBFame>, SStream.IStreamable
	{

		public DBFame() { }

		public DBFame(int level, int upgradeTime, byte reward)
		{
			this.level = level;
			this.upgradeTime = upgradeTime;
			this.reward = reward;
		}

		public DBFame ksClone()
		{
			return new DBFame(level, upgradeTime, reward);
		}

		@Override
		public DBFame kdClone()
		{
			DBFame _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			upgradeTime = is.popInteger();
			reward = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(upgradeTime);
			os.pushByte(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			level = is.popInteger();
			upgradeTime = is.popInteger();
			reward = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(level);
			os.pushInteger(upgradeTime);
			os.pushByte(reward);
		}

		public int level;
		public int upgradeTime;
		public byte reward;
	}

	public static class DBDailyOnlineGift implements Stream.IStreamable, Stream.KCloneable<DBDailyOnlineGift>, SStream.IStreamable
	{

		public DBDailyOnlineGift() { }

		public DBDailyOnlineGift(int dayOnlineTime, Set<Integer> rewards)
		{
			this.dayOnlineTime = dayOnlineTime;
			this.rewards = rewards;
		}

		public DBDailyOnlineGift ksClone()
		{
			return new DBDailyOnlineGift(dayOnlineTime, rewards);
		}

		@Override
		public DBDailyOnlineGift kdClone()
		{
			DBDailyOnlineGift _kio_clobj = ksClone();
			_kio_clobj.rewards = new TreeSet<Integer>(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayOnlineTime = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayOnlineTime);
			os.pushIntegerSet(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayOnlineTime = is.popInteger();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dayOnlineTime);
			os.pushIntegerSet(rewards);
		}

		public int dayOnlineTime;
		public Set<Integer> rewards;
	}

	public static class DBOfflineExp implements Stream.IStreamable, Stream.KCloneable<DBOfflineExp>, SStream.IStreamable
	{

		public DBOfflineExp() { }

		public DBOfflineExp(int accTimeTotal, long accExpTotal, List<DummyGoods> accDrops, long dailyOfflineExp, 
		                    int lastLogTime, int lastDayTakeMin)
		{
			this.accTimeTotal = accTimeTotal;
			this.accExpTotal = accExpTotal;
			this.accDrops = accDrops;
			this.dailyOfflineExp = dailyOfflineExp;
			this.lastLogTime = lastLogTime;
			this.lastDayTakeMin = lastDayTakeMin;
		}

		public DBOfflineExp ksClone()
		{
			return new DBOfflineExp(accTimeTotal, accExpTotal, accDrops, dailyOfflineExp, 
			                        lastLogTime, lastDayTakeMin);
		}

		@Override
		public DBOfflineExp kdClone()
		{
			DBOfflineExp _kio_clobj = ksClone();
			_kio_clobj.accDrops = Stream.clone(accDrops);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			accTimeTotal = is.popInteger();
			accExpTotal = is.popLong();
			accDrops = is.popList(DummyGoods.class);
			dailyOfflineExp = is.popLong();
			lastLogTime = is.popInteger();
			lastDayTakeMin = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(accTimeTotal);
			os.pushLong(accExpTotal);
			os.pushList(accDrops);
			os.pushLong(dailyOfflineExp);
			os.pushInteger(lastLogTime);
			os.pushInteger(lastDayTakeMin);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			accTimeTotal = is.popInteger();
			accExpTotal = is.popLong();
			accDrops = is.popList(DummyGoods.class);
			dailyOfflineExp = is.popLong();
			lastLogTime = is.popInteger();
			lastDayTakeMin = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(accTimeTotal);
			os.pushLong(accExpTotal);
			os.pushList(accDrops);
			os.pushLong(dailyOfflineExp);
			os.pushInteger(lastLogTime);
			os.pushInteger(lastDayTakeMin);
		}

		public int accTimeTotal;
		public long accExpTotal;
		public List<DummyGoods> accDrops;
		public long dailyOfflineExp;
		public int lastLogTime;
		public int lastDayTakeMin;
	}

	public static class DBShareDiySkillList implements Stream.IStreamable, Stream.KCloneable<DBShareDiySkillList>, SStream.IStreamable
	{

		public DBShareDiySkillList() { }

		public DBShareDiySkillList(List<DBShareDiySkill> diyskills)
		{
			this.diyskills = diyskills;
		}

		public DBShareDiySkillList ksClone()
		{
			return new DBShareDiySkillList(diyskills);
		}

		@Override
		public DBShareDiySkillList kdClone()
		{
			DBShareDiySkillList _kio_clobj = ksClone();
			_kio_clobj.diyskills = Stream.clone(diyskills);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			diyskills = is.popList(DBShareDiySkill.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(diyskills);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			diyskills = is.popList(DBShareDiySkill.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushList(diyskills);
		}

		public List<DBShareDiySkill> diyskills;
	}

	public static class DBShareDiySkill implements Stream.IStreamable, Stream.KCloneable<DBShareDiySkill>, SStream.IStreamable
	{

		public DBShareDiySkill() { }

		public DBShareDiySkill(DBDiySkill skill, int shareTime, int takeCount, int awardCount)
		{
			this.skill = skill;
			this.shareTime = shareTime;
			this.takeCount = takeCount;
			this.awardCount = awardCount;
		}

		public DBShareDiySkill ksClone()
		{
			return new DBShareDiySkill(skill, shareTime, takeCount, awardCount);
		}

		@Override
		public DBShareDiySkill kdClone()
		{
			DBShareDiySkill _kio_clobj = ksClone();
			_kio_clobj.skill = Stream.clone(skill);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( skill == null )
				skill = new DBDiySkill();
			is.pop(skill);
			shareTime = is.popInteger();
			takeCount = is.popInteger();
			awardCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(skill);
			os.pushInteger(shareTime);
			os.pushInteger(takeCount);
			os.pushInteger(awardCount);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			skill = is.pop(DBDiySkill.class);
			shareTime = is.popInteger();
			takeCount = is.popInteger();
			awardCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(skill);
			os.pushInteger(shareTime);
			os.pushInteger(takeCount);
			os.pushInteger(awardCount);
		}

		public DBDiySkill skill;
		public int shareTime;
		public int takeCount;
		public int awardCount;
	}

	public static class DBDiySkillShare implements Stream.IStreamable, Stream.KCloneable<DBDiySkillShare>, SStream.IStreamable
	{

		public DBDiySkillShare() { }

		public DBDiySkillShare(DBShareDiySkill diySkill, int roleId, int serverId, String roleName)
		{
			this.diySkill = diySkill;
			this.roleId = roleId;
			this.serverId = serverId;
			this.roleName = roleName;
		}

		public DBDiySkillShare ksClone()
		{
			return new DBDiySkillShare(diySkill, roleId, serverId, roleName);
		}

		@Override
		public DBDiySkillShare kdClone()
		{
			DBDiySkillShare _kio_clobj = ksClone();
			_kio_clobj.diySkill = Stream.clone(diySkill);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( diySkill == null )
				diySkill = new DBShareDiySkill();
			is.pop(diySkill);
			roleId = is.popInteger();
			serverId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(diySkill);
			os.pushInteger(roleId);
			os.pushInteger(serverId);
			os.pushString(roleName);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			diySkill = is.pop(DBShareDiySkill.class);
			roleId = is.popInteger();
			serverId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(diySkill);
			os.pushInteger(roleId);
			os.pushInteger(serverId);
			os.pushString(roleName);
		}

		public DBShareDiySkill diySkill;
		public int roleId;
		public int serverId;
		public String roleName;
	}

	public static class DBShareDiySkillData implements Stream.IStreamable, Stream.KCloneable<DBShareDiySkillData>, SStream.IStreamable
	{

		public DBShareDiySkillData() { }

		public DBShareDiySkillData(DBRoleDiySkillData diySkillData, List<DBDiySkillShare> diySkillShare)
		{
			this.diySkillData = diySkillData;
			this.diySkillShare = diySkillShare;
		}

		public DBShareDiySkillData ksClone()
		{
			return new DBShareDiySkillData(diySkillData, diySkillShare);
		}

		@Override
		public DBShareDiySkillData kdClone()
		{
			DBShareDiySkillData _kio_clobj = ksClone();
			_kio_clobj.diySkillData = Stream.clone(diySkillData);
			_kio_clobj.diySkillShare = Stream.clone(diySkillShare);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( diySkillData == null )
				diySkillData = new DBRoleDiySkillData();
			is.pop(diySkillData);
			diySkillShare = is.popList(DBDiySkillShare.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(diySkillData);
			os.pushList(diySkillShare);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			diySkillData = is.pop(DBRoleDiySkillData.class);
			diySkillShare = is.popList(DBDiySkillShare.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(diySkillData);
			os.pushList(diySkillShare);
		}

		public DBRoleDiySkillData diySkillData;
		public List<DBDiySkillShare> diySkillShare;
	}

	public static class DBConsignItems implements Stream.IStreamable, Stream.KCloneable<DBConsignItems>, SStream.IStreamable
	{

		public DBConsignItems() { }

		public DBConsignItems(int id, int count, DBEquip equip, int price, 
		                      int time, int showTime)
		{
			this.id = id;
			this.count = count;
			this.equip = equip;
			this.price = price;
			this.time = time;
			this.showTime = showTime;
		}

		public DBConsignItems ksClone()
		{
			return new DBConsignItems(id, count, equip, price, 
			                          time, showTime);
		}

		@Override
		public DBConsignItems kdClone()
		{
			DBConsignItems _kio_clobj = ksClone();
			_kio_clobj.equip = Stream.cloneNullable(equip);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
			equip = is.popNullable(DBEquip.class);
			price = is.popInteger();
			time = is.popInteger();
			showTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
			os.pushNullable(equip);
			os.pushInteger(price);
			os.pushInteger(time);
			os.pushInteger(showTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
			equip = is.pop(DBEquip.class);
			price = is.popInteger();
			time = is.popInteger();
			showTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
			os.push(equip);
			os.pushInteger(price);
			os.pushInteger(time);
			os.pushInteger(showTime);
		}

		public int id;
		public int count;
		public DBEquip equip;
		public int price;
		public int time;
		public int showTime;
	}

	public static class DBAuctionInfo implements Stream.IStreamable, Stream.KCloneable<DBAuctionInfo>, SStream.IStreamable
	{

		public DBAuctionInfo() { }

		public DBAuctionInfo(Set<Integer> consignments, int cellSize, int expandTimes, List<DBConsignItems> tradeLogs, 
		                     int buyItemsCnt, int sellItemsCnt)
		{
			this.consignments = consignments;
			this.cellSize = cellSize;
			this.expandTimes = expandTimes;
			this.tradeLogs = tradeLogs;
			this.buyItemsCnt = buyItemsCnt;
			this.sellItemsCnt = sellItemsCnt;
		}

		public DBAuctionInfo ksClone()
		{
			return new DBAuctionInfo(consignments, cellSize, expandTimes, tradeLogs, 
			                         buyItemsCnt, sellItemsCnt);
		}

		@Override
		public DBAuctionInfo kdClone()
		{
			DBAuctionInfo _kio_clobj = ksClone();
			_kio_clobj.consignments = new TreeSet<Integer>(consignments);
			_kio_clobj.tradeLogs = Stream.clone(tradeLogs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			consignments = is.popIntegerTreeSet();
			cellSize = is.popInteger();
			expandTimes = is.popInteger();
			tradeLogs = is.popList(DBConsignItems.class);
			buyItemsCnt = is.popInteger();
			sellItemsCnt = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(consignments);
			os.pushInteger(cellSize);
			os.pushInteger(expandTimes);
			os.pushList(tradeLogs);
			os.pushInteger(buyItemsCnt);
			os.pushInteger(sellItemsCnt);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			consignments = is.popIntegerTreeSet();
			cellSize = is.popInteger();
			expandTimes = is.popInteger();
			tradeLogs = is.popList(DBConsignItems.class);
			buyItemsCnt = is.popInteger();
			sellItemsCnt = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerSet(consignments);
			os.pushInteger(cellSize);
			os.pushInteger(expandTimes);
			os.pushList(tradeLogs);
			os.pushInteger(buyItemsCnt);
			os.pushInteger(sellItemsCnt);
		}

		public Set<Integer> consignments;
		public int cellSize;
		public int expandTimes;
		public List<DBConsignItems> tradeLogs;
		public int buyItemsCnt;
		public int sellItemsCnt;
	}

	public static class DBTreasure implements Stream.IStreamable, Stream.KCloneable<DBTreasure>, SStream.IStreamable
	{

		public DBTreasure() { }

		public DBTreasure(TreasureNPC npcInfo, TreasureMap mapInfo, Map<Integer, Byte> medals, int padding)
		{
			this.npcInfo = npcInfo;
			this.mapInfo = mapInfo;
			this.medals = medals;
			this.padding = padding;
		}

		public DBTreasure ksClone()
		{
			return new DBTreasure(npcInfo, mapInfo, medals, padding);
		}

		@Override
		public DBTreasure kdClone()
		{
			DBTreasure _kio_clobj = ksClone();
			_kio_clobj.npcInfo = Stream.clone(npcInfo);
			_kio_clobj.mapInfo = Stream.clone(mapInfo);
			_kio_clobj.medals = new TreeMap<Integer, Byte>(medals);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( npcInfo == null )
				npcInfo = new TreasureNPC();
			is.pop(npcInfo);
			if( mapInfo == null )
				mapInfo = new TreasureMap();
			is.pop(mapInfo);
			medals = is.popIntegerByteTreeMap();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(npcInfo);
			os.push(mapInfo);
			os.pushIntegerByteMap(medals);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			npcInfo = is.pop(TreasureNPC.class);
			mapInfo = is.pop(TreasureMap.class);
			medals = is.popIntegerByteTreeMap();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(npcInfo);
			os.push(mapInfo);
			os.pushIntegerByteMap(medals);
			os.pushInteger(padding);
		}

		public TreasureNPC npcInfo;
		public TreasureMap mapInfo;
		public Map<Integer, Byte> medals;
		public int padding;
	}

	public static class DBRanks implements Stream.IStreamable, Stream.KCloneable<DBRanks>, SStream.IStreamable
	{

		public DBRanks() { }

		public DBRanks(List<DBRoleRanks> roleRanks, List<DBSectRanks> sectRanks, int padding1, int padding2)
		{
			this.roleRanks = roleRanks;
			this.sectRanks = sectRanks;
			this.padding1 = padding1;
			this.padding2 = padding2;
		}

		public DBRanks ksClone()
		{
			return new DBRanks(roleRanks, sectRanks, padding1, padding2);
		}

		@Override
		public DBRanks kdClone()
		{
			DBRanks _kio_clobj = ksClone();
			_kio_clobj.roleRanks = Stream.clone(roleRanks);
			_kio_clobj.sectRanks = Stream.clone(sectRanks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleRanks = is.popList(DBRoleRanks.class);
			sectRanks = is.popList(DBSectRanks.class);
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roleRanks);
			os.pushList(sectRanks);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleRanks = is.popList(DBRoleRanks.class);
			sectRanks = is.popList(DBSectRanks.class);
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushList(roleRanks);
			os.pushList(sectRanks);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		public List<DBRoleRanks> roleRanks;
		public List<DBSectRanks> sectRanks;
		public int padding1;
		public int padding2;
	}

	public static class DBRoleRanks implements Stream.IStreamable, Stream.KCloneable<DBRoleRanks>, SStream.IStreamable
	{

		public DBRoleRanks() { }

		public DBRoleRanks(int id, List<RankRole> ranks, List<RankRole> snapshot, int snapshotCreateTime, 
		                   int lastRewardTime)
		{
			this.id = id;
			this.ranks = ranks;
			this.snapshot = snapshot;
			this.snapshotCreateTime = snapshotCreateTime;
			this.lastRewardTime = lastRewardTime;
		}

		public DBRoleRanks ksClone()
		{
			return new DBRoleRanks(id, ranks, snapshot, snapshotCreateTime, 
			                       lastRewardTime);
		}

		@Override
		public DBRoleRanks kdClone()
		{
			DBRoleRanks _kio_clobj = ksClone();
			_kio_clobj.ranks = Stream.clone(ranks);
			_kio_clobj.snapshot = Stream.clone(snapshot);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			ranks = is.popList(RankRole.class);
			snapshot = is.popList(RankRole.class);
			snapshotCreateTime = is.popInteger();
			lastRewardTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(ranks);
			os.pushList(snapshot);
			os.pushInteger(snapshotCreateTime);
			os.pushInteger(lastRewardTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			ranks = is.popList(RankRole.class);
			snapshot = is.popList(RankRole.class);
			snapshotCreateTime = is.popInteger();
			lastRewardTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushList(ranks);
			os.pushList(snapshot);
			os.pushInteger(snapshotCreateTime);
			os.pushInteger(lastRewardTime);
		}

		public int id;
		public List<RankRole> ranks;
		public List<RankRole> snapshot;
		public int snapshotCreateTime;
		public int lastRewardTime;
	}

	public static class DBSectRanks implements Stream.IStreamable, Stream.KCloneable<DBSectRanks>, SStream.IStreamable
	{

		public DBSectRanks() { }

		public DBSectRanks(int id, List<RankSect> ranks, List<RankSect> snapshot, int snapshotCreateTime, 
		                   int lastRewardTime)
		{
			this.id = id;
			this.ranks = ranks;
			this.snapshot = snapshot;
			this.snapshotCreateTime = snapshotCreateTime;
			this.lastRewardTime = lastRewardTime;
		}

		public DBSectRanks ksClone()
		{
			return new DBSectRanks(id, ranks, snapshot, snapshotCreateTime, 
			                       lastRewardTime);
		}

		@Override
		public DBSectRanks kdClone()
		{
			DBSectRanks _kio_clobj = ksClone();
			_kio_clobj.ranks = Stream.clone(ranks);
			_kio_clobj.snapshot = Stream.clone(snapshot);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			ranks = is.popList(RankSect.class);
			snapshot = is.popList(RankSect.class);
			snapshotCreateTime = is.popInteger();
			lastRewardTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(ranks);
			os.pushList(snapshot);
			os.pushInteger(snapshotCreateTime);
			os.pushInteger(lastRewardTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			ranks = is.popList(RankSect.class);
			snapshot = is.popList(RankSect.class);
			snapshotCreateTime = is.popInteger();
			lastRewardTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushList(ranks);
			os.pushList(snapshot);
			os.pushInteger(snapshotCreateTime);
			os.pushInteger(lastRewardTime);
		}

		public int id;
		public List<RankSect> ranks;
		public List<RankSect> snapshot;
		public int snapshotCreateTime;
		public int lastRewardTime;
	}

	public static class TreasureNPC implements Stream.IStreamable, Stream.KCloneable<TreasureNPC>, SStream.IStreamable
	{

		public TreasureNPC() { }

		public TreasureNPC(Map<Integer, NPCState> npcs, Set<Integer> finishMaps, int lastRefreshDay, Set<Integer> pieceLog)
		{
			this.npcs = npcs;
			this.finishMaps = finishMaps;
			this.lastRefreshDay = lastRefreshDay;
			this.pieceLog = pieceLog;
		}

		public TreasureNPC ksClone()
		{
			return new TreasureNPC(npcs, finishMaps, lastRefreshDay, pieceLog);
		}

		@Override
		public TreasureNPC kdClone()
		{
			TreasureNPC _kio_clobj = ksClone();
			_kio_clobj.npcs = Stream.clone(npcs);
			_kio_clobj.finishMaps = new TreeSet<Integer>(finishMaps);
			_kio_clobj.pieceLog = new TreeSet<Integer>(pieceLog);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcs = is.popIntegerTreeMap(NPCState.class);
			finishMaps = is.popIntegerTreeSet();
			lastRefreshDay = is.popInteger();
			pieceLog = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(npcs);
			os.pushIntegerSet(finishMaps);
			os.pushInteger(lastRefreshDay);
			os.pushIntegerSet(pieceLog);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			npcs = is.popIntegerTreeMap(NPCState.class);
			finishMaps = is.popIntegerTreeSet();
			lastRefreshDay = is.popInteger();
			pieceLog = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerMap(npcs);
			os.pushIntegerSet(finishMaps);
			os.pushInteger(lastRefreshDay);
			os.pushIntegerSet(pieceLog);
		}

		public Map<Integer, NPCState> npcs;
		public Set<Integer> finishMaps;
		public int lastRefreshDay;
		public Set<Integer> pieceLog;
	}

	public static class TreasureMap implements Stream.IStreamable, Stream.KCloneable<TreasureMap>, SStream.IStreamable
	{

		public TreasureMap() { }

		public TreasureMap(MapState curMap, Map<Integer, Integer> pieces)
		{
			this.curMap = curMap;
			this.pieces = pieces;
		}

		public TreasureMap ksClone()
		{
			return new TreasureMap(curMap, pieces);
		}

		@Override
		public TreasureMap kdClone()
		{
			TreasureMap _kio_clobj = ksClone();
			_kio_clobj.curMap = Stream.clone(curMap);
			_kio_clobj.pieces = new TreeMap<Integer, Integer>(pieces);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( curMap == null )
				curMap = new MapState();
			is.pop(curMap);
			pieces = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(curMap);
			os.pushIntegerIntegerMap(pieces);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			curMap = is.pop(MapState.class);
			pieces = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(curMap);
			os.pushIntegerIntegerMap(pieces);
		}

		public MapState curMap;
		public Map<Integer, Integer> pieces;
	}

	public static class NPCState implements Stream.IStreamable, Stream.KCloneable<NPCState>, SStream.IStreamable
	{

		public NPCState() { }

		public NPCState(byte open, Map<Integer, Integer> lib, int fame, byte reward, 
		                int refreshTimes)
		{
			this.open = open;
			this.lib = lib;
			this.fame = fame;
			this.reward = reward;
			this.refreshTimes = refreshTimes;
		}

		public NPCState ksClone()
		{
			return new NPCState(open, lib, fame, reward, 
			                    refreshTimes);
		}

		@Override
		public NPCState kdClone()
		{
			NPCState _kio_clobj = ksClone();
			_kio_clobj.lib = new TreeMap<Integer, Integer>(lib);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popByte();
			lib = is.popIntegerIntegerTreeMap();
			fame = is.popInteger();
			reward = is.popByte();
			refreshTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(open);
			os.pushIntegerIntegerMap(lib);
			os.pushInteger(fame);
			os.pushByte(reward);
			os.pushInteger(refreshTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popByte();
			lib = is.popIntegerIntegerTreeMap();
			fame = is.popInteger();
			reward = is.popByte();
			refreshTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushByte(open);
			os.pushIntegerIntegerMap(lib);
			os.pushInteger(fame);
			os.pushByte(reward);
			os.pushInteger(refreshTimes);
		}

		public byte open;
		public Map<Integer, Integer> lib;
		public int fame;
		public byte reward;
		public int refreshTimes;
	}

	public static class MapState implements Stream.IStreamable, Stream.KCloneable<MapState>, SStream.IStreamable
	{

		public MapState() { }

		public MapState(int mapID, byte open, Map<Integer, Byte> points)
		{
			this.mapID = mapID;
			this.open = open;
			this.points = points;
		}

		public MapState ksClone()
		{
			return new MapState(mapID, open, points);
		}

		@Override
		public MapState kdClone()
		{
			MapState _kio_clobj = ksClone();
			_kio_clobj.points = new TreeMap<Integer, Byte>(points);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapID = is.popInteger();
			open = is.popByte();
			points = is.popIntegerByteTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapID);
			os.pushByte(open);
			os.pushIntegerByteMap(points);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			mapID = is.popInteger();
			open = is.popByte();
			points = is.popIntegerByteTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(mapID);
			os.pushByte(open);
			os.pushIntegerByteMap(points);
		}

		public int mapID;
		public byte open;
		public Map<Integer, Byte> points;
	}

	public static class HorseInfo implements Stream.IStreamable, Stream.KCloneable<HorseInfo>, SStream.IStreamable
	{

		public HorseInfo() { }

		public HorseInfo(int id, byte star, List<Prop> enhanceAttrs, int enhanceTimes, 
		                 Map<Integer, Integer> curHorseSkills, int enhanceLvl, int enhanceExp, Set<Integer> showIDs, 
		                 int curShowID)
		{
			this.id = id;
			this.star = star;
			this.enhanceAttrs = enhanceAttrs;
			this.enhanceTimes = enhanceTimes;
			this.curHorseSkills = curHorseSkills;
			this.enhanceLvl = enhanceLvl;
			this.enhanceExp = enhanceExp;
			this.showIDs = showIDs;
			this.curShowID = curShowID;
		}

		public HorseInfo ksClone()
		{
			return new HorseInfo(id, star, enhanceAttrs, enhanceTimes, 
			                     curHorseSkills, enhanceLvl, enhanceExp, showIDs, 
			                     curShowID);
		}

		@Override
		public HorseInfo kdClone()
		{
			HorseInfo _kio_clobj = ksClone();
			_kio_clobj.enhanceAttrs = Stream.clone(enhanceAttrs);
			_kio_clobj.curHorseSkills = new TreeMap<Integer, Integer>(curHorseSkills);
			_kio_clobj.showIDs = new TreeSet<Integer>(showIDs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			star = is.popByte();
			enhanceAttrs = is.popList(Prop.class);
			enhanceTimes = is.popInteger();
			curHorseSkills = is.popIntegerIntegerTreeMap();
			enhanceLvl = is.popInteger();
			enhanceExp = is.popInteger();
			showIDs = is.popIntegerTreeSet();
			curShowID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushByte(star);
			os.pushList(enhanceAttrs);
			os.pushInteger(enhanceTimes);
			os.pushIntegerIntegerMap(curHorseSkills);
			os.pushInteger(enhanceLvl);
			os.pushInteger(enhanceExp);
			os.pushIntegerSet(showIDs);
			os.pushInteger(curShowID);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			star = is.popByte();
			enhanceAttrs = is.popList(Prop.class);
			enhanceTimes = is.popInteger();
			curHorseSkills = is.popIntegerIntegerTreeMap();
			enhanceLvl = is.popInteger();
			enhanceExp = is.popInteger();
			showIDs = is.popIntegerTreeSet();
			curShowID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushByte(star);
			os.pushList(enhanceAttrs);
			os.pushInteger(enhanceTimes);
			os.pushIntegerIntegerMap(curHorseSkills);
			os.pushInteger(enhanceLvl);
			os.pushInteger(enhanceExp);
			os.pushIntegerSet(showIDs);
			os.pushInteger(curShowID);
		}

		public int id;
		public byte star;
		public List<Prop> enhanceAttrs;
		public int enhanceTimes;
		public Map<Integer, Integer> curHorseSkills;
		public int enhanceLvl;
		public int enhanceExp;
		public Set<Integer> showIDs;
		public int curShowID;
	}

	public static class DBHorse implements Stream.IStreamable, Stream.KCloneable<DBHorse>, SStream.IStreamable
	{

		public DBHorse() { }

		public DBHorse(Map<Integer, HorseInfo> horses, Map<Integer, Integer> allHorseSkills, int inuseHorse, int padding)
		{
			this.horses = horses;
			this.allHorseSkills = allHorseSkills;
			this.inuseHorse = inuseHorse;
			this.padding = padding;
		}

		public DBHorse ksClone()
		{
			return new DBHorse(horses, allHorseSkills, inuseHorse, padding);
		}

		@Override
		public DBHorse kdClone()
		{
			DBHorse _kio_clobj = ksClone();
			_kio_clobj.horses = Stream.clone(horses);
			_kio_clobj.allHorseSkills = new TreeMap<Integer, Integer>(allHorseSkills);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			horses = is.popIntegerTreeMap(HorseInfo.class);
			allHorseSkills = is.popIntegerIntegerTreeMap();
			inuseHorse = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(horses);
			os.pushIntegerIntegerMap(allHorseSkills);
			os.pushInteger(inuseHorse);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			horses = is.popIntegerTreeMap(HorseInfo.class);
			allHorseSkills = is.popIntegerIntegerTreeMap();
			inuseHorse = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerMap(horses);
			os.pushIntegerIntegerMap(allHorseSkills);
			os.pushInteger(inuseHorse);
			os.pushInteger(padding);
		}

		public Map<Integer, HorseInfo> horses;
		public Map<Integer, Integer> allHorseSkills;
		public int inuseHorse;
		public int padding;
	}

	public static class DBRoleFashion implements Stream.IStreamable, Stream.KCloneable<DBRoleFashion>, SStream.IStreamable
	{

		public DBRoleFashion() { }

		public DBRoleFashion(Map<Integer, DBFashion> allFashions, Map<Integer, Integer> curFashions, byte idle)
		{
			this.allFashions = allFashions;
			this.curFashions = curFashions;
			this.idle = idle;
		}

		public DBRoleFashion ksClone()
		{
			return new DBRoleFashion(allFashions, curFashions, idle);
		}

		@Override
		public DBRoleFashion kdClone()
		{
			DBRoleFashion _kio_clobj = ksClone();
			_kio_clobj.allFashions = Stream.clone(allFashions);
			_kio_clobj.curFashions = new TreeMap<Integer, Integer>(curFashions);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			allFashions = is.popIntegerTreeMap(DBFashion.class);
			curFashions = is.popIntegerIntegerTreeMap();
			idle = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(allFashions);
			os.pushIntegerIntegerMap(curFashions);
			os.pushByte(idle);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			allFashions = is.popIntegerTreeMap(DBFashion.class);
			curFashions = is.popIntegerIntegerTreeMap();
			idle = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerMap(allFashions);
			os.pushIntegerIntegerMap(curFashions);
			os.pushByte(idle);
		}

		public Map<Integer, DBFashion> allFashions;
		public Map<Integer, Integer> curFashions;
		public byte idle;
	}

	public static class DBFashion implements Stream.IStreamable, Stream.KCloneable<DBFashion>, SStream.IStreamable
	{

		public DBFashion() { }

		public DBFashion(int id, List<Prop> enhanceProps, int enhanceLvl, int enhanceExp, 
		                 int enhanceTimes, int padding)
		{
			this.id = id;
			this.enhanceProps = enhanceProps;
			this.enhanceLvl = enhanceLvl;
			this.enhanceExp = enhanceExp;
			this.enhanceTimes = enhanceTimes;
			this.padding = padding;
		}

		public DBFashion ksClone()
		{
			return new DBFashion(id, enhanceProps, enhanceLvl, enhanceExp, 
			                     enhanceTimes, padding);
		}

		@Override
		public DBFashion kdClone()
		{
			DBFashion _kio_clobj = ksClone();
			_kio_clobj.enhanceProps = Stream.clone(enhanceProps);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			enhanceProps = is.popList(Prop.class);
			enhanceLvl = is.popInteger();
			enhanceExp = is.popInteger();
			enhanceTimes = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(enhanceProps);
			os.pushInteger(enhanceLvl);
			os.pushInteger(enhanceExp);
			os.pushInteger(enhanceTimes);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			enhanceProps = is.popList(Prop.class);
			enhanceLvl = is.popInteger();
			enhanceExp = is.popInteger();
			enhanceTimes = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushList(enhanceProps);
			os.pushInteger(enhanceLvl);
			os.pushInteger(enhanceExp);
			os.pushInteger(enhanceTimes);
			os.pushInteger(padding);
		}

		public int id;
		public List<Prop> enhanceProps;
		public int enhanceLvl;
		public int enhanceExp;
		public int enhanceTimes;
		public int padding;
	}

	public static class DBSealData implements Stream.IStreamable, Stream.KCloneable<DBSealData>, SStream.IStreamable
	{

		public DBSealData() { }

		public DBSealData(int grade, Map<Integer, Integer> skills, int enhanceCount, Map<Integer, Integer> tempSkills)
		{
			this.grade = grade;
			this.skills = skills;
			this.enhanceCount = enhanceCount;
			this.tempSkills = tempSkills;
		}

		public DBSealData ksClone()
		{
			return new DBSealData(grade, skills, enhanceCount, tempSkills);
		}

		@Override
		public DBSealData kdClone()
		{
			DBSealData _kio_clobj = ksClone();
			_kio_clobj.skills = new TreeMap<Integer, Integer>(skills);
			_kio_clobj.tempSkills = new TreeMap<Integer, Integer>(tempSkills);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			grade = is.popInteger();
			skills = is.popIntegerIntegerTreeMap();
			enhanceCount = is.popInteger();
			tempSkills = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(grade);
			os.pushIntegerIntegerMap(skills);
			os.pushInteger(enhanceCount);
			os.pushIntegerIntegerMap(tempSkills);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			grade = is.popInteger();
			skills = is.popIntegerIntegerTreeMap();
			enhanceCount = is.popInteger();
			tempSkills = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(grade);
			os.pushIntegerIntegerMap(skills);
			os.pushInteger(enhanceCount);
			os.pushIntegerIntegerMap(tempSkills);
		}

		public int grade;
		public Map<Integer, Integer> skills;
		public int enhanceCount;
		public Map<Integer, Integer> tempSkills;
	}

	public static class DBExpCoinData implements Stream.IStreamable, Stream.KCloneable<DBExpCoinData>, SStream.IStreamable
	{

		public DBExpCoinData() { }

		public DBExpCoinData(int curExpCoin, int outExp, int dayTakeTimes)
		{
			this.curExpCoin = curExpCoin;
			this.outExp = outExp;
			this.dayTakeTimes = dayTakeTimes;
		}

		public DBExpCoinData ksClone()
		{
			return new DBExpCoinData(curExpCoin, outExp, dayTakeTimes);
		}

		@Override
		public DBExpCoinData kdClone()
		{
			DBExpCoinData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curExpCoin = is.popInteger();
			outExp = is.popInteger();
			dayTakeTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curExpCoin);
			os.pushInteger(outExp);
			os.pushInteger(dayTakeTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			curExpCoin = is.popInteger();
			outExp = is.popInteger();
			dayTakeTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(curExpCoin);
			os.pushInteger(outExp);
			os.pushInteger(dayTakeTimes);
		}

		public int curExpCoin;
		public int outExp;
		public int dayTakeTimes;
	}

	public static class DBRareBook implements Stream.IStreamable, Stream.KCloneable<DBRareBook>, SStream.IStreamable
	{

		public DBRareBook() { }

		public DBRareBook(Map<Integer, Integer> books, Map<Integer, Integer> bag)
		{
			this.books = books;
			this.bag = bag;
		}

		public DBRareBook ksClone()
		{
			return new DBRareBook(books, bag);
		}

		@Override
		public DBRareBook kdClone()
		{
			DBRareBook _kio_clobj = ksClone();
			_kio_clobj.books = new TreeMap<Integer, Integer>(books);
			_kio_clobj.bag = new TreeMap<Integer, Integer>(bag);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			books = is.popIntegerIntegerTreeMap();
			bag = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(books);
			os.pushIntegerIntegerMap(bag);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			books = is.popIntegerIntegerTreeMap();
			bag = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(books);
			os.pushIntegerIntegerMap(bag);
		}

		public Map<Integer, Integer> books;
		public Map<Integer, Integer> bag;
	}

	public static class DBGrasp implements Stream.IStreamable, Stream.KCloneable<DBGrasp>, SStream.IStreamable
	{

		public DBGrasp() { }

		public DBGrasp(byte dayFortune, byte dayGraspTimes, int lastGraspTime, Set<Integer> dayGraspRids, 
		               Map<Integer, GraspInfo> grasps)
		{
			this.dayFortune = dayFortune;
			this.dayGraspTimes = dayGraspTimes;
			this.lastGraspTime = lastGraspTime;
			this.dayGraspRids = dayGraspRids;
			this.grasps = grasps;
		}

		public DBGrasp ksClone()
		{
			return new DBGrasp(dayFortune, dayGraspTimes, lastGraspTime, dayGraspRids, 
			                   grasps);
		}

		@Override
		public DBGrasp kdClone()
		{
			DBGrasp _kio_clobj = ksClone();
			_kio_clobj.dayGraspRids = new TreeSet<Integer>(dayGraspRids);
			_kio_clobj.grasps = Stream.clone(grasps);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayFortune = is.popByte();
			dayGraspTimes = is.popByte();
			lastGraspTime = is.popInteger();
			dayGraspRids = is.popIntegerTreeSet();
			grasps = is.popIntegerTreeMap(GraspInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(dayFortune);
			os.pushByte(dayGraspTimes);
			os.pushInteger(lastGraspTime);
			os.pushIntegerSet(dayGraspRids);
			os.pushIntegerMap(grasps);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayFortune = is.popByte();
			dayGraspTimes = is.popByte();
			lastGraspTime = is.popInteger();
			dayGraspRids = is.popIntegerTreeSet();
			grasps = is.popIntegerTreeMap(GraspInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushByte(dayFortune);
			os.pushByte(dayGraspTimes);
			os.pushInteger(lastGraspTime);
			os.pushIntegerSet(dayGraspRids);
			os.pushIntegerMap(grasps);
		}

		public byte dayFortune;
		public byte dayGraspTimes;
		public int lastGraspTime;
		public Set<Integer> dayGraspRids;
		public Map<Integer, GraspInfo> grasps;
	}

	public static class DBDMGTransfer implements Stream.IStreamable, Stream.KCloneable<DBDMGTransfer>, SStream.IStreamable
	{

		public DBDMGTransfer() { }

		public DBDMGTransfer(Map<Integer, Integer> levels, int usePoints, int totalPoints, int buyTimes)
		{
			this.levels = levels;
			this.usePoints = usePoints;
			this.totalPoints = totalPoints;
			this.buyTimes = buyTimes;
		}

		public DBDMGTransfer ksClone()
		{
			return new DBDMGTransfer(levels, usePoints, totalPoints, buyTimes);
		}

		@Override
		public DBDMGTransfer kdClone()
		{
			DBDMGTransfer _kio_clobj = ksClone();
			_kio_clobj.levels = new TreeMap<Integer, Integer>(levels);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			levels = is.popIntegerIntegerTreeMap();
			usePoints = is.popInteger();
			totalPoints = is.popInteger();
			buyTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(levels);
			os.pushInteger(usePoints);
			os.pushInteger(totalPoints);
			os.pushInteger(buyTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			levels = is.popIntegerIntegerTreeMap();
			usePoints = is.popInteger();
			totalPoints = is.popInteger();
			buyTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(levels);
			os.pushInteger(usePoints);
			os.pushInteger(totalPoints);
			os.pushInteger(buyTimes);
		}

		public Map<Integer, Integer> levels;
		public int usePoints;
		public int totalPoints;
		public int buyTimes;
	}

	public static class GraspInfo implements Stream.IStreamable, Stream.KCloneable<GraspInfo>, SStream.IStreamable
	{

		public GraspInfo() { }

		public GraspInfo(int lvl, int exp)
		{
			this.lvl = lvl;
			this.exp = exp;
		}

		public GraspInfo ksClone()
		{
			return new GraspInfo(lvl, exp);
		}

		@Override
		public GraspInfo kdClone()
		{
			GraspInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvl = is.popInteger();
			exp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvl);
			os.pushInteger(exp);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lvl = is.popInteger();
			exp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(lvl);
			os.pushInteger(exp);
		}

		public int lvl;
		public int exp;
	}

	public static class DBCBOperations implements Stream.IStreamable, Stream.KCloneable<DBCBOperations>, SStream.IStreamable
	{

		public DBCBOperations() { }

		public DBCBOperations(DBUserSurvey userSurvey, Set<Integer> dailyLogin, Set<Integer> lvlUpRewards, DBUserData useinfo, 
		                      Set<Integer> countdown, Set<Integer> onTime, Set<Integer> strengthen, byte officialResearch)
		{
			this.userSurvey = userSurvey;
			this.dailyLogin = dailyLogin;
			this.lvlUpRewards = lvlUpRewards;
			this.useinfo = useinfo;
			this.countdown = countdown;
			this.onTime = onTime;
			this.strengthen = strengthen;
			this.officialResearch = officialResearch;
		}

		public DBCBOperations ksClone()
		{
			return new DBCBOperations(userSurvey, dailyLogin, lvlUpRewards, useinfo, 
			                          countdown, onTime, strengthen, officialResearch);
		}

		@Override
		public DBCBOperations kdClone()
		{
			DBCBOperations _kio_clobj = ksClone();
			_kio_clobj.userSurvey = Stream.clone(userSurvey);
			_kio_clobj.dailyLogin = new TreeSet<Integer>(dailyLogin);
			_kio_clobj.lvlUpRewards = new TreeSet<Integer>(lvlUpRewards);
			_kio_clobj.useinfo = Stream.clone(useinfo);
			_kio_clobj.countdown = new TreeSet<Integer>(countdown);
			_kio_clobj.onTime = new TreeSet<Integer>(onTime);
			_kio_clobj.strengthen = new TreeSet<Integer>(strengthen);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( userSurvey == null )
				userSurvey = new DBUserSurvey();
			is.pop(userSurvey);
			dailyLogin = is.popIntegerTreeSet();
			lvlUpRewards = is.popIntegerTreeSet();
			if( useinfo == null )
				useinfo = new DBUserData();
			is.pop(useinfo);
			countdown = is.popIntegerTreeSet();
			onTime = is.popIntegerTreeSet();
			strengthen = is.popIntegerTreeSet();
			officialResearch = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(userSurvey);
			os.pushIntegerSet(dailyLogin);
			os.pushIntegerSet(lvlUpRewards);
			os.push(useinfo);
			os.pushIntegerSet(countdown);
			os.pushIntegerSet(onTime);
			os.pushIntegerSet(strengthen);
			os.pushByte(officialResearch);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			userSurvey = is.pop(DBUserSurvey.class);
			dailyLogin = is.popIntegerTreeSet();
			lvlUpRewards = is.popIntegerTreeSet();
			useinfo = is.pop(DBUserData.class);
			countdown = is.popIntegerTreeSet();
			onTime = is.popIntegerTreeSet();
			strengthen = is.popIntegerTreeSet();
			officialResearch = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(userSurvey);
			os.pushIntegerSet(dailyLogin);
			os.pushIntegerSet(lvlUpRewards);
			os.push(useinfo);
			os.pushIntegerSet(countdown);
			os.pushIntegerSet(onTime);
			os.pushIntegerSet(strengthen);
			os.pushByte(officialResearch);
		}

		public DBUserSurvey userSurvey;
		public Set<Integer> dailyLogin;
		public Set<Integer> lvlUpRewards;
		public DBUserData useinfo;
		public Set<Integer> countdown;
		public Set<Integer> onTime;
		public Set<Integer> strengthen;
		public byte officialResearch;
	}

	public static class DBUserSurvey implements Stream.IStreamable, Stream.KCloneable<DBUserSurvey>, SStream.IStreamable
	{

		public DBUserSurvey() { }

		public DBUserSurvey(List<IntSet> answers, byte reward)
		{
			this.answers = answers;
			this.reward = reward;
		}

		public DBUserSurvey ksClone()
		{
			return new DBUserSurvey(answers, reward);
		}

		@Override
		public DBUserSurvey kdClone()
		{
			DBUserSurvey _kio_clobj = ksClone();
			_kio_clobj.answers = Stream.clone(answers);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			answers = is.popList(IntSet.class);
			reward = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(answers);
			os.pushByte(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			answers = is.popList(IntSet.class);
			reward = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushList(answers);
			os.pushByte(reward);
		}

		public List<IntSet> answers;
		public byte reward;
	}

	public static class DBUserData implements Stream.IStreamable, Stream.KCloneable<DBUserData>, SStream.IStreamable
	{

		public DBUserData() { }

		public DBUserData(String qq, String cellphone, byte isOldUser, byte reward)
		{
			this.qq = qq;
			this.cellphone = cellphone;
			this.isOldUser = isOldUser;
			this.reward = reward;
		}

		public DBUserData ksClone()
		{
			return new DBUserData(qq, cellphone, isOldUser, reward);
		}

		@Override
		public DBUserData kdClone()
		{
			DBUserData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			qq = is.popString();
			cellphone = is.popString();
			isOldUser = is.popByte();
			reward = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(qq);
			os.pushString(cellphone);
			os.pushByte(isOldUser);
			os.pushByte(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			qq = is.popString();
			cellphone = is.popString();
			isOldUser = is.popByte();
			reward = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(qq);
			os.pushString(cellphone);
			os.pushByte(isOldUser);
			os.pushByte(reward);
		}

		public String qq;
		public String cellphone;
		public byte isOldUser;
		public byte reward;
	}

	public static class DBBoss implements Stream.IStreamable, Stream.KCloneable<DBBoss>, SStream.IStreamable
	{

		public DBBoss() { }

		public DBBoss(int lastDayRefresh, Map<Integer, DBBossState> bosses)
		{
			this.lastDayRefresh = lastDayRefresh;
			this.bosses = bosses;
		}

		public DBBoss ksClone()
		{
			return new DBBoss(lastDayRefresh, bosses);
		}

		@Override
		public DBBoss kdClone()
		{
			DBBoss _kio_clobj = ksClone();
			_kio_clobj.bosses = Stream.clone(bosses);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastDayRefresh = is.popInteger();
			bosses = is.popIntegerTreeMap(DBBossState.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lastDayRefresh);
			os.pushIntegerMap(bosses);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lastDayRefresh = is.popInteger();
			bosses = is.popIntegerTreeMap(DBBossState.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(lastDayRefresh);
			os.pushIntegerMap(bosses);
		}

		public int lastDayRefresh;
		public Map<Integer, DBBossState> bosses;
	}

	public static class DBBossState implements Stream.IStreamable, Stream.KCloneable<DBBossState>, SStream.IStreamable
	{

		public DBBossState() { }

		public DBBossState(int curHp, int seq, int refreshTime, String killerName, 
		                   Map<Integer, BossRecord> records)
		{
			this.curHp = curHp;
			this.seq = seq;
			this.refreshTime = refreshTime;
			this.killerName = killerName;
			this.records = records;
		}

		public DBBossState ksClone()
		{
			return new DBBossState(curHp, seq, refreshTime, killerName, 
			                       records);
		}

		@Override
		public DBBossState kdClone()
		{
			DBBossState _kio_clobj = ksClone();
			_kio_clobj.records = Stream.clone(records);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curHp = is.popInteger();
			seq = is.popInteger();
			refreshTime = is.popInteger();
			killerName = is.popString();
			records = is.popIntegerTreeMap(BossRecord.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curHp);
			os.pushInteger(seq);
			os.pushInteger(refreshTime);
			os.pushString(killerName);
			os.pushIntegerMap(records);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			curHp = is.popInteger();
			seq = is.popInteger();
			refreshTime = is.popInteger();
			killerName = is.popString();
			records = is.popIntegerTreeMap(BossRecord.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(curHp);
			os.pushInteger(seq);
			os.pushInteger(refreshTime);
			os.pushString(killerName);
			os.pushIntegerMap(records);
		}

		public int curHp;
		public int seq;
		public int refreshTime;
		public String killerName;
		public Map<Integer, BossRecord> records;
	}

	public static class DBStele implements Stream.IStreamable, Stream.KCloneable<DBStele>, SStream.IStreamable
	{

		public DBStele() { }

		public DBStele(int lastDayRefresh, int lastCreateSteleTime, int type, List<Integer> remainTimes, 
		               List<RankRole> ranks, byte isRankWeardSend)
		{
			this.lastDayRefresh = lastDayRefresh;
			this.lastCreateSteleTime = lastCreateSteleTime;
			this.type = type;
			this.remainTimes = remainTimes;
			this.ranks = ranks;
			this.isRankWeardSend = isRankWeardSend;
		}

		public DBStele ksClone()
		{
			return new DBStele(lastDayRefresh, lastCreateSteleTime, type, remainTimes, 
			                   ranks, isRankWeardSend);
		}

		@Override
		public DBStele kdClone()
		{
			DBStele _kio_clobj = ksClone();
			_kio_clobj.remainTimes = new ArrayList<Integer>(remainTimes);
			_kio_clobj.ranks = Stream.clone(ranks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastDayRefresh = is.popInteger();
			lastCreateSteleTime = is.popInteger();
			type = is.popInteger();
			remainTimes = is.popIntegerList();
			ranks = is.popList(RankRole.class);
			isRankWeardSend = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lastDayRefresh);
			os.pushInteger(lastCreateSteleTime);
			os.pushInteger(type);
			os.pushIntegerList(remainTimes);
			os.pushList(ranks);
			os.pushByte(isRankWeardSend);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lastDayRefresh = is.popInteger();
			lastCreateSteleTime = is.popInteger();
			type = is.popInteger();
			remainTimes = is.popIntegerList();
			ranks = is.popList(RankRole.class);
			isRankWeardSend = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(lastDayRefresh);
			os.pushInteger(lastCreateSteleTime);
			os.pushInteger(type);
			os.pushIntegerList(remainTimes);
			os.pushList(ranks);
			os.pushByte(isRankWeardSend);
		}

		public int lastDayRefresh;
		public int lastCreateSteleTime;
		public int type;
		public List<Integer> remainTimes;
		public List<RankRole> ranks;
		public byte isRankWeardSend;
	}

	public static class DBMapFlag implements Stream.IStreamable, Stream.KCloneable<DBMapFlag>, SStream.IStreamable
	{

		public DBMapFlag() { }

		public DBMapFlag(Map<Integer, DBMapFlagInfo> mapFlags)
		{
			this.mapFlags = mapFlags;
		}

		public DBMapFlag ksClone()
		{
			return new DBMapFlag(mapFlags);
		}

		@Override
		public DBMapFlag kdClone()
		{
			DBMapFlag _kio_clobj = ksClone();
			_kio_clobj.mapFlags = Stream.clone(mapFlags);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapFlags = is.popIntegerTreeMap(DBMapFlagInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(mapFlags);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			mapFlags = is.popIntegerTreeMap(DBMapFlagInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerMap(mapFlags);
		}

		public Map<Integer, DBMapFlagInfo> mapFlags;
	}

	public static class DBEmergency implements Stream.IStreamable, Stream.KCloneable<DBEmergency>, SStream.IStreamable
	{

		public DBEmergency() { }

		public DBEmergency(List<RankRole> ranks, int rankday, byte isRankWeardSend, Map<Integer, Integer> joinRoles)
		{
			this.ranks = ranks;
			this.rankday = rankday;
			this.isRankWeardSend = isRankWeardSend;
			this.joinRoles = joinRoles;
		}

		public DBEmergency ksClone()
		{
			return new DBEmergency(ranks, rankday, isRankWeardSend, joinRoles);
		}

		@Override
		public DBEmergency kdClone()
		{
			DBEmergency _kio_clobj = ksClone();
			_kio_clobj.ranks = Stream.clone(ranks);
			_kio_clobj.joinRoles = new TreeMap<Integer, Integer>(joinRoles);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ranks = is.popList(RankRole.class);
			rankday = is.popInteger();
			isRankWeardSend = is.popByte();
			joinRoles = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(ranks);
			os.pushInteger(rankday);
			os.pushByte(isRankWeardSend);
			os.pushIntegerIntegerMap(joinRoles);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			ranks = is.popList(RankRole.class);
			rankday = is.popInteger();
			isRankWeardSend = is.popByte();
			joinRoles = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushList(ranks);
			os.pushInteger(rankday);
			os.pushByte(isRankWeardSend);
			os.pushIntegerIntegerMap(joinRoles);
		}

		public List<RankRole> ranks;
		public int rankday;
		public byte isRankWeardSend;
		public Map<Integer, Integer> joinRoles;
	}

	public static class DBMapFlagInfo implements Stream.IStreamable, Stream.KCloneable<DBMapFlagInfo>, SStream.IStreamable
	{

		public DBMapFlagInfo() { }

		public DBMapFlagInfo(int mapId, int curSectId, int occupyTime, int lastRoleRewardTime, 
		                     int lastSectRewardTime)
		{
			this.mapId = mapId;
			this.curSectId = curSectId;
			this.occupyTime = occupyTime;
			this.lastRoleRewardTime = lastRoleRewardTime;
			this.lastSectRewardTime = lastSectRewardTime;
		}

		public DBMapFlagInfo ksClone()
		{
			return new DBMapFlagInfo(mapId, curSectId, occupyTime, lastRoleRewardTime, 
			                         lastSectRewardTime);
		}

		@Override
		public DBMapFlagInfo kdClone()
		{
			DBMapFlagInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			curSectId = is.popInteger();
			occupyTime = is.popInteger();
			lastRoleRewardTime = is.popInteger();
			lastSectRewardTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(curSectId);
			os.pushInteger(occupyTime);
			os.pushInteger(lastRoleRewardTime);
			os.pushInteger(lastSectRewardTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			mapId = is.popInteger();
			curSectId = is.popInteger();
			occupyTime = is.popInteger();
			lastRoleRewardTime = is.popInteger();
			lastSectRewardTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(curSectId);
			os.pushInteger(occupyTime);
			os.pushInteger(lastRoleRewardTime);
			os.pushInteger(lastSectRewardTime);
		}

		public int mapId;
		public int curSectId;
		public int occupyTime;
		public int lastRoleRewardTime;
		public int lastSectRewardTime;
	}

	public static class DBTitleSlot implements Stream.IStreamable, Stream.KCloneable<DBTitleSlot>, SStream.IStreamable
	{

		public DBTitleSlot() { }

		public DBTitleSlot(int titletype, int titleId)
		{
			this.titletype = titletype;
			this.titleId = titleId;
		}

		public DBTitleSlot ksClone()
		{
			return new DBTitleSlot(titletype, titleId);
		}

		@Override
		public DBTitleSlot kdClone()
		{
			DBTitleSlot _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			titletype = is.popInteger();
			titleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(titletype);
			os.pushInteger(titleId);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			titletype = is.popInteger();
			titleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(titletype);
			os.pushInteger(titleId);
		}

		public int titletype;
		public int titleId;
	}

	public static class DBRoleTitle implements Stream.IStreamable, Stream.KCloneable<DBRoleTitle>, SStream.IStreamable
	{

		public DBRoleTitle() { }

		public DBRoleTitle(Map<Integer, Integer> titles, int curPermanent, List<DBTitleSlot> curTimedTitles, int slotsize)
		{
			this.titles = titles;
			this.curPermanent = curPermanent;
			this.curTimedTitles = curTimedTitles;
			this.slotsize = slotsize;
		}

		public DBRoleTitle ksClone()
		{
			return new DBRoleTitle(titles, curPermanent, curTimedTitles, slotsize);
		}

		@Override
		public DBRoleTitle kdClone()
		{
			DBRoleTitle _kio_clobj = ksClone();
			_kio_clobj.titles = new TreeMap<Integer, Integer>(titles);
			_kio_clobj.curTimedTitles = Stream.clone(curTimedTitles);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			titles = is.popIntegerIntegerTreeMap();
			curPermanent = is.popInteger();
			curTimedTitles = is.popList(DBTitleSlot.class);
			slotsize = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(titles);
			os.pushInteger(curPermanent);
			os.pushList(curTimedTitles);
			os.pushInteger(slotsize);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			titles = is.popIntegerIntegerTreeMap();
			curPermanent = is.popInteger();
			curTimedTitles = is.popList(DBTitleSlot.class);
			slotsize = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(titles);
			os.pushInteger(curPermanent);
			os.pushList(curTimedTitles);
			os.pushInteger(slotsize);
		}

		public Map<Integer, Integer> titles;
		public int curPermanent;
		public List<DBTitleSlot> curTimedTitles;
		public int slotsize;
	}

	public static class DBBranchTask implements Stream.IStreamable, Stream.KCloneable<DBBranchTask>, SStream.IStreamable
	{

		public DBBranchTask() { }

		public DBBranchTask(int id, int value, int state, int receiveTime)
		{
			this.id = id;
			this.value = value;
			this.state = state;
			this.receiveTime = receiveTime;
		}

		public DBBranchTask ksClone()
		{
			return new DBBranchTask(id, value, state, receiveTime);
		}

		@Override
		public DBBranchTask kdClone()
		{
			DBBranchTask _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			state = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushInteger(state);
			os.pushInteger(receiveTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			state = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushInteger(state);
			os.pushInteger(receiveTime);
		}

		public int id;
		public int value;
		public int state;
		public int receiveTime;
	}

	public static class DBClimbTower implements Stream.IStreamable, Stream.KCloneable<DBClimbTower>, SStream.IStreamable
	{

		public DBClimbTower() { }

		public DBClimbTower(int dayTimesBuy, int dayTimesUsed, Set<Integer> finishFloors, Set<Integer> pets, 
		                    Map<Integer, Integer> history)
		{
			this.dayTimesBuy = dayTimesBuy;
			this.dayTimesUsed = dayTimesUsed;
			this.finishFloors = finishFloors;
			this.pets = pets;
			this.history = history;
		}

		public DBClimbTower ksClone()
		{
			return new DBClimbTower(dayTimesBuy, dayTimesUsed, finishFloors, pets, 
			                        history);
		}

		@Override
		public DBClimbTower kdClone()
		{
			DBClimbTower _kio_clobj = ksClone();
			_kio_clobj.finishFloors = new TreeSet<Integer>(finishFloors);
			_kio_clobj.pets = new TreeSet<Integer>(pets);
			_kio_clobj.history = new TreeMap<Integer, Integer>(history);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayTimesBuy = is.popInteger();
			dayTimesUsed = is.popInteger();
			finishFloors = is.popIntegerTreeSet();
			pets = is.popIntegerTreeSet();
			history = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayTimesBuy);
			os.pushInteger(dayTimesUsed);
			os.pushIntegerSet(finishFloors);
			os.pushIntegerSet(pets);
			os.pushIntegerIntegerMap(history);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayTimesBuy = is.popInteger();
			dayTimesUsed = is.popInteger();
			finishFloors = is.popIntegerTreeSet();
			pets = is.popIntegerTreeSet();
			history = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dayTimesBuy);
			os.pushInteger(dayTimesUsed);
			os.pushIntegerSet(finishFloors);
			os.pushIntegerSet(pets);
			os.pushIntegerIntegerMap(history);
		}

		public int dayTimesBuy;
		public int dayTimesUsed;
		public Set<Integer> finishFloors;
		public Set<Integer> pets;
		public Map<Integer, Integer> history;
	}

	public static class DBClimbTowerRecordDataCfg implements Stream.IStreamable, Stream.KCloneable<DBClimbTowerRecordDataCfg>, SStream.IStreamable
	{

		public DBClimbTowerRecordDataCfg() { }

		public DBClimbTowerRecordDataCfg(int roleId, String name, int floor)
		{
			this.roleId = roleId;
			this.name = name;
			this.floor = floor;
		}

		public DBClimbTowerRecordDataCfg ksClone()
		{
			return new DBClimbTowerRecordDataCfg(roleId, name, floor);
		}

		@Override
		public DBClimbTowerRecordDataCfg kdClone()
		{
			DBClimbTowerRecordDataCfg _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			name = is.popString();
			floor = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(name);
			os.pushInteger(floor);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleId = is.popInteger();
			name = is.popString();
			floor = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(roleId);
			os.pushString(name);
			os.pushInteger(floor);
		}

		public int roleId;
		public String name;
		public int floor;
	}

	public static class DBClimbTowerServerRecordDataCfg implements Stream.IStreamable, Stream.KCloneable<DBClimbTowerServerRecordDataCfg>, SStream.IStreamable
	{

		public DBClimbTowerServerRecordDataCfg() { }

		public DBClimbTowerServerRecordDataCfg(Map<Integer, DBClimbTowerRecordDataCfg> datas)
		{
			this.datas = datas;
		}

		public DBClimbTowerServerRecordDataCfg ksClone()
		{
			return new DBClimbTowerServerRecordDataCfg(datas);
		}

		@Override
		public DBClimbTowerServerRecordDataCfg kdClone()
		{
			DBClimbTowerServerRecordDataCfg _kio_clobj = ksClone();
			_kio_clobj.datas = Stream.clone(datas);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			datas = is.popIntegerTreeMap(DBClimbTowerRecordDataCfg.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(datas);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			datas = is.popIntegerTreeMap(DBClimbTowerRecordDataCfg.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerMap(datas);
		}

		public Map<Integer, DBClimbTowerRecordDataCfg> datas;
	}

	public static class DBClimbTowerRecordData implements Stream.IStreamable, Stream.KCloneable<DBClimbTowerRecordData>, SStream.IStreamable
	{

		public DBClimbTowerRecordData() { }

		public DBClimbTowerRecordData(int ownData, DBClimbTowerRecordDataCfg sectData, DBClimbTowerRecordDataCfg serverData)
		{
			this.ownData = ownData;
			this.sectData = sectData;
			this.serverData = serverData;
		}

		public DBClimbTowerRecordData ksClone()
		{
			return new DBClimbTowerRecordData(ownData, sectData, serverData);
		}

		@Override
		public DBClimbTowerRecordData kdClone()
		{
			DBClimbTowerRecordData _kio_clobj = ksClone();
			_kio_clobj.sectData = Stream.clone(sectData);
			_kio_clobj.serverData = Stream.clone(serverData);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ownData = is.popInteger();
			if( sectData == null )
				sectData = new DBClimbTowerRecordDataCfg();
			is.pop(sectData);
			if( serverData == null )
				serverData = new DBClimbTowerRecordDataCfg();
			is.pop(serverData);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ownData);
			os.push(sectData);
			os.push(serverData);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			ownData = is.popInteger();
			sectData = is.pop(DBClimbTowerRecordDataCfg.class);
			serverData = is.pop(DBClimbTowerRecordDataCfg.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(ownData);
			os.push(sectData);
			os.push(serverData);
		}

		public int ownData;
		public DBClimbTowerRecordDataCfg sectData;
		public DBClimbTowerRecordDataCfg serverData;
	}

	public static class DBClimbTowerFame implements Stream.IStreamable, Stream.KCloneable<DBClimbTowerFame>, SStream.IStreamable
	{

		public DBClimbTowerFame() { }

		public DBClimbTowerFame(int level, int fame, Set<Integer> reward)
		{
			this.level = level;
			this.fame = fame;
			this.reward = reward;
		}

		public DBClimbTowerFame ksClone()
		{
			return new DBClimbTowerFame(level, fame, reward);
		}

		@Override
		public DBClimbTowerFame kdClone()
		{
			DBClimbTowerFame _kio_clobj = ksClone();
			_kio_clobj.reward = new TreeSet<Integer>(reward);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			fame = is.popInteger();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(fame);
			os.pushIntegerSet(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			level = is.popInteger();
			fame = is.popInteger();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(level);
			os.pushInteger(fame);
			os.pushIntegerSet(reward);
		}

		public int level;
		public int fame;
		public Set<Integer> reward;
	}

	public static class DBSecretTaskData implements Stream.IStreamable, Stream.KCloneable<DBSecretTaskData>, SStream.IStreamable
	{

		public DBSecretTaskData() { }

		public DBSecretTaskData(int id, int value, int reward, int receiveTime)
		{
			this.id = id;
			this.value = value;
			this.reward = reward;
			this.receiveTime = receiveTime;
		}

		public DBSecretTaskData ksClone()
		{
			return new DBSecretTaskData(id, value, reward, receiveTime);
		}

		@Override
		public DBSecretTaskData kdClone()
		{
			DBSecretTaskData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			reward = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushInteger(reward);
			os.pushInteger(receiveTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
			reward = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
			os.pushInteger(reward);
			os.pushInteger(receiveTime);
		}

		public int id;
		public int value;
		public int reward;
		public int receiveTime;
	}

	public static class SectDeliverReward implements Stream.IStreamable, Stream.KCloneable<SectDeliverReward>, SStream.IStreamable
	{

		public SectDeliverReward() { }

		public SectDeliverReward(int exp, int extTo, int money, int moneyTo, 
		                         int timeReward, int sectWishExp, int sectWishMoney, int isProtect)
		{
			this.exp = exp;
			this.extTo = extTo;
			this.money = money;
			this.moneyTo = moneyTo;
			this.timeReward = timeReward;
			this.sectWishExp = sectWishExp;
			this.sectWishMoney = sectWishMoney;
			this.isProtect = isProtect;
		}

		public SectDeliverReward ksClone()
		{
			return new SectDeliverReward(exp, extTo, money, moneyTo, 
			                             timeReward, sectWishExp, sectWishMoney, isProtect);
		}

		@Override
		public SectDeliverReward kdClone()
		{
			SectDeliverReward _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			exp = is.popInteger();
			extTo = is.popInteger();
			money = is.popInteger();
			moneyTo = is.popInteger();
			timeReward = is.popInteger();
			sectWishExp = is.popInteger();
			sectWishMoney = is.popInteger();
			isProtect = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(exp);
			os.pushInteger(extTo);
			os.pushInteger(money);
			os.pushInteger(moneyTo);
			os.pushInteger(timeReward);
			os.pushInteger(sectWishExp);
			os.pushInteger(sectWishMoney);
			os.pushInteger(isProtect);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			exp = is.popInteger();
			extTo = is.popInteger();
			money = is.popInteger();
			moneyTo = is.popInteger();
			timeReward = is.popInteger();
			sectWishExp = is.popInteger();
			sectWishMoney = is.popInteger();
			isProtect = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(exp);
			os.pushInteger(extTo);
			os.pushInteger(money);
			os.pushInteger(moneyTo);
			os.pushInteger(timeReward);
			os.pushInteger(sectWishExp);
			os.pushInteger(sectWishMoney);
			os.pushInteger(isProtect);
		}

		public int exp;
		public int extTo;
		public int money;
		public int moneyTo;
		public int timeReward;
		public int sectWishExp;
		public int sectWishMoney;
		public int isProtect;
	}

	public static class DBSectDeliver implements Stream.IStreamable, Stream.KCloneable<DBSectDeliver>, SStream.IStreamable
	{

		public DBSectDeliver() { }

		public DBSectDeliver(int dayAcceptTime, int historyAcceptTime, int dayRobTime, List<SectDeliverTaskInfo> tasks, 
		                     int isProtect, int refreshTimes, int wishTimes, int routeId, 
		                     int vehicleId, int startTime, int searchHelpTime, int beRobbedTimes, 
		                     int tempExp, int tempMoney, int tempHp, int curTaskId, 
		                     int curRouteId, int robMoney, int historyRobMoney, int padding)
		{
			this.dayAcceptTime = dayAcceptTime;
			this.historyAcceptTime = historyAcceptTime;
			this.dayRobTime = dayRobTime;
			this.tasks = tasks;
			this.isProtect = isProtect;
			this.refreshTimes = refreshTimes;
			this.wishTimes = wishTimes;
			this.routeId = routeId;
			this.vehicleId = vehicleId;
			this.startTime = startTime;
			this.searchHelpTime = searchHelpTime;
			this.beRobbedTimes = beRobbedTimes;
			this.tempExp = tempExp;
			this.tempMoney = tempMoney;
			this.tempHp = tempHp;
			this.curTaskId = curTaskId;
			this.curRouteId = curRouteId;
			this.robMoney = robMoney;
			this.historyRobMoney = historyRobMoney;
			this.padding = padding;
		}

		public DBSectDeliver ksClone()
		{
			return new DBSectDeliver(dayAcceptTime, historyAcceptTime, dayRobTime, tasks, 
			                         isProtect, refreshTimes, wishTimes, routeId, 
			                         vehicleId, startTime, searchHelpTime, beRobbedTimes, 
			                         tempExp, tempMoney, tempHp, curTaskId, 
			                         curRouteId, robMoney, historyRobMoney, padding);
		}

		@Override
		public DBSectDeliver kdClone()
		{
			DBSectDeliver _kio_clobj = ksClone();
			_kio_clobj.tasks = Stream.clone(tasks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayAcceptTime = is.popInteger();
			historyAcceptTime = is.popInteger();
			dayRobTime = is.popInteger();
			tasks = is.popList(SectDeliverTaskInfo.class);
			isProtect = is.popInteger();
			refreshTimes = is.popInteger();
			wishTimes = is.popInteger();
			routeId = is.popInteger();
			vehicleId = is.popInteger();
			startTime = is.popInteger();
			searchHelpTime = is.popInteger();
			beRobbedTimes = is.popInteger();
			tempExp = is.popInteger();
			tempMoney = is.popInteger();
			tempHp = is.popInteger();
			curTaskId = is.popInteger();
			curRouteId = is.popInteger();
			robMoney = is.popInteger();
			historyRobMoney = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayAcceptTime);
			os.pushInteger(historyAcceptTime);
			os.pushInteger(dayRobTime);
			os.pushList(tasks);
			os.pushInteger(isProtect);
			os.pushInteger(refreshTimes);
			os.pushInteger(wishTimes);
			os.pushInteger(routeId);
			os.pushInteger(vehicleId);
			os.pushInteger(startTime);
			os.pushInteger(searchHelpTime);
			os.pushInteger(beRobbedTimes);
			os.pushInteger(tempExp);
			os.pushInteger(tempMoney);
			os.pushInteger(tempHp);
			os.pushInteger(curTaskId);
			os.pushInteger(curRouteId);
			os.pushInteger(robMoney);
			os.pushInteger(historyRobMoney);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayAcceptTime = is.popInteger();
			historyAcceptTime = is.popInteger();
			dayRobTime = is.popInteger();
			tasks = is.popList(SectDeliverTaskInfo.class);
			isProtect = is.popInteger();
			refreshTimes = is.popInteger();
			wishTimes = is.popInteger();
			routeId = is.popInteger();
			vehicleId = is.popInteger();
			startTime = is.popInteger();
			searchHelpTime = is.popInteger();
			beRobbedTimes = is.popInteger();
			tempExp = is.popInteger();
			tempMoney = is.popInteger();
			tempHp = is.popInteger();
			curTaskId = is.popInteger();
			curRouteId = is.popInteger();
			robMoney = is.popInteger();
			historyRobMoney = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dayAcceptTime);
			os.pushInteger(historyAcceptTime);
			os.pushInteger(dayRobTime);
			os.pushList(tasks);
			os.pushInteger(isProtect);
			os.pushInteger(refreshTimes);
			os.pushInteger(wishTimes);
			os.pushInteger(routeId);
			os.pushInteger(vehicleId);
			os.pushInteger(startTime);
			os.pushInteger(searchHelpTime);
			os.pushInteger(beRobbedTimes);
			os.pushInteger(tempExp);
			os.pushInteger(tempMoney);
			os.pushInteger(tempHp);
			os.pushInteger(curTaskId);
			os.pushInteger(curRouteId);
			os.pushInteger(robMoney);
			os.pushInteger(historyRobMoney);
			os.pushInteger(padding);
		}

		public int dayAcceptTime;
		public int historyAcceptTime;
		public int dayRobTime;
		public List<SectDeliverTaskInfo> tasks;
		public int isProtect;
		public int refreshTimes;
		public int wishTimes;
		public int routeId;
		public int vehicleId;
		public int startTime;
		public int searchHelpTime;
		public int beRobbedTimes;
		public int tempExp;
		public int tempMoney;
		public int tempHp;
		public int curTaskId;
		public int curRouteId;
		public int robMoney;
		public int historyRobMoney;
		public int padding;
	}

	public static class DBDeliverInSect implements Stream.IStreamable, Stream.KCloneable<DBDeliverInSect>, SStream.IStreamable
	{

		public DBDeliverInSect() { }

		public DBDeliverInSect(int isDeliver)
		{
			this.isDeliver = isDeliver;
		}

		public DBDeliverInSect ksClone()
		{
			return new DBDeliverInSect(isDeliver);
		}

		@Override
		public DBDeliverInSect kdClone()
		{
			DBDeliverInSect _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			isDeliver = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(isDeliver);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			isDeliver = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(isDeliver);
		}

		public int isDeliver;
	}

	public static class DBDeliverWishInSect implements Stream.IStreamable, Stream.KCloneable<DBDeliverWishInSect>, SStream.IStreamable
	{

		public DBDeliverWishInSect() { }

		public DBDeliverWishInSect(int lastChangeTime, int exp, int money, int hp)
		{
			this.lastChangeTime = lastChangeTime;
			this.exp = exp;
			this.money = money;
			this.hp = hp;
		}

		public DBDeliverWishInSect ksClone()
		{
			return new DBDeliverWishInSect(lastChangeTime, exp, money, hp);
		}

		@Override
		public DBDeliverWishInSect kdClone()
		{
			DBDeliverWishInSect _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastChangeTime = is.popInteger();
			exp = is.popInteger();
			money = is.popInteger();
			hp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lastChangeTime);
			os.pushInteger(exp);
			os.pushInteger(money);
			os.pushInteger(hp);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lastChangeTime = is.popInteger();
			exp = is.popInteger();
			money = is.popInteger();
			hp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(lastChangeTime);
			os.pushInteger(exp);
			os.pushInteger(money);
			os.pushInteger(hp);
		}

		public int lastChangeTime;
		public int exp;
		public int money;
		public int hp;
	}

	public static class DBDeliverWishListItem implements Stream.IStreamable, Stream.KCloneable<DBDeliverWishListItem>, SStream.IStreamable
	{

		public DBDeliverWishListItem() { }

		public DBDeliverWishListItem(String name, int job, int wishTimes)
		{
			this.name = name;
			this.job = job;
			this.wishTimes = wishTimes;
		}

		public DBDeliverWishListItem ksClone()
		{
			return new DBDeliverWishListItem(name, job, wishTimes);
		}

		@Override
		public DBDeliverWishListItem kdClone()
		{
			DBDeliverWishListItem _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			name = is.popString();
			job = is.popInteger();
			wishTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(name);
			os.pushInteger(job);
			os.pushInteger(wishTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			name = is.popString();
			job = is.popInteger();
			wishTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(name);
			os.pushInteger(job);
			os.pushInteger(wishTimes);
		}

		public String name;
		public int job;
		public int wishTimes;
	}

	public static class DBSectDeliverWishChange implements Stream.IStreamable, Stream.KCloneable<DBSectDeliverWishChange>, SStream.IStreamable
	{

		public DBSectDeliverWishChange() { }

		public DBSectDeliverWishChange(int exp, int expTo, int money, int moneyTo, 
		                               int hp, int hpTo)
		{
			this.exp = exp;
			this.expTo = expTo;
			this.money = money;
			this.moneyTo = moneyTo;
			this.hp = hp;
			this.hpTo = hpTo;
		}

		public DBSectDeliverWishChange ksClone()
		{
			return new DBSectDeliverWishChange(exp, expTo, money, moneyTo, 
			                                   hp, hpTo);
		}

		@Override
		public DBSectDeliverWishChange kdClone()
		{
			DBSectDeliverWishChange _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			exp = is.popInteger();
			expTo = is.popInteger();
			money = is.popInteger();
			moneyTo = is.popInteger();
			hp = is.popInteger();
			hpTo = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(exp);
			os.pushInteger(expTo);
			os.pushInteger(money);
			os.pushInteger(moneyTo);
			os.pushInteger(hp);
			os.pushInteger(hpTo);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			exp = is.popInteger();
			expTo = is.popInteger();
			money = is.popInteger();
			moneyTo = is.popInteger();
			hp = is.popInteger();
			hpTo = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(exp);
			os.pushInteger(expTo);
			os.pushInteger(money);
			os.pushInteger(moneyTo);
			os.pushInteger(hp);
			os.pushInteger(hpTo);
		}

		public int exp;
		public int expTo;
		public int money;
		public int moneyTo;
		public int hp;
		public int hpTo;
	}

	public static class DBEscortCar implements Stream.IStreamable
	{

		public DBEscortCar() { }

		public DBEscortCar(int mapID, int mapInstance, Location location, Map<Integer, Integer> damageRoles, 
		                   int configID, int curHP, int maxHP, int brokenTimes)
		{
			this.mapID = mapID;
			this.mapInstance = mapInstance;
			this.location = location;
			this.damageRoles = damageRoles;
			this.configID = configID;
			this.curHP = curHP;
			this.maxHP = maxHP;
			this.brokenTimes = brokenTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapID = is.popInteger();
			mapInstance = is.popInteger();
			if( location == null )
				location = new Location();
			is.pop(location);
			damageRoles = is.popIntegerIntegerTreeMap();
			configID = is.popInteger();
			curHP = is.popInteger();
			maxHP = is.popInteger();
			brokenTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapID);
			os.pushInteger(mapInstance);
			os.push(location);
			os.pushIntegerIntegerMap(damageRoles);
			os.pushInteger(configID);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
			os.pushInteger(brokenTimes);
		}

		public int mapID;
		public int mapInstance;
		public Location location;
		public Map<Integer, Integer> damageRoles;
		public int configID;
		public int curHP;
		public int maxHP;
		public int brokenTimes;
	}

	public static class DBProduceData implements Stream.IStreamable, Stream.KCloneable<DBProduceData>, SStream.IStreamable
	{

		public DBProduceData() { }

		public DBProduceData(Set<Integer> recipes, int produceLvl, int produceExp, int splitSP, 
		                     int splitSPRevertTime, int dayBuyTimes)
		{
			this.recipes = recipes;
			this.produceLvl = produceLvl;
			this.produceExp = produceExp;
			this.splitSP = splitSP;
			this.splitSPRevertTime = splitSPRevertTime;
			this.dayBuyTimes = dayBuyTimes;
		}

		public DBProduceData ksClone()
		{
			return new DBProduceData(recipes, produceLvl, produceExp, splitSP, 
			                         splitSPRevertTime, dayBuyTimes);
		}

		@Override
		public DBProduceData kdClone()
		{
			DBProduceData _kio_clobj = ksClone();
			_kio_clobj.recipes = new TreeSet<Integer>(recipes);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			recipes = is.popIntegerTreeSet();
			produceLvl = is.popInteger();
			produceExp = is.popInteger();
			splitSP = is.popInteger();
			splitSPRevertTime = is.popInteger();
			dayBuyTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(recipes);
			os.pushInteger(produceLvl);
			os.pushInteger(produceExp);
			os.pushInteger(splitSP);
			os.pushInteger(splitSPRevertTime);
			os.pushInteger(dayBuyTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			recipes = is.popIntegerTreeSet();
			produceLvl = is.popInteger();
			produceExp = is.popInteger();
			splitSP = is.popInteger();
			splitSPRevertTime = is.popInteger();
			dayBuyTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerSet(recipes);
			os.pushInteger(produceLvl);
			os.pushInteger(produceExp);
			os.pushInteger(splitSP);
			os.pushInteger(splitSPRevertTime);
			os.pushInteger(dayBuyTimes);
		}

		public Set<Integer> recipes;
		public int produceLvl;
		public int produceExp;
		public int splitSP;
		public int splitSPRevertTime;
		public int dayBuyTimes;
	}

	public static class DBFusionData implements Stream.IStreamable, Stream.KCloneable<DBFusionData>, SStream.IStreamable
	{

		public DBFusionData() { }

		public DBFusionData(int fusionPoint, int fusionTimes, int padding1, int padding2)
		{
			this.fusionPoint = fusionPoint;
			this.fusionTimes = fusionTimes;
			this.padding1 = padding1;
			this.padding2 = padding2;
		}

		public DBFusionData ksClone()
		{
			return new DBFusionData(fusionPoint, fusionTimes, padding1, padding2);
		}

		@Override
		public DBFusionData kdClone()
		{
			DBFusionData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fusionPoint = is.popInteger();
			fusionTimes = is.popInteger();
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(fusionPoint);
			os.pushInteger(fusionTimes);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			fusionPoint = is.popInteger();
			fusionTimes = is.popInteger();
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(fusionPoint);
			os.pushInteger(fusionTimes);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		public int fusionPoint;
		public int fusionTimes;
		public int padding1;
		public int padding2;
	}

	public static class DBMessageBoard implements Stream.IStreamable, Stream.KCloneable<DBMessageBoard>, SStream.IStreamable
	{

		public DBMessageBoard() { }

		public DBMessageBoard(int side, int id, int roleId, String roleName, 
		                      int sendTime, int lifeTime, String content, byte anonymous, 
		                      int praiseTime, int treadTime)
		{
			this.side = side;
			this.id = id;
			this.roleId = roleId;
			this.roleName = roleName;
			this.sendTime = sendTime;
			this.lifeTime = lifeTime;
			this.content = content;
			this.anonymous = anonymous;
			this.praiseTime = praiseTime;
			this.treadTime = treadTime;
		}

		public DBMessageBoard ksClone()
		{
			return new DBMessageBoard(side, id, roleId, roleName, 
			                          sendTime, lifeTime, content, anonymous, 
			                          praiseTime, treadTime);
		}

		@Override
		public DBMessageBoard kdClone()
		{
			DBMessageBoard _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			side = is.popInteger();
			id = is.popInteger();
			roleId = is.popInteger();
			roleName = is.popString();
			sendTime = is.popInteger();
			lifeTime = is.popInteger();
			content = is.popString();
			anonymous = is.popByte();
			praiseTime = is.popInteger();
			treadTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(side);
			os.pushInteger(id);
			os.pushInteger(roleId);
			os.pushString(roleName);
			os.pushInteger(sendTime);
			os.pushInteger(lifeTime);
			os.pushString(content);
			os.pushByte(anonymous);
			os.pushInteger(praiseTime);
			os.pushInteger(treadTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			side = is.popInteger();
			id = is.popInteger();
			roleId = is.popInteger();
			roleName = is.popString();
			sendTime = is.popInteger();
			lifeTime = is.popInteger();
			content = is.popString();
			anonymous = is.popByte();
			praiseTime = is.popInteger();
			treadTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(side);
			os.pushInteger(id);
			os.pushInteger(roleId);
			os.pushString(roleName);
			os.pushInteger(sendTime);
			os.pushInteger(lifeTime);
			os.pushString(content);
			os.pushByte(anonymous);
			os.pushInteger(praiseTime);
			os.pushInteger(treadTime);
		}

		public int side;
		public int id;
		public int roleId;
		public String roleName;
		public int sendTime;
		public int lifeTime;
		public String content;
		public byte anonymous;
		public int praiseTime;
		public int treadTime;
	}

	public static class DBSchedule implements Stream.IStreamable, Stream.KCloneable<DBSchedule>, SStream.IStreamable
	{

		public DBSchedule() { }

		public DBSchedule(int activity, Map<Integer, Integer> task2num, Set<Integer> rewards, int padding1, 
		                  int padding2)
		{
			this.activity = activity;
			this.task2num = task2num;
			this.rewards = rewards;
			this.padding1 = padding1;
			this.padding2 = padding2;
		}

		public DBSchedule ksClone()
		{
			return new DBSchedule(activity, task2num, rewards, padding1, 
			                      padding2);
		}

		@Override
		public DBSchedule kdClone()
		{
			DBSchedule _kio_clobj = ksClone();
			_kio_clobj.task2num = new TreeMap<Integer, Integer>(task2num);
			_kio_clobj.rewards = new TreeSet<Integer>(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			activity = is.popInteger();
			task2num = is.popIntegerIntegerTreeMap();
			rewards = is.popIntegerTreeSet();
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(activity);
			os.pushIntegerIntegerMap(task2num);
			os.pushIntegerSet(rewards);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			activity = is.popInteger();
			task2num = is.popIntegerIntegerTreeMap();
			rewards = is.popIntegerTreeSet();
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(activity);
			os.pushIntegerIntegerMap(task2num);
			os.pushIntegerSet(rewards);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		public int activity;
		public Map<Integer, Integer> task2num;
		public Set<Integer> rewards;
		public int padding1;
		public int padding2;
	}

	public static class DBArmor implements Stream.IStreamable, Stream.KCloneable<DBArmor>, SStream.IStreamable
	{

		public DBArmor() { }

		public DBArmor(int curArmor, List<ArmorData> allArmors, Map<Integer, Integer> runeBag, int curResetTalentTimes, 
		               int padding)
		{
			this.curArmor = curArmor;
			this.allArmors = allArmors;
			this.runeBag = runeBag;
			this.curResetTalentTimes = curResetTalentTimes;
			this.padding = padding;
		}

		public DBArmor ksClone()
		{
			return new DBArmor(curArmor, allArmors, runeBag, curResetTalentTimes, 
			                   padding);
		}

		@Override
		public DBArmor kdClone()
		{
			DBArmor _kio_clobj = ksClone();
			_kio_clobj.allArmors = Stream.clone(allArmors);
			_kio_clobj.runeBag = new TreeMap<Integer, Integer>(runeBag);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curArmor = is.popInteger();
			allArmors = is.popList(ArmorData.class);
			runeBag = is.popIntegerIntegerTreeMap();
			curResetTalentTimes = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curArmor);
			os.pushList(allArmors);
			os.pushIntegerIntegerMap(runeBag);
			os.pushInteger(curResetTalentTimes);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			curArmor = is.popInteger();
			allArmors = is.popList(ArmorData.class);
			runeBag = is.popIntegerIntegerTreeMap();
			curResetTalentTimes = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(curArmor);
			os.pushList(allArmors);
			os.pushIntegerIntegerMap(runeBag);
			os.pushInteger(curResetTalentTimes);
			os.pushInteger(padding);
		}

		public int curArmor;
		public List<ArmorData> allArmors;
		public Map<Integer, Integer> runeBag;
		public int curResetTalentTimes;
		public int padding;
	}

	public static class ArmorData implements Stream.IStreamable, Stream.KCloneable<ArmorData>, SStream.IStreamable
	{

		public ArmorData() { }

		public ArmorData(int id, byte unlocked, int level, int exp, 
		                 int useTalentPoint, int rank, int wishPoint, Map<Integer, Integer> talentPoint, 
		                 List<SoltData> soltGroupData, int curUpRankTime)
		{
			this.id = id;
			this.unlocked = unlocked;
			this.level = level;
			this.exp = exp;
			this.useTalentPoint = useTalentPoint;
			this.rank = rank;
			this.wishPoint = wishPoint;
			this.talentPoint = talentPoint;
			this.soltGroupData = soltGroupData;
			this.curUpRankTime = curUpRankTime;
		}

		public ArmorData ksClone()
		{
			return new ArmorData(id, unlocked, level, exp, 
			                     useTalentPoint, rank, wishPoint, talentPoint, 
			                     soltGroupData, curUpRankTime);
		}

		@Override
		public ArmorData kdClone()
		{
			ArmorData _kio_clobj = ksClone();
			_kio_clobj.talentPoint = new TreeMap<Integer, Integer>(talentPoint);
			_kio_clobj.soltGroupData = Stream.clone(soltGroupData);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			unlocked = is.popByte();
			level = is.popInteger();
			exp = is.popInteger();
			useTalentPoint = is.popInteger();
			rank = is.popInteger();
			wishPoint = is.popInteger();
			talentPoint = is.popIntegerIntegerTreeMap();
			soltGroupData = is.popList(SoltData.class);
			curUpRankTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushByte(unlocked);
			os.pushInteger(level);
			os.pushInteger(exp);
			os.pushInteger(useTalentPoint);
			os.pushInteger(rank);
			os.pushInteger(wishPoint);
			os.pushIntegerIntegerMap(talentPoint);
			os.pushList(soltGroupData);
			os.pushInteger(curUpRankTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			unlocked = is.popByte();
			level = is.popInteger();
			exp = is.popInteger();
			useTalentPoint = is.popInteger();
			rank = is.popInteger();
			wishPoint = is.popInteger();
			talentPoint = is.popIntegerIntegerTreeMap();
			soltGroupData = is.popList(SoltData.class);
			curUpRankTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushByte(unlocked);
			os.pushInteger(level);
			os.pushInteger(exp);
			os.pushInteger(useTalentPoint);
			os.pushInteger(rank);
			os.pushInteger(wishPoint);
			os.pushIntegerIntegerMap(talentPoint);
			os.pushList(soltGroupData);
			os.pushInteger(curUpRankTime);
		}

		public int id;
		public byte unlocked;
		public int level;
		public int exp;
		public int useTalentPoint;
		public int rank;
		public int wishPoint;
		public Map<Integer, Integer> talentPoint;
		public List<SoltData> soltGroupData;
		public int curUpRankTime;
	}

	public static class ArmorFightData implements Stream.IStreamable, Stream.KCloneable<ArmorFightData>, SStream.IStreamable
	{

		public ArmorFightData() { }

		public ArmorFightData(int id, int level, int rank, List<SoltData> soltGroupData, 
		                      Map<Integer, Integer> talentPoint)
		{
			this.id = id;
			this.level = level;
			this.rank = rank;
			this.soltGroupData = soltGroupData;
			this.talentPoint = talentPoint;
		}

		public ArmorFightData ksClone()
		{
			return new ArmorFightData(id, level, rank, soltGroupData, 
			                          talentPoint);
		}

		@Override
		public ArmorFightData kdClone()
		{
			ArmorFightData _kio_clobj = ksClone();
			_kio_clobj.soltGroupData = Stream.clone(soltGroupData);
			_kio_clobj.talentPoint = new TreeMap<Integer, Integer>(talentPoint);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			rank = is.popInteger();
			soltGroupData = is.popList(SoltData.class);
			talentPoint = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(rank);
			os.pushList(soltGroupData);
			os.pushIntegerIntegerMap(talentPoint);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			rank = is.popInteger();
			soltGroupData = is.popList(SoltData.class);
			talentPoint = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(rank);
			os.pushList(soltGroupData);
			os.pushIntegerIntegerMap(talentPoint);
		}

		public int id;
		public int level;
		public int rank;
		public List<SoltData> soltGroupData;
		public Map<Integer, Integer> talentPoint;
	}

	public static class SoltData implements Stream.IStreamable, Stream.KCloneable<SoltData>, SStream.IStreamable
	{

		public SoltData() { }

		public SoltData(byte unlocked, List<Integer> solts)
		{
			this.unlocked = unlocked;
			this.solts = solts;
		}

		public SoltData ksClone()
		{
			return new SoltData(unlocked, solts);
		}

		@Override
		public SoltData kdClone()
		{
			SoltData _kio_clobj = ksClone();
			_kio_clobj.solts = new ArrayList<Integer>(solts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			unlocked = is.popByte();
			solts = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(unlocked);
			os.pushIntegerList(solts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			unlocked = is.popByte();
			solts = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushByte(unlocked);
			os.pushIntegerList(solts);
		}

		public byte unlocked;
		public List<Integer> solts;
	}

	public static class DBSkillPreset implements Stream.IStreamable, Stream.KCloneable<DBSkillPreset>, SStream.IStreamable
	{

		public DBSkillPreset() { }

		public DBSkillPreset(String skillPresetName, List<Integer> skillPreset, int diySkill, int uniqueSkill)
		{
			this.skillPresetName = skillPresetName;
			this.skillPreset = skillPreset;
			this.diySkill = diySkill;
			this.uniqueSkill = uniqueSkill;
		}

		public DBSkillPreset ksClone()
		{
			return new DBSkillPreset(skillPresetName, skillPreset, diySkill, uniqueSkill);
		}

		@Override
		public DBSkillPreset kdClone()
		{
			DBSkillPreset _kio_clobj = ksClone();
			_kio_clobj.skillPreset = new ArrayList<Integer>(skillPreset);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillPresetName = is.popString();
			skillPreset = is.popIntegerList();
			diySkill = is.popInteger();
			uniqueSkill = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(skillPresetName);
			os.pushIntegerList(skillPreset);
			os.pushInteger(diySkill);
			os.pushInteger(uniqueSkill);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			skillPresetName = is.popString();
			skillPreset = is.popIntegerList();
			diySkill = is.popInteger();
			uniqueSkill = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(skillPresetName);
			os.pushIntegerList(skillPreset);
			os.pushInteger(diySkill);
			os.pushInteger(uniqueSkill);
		}

		public String skillPresetName;
		public List<Integer> skillPreset;
		public int diySkill;
		public int uniqueSkill;
	}

	public static class DBSpiritsPreset implements Stream.IStreamable, Stream.KCloneable<DBSpiritsPreset>, SStream.IStreamable
	{

		public DBSpiritsPreset() { }

		public DBSpiritsPreset(String spiritsPresetName, List<Integer> spiritsPreset)
		{
			this.spiritsPresetName = spiritsPresetName;
			this.spiritsPreset = spiritsPreset;
		}

		public DBSpiritsPreset ksClone()
		{
			return new DBSpiritsPreset(spiritsPresetName, spiritsPreset);
		}

		@Override
		public DBSpiritsPreset kdClone()
		{
			DBSpiritsPreset _kio_clobj = ksClone();
			_kio_clobj.spiritsPreset = new ArrayList<Integer>(spiritsPreset);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spiritsPresetName = is.popString();
			spiritsPreset = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(spiritsPresetName);
			os.pushIntegerList(spiritsPreset);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			spiritsPresetName = is.popString();
			spiritsPreset = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(spiritsPresetName);
			os.pushIntegerList(spiritsPreset);
		}

		public String spiritsPresetName;
		public List<Integer> spiritsPreset;
	}

	public static class DBRoleMarriageData implements Stream.IStreamable, Stream.KCloneable<DBRoleMarriageData>, SStream.IStreamable
	{

		public DBRoleMarriageData() { }

		public DBRoleMarriageData(int divorceTime, int marriageShareId, int lastTransformTime, int dayTakeWeddingBoxTimes, 
		                          int dayTakeBanquetTimes, String partnerName)
		{
			this.divorceTime = divorceTime;
			this.marriageShareId = marriageShareId;
			this.lastTransformTime = lastTransformTime;
			this.dayTakeWeddingBoxTimes = dayTakeWeddingBoxTimes;
			this.dayTakeBanquetTimes = dayTakeBanquetTimes;
			this.partnerName = partnerName;
		}

		public DBRoleMarriageData ksClone()
		{
			return new DBRoleMarriageData(divorceTime, marriageShareId, lastTransformTime, dayTakeWeddingBoxTimes, 
			                              dayTakeBanquetTimes, partnerName);
		}

		@Override
		public DBRoleMarriageData kdClone()
		{
			DBRoleMarriageData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			divorceTime = is.popInteger();
			marriageShareId = is.popInteger();
			lastTransformTime = is.popInteger();
			dayTakeWeddingBoxTimes = is.popInteger();
			dayTakeBanquetTimes = is.popInteger();
			partnerName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(divorceTime);
			os.pushInteger(marriageShareId);
			os.pushInteger(lastTransformTime);
			os.pushInteger(dayTakeWeddingBoxTimes);
			os.pushInteger(dayTakeBanquetTimes);
			os.pushString(partnerName);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			divorceTime = is.popInteger();
			marriageShareId = is.popInteger();
			lastTransformTime = is.popInteger();
			dayTakeWeddingBoxTimes = is.popInteger();
			dayTakeBanquetTimes = is.popInteger();
			partnerName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(divorceTime);
			os.pushInteger(marriageShareId);
			os.pushInteger(lastTransformTime);
			os.pushInteger(dayTakeWeddingBoxTimes);
			os.pushInteger(dayTakeBanquetTimes);
			os.pushString(partnerName);
		}

		public int divorceTime;
		public int marriageShareId;
		public int lastTransformTime;
		public int dayTakeWeddingBoxTimes;
		public int dayTakeBanquetTimes;
		public String partnerName;
	}

	public static class DBSectGroupMapData implements Stream.IStreamable, Stream.KCloneable<DBSectGroupMapData>, SStream.IStreamable
	{

		public DBSectGroupMapData() { }

		public DBSectGroupMapData(int lastStartTime, int lastEndTime, byte isfinish, Map<Integer, Integer> killNum, 
		                          Map<Integer, Integer> monsterProcess, Map<Integer, Integer> damageRank)
		{
			this.lastStartTime = lastStartTime;
			this.lastEndTime = lastEndTime;
			this.isfinish = isfinish;
			this.killNum = killNum;
			this.monsterProcess = monsterProcess;
			this.damageRank = damageRank;
		}

		public DBSectGroupMapData ksClone()
		{
			return new DBSectGroupMapData(lastStartTime, lastEndTime, isfinish, killNum, 
			                              monsterProcess, damageRank);
		}

		@Override
		public DBSectGroupMapData kdClone()
		{
			DBSectGroupMapData _kio_clobj = ksClone();
			_kio_clobj.killNum = new TreeMap<Integer, Integer>(killNum);
			_kio_clobj.monsterProcess = new TreeMap<Integer, Integer>(monsterProcess);
			_kio_clobj.damageRank = new TreeMap<Integer, Integer>(damageRank);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastStartTime = is.popInteger();
			lastEndTime = is.popInteger();
			isfinish = is.popByte();
			killNum = is.popIntegerIntegerTreeMap();
			monsterProcess = is.popIntegerIntegerTreeMap();
			damageRank = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lastStartTime);
			os.pushInteger(lastEndTime);
			os.pushByte(isfinish);
			os.pushIntegerIntegerMap(killNum);
			os.pushIntegerIntegerMap(monsterProcess);
			os.pushIntegerIntegerMap(damageRank);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lastStartTime = is.popInteger();
			lastEndTime = is.popInteger();
			isfinish = is.popByte();
			killNum = is.popIntegerIntegerTreeMap();
			monsterProcess = is.popIntegerIntegerTreeMap();
			damageRank = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(lastStartTime);
			os.pushInteger(lastEndTime);
			os.pushByte(isfinish);
			os.pushIntegerIntegerMap(killNum);
			os.pushIntegerIntegerMap(monsterProcess);
			os.pushIntegerIntegerMap(damageRank);
		}

		public int lastStartTime;
		public int lastEndTime;
		public byte isfinish;
		public Map<Integer, Integer> killNum;
		public Map<Integer, Integer> monsterProcess;
		public Map<Integer, Integer> damageRank;
	}

	public static class DBInsightData implements Stream.IStreamable, Stream.KCloneable<DBInsightData>, SStream.IStreamable
	{

		public DBInsightData() { }

		public DBInsightData(int lastInsightTime, List<ActivityEntity> targetList)
		{
			this.lastInsightTime = lastInsightTime;
			this.targetList = targetList;
		}

		public DBInsightData ksClone()
		{
			return new DBInsightData(lastInsightTime, targetList);
		}

		@Override
		public DBInsightData kdClone()
		{
			DBInsightData _kio_clobj = ksClone();
			_kio_clobj.targetList = Stream.clone(targetList);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastInsightTime = is.popInteger();
			targetList = is.popList(ActivityEntity.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lastInsightTime);
			os.pushList(targetList);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lastInsightTime = is.popInteger();
			targetList = is.popList(ActivityEntity.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(lastInsightTime);
			os.pushList(targetList);
		}

		public int lastInsightTime;
		public List<ActivityEntity> targetList;
	}

	public static class DBRevengeData implements Stream.IStreamable, Stream.KCloneable<DBRevengeData>, SStream.IStreamable
	{

		public DBRevengeData() { }

		public DBRevengeData(int lastRevengeTime, List<RevengeEntity> targetList)
		{
			this.lastRevengeTime = lastRevengeTime;
			this.targetList = targetList;
		}

		public DBRevengeData ksClone()
		{
			return new DBRevengeData(lastRevengeTime, targetList);
		}

		@Override
		public DBRevengeData kdClone()
		{
			DBRevengeData _kio_clobj = ksClone();
			_kio_clobj.targetList = Stream.clone(targetList);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastRevengeTime = is.popInteger();
			targetList = is.popList(RevengeEntity.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lastRevengeTime);
			os.pushList(targetList);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lastRevengeTime = is.popInteger();
			targetList = is.popList(RevengeEntity.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(lastRevengeTime);
			os.pushList(targetList);
		}

		public int lastRevengeTime;
		public List<RevengeEntity> targetList;
	}

	public static class DBHeirloom implements Stream.IStreamable, Stream.KCloneable<DBHeirloom>, SStream.IStreamable
	{

		public DBHeirloom() { }

		public DBHeirloom(byte isOpen, byte dayWipeTimes, byte wipeTimes, int perfectDegree, 
		                  byte display, int padding1, int padding2)
		{
			this.isOpen = isOpen;
			this.dayWipeTimes = dayWipeTimes;
			this.wipeTimes = wipeTimes;
			this.perfectDegree = perfectDegree;
			this.display = display;
			this.padding1 = padding1;
			this.padding2 = padding2;
		}

		public DBHeirloom ksClone()
		{
			return new DBHeirloom(isOpen, dayWipeTimes, wipeTimes, perfectDegree, 
			                      display, padding1, padding2);
		}

		@Override
		public DBHeirloom kdClone()
		{
			DBHeirloom _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			isOpen = is.popByte();
			dayWipeTimes = is.popByte();
			wipeTimes = is.popByte();
			perfectDegree = is.popInteger();
			display = is.popByte();
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(isOpen);
			os.pushByte(dayWipeTimes);
			os.pushByte(wipeTimes);
			os.pushInteger(perfectDegree);
			os.pushByte(display);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			isOpen = is.popByte();
			dayWipeTimes = is.popByte();
			wipeTimes = is.popByte();
			perfectDegree = is.popInteger();
			display = is.popByte();
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushByte(isOpen);
			os.pushByte(dayWipeTimes);
			os.pushByte(wipeTimes);
			os.pushInteger(perfectDegree);
			os.pushByte(display);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		public byte isOpen;
		public byte dayWipeTimes;
		public byte wipeTimes;
		public int perfectDegree;
		public byte display;
		public int padding1;
		public int padding2;
	}

	public static class DBOfflineWizard implements Stream.IStreamable, Stream.KCloneable<DBOfflineWizard>, SStream.IStreamable
	{

		public DBOfflineWizard() { }

		public DBOfflineWizard(int level, int exp, int funcPoint, int dayBuyPointTimes, 
		                       Map<Integer, Integer> wizardEndTimes, int curWizard)
		{
			this.level = level;
			this.exp = exp;
			this.funcPoint = funcPoint;
			this.dayBuyPointTimes = dayBuyPointTimes;
			this.wizardEndTimes = wizardEndTimes;
			this.curWizard = curWizard;
		}

		public DBOfflineWizard ksClone()
		{
			return new DBOfflineWizard(level, exp, funcPoint, dayBuyPointTimes, 
			                           wizardEndTimes, curWizard);
		}

		@Override
		public DBOfflineWizard kdClone()
		{
			DBOfflineWizard _kio_clobj = ksClone();
			_kio_clobj.wizardEndTimes = new TreeMap<Integer, Integer>(wizardEndTimes);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			exp = is.popInteger();
			funcPoint = is.popInteger();
			dayBuyPointTimes = is.popInteger();
			wizardEndTimes = is.popIntegerIntegerTreeMap();
			curWizard = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(exp);
			os.pushInteger(funcPoint);
			os.pushInteger(dayBuyPointTimes);
			os.pushIntegerIntegerMap(wizardEndTimes);
			os.pushInteger(curWizard);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			level = is.popInteger();
			exp = is.popInteger();
			funcPoint = is.popInteger();
			dayBuyPointTimes = is.popInteger();
			wizardEndTimes = is.popIntegerIntegerTreeMap();
			curWizard = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(level);
			os.pushInteger(exp);
			os.pushInteger(funcPoint);
			os.pushInteger(dayBuyPointTimes);
			os.pushIntegerIntegerMap(wizardEndTimes);
			os.pushInteger(curWizard);
		}

		public int level;
		public int exp;
		public int funcPoint;
		public int dayBuyPointTimes;
		public Map<Integer, Integer> wizardEndTimes;
		public int curWizard;
	}

	public static class DBSpeedUpLvl implements Stream.IStreamable, Stream.KCloneable<DBSpeedUpLvl>
	{

		public DBSpeedUpLvl() { }

		public DBSpeedUpLvl(int speedUpLvl, int lastRefreshTime)
		{
			this.speedUpLvl = speedUpLvl;
			this.lastRefreshTime = lastRefreshTime;
		}

		public DBSpeedUpLvl ksClone()
		{
			return new DBSpeedUpLvl(speedUpLvl, lastRefreshTime);
		}

		@Override
		public DBSpeedUpLvl kdClone()
		{
			DBSpeedUpLvl _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			speedUpLvl = is.popInteger();
			lastRefreshTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(speedUpLvl);
			os.pushInteger(lastRefreshTime);
		}

		public int speedUpLvl;
		public int lastRefreshTime;
	}

	public static class DBActivityLastData implements Stream.IStreamable, Stream.KCloneable<DBActivityLastData>, SStream.IStreamable
	{

		public DBActivityLastData() { }

		public DBActivityLastData(Map<Integer, Integer> lastTimes, Map<Integer, Integer> dayBuyTimes)
		{
			this.lastTimes = lastTimes;
			this.dayBuyTimes = dayBuyTimes;
		}

		public DBActivityLastData ksClone()
		{
			return new DBActivityLastData(lastTimes, dayBuyTimes);
		}

		@Override
		public DBActivityLastData kdClone()
		{
			DBActivityLastData _kio_clobj = ksClone();
			_kio_clobj.lastTimes = new TreeMap<Integer, Integer>(lastTimes);
			_kio_clobj.dayBuyTimes = new TreeMap<Integer, Integer>(dayBuyTimes);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastTimes = is.popIntegerIntegerTreeMap();
			dayBuyTimes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(lastTimes);
			os.pushIntegerIntegerMap(dayBuyTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lastTimes = is.popIntegerIntegerTreeMap();
			dayBuyTimes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(lastTimes);
			os.pushIntegerIntegerMap(dayBuyTimes);
		}

		public Map<Integer, Integer> lastTimes;
		public Map<Integer, Integer> dayBuyTimes;
	}

	public static class DBRoleStele implements Stream.IStreamable, Stream.KCloneable<DBRoleStele>, SStream.IStreamable
	{

		public DBRoleStele() { }

		public DBRoleStele(int index, byte allFinish, int card, int receiveTime, 
		                   byte joinReward, int padding)
		{
			this.index = index;
			this.allFinish = allFinish;
			this.card = card;
			this.receiveTime = receiveTime;
			this.joinReward = joinReward;
			this.padding = padding;
		}

		public DBRoleStele ksClone()
		{
			return new DBRoleStele(index, allFinish, card, receiveTime, 
			                       joinReward, padding);
		}

		@Override
		public DBRoleStele kdClone()
		{
			DBRoleStele _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
			allFinish = is.popByte();
			card = is.popInteger();
			receiveTime = is.popInteger();
			joinReward = is.popByte();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
			os.pushByte(allFinish);
			os.pushInteger(card);
			os.pushInteger(receiveTime);
			os.pushByte(joinReward);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			index = is.popInteger();
			allFinish = is.popByte();
			card = is.popInteger();
			receiveTime = is.popInteger();
			joinReward = is.popByte();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(index);
			os.pushByte(allFinish);
			os.pushInteger(card);
			os.pushInteger(receiveTime);
			os.pushByte(joinReward);
			os.pushInteger(padding);
		}

		public int index;
		public byte allFinish;
		public int card;
		public int receiveTime;
		public byte joinReward;
		public int padding;
	}

	public static class DBDemonHoleFloor implements Stream.IStreamable, Stream.KCloneable<DBDemonHoleFloor>, SStream.IStreamable
	{

		public DBDemonHoleFloor() { }

		public DBDemonHoleFloor(List<RoleDemonHole> roles)
		{
			this.roles = roles;
		}

		public DBDemonHoleFloor ksClone()
		{
			return new DBDemonHoleFloor(roles);
		}

		@Override
		public DBDemonHoleFloor kdClone()
		{
			DBDemonHoleFloor _kio_clobj = ksClone();
			_kio_clobj.roles = Stream.clone(roles);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(RoleDemonHole.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roles = is.popList(RoleDemonHole.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushList(roles);
		}

		public List<RoleDemonHole> roles;
	}

	public static class RoleDemonHoleLog implements Stream.IStreamable, Stream.KCloneable<RoleDemonHoleLog>, SStream.IStreamable
	{

		public RoleDemonHoleLog() { }

		public RoleDemonHoleLog(int dayEnterTimes, Set<Integer> enterFloors, int addExp, int lastJoinTime, 
		                        int padding)
		{
			this.dayEnterTimes = dayEnterTimes;
			this.enterFloors = enterFloors;
			this.addExp = addExp;
			this.lastJoinTime = lastJoinTime;
			this.padding = padding;
		}

		public RoleDemonHoleLog ksClone()
		{
			return new RoleDemonHoleLog(dayEnterTimes, enterFloors, addExp, lastJoinTime, 
			                            padding);
		}

		@Override
		public RoleDemonHoleLog kdClone()
		{
			RoleDemonHoleLog _kio_clobj = ksClone();
			_kio_clobj.enterFloors = new TreeSet<Integer>(enterFloors);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayEnterTimes = is.popInteger();
			enterFloors = is.popIntegerTreeSet();
			addExp = is.popInteger();
			lastJoinTime = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayEnterTimes);
			os.pushIntegerSet(enterFloors);
			os.pushInteger(addExp);
			os.pushInteger(lastJoinTime);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayEnterTimes = is.popInteger();
			enterFloors = is.popIntegerTreeSet();
			addExp = is.popInteger();
			lastJoinTime = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dayEnterTimes);
			os.pushIntegerSet(enterFloors);
			os.pushInteger(addExp);
			os.pushInteger(lastJoinTime);
			os.pushInteger(padding);
		}

		public int dayEnterTimes;
		public Set<Integer> enterFloors;
		public int addExp;
		public int lastJoinTime;
		public int padding;
	}

	public static class DBLucklyStar implements Stream.IStreamable, Stream.KCloneable<DBLucklyStar>, SStream.IStreamable
	{

		public DBLucklyStar() { }

		public DBLucklyStar(int lastGiftTimes, int dayRewardTimes, int needNotice, int dayRecvTimes, 
		                    int sendTime, int padding1, int padding2)
		{
			this.lastGiftTimes = lastGiftTimes;
			this.dayRewardTimes = dayRewardTimes;
			this.needNotice = needNotice;
			this.dayRecvTimes = dayRecvTimes;
			this.sendTime = sendTime;
			this.padding1 = padding1;
			this.padding2 = padding2;
		}

		public DBLucklyStar ksClone()
		{
			return new DBLucklyStar(lastGiftTimes, dayRewardTimes, needNotice, dayRecvTimes, 
			                        sendTime, padding1, padding2);
		}

		@Override
		public DBLucklyStar kdClone()
		{
			DBLucklyStar _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastGiftTimes = is.popInteger();
			dayRewardTimes = is.popInteger();
			needNotice = is.popInteger();
			dayRecvTimes = is.popInteger();
			sendTime = is.popInteger();
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lastGiftTimes);
			os.pushInteger(dayRewardTimes);
			os.pushInteger(needNotice);
			os.pushInteger(dayRecvTimes);
			os.pushInteger(sendTime);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lastGiftTimes = is.popInteger();
			dayRewardTimes = is.popInteger();
			needNotice = is.popInteger();
			dayRecvTimes = is.popInteger();
			sendTime = is.popInteger();
			padding1 = is.popInteger();
			padding2 = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(lastGiftTimes);
			os.pushInteger(dayRewardTimes);
			os.pushInteger(needNotice);
			os.pushInteger(dayRecvTimes);
			os.pushInteger(sendTime);
			os.pushInteger(padding1);
			os.pushInteger(padding2);
		}

		public int lastGiftTimes;
		public int dayRewardTimes;
		public int needNotice;
		public int dayRecvTimes;
		public int sendTime;
		public int padding1;
		public int padding2;
	}

	public static class DBLucklyStarManagerData implements Stream.IStreamable, Stream.KCloneable<DBLucklyStarManagerData>, SStream.IStreamable
	{

		public DBLucklyStarManagerData() { }

		public DBLucklyStarManagerData(int lastSendDay, int sendTimes)
		{
			this.lastSendDay = lastSendDay;
			this.sendTimes = sendTimes;
		}

		public DBLucklyStarManagerData ksClone()
		{
			return new DBLucklyStarManagerData(lastSendDay, sendTimes);
		}

		@Override
		public DBLucklyStarManagerData kdClone()
		{
			DBLucklyStarManagerData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastSendDay = is.popInteger();
			sendTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lastSendDay);
			os.pushInteger(sendTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			lastSendDay = is.popInteger();
			sendTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(lastSendDay);
			os.pushInteger(sendTimes);
		}

		public int lastSendDay;
		public int sendTimes;
	}

	public static class DBFightNpc implements Stream.IStreamable, Stream.KCloneable<DBFightNpc>, SStream.IStreamable
	{

		public DBFightNpc() { }

		public DBFightNpc(int group, int curIndex, byte state, int coolTime, 
		                  int padding)
		{
			this.group = group;
			this.curIndex = curIndex;
			this.state = state;
			this.coolTime = coolTime;
			this.padding = padding;
		}

		public DBFightNpc ksClone()
		{
			return new DBFightNpc(group, curIndex, state, coolTime, 
			                      padding);
		}

		@Override
		public DBFightNpc kdClone()
		{
			DBFightNpc _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			group = is.popInteger();
			curIndex = is.popInteger();
			state = is.popByte();
			coolTime = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(group);
			os.pushInteger(curIndex);
			os.pushByte(state);
			os.pushInteger(coolTime);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			group = is.popInteger();
			curIndex = is.popInteger();
			state = is.popByte();
			coolTime = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(group);
			os.pushInteger(curIndex);
			os.pushByte(state);
			os.pushInteger(coolTime);
			os.pushInteger(padding);
		}

		public int group;
		public int curIndex;
		public byte state;
		public int coolTime;
		public int padding;
	}

	public static class DBSocialComment implements Stream.IStreamable, Stream.KCloneable<DBSocialComment>
	{

		public DBSocialComment() { }

		public DBSocialComment(int commentId, long ownerId, String comment, int liked, 
		                       int disliked, int sendTime)
		{
			this.commentId = commentId;
			this.ownerId = ownerId;
			this.comment = comment;
			this.liked = liked;
			this.disliked = disliked;
			this.sendTime = sendTime;
		}

		public DBSocialComment ksClone()
		{
			return new DBSocialComment(commentId, ownerId, comment, liked, 
			                           disliked, sendTime);
		}

		@Override
		public DBSocialComment kdClone()
		{
			DBSocialComment _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			commentId = is.popInteger();
			ownerId = is.popLong();
			comment = is.popString();
			liked = is.popInteger();
			disliked = is.popInteger();
			sendTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(commentId);
			os.pushLong(ownerId);
			os.pushString(comment);
			os.pushInteger(liked);
			os.pushInteger(disliked);
			os.pushInteger(sendTime);
		}

		public int commentId;
		public long ownerId;
		public String comment;
		public int liked;
		public int disliked;
		public int sendTime;
	}

	public static class DBLegendMake implements Stream.IStreamable, Stream.KCloneable<DBLegendMake>, SStream.IStreamable
	{

		public DBLegendMake() { }

		public DBLegendMake(DBEquip equip, List<Integer> legends, int padding)
		{
			this.equip = equip;
			this.legends = legends;
			this.padding = padding;
		}

		public DBLegendMake ksClone()
		{
			return new DBLegendMake(equip, legends, padding);
		}

		@Override
		public DBLegendMake kdClone()
		{
			DBLegendMake _kio_clobj = ksClone();
			_kio_clobj.equip = Stream.clone(equip);
			_kio_clobj.legends = new ArrayList<Integer>(legends);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( equip == null )
				equip = new DBEquip();
			is.pop(equip);
			legends = is.popIntegerList();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(equip);
			os.pushIntegerList(legends);
			os.pushInteger(padding);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			equip = is.pop(DBEquip.class);
			legends = is.popIntegerList();
			padding = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(equip);
			os.pushIntegerList(legends);
			os.pushInteger(padding);
		}

		public DBEquip equip;
		public List<Integer> legends;
		public int padding;
	}

	public static class DBRoleSocialComment implements Stream.IStreamable, Stream.KCloneable<DBRoleSocialComment>
	{

		public DBRoleSocialComment() { }

		public DBRoleSocialComment(int daySends, int dayLikes, int dayDislikes)
		{
			this.daySends = daySends;
			this.dayLikes = dayLikes;
			this.dayDislikes = dayDislikes;
		}

		public DBRoleSocialComment ksClone()
		{
			return new DBRoleSocialComment(daySends, dayLikes, dayDislikes);
		}

		@Override
		public DBRoleSocialComment kdClone()
		{
			DBRoleSocialComment _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			daySends = is.popInteger();
			dayLikes = is.popInteger();
			dayDislikes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(daySends);
			os.pushInteger(dayLikes);
			os.pushInteger(dayDislikes);
		}

		public int daySends;
		public int dayLikes;
		public int dayDislikes;
	}

	public static class DBRedNamePunish implements Stream.IStreamable, Stream.KCloneable<DBRedNamePunish>
	{

		public DBRedNamePunish() { }

		public DBRedNamePunish(int nextPunishTime, int punishEffectTime, int padding)
		{
			this.nextPunishTime = nextPunishTime;
			this.punishEffectTime = punishEffectTime;
			this.padding = padding;
		}

		public DBRedNamePunish ksClone()
		{
			return new DBRedNamePunish(nextPunishTime, punishEffectTime, padding);
		}

		@Override
		public DBRedNamePunish kdClone()
		{
			DBRedNamePunish _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			nextPunishTime = is.popInteger();
			punishEffectTime = is.popInteger();
			padding = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(nextPunishTime);
			os.pushInteger(punishEffectTime);
			os.pushInteger(padding);
		}

		public int nextPunishTime;
		public int punishEffectTime;
		public int padding;
	}

	public static class ForwardData implements Stream.IStreamable, Stream.KCloneable<ForwardData>
	{

		public static final byte eReqSyncRole = 1;
		public static final byte eReqSyncPage = 3;
		public static final byte eResSyncPage = 4;
		public static final byte eReqSendComment = 5;
		public static final byte eResSendComment = 6;
		public static final byte eReqLikeComment = 7;
		public static final byte eResLikeComment = 8;
		public static final byte eReqDislikeComment = 9;
		public static final byte eResDislikeComment = 10;

		public ForwardData() { }

		public ForwardData(int dataType, ByteBuffer content)
		{
			this.dataType = dataType;
			this.content = content;
		}

		public ForwardData ksClone()
		{
			return new ForwardData(dataType, content);
		}

		@Override
		public ForwardData kdClone()
		{
			ForwardData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dataType = is.popInteger();
			content = is.popByteBuffer();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dataType);
			os.pushByteBuffer(content);
		}

		public int dataType;
		public ByteBuffer content;
	}

	public static class SendCommentReq implements Stream.IStreamable, Stream.KCloneable<SendCommentReq>
	{

		public SendCommentReq() { }

		public SendCommentReq(int serverId, int roleId, String serverName, String roleName, 
		                      int themeType, int themeId, String comment)
		{
			this.serverId = serverId;
			this.roleId = roleId;
			this.serverName = serverName;
			this.roleName = roleName;
			this.themeType = themeType;
			this.themeId = themeId;
			this.comment = comment;
		}

		public SendCommentReq ksClone()
		{
			return new SendCommentReq(serverId, roleId, serverName, roleName, 
			                          themeType, themeId, comment);
		}

		@Override
		public SendCommentReq kdClone()
		{
			SendCommentReq _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			serverId = is.popInteger();
			roleId = is.popInteger();
			serverName = is.popString();
			roleName = is.popString();
			themeType = is.popInteger();
			themeId = is.popInteger();
			comment = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(serverId);
			os.pushInteger(roleId);
			os.pushString(serverName);
			os.pushString(roleName);
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushString(comment);
		}

		public int serverId;
		public int roleId;
		public String serverName;
		public String roleName;
		public int themeType;
		public int themeId;
		public String comment;
	}

	public static class SendCommentRes implements Stream.IStreamable, Stream.KCloneable<SendCommentRes>
	{

		public SendCommentRes() { }

		public SendCommentRes(int ok)
		{
			this.ok = ok;
		}

		public SendCommentRes ksClone()
		{
			return new SendCommentRes(ok);
		}

		@Override
		public SendCommentRes kdClone()
		{
			SendCommentRes _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		public int ok;
	}

	public static class LikeCommentReq implements Stream.IStreamable, Stream.KCloneable<LikeCommentReq>
	{

		public LikeCommentReq() { }

		public LikeCommentReq(int serverId, int roleId, String serverName, String roleName, 
		                      int themeType, int themeId, int commentId)
		{
			this.serverId = serverId;
			this.roleId = roleId;
			this.serverName = serverName;
			this.roleName = roleName;
			this.themeType = themeType;
			this.themeId = themeId;
			this.commentId = commentId;
		}

		public LikeCommentReq ksClone()
		{
			return new LikeCommentReq(serverId, roleId, serverName, roleName, 
			                          themeType, themeId, commentId);
		}

		@Override
		public LikeCommentReq kdClone()
		{
			LikeCommentReq _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			serverId = is.popInteger();
			roleId = is.popInteger();
			serverName = is.popString();
			roleName = is.popString();
			themeType = is.popInteger();
			themeId = is.popInteger();
			commentId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(serverId);
			os.pushInteger(roleId);
			os.pushString(serverName);
			os.pushString(roleName);
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushInteger(commentId);
		}

		public int serverId;
		public int roleId;
		public String serverName;
		public String roleName;
		public int themeType;
		public int themeId;
		public int commentId;
	}

	public static class LikeCommentRes implements Stream.IStreamable, Stream.KCloneable<LikeCommentRes>
	{

		public LikeCommentRes() { }

		public LikeCommentRes(int ok)
		{
			this.ok = ok;
		}

		public LikeCommentRes ksClone()
		{
			return new LikeCommentRes(ok);
		}

		@Override
		public LikeCommentRes kdClone()
		{
			LikeCommentRes _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		public int ok;
	}

	public static class DislikeCommentReq implements Stream.IStreamable, Stream.KCloneable<DislikeCommentReq>
	{

		public DislikeCommentReq() { }

		public DislikeCommentReq(int serverId, int roleId, String serverName, String roleName, 
		                         int themeType, int themeId, int commentId)
		{
			this.serverId = serverId;
			this.roleId = roleId;
			this.serverName = serverName;
			this.roleName = roleName;
			this.themeType = themeType;
			this.themeId = themeId;
			this.commentId = commentId;
		}

		public DislikeCommentReq ksClone()
		{
			return new DislikeCommentReq(serverId, roleId, serverName, roleName, 
			                             themeType, themeId, commentId);
		}

		@Override
		public DislikeCommentReq kdClone()
		{
			DislikeCommentReq _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			serverId = is.popInteger();
			roleId = is.popInteger();
			serverName = is.popString();
			roleName = is.popString();
			themeType = is.popInteger();
			themeId = is.popInteger();
			commentId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(serverId);
			os.pushInteger(roleId);
			os.pushString(serverName);
			os.pushString(roleName);
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushInteger(commentId);
		}

		public int serverId;
		public int roleId;
		public String serverName;
		public String roleName;
		public int themeType;
		public int themeId;
		public int commentId;
	}

	public static class DislikeCommentRes implements Stream.IStreamable, Stream.KCloneable<DislikeCommentRes>
	{

		public DislikeCommentRes() { }

		public DislikeCommentRes(int ok)
		{
			this.ok = ok;
		}

		public DislikeCommentRes ksClone()
		{
			return new DislikeCommentRes(ok);
		}

		@Override
		public DislikeCommentRes kdClone()
		{
			DislikeCommentRes _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		public int ok;
	}

	public static class SyncPageCommentReq implements Stream.IStreamable, Stream.KCloneable<SyncPageCommentReq>
	{

		public SyncPageCommentReq() { }

		public SyncPageCommentReq(int themeType, int themeId, int tag, int pageNo, 
		                          int len)
		{
			this.themeType = themeType;
			this.themeId = themeId;
			this.tag = tag;
			this.pageNo = pageNo;
			this.len = len;
		}

		public SyncPageCommentReq ksClone()
		{
			return new SyncPageCommentReq(themeType, themeId, tag, pageNo, 
			                              len);
		}

		@Override
		public SyncPageCommentReq kdClone()
		{
			SyncPageCommentReq _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			themeType = is.popInteger();
			themeId = is.popInteger();
			tag = is.popInteger();
			pageNo = is.popInteger();
			len = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushInteger(tag);
			os.pushInteger(pageNo);
			os.pushInteger(len);
		}

		public int themeType;
		public int themeId;
		public int tag;
		public int pageNo;
		public int len;
	}

	public static class SyncPageCommentRes implements Stream.IStreamable, Stream.KCloneable<SyncPageCommentRes>
	{

		public SyncPageCommentRes() { }

		public SyncPageCommentRes(List<SocialComment> comments)
		{
			this.comments = comments;
		}

		public SyncPageCommentRes ksClone()
		{
			return new SyncPageCommentRes(comments);
		}

		@Override
		public SyncPageCommentRes kdClone()
		{
			SyncPageCommentRes _kio_clobj = ksClone();
			_kio_clobj.comments = Stream.clone(comments);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			comments = is.popList(SocialComment.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(comments);
		}

		public List<SocialComment> comments;
	}

	public static class VipData implements Stream.IStreamable, Stream.KCloneable<VipData>, SStream.IStreamable
	{

		public VipData() { }

		public VipData(int diamond, int vipLvl, int payPoints, int payDiamond, 
		               List<DBPayLog> paylog, Map<Integer, Integer> payLvlLog)
		{
			this.diamond = diamond;
			this.vipLvl = vipLvl;
			this.payPoints = payPoints;
			this.payDiamond = payDiamond;
			this.paylog = paylog;
			this.payLvlLog = payLvlLog;
		}

		public VipData ksClone()
		{
			return new VipData(diamond, vipLvl, payPoints, payDiamond, 
			                   paylog, payLvlLog);
		}

		@Override
		public VipData kdClone()
		{
			VipData _kio_clobj = ksClone();
			_kio_clobj.paylog = Stream.clone(paylog);
			_kio_clobj.payLvlLog = new TreeMap<Integer, Integer>(payLvlLog);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			diamond = is.popInteger();
			vipLvl = is.popInteger();
			payPoints = is.popInteger();
			payDiamond = is.popInteger();
			paylog = is.popList(DBPayLog.class);
			payLvlLog = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(diamond);
			os.pushInteger(vipLvl);
			os.pushInteger(payPoints);
			os.pushInteger(payDiamond);
			os.pushList(paylog);
			os.pushIntegerIntegerMap(payLvlLog);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			diamond = is.popInteger();
			vipLvl = is.popInteger();
			payPoints = is.popInteger();
			payDiamond = is.popInteger();
			paylog = is.popList(DBPayLog.class);
			payLvlLog = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(diamond);
			os.pushInteger(vipLvl);
			os.pushInteger(payPoints);
			os.pushInteger(payDiamond);
			os.pushList(paylog);
			os.pushIntegerIntegerMap(payLvlLog);
		}

		public int diamond;
		public int vipLvl;
		public int payPoints;
		public int payDiamond;
		public List<DBPayLog> paylog;
		public Map<Integer, Integer> payLvlLog;
	}

	public static class Vector3F implements Stream.IStreamable, Stream.KCloneable<Vector3F>, SStream.IStreamable
	{

		public Vector3F() { }

		public Vector3F(float x, float y, float z)
		{
			this.x = x;
			this.y = y;
			this.z = z;
		}

		public Vector3F ksClone()
		{
			return new Vector3F(x, y, z);
		}

		@Override
		public Vector3F kdClone()
		{
			Vector3F _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			x = is.popFloat();
			y = is.popFloat();
			z = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(x);
			os.pushFloat(y);
			os.pushFloat(z);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			x = is.popFloat();
			y = is.popFloat();
			z = is.popFloat();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushFloat(x);
			os.pushFloat(y);
			os.pushFloat(z);
		}

		public float x;
		public float y;
		public float z;
	}

	public static class Vector3 implements Stream.IStreamable, Stream.KCloneable<Vector3>, SStream.IStreamable
	{

		public Vector3() { }

		public Vector3(int x, int y, int z)
		{
			this.x = x;
			this.y = y;
			this.z = z;
		}

		public Vector3 ksClone()
		{
			return new Vector3(x, y, z);
		}

		@Override
		public Vector3 kdClone()
		{
			Vector3 _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			x = is.popInteger();
			y = is.popInteger();
			z = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(x);
			os.pushInteger(y);
			os.pushInteger(z);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			x = is.popInteger();
			y = is.popInteger();
			z = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(x);
			os.pushInteger(y);
			os.pushInteger(z);
		}

		public int x;
		public int y;
		public int z;
	}

	public static class TimeTick implements Stream.IStreamable, Stream.KCloneable<TimeTick>, SStream.IStreamable
	{

		public TimeTick() { }

		public TimeTick(int tickLine, int outTick)
		{
			this.tickLine = tickLine;
			this.outTick = outTick;
		}

		public TimeTick ksClone()
		{
			return new TimeTick(tickLine, outTick);
		}

		@Override
		public TimeTick kdClone()
		{
			TimeTick _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tickLine = is.popInteger();
			outTick = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(tickLine);
			os.pushInteger(outTick);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			tickLine = is.popInteger();
			outTick = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(tickLine);
			os.pushInteger(outTick);
		}

		public int tickLine;
		public int outTick;
	}

	public static class MapPosition implements Stream.IStreamable, Stream.KCloneable<MapPosition>, SStream.IStreamable
	{

		public MapPosition() { }

		public MapPosition(int mapID, Vector3 position)
		{
			this.mapID = mapID;
			this.position = position;
		}

		public MapPosition ksClone()
		{
			return new MapPosition(mapID, position);
		}

		@Override
		public MapPosition kdClone()
		{
			MapPosition _kio_clobj = ksClone();
			_kio_clobj.position = Stream.clone(position);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapID);
			os.push(position);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			mapID = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(mapID);
			os.push(position);
		}

		public int mapID;
		public Vector3 position;
	}

	public static class MapLocation implements Stream.IStreamable, Stream.KCloneable<MapLocation>, SStream.IStreamable
	{

		public MapLocation() { }

		public MapLocation(int mapID, Location location)
		{
			this.mapID = mapID;
			this.location = location;
		}

		public MapLocation ksClone()
		{
			return new MapLocation(mapID, location);
		}

		@Override
		public MapLocation kdClone()
		{
			MapLocation _kio_clobj = ksClone();
			_kio_clobj.location = Stream.clone(location);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapID = is.popInteger();
			if( location == null )
				location = new Location();
			is.pop(location);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapID);
			os.push(location);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			mapID = is.popInteger();
			location = is.pop(Location.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(mapID);
			os.push(location);
		}

		public int mapID;
		public Location location;
	}

	public static class MapProgress implements Stream.IStreamable, Stream.KCloneable<MapProgress>, SStream.IStreamable
	{

		public MapProgress() { }

		public MapProgress(List<SpawnPointProgress> spawnPoint, List<TrapState> trap, List<BriefInfo> mapBuffs, List<BriefInfo> mineals)
		{
			this.spawnPoint = spawnPoint;
			this.trap = trap;
			this.mapBuffs = mapBuffs;
			this.mineals = mineals;
		}

		public MapProgress ksClone()
		{
			return new MapProgress(spawnPoint, trap, mapBuffs, mineals);
		}

		@Override
		public MapProgress kdClone()
		{
			MapProgress _kio_clobj = ksClone();
			_kio_clobj.spawnPoint = Stream.clone(spawnPoint);
			_kio_clobj.trap = Stream.clone(trap);
			_kio_clobj.mapBuffs = Stream.clone(mapBuffs);
			_kio_clobj.mineals = Stream.clone(mineals);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spawnPoint = is.popList(SpawnPointProgress.class);
			trap = is.popList(TrapState.class);
			mapBuffs = is.popList(BriefInfo.class);
			mineals = is.popList(BriefInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(spawnPoint);
			os.pushList(trap);
			os.pushList(mapBuffs);
			os.pushList(mineals);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			spawnPoint = is.popList(SpawnPointProgress.class);
			trap = is.popList(TrapState.class);
			mapBuffs = is.popList(BriefInfo.class);
			mineals = is.popList(BriefInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushList(spawnPoint);
			os.pushList(trap);
			os.pushList(mapBuffs);
			os.pushList(mineals);
		}

		public List<SpawnPointProgress> spawnPoint;
		public List<TrapState> trap;
		public List<BriefInfo> mapBuffs;
		public List<BriefInfo> mineals;
	}

	public static class SpawnPointProgress implements Stream.IStreamable, Stream.KCloneable<SpawnPointProgress>, SStream.IStreamable
	{

		public SpawnPointProgress() { }

		public SpawnPointProgress(int spawnPointId, int killedCount, Map<Integer, Integer> earlyDrop)
		{
			this.spawnPointId = spawnPointId;
			this.killedCount = killedCount;
			this.earlyDrop = earlyDrop;
		}

		public SpawnPointProgress ksClone()
		{
			return new SpawnPointProgress(spawnPointId, killedCount, earlyDrop);
		}

		@Override
		public SpawnPointProgress kdClone()
		{
			SpawnPointProgress _kio_clobj = ksClone();
			_kio_clobj.earlyDrop = new TreeMap<Integer, Integer>(earlyDrop);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spawnPointId = is.popInteger();
			killedCount = is.popInteger();
			earlyDrop = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spawnPointId);
			os.pushInteger(killedCount);
			os.pushIntegerIntegerMap(earlyDrop);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			spawnPointId = is.popInteger();
			killedCount = is.popInteger();
			earlyDrop = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(spawnPointId);
			os.pushInteger(killedCount);
			os.pushIntegerIntegerMap(earlyDrop);
		}

		public int spawnPointId;
		public int killedCount;
		public Map<Integer, Integer> earlyDrop;
	}

	public static class TrapState implements Stream.IStreamable, Stream.KCloneable<TrapState>, SStream.IStreamable
	{

		public TrapState() { }

		public TrapState(int id, int state, int monsterCount)
		{
			this.id = id;
			this.state = state;
			this.monsterCount = monsterCount;
		}

		public TrapState ksClone()
		{
			return new TrapState(id, state, monsterCount);
		}

		@Override
		public TrapState kdClone()
		{
			TrapState _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			state = is.popInteger();
			monsterCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(state);
			os.pushInteger(monsterCount);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			state = is.popInteger();
			monsterCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(state);
			os.pushInteger(monsterCount);
		}

		public int id;
		public int state;
		public int monsterCount;
	}

	public static class TrapDetail implements Stream.IStreamable, Stream.KCloneable<TrapDetail>, SStream.IStreamable
	{

		public TrapDetail() { }

		public TrapDetail(int id, int configID, int curState, List<RelatedTrap> relatedTraps)
		{
			this.id = id;
			this.configID = configID;
			this.curState = curState;
			this.relatedTraps = relatedTraps;
		}

		public TrapDetail ksClone()
		{
			return new TrapDetail(id, configID, curState, relatedTraps);
		}

		@Override
		public TrapDetail kdClone()
		{
			TrapDetail _kio_clobj = ksClone();
			_kio_clobj.relatedTraps = Stream.clone(relatedTraps);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			configID = is.popInteger();
			curState = is.popInteger();
			relatedTraps = is.popList(RelatedTrap.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(configID);
			os.pushInteger(curState);
			os.pushList(relatedTraps);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			configID = is.popInteger();
			curState = is.popInteger();
			relatedTraps = is.popList(RelatedTrap.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(configID);
			os.pushInteger(curState);
			os.pushList(relatedTraps);
		}

		public int id;
		public int configID;
		public int curState;
		public List<RelatedTrap> relatedTraps;
	}

	public static class RelatedTrap implements Stream.IStreamable, Stream.KCloneable<RelatedTrap>, SStream.IStreamable
	{

		public RelatedTrap() { }

		public RelatedTrap(int id, Vector3 position)
		{
			this.id = id;
			this.position = position;
		}

		public RelatedTrap ksClone()
		{
			return new RelatedTrap(id, position);
		}

		@Override
		public RelatedTrap kdClone()
		{
			RelatedTrap _kio_clobj = ksClone();
			_kio_clobj.position = Stream.clone(position);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(position);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(position);
		}

		public int id;
		public Vector3 position;
	}

	public static class PetBase implements Stream.IStreamable, Stream.KCloneable<PetBase>, SStream.IStreamable
	{

		public PetBase() { }

		public PetBase(int ownerID, int pid)
		{
			this.ownerID = ownerID;
			this.pid = pid;
		}

		public PetBase ksClone()
		{
			return new PetBase(ownerID, pid);
		}

		@Override
		public PetBase kdClone()
		{
			PetBase _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ownerID = is.popInteger();
			pid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ownerID);
			os.pushInteger(pid);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			ownerID = is.popInteger();
			pid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(ownerID);
			os.pushInteger(pid);
		}

		public int ownerID;
		public int pid;
	}

	public static class EnterBase implements Stream.IStreamable, Stream.KCloneable<EnterBase>, SStream.IStreamable
	{

		public EnterBase() { }

		public EnterBase(int id, int cfgID, int ownerID, Location location, 
		                 int bwType, int sectId, int forceType)
		{
			this.id = id;
			this.cfgID = cfgID;
			this.ownerID = ownerID;
			this.location = location;
			this.bwType = bwType;
			this.sectId = sectId;
			this.forceType = forceType;
		}

		public EnterBase ksClone()
		{
			return new EnterBase(id, cfgID, ownerID, location, 
			                     bwType, sectId, forceType);
		}

		@Override
		public EnterBase kdClone()
		{
			EnterBase _kio_clobj = ksClone();
			_kio_clobj.location = Stream.clone(location);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			cfgID = is.popInteger();
			ownerID = is.popInteger();
			if( location == null )
				location = new Location();
			is.pop(location);
			bwType = is.popInteger();
			sectId = is.popInteger();
			forceType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(cfgID);
			os.pushInteger(ownerID);
			os.push(location);
			os.pushInteger(bwType);
			os.pushInteger(sectId);
			os.pushInteger(forceType);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			cfgID = is.popInteger();
			ownerID = is.popInteger();
			location = is.pop(Location.class);
			bwType = is.popInteger();
			sectId = is.popInteger();
			forceType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(cfgID);
			os.pushInteger(ownerID);
			os.push(location);
			os.pushInteger(bwType);
			os.pushInteger(sectId);
			os.pushInteger(forceType);
		}

		public int id;
		public int cfgID;
		public int ownerID;
		public Location location;
		public int bwType;
		public int sectId;
		public int forceType;
	}

	public static class EnterMineral implements Stream.IStreamable, Stream.KCloneable<EnterMineral>, SStream.IStreamable
	{

		public EnterMineral() { }

		public EnterMineral(int id, int cfgID, Location location, int state)
		{
			this.id = id;
			this.cfgID = cfgID;
			this.location = location;
			this.state = state;
		}

		public EnterMineral ksClone()
		{
			return new EnterMineral(id, cfgID, location, state);
		}

		@Override
		public EnterMineral kdClone()
		{
			EnterMineral _kio_clobj = ksClone();
			_kio_clobj.location = Stream.clone(location);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			cfgID = is.popInteger();
			if( location == null )
				location = new Location();
			is.pop(location);
			state = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(cfgID);
			os.push(location);
			os.pushInteger(state);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			cfgID = is.popInteger();
			location = is.pop(Location.class);
			state = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(cfgID);
			os.push(location);
			os.pushInteger(state);
		}

		public int id;
		public int cfgID;
		public Location location;
		public int state;
	}

	public static class EnterWeddingCar implements Stream.IStreamable, Stream.KCloneable<EnterWeddingCar>, SStream.IStreamable
	{

		public EnterWeddingCar() { }

		public EnterWeddingCar(int id, int cfgID, Location location, int manID, 
		                       int womanID, String manName, String womanName)
		{
			this.id = id;
			this.cfgID = cfgID;
			this.location = location;
			this.manID = manID;
			this.womanID = womanID;
			this.manName = manName;
			this.womanName = womanName;
		}

		public EnterWeddingCar ksClone()
		{
			return new EnterWeddingCar(id, cfgID, location, manID, 
			                           womanID, manName, womanName);
		}

		@Override
		public EnterWeddingCar kdClone()
		{
			EnterWeddingCar _kio_clobj = ksClone();
			_kio_clobj.location = Stream.clone(location);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			cfgID = is.popInteger();
			if( location == null )
				location = new Location();
			is.pop(location);
			manID = is.popInteger();
			womanID = is.popInteger();
			manName = is.popString();
			womanName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(cfgID);
			os.push(location);
			os.pushInteger(manID);
			os.pushInteger(womanID);
			os.pushString(manName);
			os.pushString(womanName);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			cfgID = is.popInteger();
			location = is.pop(Location.class);
			manID = is.popInteger();
			womanID = is.popInteger();
			manName = is.popString();
			womanName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(cfgID);
			os.push(location);
			os.pushInteger(manID);
			os.pushInteger(womanID);
			os.pushString(manName);
			os.pushString(womanName);
		}

		public int id;
		public int cfgID;
		public Location location;
		public int manID;
		public int womanID;
		public String manName;
		public String womanName;
	}

	public static class EnterDetail implements Stream.IStreamable, Stream.KCloneable<EnterDetail>, SStream.IStreamable
	{

		public EnterDetail() { }

		public EnterDetail(EnterBase base, int curHP, int maxHP, int isDead)
		{
			this.base = base;
			this.curHP = curHP;
			this.maxHP = maxHP;
			this.isDead = isDead;
		}

		public EnterDetail ksClone()
		{
			return new EnterDetail(base, curHP, maxHP, isDead);
		}

		@Override
		public EnterDetail kdClone()
		{
			EnterDetail _kio_clobj = ksClone();
			_kio_clobj.base = Stream.clone(base);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new EnterBase();
			is.pop(base);
			curHP = is.popInteger();
			maxHP = is.popInteger();
			isDead = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
			os.pushInteger(isDead);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			base = is.pop(EnterBase.class);
			curHP = is.popInteger();
			maxHP = is.popInteger();
			isDead = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(base);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
			os.pushInteger(isDead);
		}

		public EnterBase base;
		public int curHP;
		public int maxHP;
		public int isDead;
	}

	public static class EnterMonster implements Stream.IStreamable, Stream.KCloneable<EnterMonster>, SStream.IStreamable
	{

		public EnterMonster() { }

		public EnterMonster(EnterBase base, int curHP, int maxHP, int curArmor, 
		                    int maxArmor, int isDead)
		{
			this.base = base;
			this.curHP = curHP;
			this.maxHP = maxHP;
			this.curArmor = curArmor;
			this.maxArmor = maxArmor;
			this.isDead = isDead;
		}

		public EnterMonster ksClone()
		{
			return new EnterMonster(base, curHP, maxHP, curArmor, 
			                        maxArmor, isDead);
		}

		@Override
		public EnterMonster kdClone()
		{
			EnterMonster _kio_clobj = ksClone();
			_kio_clobj.base = Stream.clone(base);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new EnterBase();
			is.pop(base);
			curHP = is.popInteger();
			maxHP = is.popInteger();
			curArmor = is.popInteger();
			maxArmor = is.popInteger();
			isDead = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
			os.pushInteger(curArmor);
			os.pushInteger(maxArmor);
			os.pushInteger(isDead);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			base = is.pop(EnterBase.class);
			curHP = is.popInteger();
			maxHP = is.popInteger();
			curArmor = is.popInteger();
			maxArmor = is.popInteger();
			isDead = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(base);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
			os.pushInteger(curArmor);
			os.pushInteger(maxArmor);
			os.pushInteger(isDead);
		}

		public EnterBase base;
		public int curHP;
		public int maxHP;
		public int curArmor;
		public int maxArmor;
		public int isDead;
	}

	public static class EnterPet implements Stream.IStreamable, Stream.KCloneable<EnterPet>, SStream.IStreamable
	{

		public EnterPet() { }

		public EnterPet(EnterBase base, int curHP, int maxHP, int seq, 
		                int isDead)
		{
			this.base = base;
			this.curHP = curHP;
			this.maxHP = maxHP;
			this.seq = seq;
			this.isDead = isDead;
		}

		public EnterPet ksClone()
		{
			return new EnterPet(base, curHP, maxHP, seq, 
			                    isDead);
		}

		@Override
		public EnterPet kdClone()
		{
			EnterPet _kio_clobj = ksClone();
			_kio_clobj.base = Stream.clone(base);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new EnterBase();
			is.pop(base);
			curHP = is.popInteger();
			maxHP = is.popInteger();
			seq = is.popInteger();
			isDead = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
			os.pushInteger(seq);
			os.pushInteger(isDead);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			base = is.pop(EnterBase.class);
			curHP = is.popInteger();
			maxHP = is.popInteger();
			seq = is.popInteger();
			isDead = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(base);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
			os.pushInteger(seq);
			os.pushInteger(isDead);
		}

		public EnterBase base;
		public int curHP;
		public int maxHP;
		public int seq;
		public int isDead;
	}

	public static class EnterSkillEntity implements Stream.IStreamable, Stream.KCloneable<EnterSkillEntity>, SStream.IStreamable
	{

		public EnterSkillEntity() { }

		public EnterSkillEntity(EnterBase base, int modelID)
		{
			this.base = base;
			this.modelID = modelID;
		}

		public EnterSkillEntity ksClone()
		{
			return new EnterSkillEntity(base, modelID);
		}

		@Override
		public EnterSkillEntity kdClone()
		{
			EnterSkillEntity _kio_clobj = ksClone();
			_kio_clobj.base = Stream.clone(base);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new EnterBase();
			is.pop(base);
			modelID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.pushInteger(modelID);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			base = is.pop(EnterBase.class);
			modelID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(base);
			os.pushInteger(modelID);
		}

		public EnterBase base;
		public int modelID;
	}

	public static class EnterEscortCar implements Stream.IStreamable, Stream.KCloneable<EnterEscortCar>, SStream.IStreamable
	{

		public EnterEscortCar() { }

		public EnterEscortCar(EnterDetail detail, List<Integer> curBuffs, String ownerName, int state, 
		                      int teamID, int sectID)
		{
			this.detail = detail;
			this.curBuffs = curBuffs;
			this.ownerName = ownerName;
			this.state = state;
			this.teamID = teamID;
			this.sectID = sectID;
		}

		public EnterEscortCar ksClone()
		{
			return new EnterEscortCar(detail, curBuffs, ownerName, state, 
			                          teamID, sectID);
		}

		@Override
		public EnterEscortCar kdClone()
		{
			EnterEscortCar _kio_clobj = ksClone();
			_kio_clobj.detail = Stream.clone(detail);
			_kio_clobj.curBuffs = new ArrayList<Integer>(curBuffs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( detail == null )
				detail = new EnterDetail();
			is.pop(detail);
			curBuffs = is.popIntegerList();
			ownerName = is.popString();
			state = is.popInteger();
			teamID = is.popInteger();
			sectID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(detail);
			os.pushIntegerList(curBuffs);
			os.pushString(ownerName);
			os.pushInteger(state);
			os.pushInteger(teamID);
			os.pushInteger(sectID);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			detail = is.pop(EnterDetail.class);
			curBuffs = is.popIntegerList();
			ownerName = is.popString();
			state = is.popInteger();
			teamID = is.popInteger();
			sectID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(detail);
			os.pushIntegerList(curBuffs);
			os.pushString(ownerName);
			os.pushInteger(state);
			os.pushInteger(teamID);
			os.pushInteger(sectID);
		}

		public EnterDetail detail;
		public List<Integer> curBuffs;
		public String ownerName;
		public int state;
		public int teamID;
		public int sectID;
	}

	public static class BriefInfo implements Stream.IStreamable, Stream.KCloneable<BriefInfo>, SStream.IStreamable
	{

		public BriefInfo() { }

		public BriefInfo(int id, int cfgID, Vector3 position)
		{
			this.id = id;
			this.cfgID = cfgID;
			this.position = position;
		}

		public BriefInfo ksClone()
		{
			return new BriefInfo(id, cfgID, position);
		}

		@Override
		public BriefInfo kdClone()
		{
			BriefInfo _kio_clobj = ksClone();
			_kio_clobj.position = Stream.clone(position);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			cfgID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(cfgID);
			os.push(position);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			cfgID = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(cfgID);
			os.push(position);
		}

		public int id;
		public int cfgID;
		public Vector3 position;
	}

	public static class Location implements Stream.IStreamable, Stream.KCloneable<Location>, SStream.IStreamable
	{

		public Location() { }

		public Location(Vector3 position, Vector3F rotation)
		{
			this.position = position;
			this.rotation = rotation;
		}

		public Location ksClone()
		{
			return new Location(position, rotation);
		}

		@Override
		public Location kdClone()
		{
			Location _kio_clobj = ksClone();
			_kio_clobj.position = Stream.clone(position);
			_kio_clobj.rotation = Stream.clone(rotation);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(position);
			os.push(rotation);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			position = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(position);
			os.push(rotation);
		}

		public Vector3 position;
		public Vector3F rotation;
	}

	public static class FloorReward implements Stream.IStreamable, Stream.KCloneable<FloorReward>, SStream.IStreamable
	{

		public FloorReward() { }

		public FloorReward(int floor, List<DummyGoods> items)
		{
			this.floor = floor;
			this.items = items;
		}

		public FloorReward ksClone()
		{
			return new FloorReward(floor, items);
		}

		@Override
		public FloorReward kdClone()
		{
			FloorReward _kio_clobj = ksClone();
			_kio_clobj.items = Stream.clone(items);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			floor = is.popInteger();
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(floor);
			os.pushList(items);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			floor = is.popInteger();
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(floor);
			os.pushList(items);
		}

		public int floor;
		public List<DummyGoods> items;
	}

	public static class DummyGoods implements Stream.IStreamable, Stream.KCloneable<DummyGoods>, SStream.IStreamable
	{

		public DummyGoods() { }

		public DummyGoods(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		public DummyGoods ksClone()
		{
			return new DummyGoods(id, count);
		}

		@Override
		public DummyGoods kdClone()
		{
			DummyGoods _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	public static class Rewards implements Stream.IStreamable, Stream.KCloneable<Rewards>, SStream.IStreamable
	{

		public Rewards() { }

		public Rewards(Map<Integer, Integer> items)
		{
			this.items = items;
		}

		public Rewards ksClone()
		{
			return new Rewards(items);
		}

		@Override
		public Rewards kdClone()
		{
			Rewards _kio_clobj = ksClone();
			_kio_clobj.items = new TreeMap<Integer, Integer>(items);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(items);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(items);
		}

		public Map<Integer, Integer> items;
	}

	public static class DropEntity implements Stream.IStreamable, Stream.KCloneable<DropEntity>, SStream.IStreamable
	{

		public DropEntity() { }

		public DropEntity(int did, int minCount, int maxCount)
		{
			this.did = did;
			this.minCount = minCount;
			this.maxCount = maxCount;
		}

		public DropEntity ksClone()
		{
			return new DropEntity(did, minCount, maxCount);
		}

		@Override
		public DropEntity kdClone()
		{
			DropEntity _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			did = is.popInteger();
			minCount = is.popInteger();
			maxCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(did);
			os.pushInteger(minCount);
			os.pushInteger(maxCount);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			did = is.popInteger();
			minCount = is.popInteger();
			maxCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(did);
			os.pushInteger(minCount);
			os.pushInteger(maxCount);
		}

		public int did;
		public int minCount;
		public int maxCount;
	}

	public static class DropEntry implements Stream.IStreamable, Stream.KCloneable<DropEntry>, SStream.IStreamable
	{

		public DropEntry() { }

		public DropEntry(DropEntity drop, float probability)
		{
			this.drop = drop;
			this.probability = probability;
		}

		public DropEntry ksClone()
		{
			return new DropEntry(drop, probability);
		}

		@Override
		public DropEntry kdClone()
		{
			DropEntry _kio_clobj = ksClone();
			_kio_clobj.drop = Stream.clone(drop);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( drop == null )
				drop = new DropEntity();
			is.pop(drop);
			probability = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(drop);
			os.pushFloat(probability);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			drop = is.pop(DropEntity.class);
			probability = is.popFloat();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(drop);
			os.pushFloat(probability);
		}

		public DropEntity drop;
		public float probability;
	}

	public static class UniqueEquip implements Stream.IStreamable, Stream.KCloneable<UniqueEquip>, SStream.IStreamable
	{

		public UniqueEquip() { }

		public UniqueEquip(int id, String guid)
		{
			this.id = id;
			this.guid = guid;
		}

		public UniqueEquip ksClone()
		{
			return new UniqueEquip(id, guid);
		}

		@Override
		public UniqueEquip kdClone()
		{
			UniqueEquip _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			guid = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(guid);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			guid = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushString(guid);
		}

		public int id;
		public String guid;
	}

	public static class KinEquips implements Stream.IStreamable, Stream.KCloneable<KinEquips>, SStream.IStreamable
	{

		public KinEquips() { }

		public KinEquips(int id, Set<String> guids)
		{
			this.id = id;
			this.guids = guids;
		}

		public KinEquips ksClone()
		{
			return new KinEquips(id, guids);
		}

		@Override
		public KinEquips kdClone()
		{
			KinEquips _kio_clobj = ksClone();
			_kio_clobj.guids = new TreeSet<String>(guids);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			guids = is.popStringTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushStringSet(guids);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			guids = is.popStringTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushStringSet(guids);
		}

		public int id;
		public Set<String> guids;
	}

	public static class ClassTypeReward implements Stream.IStreamable, Stream.KCloneable<ClassTypeReward>, SStream.IStreamable
	{

		public ClassTypeReward() { }

		public ClassTypeReward(List<Integer> ids, int count)
		{
			this.ids = ids;
			this.count = count;
		}

		public ClassTypeReward ksClone()
		{
			return new ClassTypeReward(ids, count);
		}

		@Override
		public ClassTypeReward kdClone()
		{
			ClassTypeReward _kio_clobj = ksClone();
			_kio_clobj.ids = new ArrayList<Integer>(ids);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ids = is.popIntegerList();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(ids);
			os.pushInteger(count);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			ids = is.popIntegerList();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerList(ids);
			os.pushInteger(count);
		}

		public List<Integer> ids;
		public int count;
	}

	public static class ProgressRewards implements Stream.IStreamable, Stream.KCloneable<ProgressRewards>, SStream.IStreamable
	{

		public ProgressRewards() { }

		public ProgressRewards(Map<Integer, Integer> rewards)
		{
			this.rewards = rewards;
		}

		public ProgressRewards ksClone()
		{
			return new ProgressRewards(rewards);
		}

		@Override
		public ProgressRewards kdClone()
		{
			ProgressRewards _kio_clobj = ksClone();
			_kio_clobj.rewards = new TreeMap<Integer, Integer>(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewards = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rewards = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(rewards);
		}

		public Map<Integer, Integer> rewards;
	}

	public static class GameItem implements Stream.IStreamable, Stream.KCloneable<GameItem>, SStream.IStreamable
	{

		public GameItem() { }

		public GameItem(int id, int count, Map<String, DBEquip> equips)
		{
			this.id = id;
			this.count = count;
			this.equips = equips;
		}

		public GameItem ksClone()
		{
			return new GameItem(id, count, equips);
		}

		@Override
		public GameItem kdClone()
		{
			GameItem _kio_clobj = ksClone();
			_kio_clobj.equips = Stream.clone(equips);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
			equips = is.popStringTreeMap(DBEquip.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
			os.pushStringMap(equips);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
			equips = is.popStringTreeMap(DBEquip.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
			os.pushStringMap(equips);
		}

		public int id;
		public int count;
		public Map<String, DBEquip> equips;
	}

	public static class DetailConsignItems implements Stream.IStreamable, Stream.KCloneable<DetailConsignItems>, SStream.IStreamable
	{

		public DetailConsignItems() { }

		public DetailConsignItems(int roleID, int cid, DBConsignItems items)
		{
			this.roleID = roleID;
			this.cid = cid;
			this.items = items;
		}

		public DetailConsignItems ksClone()
		{
			return new DetailConsignItems(roleID, cid, items);
		}

		@Override
		public DetailConsignItems kdClone()
		{
			DetailConsignItems _kio_clobj = ksClone();
			_kio_clobj.items = Stream.clone(items);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cid = is.popInteger();
			if( items == null )
				items = new DBConsignItems();
			is.pop(items);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cid);
			os.push(items);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleID = is.popInteger();
			cid = is.popInteger();
			items = is.pop(DBConsignItems.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cid);
			os.push(items);
		}

		public int roleID;
		public int cid;
		public DBConsignItems items;
	}

	public static class IntSet implements Stream.IStreamable, Stream.KCloneable<IntSet>, SStream.IStreamable
	{

		public IntSet() { }

		public IntSet(Set<Integer> set)
		{
			this.set = set;
		}

		public IntSet ksClone()
		{
			return new IntSet(set);
		}

		@Override
		public IntSet kdClone()
		{
			IntSet _kio_clobj = ksClone();
			_kio_clobj.set = new TreeSet<Integer>(set);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			set = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(set);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			set = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerSet(set);
		}

		public Set<Integer> set;
	}

	public static class IntList implements Stream.IStreamable, Stream.KCloneable<IntList>, SStream.IStreamable
	{

		public IntList() { }

		public IntList(List<Integer> list)
		{
			this.list = list;
		}

		public IntList ksClone()
		{
			return new IntList(list);
		}

		@Override
		public IntList kdClone()
		{
			IntList _kio_clobj = ksClone();
			_kio_clobj.list = new ArrayList<Integer>(list);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			list = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(list);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			list = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerList(list);
		}

		public List<Integer> list;
	}

	public static class PayLevelInfo implements Stream.IStreamable, Stream.KCloneable<PayLevelInfo>, SStream.IStreamable
	{

		public PayLevelInfo() { }

		public PayLevelInfo(int level, String id, int buyNum, int worth, 
		                    int points, int credit, float price, List<Integer> rebates)
		{
			this.level = level;
			this.id = id;
			this.buyNum = buyNum;
			this.worth = worth;
			this.points = points;
			this.credit = credit;
			this.price = price;
			this.rebates = rebates;
		}

		public PayLevelInfo ksClone()
		{
			return new PayLevelInfo(level, id, buyNum, worth, 
			                        points, credit, price, rebates);
		}

		@Override
		public PayLevelInfo kdClone()
		{
			PayLevelInfo _kio_clobj = ksClone();
			_kio_clobj.rebates = new ArrayList<Integer>(rebates);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			id = is.popString();
			buyNum = is.popInteger();
			worth = is.popInteger();
			points = is.popInteger();
			credit = is.popInteger();
			price = is.popFloat();
			rebates = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushString(id);
			os.pushInteger(buyNum);
			os.pushInteger(worth);
			os.pushInteger(points);
			os.pushInteger(credit);
			os.pushFloat(price);
			os.pushIntegerList(rebates);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			level = is.popInteger();
			id = is.popString();
			buyNum = is.popInteger();
			worth = is.popInteger();
			points = is.popInteger();
			credit = is.popInteger();
			price = is.popFloat();
			rebates = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(level);
			os.pushString(id);
			os.pushInteger(buyNum);
			os.pushInteger(worth);
			os.pushInteger(points);
			os.pushInteger(credit);
			os.pushFloat(price);
			os.pushIntegerList(rebates);
		}

		public int level;
		public String id;
		public int buyNum;
		public int worth;
		public int points;
		public int credit;
		public float price;
		public List<Integer> rebates;
	}

	public static class PayInfo implements Stream.IStreamable, Stream.KCloneable<PayInfo>, SStream.IStreamable
	{

		public PayInfo() { }

		public PayInfo(int id, List<PayLevelInfo> payLevels, int vipLvl, int pointsTotal, 
		               Map<Integer, Integer> payLvlLogs, Set<Integer> rewards)
		{
			this.id = id;
			this.payLevels = payLevels;
			this.vipLvl = vipLvl;
			this.pointsTotal = pointsTotal;
			this.payLvlLogs = payLvlLogs;
			this.rewards = rewards;
		}

		public PayInfo ksClone()
		{
			return new PayInfo(id, payLevels, vipLvl, pointsTotal, 
			                   payLvlLogs, rewards);
		}

		@Override
		public PayInfo kdClone()
		{
			PayInfo _kio_clobj = ksClone();
			_kio_clobj.payLevels = Stream.clone(payLevels);
			_kio_clobj.payLvlLogs = new TreeMap<Integer, Integer>(payLvlLogs);
			_kio_clobj.rewards = new TreeSet<Integer>(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			payLevels = is.popList(PayLevelInfo.class);
			vipLvl = is.popInteger();
			pointsTotal = is.popInteger();
			payLvlLogs = is.popIntegerIntegerTreeMap();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(payLevels);
			os.pushInteger(vipLvl);
			os.pushInteger(pointsTotal);
			os.pushIntegerIntegerMap(payLvlLogs);
			os.pushIntegerSet(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			payLevels = is.popList(PayLevelInfo.class);
			vipLvl = is.popInteger();
			pointsTotal = is.popInteger();
			payLvlLogs = is.popIntegerIntegerTreeMap();
			rewards = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushList(payLevels);
			os.pushInteger(vipLvl);
			os.pushInteger(pointsTotal);
			os.pushIntegerIntegerMap(payLvlLogs);
			os.pushIntegerSet(rewards);
		}

		public int id;
		public List<PayLevelInfo> payLevels;
		public int vipLvl;
		public int pointsTotal;
		public Map<Integer, Integer> payLvlLogs;
		public Set<Integer> rewards;
	}

	public static class CheckInInfo implements Stream.IStreamable, Stream.KCloneable<CheckInInfo>, SStream.IStreamable
	{

		public CheckInInfo() { }

		public CheckInInfo(int checkinId, int finishedDays, int canCheckIn)
		{
			this.checkinId = checkinId;
			this.finishedDays = finishedDays;
			this.canCheckIn = canCheckIn;
		}

		public CheckInInfo ksClone()
		{
			return new CheckInInfo(checkinId, finishedDays, canCheckIn);
		}

		@Override
		public CheckInInfo kdClone()
		{
			CheckInInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			checkinId = is.popInteger();
			finishedDays = is.popInteger();
			canCheckIn = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(checkinId);
			os.pushInteger(finishedDays);
			os.pushInteger(canCheckIn);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			checkinId = is.popInteger();
			finishedDays = is.popInteger();
			canCheckIn = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(checkinId);
			os.pushInteger(finishedDays);
			os.pushInteger(canCheckIn);
		}

		public int checkinId;
		public int finishedDays;
		public int canCheckIn;
	}

	public static class MapEntity implements Stream.IStreamable, Stream.KCloneable<MapEntity>, SStream.IStreamable
	{

		public MapEntity() { }

		public MapEntity(int id, int count, int exp, int fixedDropTblId, 
		                 List<Integer> randomDropTblIds, int randomDropCount)
		{
			this.id = id;
			this.count = count;
			this.exp = exp;
			this.fixedDropTblId = fixedDropTblId;
			this.randomDropTblIds = randomDropTblIds;
			this.randomDropCount = randomDropCount;
		}

		public MapEntity ksClone()
		{
			return new MapEntity(id, count, exp, fixedDropTblId, 
			                     randomDropTblIds, randomDropCount);
		}

		@Override
		public MapEntity kdClone()
		{
			MapEntity _kio_clobj = ksClone();
			_kio_clobj.randomDropTblIds = new ArrayList<Integer>(randomDropTblIds);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
			exp = is.popInteger();
			fixedDropTblId = is.popInteger();
			randomDropTblIds = is.popIntegerList();
			randomDropCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
			os.pushInteger(exp);
			os.pushInteger(fixedDropTblId);
			os.pushIntegerList(randomDropTblIds);
			os.pushInteger(randomDropCount);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
			exp = is.popInteger();
			fixedDropTblId = is.popInteger();
			randomDropTblIds = is.popIntegerList();
			randomDropCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
			os.pushInteger(exp);
			os.pushInteger(fixedDropTblId);
			os.pushIntegerList(randomDropTblIds);
			os.pushInteger(randomDropCount);
		}

		public int id;
		public int count;
		public int exp;
		public int fixedDropTblId;
		public List<Integer> randomDropTblIds;
		public int randomDropCount;
	}

	public static class EntityType implements Stream.IStreamable, SStream.IStreamable
	{

		public EntityType() { }

		public EntityType(int entityID, int count)
		{
			this.entityID = entityID;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			entityID = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(entityID);
			os.pushInteger(count);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			entityID = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(entityID);
			os.pushInteger(count);
		}

		public int entityID;
		public int count;
	}

	public static class EquipPart implements Stream.IStreamable, Stream.KCloneable<EquipPart>, SStream.IStreamable
	{

		public EquipPart() { }

		public EquipPart(int id, int eqGrowLvl, int eqEvoLvl)
		{
			this.id = id;
			this.eqGrowLvl = eqGrowLvl;
			this.eqEvoLvl = eqEvoLvl;
		}

		public EquipPart ksClone()
		{
			return new EquipPart(id, eqGrowLvl, eqEvoLvl);
		}

		@Override
		public EquipPart kdClone()
		{
			EquipPart _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			eqGrowLvl = is.popInteger();
			eqEvoLvl = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(eqGrowLvl);
			os.pushInteger(eqEvoLvl);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			eqGrowLvl = is.popInteger();
			eqEvoLvl = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(eqGrowLvl);
			os.pushInteger(eqEvoLvl);
		}

		public int id;
		public int eqGrowLvl;
		public int eqEvoLvl;
	}

	public static class Counter implements Stream.IStreamable, Stream.KCloneable<Counter>, SStream.IStreamable
	{

		public Counter() { }

		public Counter(int fvalue, int rvalue)
		{
			this.fvalue = fvalue;
			this.rvalue = rvalue;
		}

		public Counter ksClone()
		{
			return new Counter(fvalue, rvalue);
		}

		@Override
		public Counter kdClone()
		{
			Counter _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fvalue = is.popInteger();
			rvalue = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(fvalue);
			os.pushInteger(rvalue);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			fvalue = is.popInteger();
			rvalue = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(fvalue);
			os.pushInteger(rvalue);
		}

		public int fvalue;
		public int rvalue;
	}

	public static class ItemCounter implements Stream.IStreamable, Stream.KCloneable<ItemCounter>, SStream.IStreamable
	{

		public ItemCounter() { }

		public ItemCounter(int id, Counter value)
		{
			this.id = id;
			this.value = value;
		}

		public ItemCounter ksClone()
		{
			return new ItemCounter(id, value);
		}

		@Override
		public ItemCounter kdClone()
		{
			ItemCounter _kio_clobj = ksClone();
			_kio_clobj.value = Stream.clone(value);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( value == null )
				value = new Counter();
			is.pop(value);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(value);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			value = is.pop(Counter.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(value);
		}

		public int id;
		public Counter value;
	}

	public static class Prop implements Stream.IStreamable, Stream.KCloneable<Prop>, SStream.IStreamable
	{

		public Prop() { }

		public Prop(int id, int value)
		{
			this.id = id;
			this.value = value;
		}

		public Prop ksClone()
		{
			return new Prop(id, value);
		}

		@Override
		public Prop kdClone()
		{
			Prop _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
		}

		public int id;
		public int value;
	}

	public static class PKInfo implements Stream.IStreamable, Stream.KCloneable<PKInfo>, SStream.IStreamable
	{

		public PKInfo() { }

		public PKInfo(int mode, int value)
		{
			this.mode = mode;
			this.value = value;
		}

		public PKInfo ksClone()
		{
			return new PKInfo(mode, value);
		}

		@Override
		public PKInfo kdClone()
		{
			PKInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mode = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mode);
			os.pushInteger(value);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			mode = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(mode);
			os.pushInteger(value);
		}

		public int mode;
		public int value;
	}

	public static class ArenaBattleInfo implements Stream.IStreamable, Stream.KCloneable<ArenaBattleInfo>, SStream.IStreamable
	{

		public ArenaBattleInfo() { }

		public ArenaBattleInfo(int defendingSideRank, BattleArrayOverview attackingSide, BattleArrayOverview defendingSide)
		{
			this.defendingSideRank = defendingSideRank;
			this.attackingSide = attackingSide;
			this.defendingSide = defendingSide;
		}

		public ArenaBattleInfo ksClone()
		{
			return new ArenaBattleInfo(defendingSideRank, attackingSide, defendingSide);
		}

		@Override
		public ArenaBattleInfo kdClone()
		{
			ArenaBattleInfo _kio_clobj = ksClone();
			_kio_clobj.attackingSide = Stream.clone(attackingSide);
			_kio_clobj.defendingSide = Stream.clone(defendingSide);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			defendingSideRank = is.popInteger();
			if( attackingSide == null )
				attackingSide = new BattleArrayOverview();
			is.pop(attackingSide);
			if( defendingSide == null )
				defendingSide = new BattleArrayOverview();
			is.pop(defendingSide);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(defendingSideRank);
			os.push(attackingSide);
			os.push(defendingSide);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			defendingSideRank = is.popInteger();
			attackingSide = is.pop(BattleArrayOverview.class);
			defendingSide = is.pop(BattleArrayOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(defendingSideRank);
			os.push(attackingSide);
			os.push(defendingSide);
		}

		public int defendingSideRank;
		public BattleArrayOverview attackingSide;
		public BattleArrayOverview defendingSide;
	}

	public static class ArenaBattleResult implements Stream.IStreamable, Stream.KCloneable<ArenaBattleResult>, SStream.IStreamable
	{

		public ArenaBattleResult() { }

		public ArenaBattleResult(int win, int attackingSideRank, int defendingSideRank, RoleOverview defendingSide)
		{
			this.win = win;
			this.attackingSideRank = attackingSideRank;
			this.defendingSideRank = defendingSideRank;
			this.defendingSide = defendingSide;
		}

		public ArenaBattleResult ksClone()
		{
			return new ArenaBattleResult(win, attackingSideRank, defendingSideRank, defendingSide);
		}

		@Override
		public ArenaBattleResult kdClone()
		{
			ArenaBattleResult _kio_clobj = ksClone();
			_kio_clobj.defendingSide = Stream.clone(defendingSide);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			win = is.popInteger();
			attackingSideRank = is.popInteger();
			defendingSideRank = is.popInteger();
			if( defendingSide == null )
				defendingSide = new RoleOverview();
			is.pop(defendingSide);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(win);
			os.pushInteger(attackingSideRank);
			os.pushInteger(defendingSideRank);
			os.push(defendingSide);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			win = is.popInteger();
			attackingSideRank = is.popInteger();
			defendingSideRank = is.popInteger();
			defendingSide = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(win);
			os.pushInteger(attackingSideRank);
			os.pushInteger(defendingSideRank);
			os.push(defendingSide);
		}

		public int win;
		public int attackingSideRank;
		public int defendingSideRank;
		public RoleOverview defendingSide;
	}

	public static class BattleArray implements Stream.IStreamable, SStream.IStreamable
	{

		public BattleArray() { }

		public BattleArray(FightRole fightRole, Map<Integer, FightPet> fightPets, List<Integer> petSeq)
		{
			this.fightRole = fightRole;
			this.fightPets = fightPets;
			this.petSeq = petSeq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( fightRole == null )
				fightRole = new FightRole();
			is.pop(fightRole);
			fightPets = is.popIntegerTreeMap(FightPet.class);
			petSeq = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(fightRole);
			os.pushIntegerMap(fightPets);
			os.pushIntegerList(petSeq);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			fightRole = is.pop(FightRole.class);
			fightPets = is.popIntegerTreeMap(FightPet.class);
			petSeq = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(fightRole);
			os.pushIntegerMap(fightPets);
			os.pushIntegerList(petSeq);
		}

		public FightRole fightRole;
		public Map<Integer, FightPet> fightPets;
		public List<Integer> petSeq;
	}

	public static class SuperArenaBattleResult implements Stream.IStreamable, Stream.KCloneable<SuperArenaBattleResult>, SStream.IStreamable
	{

		public SuperArenaBattleResult() { }

		public SuperArenaBattleResult(int loseTeam, Map<Integer, SABattleTeamInfo> teams)
		{
			this.loseTeam = loseTeam;
			this.teams = teams;
		}

		public SuperArenaBattleResult ksClone()
		{
			return new SuperArenaBattleResult(loseTeam, teams);
		}

		@Override
		public SuperArenaBattleResult kdClone()
		{
			SuperArenaBattleResult _kio_clobj = ksClone();
			_kio_clobj.teams = Stream.clone(teams);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			loseTeam = is.popInteger();
			teams = is.popIntegerTreeMap(SABattleTeamInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(loseTeam);
			os.pushIntegerMap(teams);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			loseTeam = is.popInteger();
			teams = is.popIntegerTreeMap(SABattleTeamInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(loseTeam);
			os.pushIntegerMap(teams);
		}

		public int loseTeam;
		public Map<Integer, SABattleTeamInfo> teams;
	}

	public static class SABattleTeamInfo implements Stream.IStreamable, Stream.KCloneable<SABattleTeamInfo>, SStream.IStreamable
	{

		public SABattleTeamInfo() { }

		public SABattleTeamInfo(Map<Integer, SABattleInfo> members, List<Integer> results)
		{
			this.members = members;
			this.results = results;
		}

		public SABattleTeamInfo ksClone()
		{
			return new SABattleTeamInfo(members, results);
		}

		@Override
		public SABattleTeamInfo kdClone()
		{
			SABattleTeamInfo _kio_clobj = ksClone();
			_kio_clobj.members = Stream.clone(members);
			_kio_clobj.results = new ArrayList<Integer>(results);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			members = is.popIntegerTreeMap(SABattleInfo.class);
			results = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(members);
			os.pushIntegerList(results);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			members = is.popIntegerTreeMap(SABattleInfo.class);
			results = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerMap(members);
			os.pushIntegerList(results);
		}

		public Map<Integer, SABattleInfo> members;
		public List<Integer> results;
	}

	public static class SABattleInfo implements Stream.IStreamable, Stream.KCloneable<SABattleInfo>, SStream.IStreamable
	{

		public SABattleInfo() { }

		public SABattleInfo(int rid, String name, int level, int gender, 
		                    int headIcon, int BWType, int classType, int fightPower, 
		                    int kills, int dead, int assist, int addHonor, 
		                    int addELO)
		{
			this.rid = rid;
			this.name = name;
			this.level = level;
			this.gender = gender;
			this.headIcon = headIcon;
			this.BWType = BWType;
			this.classType = classType;
			this.fightPower = fightPower;
			this.kills = kills;
			this.dead = dead;
			this.assist = assist;
			this.addHonor = addHonor;
			this.addELO = addELO;
		}

		public SABattleInfo ksClone()
		{
			return new SABattleInfo(rid, name, level, gender, 
			                        headIcon, BWType, classType, fightPower, 
			                        kills, dead, assist, addHonor, 
			                        addELO);
		}

		@Override
		public SABattleInfo kdClone()
		{
			SABattleInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			name = is.popString();
			level = is.popInteger();
			gender = is.popInteger();
			headIcon = is.popInteger();
			BWType = is.popInteger();
			classType = is.popInteger();
			fightPower = is.popInteger();
			kills = is.popInteger();
			dead = is.popInteger();
			assist = is.popInteger();
			addHonor = is.popInteger();
			addELO = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushString(name);
			os.pushInteger(level);
			os.pushInteger(gender);
			os.pushInteger(headIcon);
			os.pushInteger(BWType);
			os.pushInteger(classType);
			os.pushInteger(fightPower);
			os.pushInteger(kills);
			os.pushInteger(dead);
			os.pushInteger(assist);
			os.pushInteger(addHonor);
			os.pushInteger(addELO);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rid = is.popInteger();
			name = is.popString();
			level = is.popInteger();
			gender = is.popInteger();
			headIcon = is.popInteger();
			BWType = is.popInteger();
			classType = is.popInteger();
			fightPower = is.popInteger();
			kills = is.popInteger();
			dead = is.popInteger();
			assist = is.popInteger();
			addHonor = is.popInteger();
			addELO = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(rid);
			os.pushString(name);
			os.pushInteger(level);
			os.pushInteger(gender);
			os.pushInteger(headIcon);
			os.pushInteger(BWType);
			os.pushInteger(classType);
			os.pushInteger(fightPower);
			os.pushInteger(kills);
			os.pushInteger(dead);
			os.pushInteger(assist);
			os.pushInteger(addHonor);
			os.pushInteger(addELO);
		}

		public int rid;
		public String name;
		public int level;
		public int gender;
		public int headIcon;
		public int BWType;
		public int classType;
		public int fightPower;
		public int kills;
		public int dead;
		public int assist;
		public int addHonor;
		public int addELO;
	}

	public static class FightRole implements Stream.IStreamable, Stream.KCloneable<FightRole>, SStream.IStreamable
	{

		public FightRole() { }

		public FightRole(BasePlayer base, String roleName, byte gender, short headIcon, 
		                 byte face, byte hair, List<Integer> curSkills, int curUniqueSkill, 
		                 int curWeapon, DBDIYSkillData diyskill, SectBrief sectBrief, int fightPower, 
		                 Map<Integer, Integer> showFashionTypes, byte isHeirloomDisplay)
		{
			this.base = base;
			this.roleName = roleName;
			this.gender = gender;
			this.headIcon = headIcon;
			this.face = face;
			this.hair = hair;
			this.curSkills = curSkills;
			this.curUniqueSkill = curUniqueSkill;
			this.curWeapon = curWeapon;
			this.diyskill = diyskill;
			this.sectBrief = sectBrief;
			this.fightPower = fightPower;
			this.showFashionTypes = showFashionTypes;
			this.isHeirloomDisplay = isHeirloomDisplay;
		}

		public FightRole ksClone()
		{
			return new FightRole(base, roleName, gender, headIcon, 
			                     face, hair, curSkills, curUniqueSkill, 
			                     curWeapon, diyskill, sectBrief, fightPower, 
			                     showFashionTypes, isHeirloomDisplay);
		}

		@Override
		public FightRole kdClone()
		{
			FightRole _kio_clobj = ksClone();
			_kio_clobj.base = Stream.clone(base);
			_kio_clobj.curSkills = new ArrayList<Integer>(curSkills);
			_kio_clobj.diyskill = Stream.cloneNullable(diyskill);
			_kio_clobj.sectBrief = Stream.clone(sectBrief);
			_kio_clobj.showFashionTypes = new TreeMap<Integer, Integer>(showFashionTypes);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( base == null )
				base = new BasePlayer();
			is.pop(base);
			roleName = is.popString();
			gender = is.popByte();
			headIcon = is.popShort();
			face = is.popByte();
			hair = is.popByte();
			curSkills = is.popIntegerList();
			curUniqueSkill = is.popInteger();
			curWeapon = is.popInteger();
			diyskill = is.popNullable(DBDIYSkillData.class);
			if( sectBrief == null )
				sectBrief = new SectBrief();
			is.pop(sectBrief);
			fightPower = is.popInteger();
			showFashionTypes = is.popIntegerIntegerTreeMap();
			isHeirloomDisplay = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(base);
			os.pushString(roleName);
			os.pushByte(gender);
			os.pushShort(headIcon);
			os.pushByte(face);
			os.pushByte(hair);
			os.pushIntegerList(curSkills);
			os.pushInteger(curUniqueSkill);
			os.pushInteger(curWeapon);
			os.pushNullable(diyskill);
			os.push(sectBrief);
			os.pushInteger(fightPower);
			os.pushIntegerIntegerMap(showFashionTypes);
			os.pushByte(isHeirloomDisplay);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			base = is.pop(BasePlayer.class);
			roleName = is.popString();
			gender = is.popByte();
			headIcon = is.popShort();
			face = is.popByte();
			hair = is.popByte();
			curSkills = is.popIntegerList();
			curUniqueSkill = is.popInteger();
			curWeapon = is.popInteger();
			diyskill = is.pop(DBDIYSkillData.class);
			sectBrief = is.pop(SectBrief.class);
			fightPower = is.popInteger();
			showFashionTypes = is.popIntegerIntegerTreeMap();
			isHeirloomDisplay = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(base);
			os.pushString(roleName);
			os.pushByte(gender);
			os.pushShort(headIcon);
			os.pushByte(face);
			os.pushByte(hair);
			os.pushIntegerList(curSkills);
			os.pushInteger(curUniqueSkill);
			os.pushInteger(curWeapon);
			os.push(diyskill);
			os.push(sectBrief);
			os.pushInteger(fightPower);
			os.pushIntegerIntegerMap(showFashionTypes);
			os.pushByte(isHeirloomDisplay);
		}

		public BasePlayer base;
		public String roleName;
		public byte gender;
		public short headIcon;
		public byte face;
		public byte hair;
		public List<Integer> curSkills;
		public int curUniqueSkill;
		public int curWeapon;
		public DBDIYSkillData diyskill;
		public SectBrief sectBrief;
		public int fightPower;
		public Map<Integer, Integer> showFashionTypes;
		public byte isHeirloomDisplay;
	}

	public static class BasePlayer implements Stream.IStreamable, Stream.KCloneable<BasePlayer>, SStream.IStreamable
	{

		public BasePlayer() { }

		public BasePlayer(int roleID, byte classType, byte transformLevel, byte BWType, 
		                  int level, Set<Integer> suites, Map<Integer, DBWearEquip> equips, List<DBEquipPart> equipParts, 
		                  Map<Integer, DBSkill> skills, Map<Integer, DBWeapon> weapons, Map<Integer, DBSpirit> spirits, Set<Integer> curSpirits, 
		                  Map<Integer, Integer> sectAuras, DBHorse horseData, Map<Integer, Byte> medals, Map<Integer, Integer> curFashions, 
		                  DBSealData sealData, Map<Integer, Integer> rarebooks, Map<Integer, Integer> grasps, DBRoleTitle title, 
		                  Set<Integer> petAchieves, Map<Integer, Integer> petCoPractices, ArmorFightData armor, Map<Integer, Integer> itemProps, 
		                  int perfectDegree, int marriageLevel, Map<Integer, Integer> transferPointLvls, Map<Integer, Integer> petStar, 
		                  Map<Integer, Integer> specialCardAttr)
		{
			this.roleID = roleID;
			this.classType = classType;
			this.transformLevel = transformLevel;
			this.BWType = BWType;
			this.level = level;
			this.suites = suites;
			this.equips = equips;
			this.equipParts = equipParts;
			this.skills = skills;
			this.weapons = weapons;
			this.spirits = spirits;
			this.curSpirits = curSpirits;
			this.sectAuras = sectAuras;
			this.horseData = horseData;
			this.medals = medals;
			this.curFashions = curFashions;
			this.sealData = sealData;
			this.rarebooks = rarebooks;
			this.grasps = grasps;
			this.title = title;
			this.petAchieves = petAchieves;
			this.petCoPractices = petCoPractices;
			this.armor = armor;
			this.itemProps = itemProps;
			this.perfectDegree = perfectDegree;
			this.marriageLevel = marriageLevel;
			this.transferPointLvls = transferPointLvls;
			this.petStar = petStar;
			this.specialCardAttr = specialCardAttr;
		}

		public BasePlayer ksClone()
		{
			return new BasePlayer(roleID, classType, transformLevel, BWType, 
			                      level, suites, equips, equipParts, 
			                      skills, weapons, spirits, curSpirits, 
			                      sectAuras, horseData, medals, curFashions, 
			                      sealData, rarebooks, grasps, title, 
			                      petAchieves, petCoPractices, armor, itemProps, 
			                      perfectDegree, marriageLevel, transferPointLvls, petStar, 
			                      specialCardAttr);
		}

		@Override
		public BasePlayer kdClone()
		{
			BasePlayer _kio_clobj = ksClone();
			_kio_clobj.suites = new TreeSet<Integer>(suites);
			_kio_clobj.equips = Stream.clone(equips);
			_kio_clobj.equipParts = Stream.clone(equipParts);
			_kio_clobj.skills = Stream.clone(skills);
			_kio_clobj.weapons = Stream.clone(weapons);
			_kio_clobj.spirits = Stream.clone(spirits);
			_kio_clobj.curSpirits = new TreeSet<Integer>(curSpirits);
			_kio_clobj.sectAuras = new TreeMap<Integer, Integer>(sectAuras);
			_kio_clobj.horseData = Stream.clone(horseData);
			_kio_clobj.medals = new TreeMap<Integer, Byte>(medals);
			_kio_clobj.curFashions = new TreeMap<Integer, Integer>(curFashions);
			_kio_clobj.sealData = Stream.clone(sealData);
			_kio_clobj.rarebooks = new TreeMap<Integer, Integer>(rarebooks);
			_kio_clobj.grasps = new TreeMap<Integer, Integer>(grasps);
			_kio_clobj.title = Stream.clone(title);
			_kio_clobj.petAchieves = new TreeSet<Integer>(petAchieves);
			_kio_clobj.petCoPractices = new TreeMap<Integer, Integer>(petCoPractices);
			_kio_clobj.armor = Stream.cloneNullable(armor);
			_kio_clobj.itemProps = new TreeMap<Integer, Integer>(itemProps);
			_kio_clobj.transferPointLvls = new TreeMap<Integer, Integer>(transferPointLvls);
			_kio_clobj.petStar = new TreeMap<Integer, Integer>(petStar);
			_kio_clobj.specialCardAttr = new TreeMap<Integer, Integer>(specialCardAttr);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			classType = is.popByte();
			transformLevel = is.popByte();
			BWType = is.popByte();
			level = is.popInteger();
			suites = is.popIntegerTreeSet();
			equips = is.popIntegerTreeMap(DBWearEquip.class);
			equipParts = is.popList(DBEquipPart.class);
			skills = is.popIntegerTreeMap(DBSkill.class);
			weapons = is.popIntegerTreeMap(DBWeapon.class);
			spirits = is.popIntegerTreeMap(DBSpirit.class);
			curSpirits = is.popIntegerTreeSet();
			sectAuras = is.popIntegerIntegerTreeMap();
			if( horseData == null )
				horseData = new DBHorse();
			is.pop(horseData);
			medals = is.popIntegerByteTreeMap();
			curFashions = is.popIntegerIntegerTreeMap();
			if( sealData == null )
				sealData = new DBSealData();
			is.pop(sealData);
			rarebooks = is.popIntegerIntegerTreeMap();
			grasps = is.popIntegerIntegerTreeMap();
			if( title == null )
				title = new DBRoleTitle();
			is.pop(title);
			petAchieves = is.popIntegerTreeSet();
			petCoPractices = is.popIntegerIntegerTreeMap();
			armor = is.popNullable(ArmorFightData.class);
			itemProps = is.popIntegerIntegerTreeMap();
			perfectDegree = is.popInteger();
			marriageLevel = is.popInteger();
			transferPointLvls = is.popIntegerIntegerTreeMap();
			petStar = is.popIntegerIntegerTreeMap();
			specialCardAttr = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushByte(classType);
			os.pushByte(transformLevel);
			os.pushByte(BWType);
			os.pushInteger(level);
			os.pushIntegerSet(suites);
			os.pushIntegerMap(equips);
			os.pushList(equipParts);
			os.pushIntegerMap(skills);
			os.pushIntegerMap(weapons);
			os.pushIntegerMap(spirits);
			os.pushIntegerSet(curSpirits);
			os.pushIntegerIntegerMap(sectAuras);
			os.push(horseData);
			os.pushIntegerByteMap(medals);
			os.pushIntegerIntegerMap(curFashions);
			os.push(sealData);
			os.pushIntegerIntegerMap(rarebooks);
			os.pushIntegerIntegerMap(grasps);
			os.push(title);
			os.pushIntegerSet(petAchieves);
			os.pushIntegerIntegerMap(petCoPractices);
			os.pushNullable(armor);
			os.pushIntegerIntegerMap(itemProps);
			os.pushInteger(perfectDegree);
			os.pushInteger(marriageLevel);
			os.pushIntegerIntegerMap(transferPointLvls);
			os.pushIntegerIntegerMap(petStar);
			os.pushIntegerIntegerMap(specialCardAttr);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleID = is.popInteger();
			classType = is.popByte();
			transformLevel = is.popByte();
			BWType = is.popByte();
			level = is.popInteger();
			suites = is.popIntegerTreeSet();
			equips = is.popIntegerTreeMap(DBWearEquip.class);
			equipParts = is.popList(DBEquipPart.class);
			skills = is.popIntegerTreeMap(DBSkill.class);
			weapons = is.popIntegerTreeMap(DBWeapon.class);
			spirits = is.popIntegerTreeMap(DBSpirit.class);
			curSpirits = is.popIntegerTreeSet();
			sectAuras = is.popIntegerIntegerTreeMap();
			horseData = is.pop(DBHorse.class);
			medals = is.popIntegerByteTreeMap();
			curFashions = is.popIntegerIntegerTreeMap();
			sealData = is.pop(DBSealData.class);
			rarebooks = is.popIntegerIntegerTreeMap();
			grasps = is.popIntegerIntegerTreeMap();
			title = is.pop(DBRoleTitle.class);
			petAchieves = is.popIntegerTreeSet();
			petCoPractices = is.popIntegerIntegerTreeMap();
			armor = is.pop(ArmorFightData.class);
			itemProps = is.popIntegerIntegerTreeMap();
			perfectDegree = is.popInteger();
			marriageLevel = is.popInteger();
			transferPointLvls = is.popIntegerIntegerTreeMap();
			petStar = is.popIntegerIntegerTreeMap();
			specialCardAttr = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(roleID);
			os.pushByte(classType);
			os.pushByte(transformLevel);
			os.pushByte(BWType);
			os.pushInteger(level);
			os.pushIntegerSet(suites);
			os.pushIntegerMap(equips);
			os.pushList(equipParts);
			os.pushIntegerMap(skills);
			os.pushIntegerMap(weapons);
			os.pushIntegerMap(spirits);
			os.pushIntegerSet(curSpirits);
			os.pushIntegerIntegerMap(sectAuras);
			os.push(horseData);
			os.pushIntegerByteMap(medals);
			os.pushIntegerIntegerMap(curFashions);
			os.push(sealData);
			os.pushIntegerIntegerMap(rarebooks);
			os.pushIntegerIntegerMap(grasps);
			os.push(title);
			os.pushIntegerSet(petAchieves);
			os.pushIntegerIntegerMap(petCoPractices);
			os.push(armor);
			os.pushIntegerIntegerMap(itemProps);
			os.pushInteger(perfectDegree);
			os.pushInteger(marriageLevel);
			os.pushIntegerIntegerMap(transferPointLvls);
			os.pushIntegerIntegerMap(petStar);
			os.pushIntegerIntegerMap(specialCardAttr);
		}

		public int roleID;
		public byte classType;
		public byte transformLevel;
		public byte BWType;
		public int level;
		public Set<Integer> suites;
		public Map<Integer, DBWearEquip> equips;
		public List<DBEquipPart> equipParts;
		public Map<Integer, DBSkill> skills;
		public Map<Integer, DBWeapon> weapons;
		public Map<Integer, DBSpirit> spirits;
		public Set<Integer> curSpirits;
		public Map<Integer, Integer> sectAuras;
		public DBHorse horseData;
		public Map<Integer, Byte> medals;
		public Map<Integer, Integer> curFashions;
		public DBSealData sealData;
		public Map<Integer, Integer> rarebooks;
		public Map<Integer, Integer> grasps;
		public DBRoleTitle title;
		public Set<Integer> petAchieves;
		public Map<Integer, Integer> petCoPractices;
		public ArmorFightData armor;
		public Map<Integer, Integer> itemProps;
		public int perfectDegree;
		public int marriageLevel;
		public Map<Integer, Integer> transferPointLvls;
		public Map<Integer, Integer> petStar;
		public Map<Integer, Integer> specialCardAttr;
	}

	public static class SectBrief implements Stream.IStreamable, Stream.KCloneable<SectBrief>, SStream.IStreamable
	{

		public SectBrief() { }

		public SectBrief(int sectID, String sectName, byte sectPosition, short sectIcon, 
		                 int sectLevel)
		{
			this.sectID = sectID;
			this.sectName = sectName;
			this.sectPosition = sectPosition;
			this.sectIcon = sectIcon;
			this.sectLevel = sectLevel;
		}

		public SectBrief ksClone()
		{
			return new SectBrief(sectID, sectName, sectPosition, sectIcon, 
			                     sectLevel);
		}

		@Override
		public SectBrief kdClone()
		{
			SectBrief _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectID = is.popInteger();
			sectName = is.popString();
			sectPosition = is.popByte();
			sectIcon = is.popShort();
			sectLevel = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sectID);
			os.pushString(sectName);
			os.pushByte(sectPosition);
			os.pushShort(sectIcon);
			os.pushInteger(sectLevel);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			sectID = is.popInteger();
			sectName = is.popString();
			sectPosition = is.popByte();
			sectIcon = is.popShort();
			sectLevel = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(sectID);
			os.pushString(sectName);
			os.pushByte(sectPosition);
			os.pushShort(sectIcon);
			os.pushInteger(sectLevel);
		}

		public int sectID;
		public String sectName;
		public byte sectPosition;
		public short sectIcon;
		public int sectLevel;
	}

	public static class TimeSpan implements Stream.IStreamable, Stream.KCloneable<TimeSpan>, SStream.IStreamable
	{

		public TimeSpan() { }

		public TimeSpan(int startTime, int endTime)
		{
			this.startTime = startTime;
			this.endTime = endTime;
		}

		public TimeSpan ksClone()
		{
			return new TimeSpan(startTime, endTime);
		}

		@Override
		public TimeSpan kdClone()
		{
			TimeSpan _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			startTime = is.popInteger();
			endTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(startTime);
			os.pushInteger(endTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			startTime = is.popInteger();
			endTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(startTime);
			os.pushInteger(endTime);
		}

		public int startTime;
		public int endTime;
	}

	public static class RoleLifeDaySpan implements Stream.IStreamable, Stream.KCloneable<RoleLifeDaySpan>, SStream.IStreamable
	{

		public RoleLifeDaySpan() { }

		public RoleLifeDaySpan(int offset, int duration)
		{
			this.offset = offset;
			this.duration = duration;
		}

		public RoleLifeDaySpan ksClone()
		{
			return new RoleLifeDaySpan(offset, duration);
		}

		@Override
		public RoleLifeDaySpan kdClone()
		{
			RoleLifeDaySpan _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			offset = is.popInteger();
			duration = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(offset);
			os.pushInteger(duration);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			offset = is.popInteger();
			duration = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(offset);
			os.pushInteger(duration);
		}

		public int offset;
		public int duration;
	}

	public static class MallGoods implements Stream.IStreamable, Stream.KCloneable<MallGoods>, SStream.IStreamable
	{

		public static final byte eATypeBestSeller = 1;
		public static final byte eATypeStrengthen = 2;
		public static final byte eATypefigure = 4;

		public MallGoods() { }

		public MallGoods(int id, int iid, int icount, int price, 
		                 TimeSpan time, int vipReq, int levelReq, int attribute, 
		                 MallGoodsDiscount discount, MallGoodsRestriction restriction)
		{
			this.id = id;
			this.iid = iid;
			this.icount = icount;
			this.price = price;
			this.time = time;
			this.vipReq = vipReq;
			this.levelReq = levelReq;
			this.attribute = attribute;
			this.discount = discount;
			this.restriction = restriction;
		}

		public MallGoods ksClone()
		{
			return new MallGoods(id, iid, icount, price, 
			                     time, vipReq, levelReq, attribute, 
			                     discount, restriction);
		}

		@Override
		public MallGoods kdClone()
		{
			MallGoods _kio_clobj = ksClone();
			_kio_clobj.time = Stream.cloneNullable(time);
			_kio_clobj.discount = Stream.cloneNullable(discount);
			_kio_clobj.restriction = Stream.cloneNullable(restriction);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			iid = is.popInteger();
			icount = is.popInteger();
			price = is.popInteger();
			time = is.popNullable(TimeSpan.class);
			vipReq = is.popInteger();
			levelReq = is.popInteger();
			attribute = is.popInteger();
			discount = is.popNullable(MallGoodsDiscount.class);
			restriction = is.popNullable(MallGoodsRestriction.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(iid);
			os.pushInteger(icount);
			os.pushInteger(price);
			os.pushNullable(time);
			os.pushInteger(vipReq);
			os.pushInteger(levelReq);
			os.pushInteger(attribute);
			os.pushNullable(discount);
			os.pushNullable(restriction);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			iid = is.popInteger();
			icount = is.popInteger();
			price = is.popInteger();
			time = is.pop(TimeSpan.class);
			vipReq = is.popInteger();
			levelReq = is.popInteger();
			attribute = is.popInteger();
			discount = is.pop(MallGoodsDiscount.class);
			restriction = is.pop(MallGoodsRestriction.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(iid);
			os.pushInteger(icount);
			os.pushInteger(price);
			os.push(time);
			os.pushInteger(vipReq);
			os.pushInteger(levelReq);
			os.pushInteger(attribute);
			os.push(discount);
			os.push(restriction);
		}

		public int id;
		public int iid;
		public int icount;
		public int price;
		public TimeSpan time;
		public int vipReq;
		public int levelReq;
		public int attribute;
		public MallGoodsDiscount discount;
		public MallGoodsRestriction restriction;
	}

	public static class MallGoodsDiscount implements Stream.IStreamable, Stream.KCloneable<MallGoodsDiscount>, SStream.IStreamable
	{

		public MallGoodsDiscount() { }

		public MallGoodsDiscount(int price, TimeSpan time)
		{
			this.price = price;
			this.time = time;
		}

		public MallGoodsDiscount ksClone()
		{
			return new MallGoodsDiscount(price, time);
		}

		@Override
		public MallGoodsDiscount kdClone()
		{
			MallGoodsDiscount _kio_clobj = ksClone();
			_kio_clobj.time = Stream.cloneNullable(time);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			price = is.popInteger();
			time = is.popNullable(TimeSpan.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(price);
			os.pushNullable(time);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			price = is.popInteger();
			time = is.pop(TimeSpan.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(price);
			os.push(time);
		}

		public int price;
		public TimeSpan time;
	}

	public static class MallGoodsRestriction implements Stream.IStreamable, Stream.KCloneable<MallGoodsRestriction>, SStream.IStreamable
	{

		public MallGoodsRestriction() { }

		public MallGoodsRestriction(int times, int weekPeriod, TimeSpan time)
		{
			this.times = times;
			this.weekPeriod = weekPeriod;
			this.time = time;
		}

		public MallGoodsRestriction ksClone()
		{
			return new MallGoodsRestriction(times, weekPeriod, time);
		}

		@Override
		public MallGoodsRestriction kdClone()
		{
			MallGoodsRestriction _kio_clobj = ksClone();
			_kio_clobj.time = Stream.cloneNullable(time);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
			weekPeriod = is.popInteger();
			time = is.popNullable(TimeSpan.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
			os.pushInteger(weekPeriod);
			os.pushNullable(time);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			times = is.popInteger();
			weekPeriod = is.popInteger();
			time = is.pop(TimeSpan.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(times);
			os.pushInteger(weekPeriod);
			os.push(time);
		}

		public int times;
		public int weekPeriod;
		public TimeSpan time;
	}

	public static class Mall implements Stream.IStreamable, Stream.KCloneable<Mall>, SStream.IStreamable
	{

		public Mall() { }

		public Mall(int open, TimeSpan time, List<MallGoods> fGoods, List<MallGoods> rGoods)
		{
			this.open = open;
			this.time = time;
			this.fGoods = fGoods;
			this.rGoods = rGoods;
		}

		public Mall ksClone()
		{
			return new Mall(open, time, fGoods, rGoods);
		}

		@Override
		public Mall kdClone()
		{
			Mall _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.fGoods = Stream.clone(fGoods);
			_kio_clobj.rGoods = Stream.clone(rGoods);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			fGoods = is.popList(MallGoods.class);
			rGoods = is.popList(MallGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushList(fGoods);
			os.pushList(rGoods);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			fGoods = is.popList(MallGoods.class);
			rGoods = is.popList(MallGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushList(fGoods);
			os.pushList(rGoods);
		}

		public int open;
		public TimeSpan time;
		public List<MallGoods> fGoods;
		public List<MallGoods> rGoods;
	}

	public static class RoleMallInfo implements Stream.IStreamable, Stream.KCloneable<RoleMallInfo>, SStream.IStreamable
	{

		public RoleMallInfo() { }

		public RoleMallInfo(int effectiveTime, Mall mall, DBRoleMallLog log)
		{
			this.effectiveTime = effectiveTime;
			this.mall = mall;
			this.log = log;
		}

		public RoleMallInfo ksClone()
		{
			return new RoleMallInfo(effectiveTime, mall, log);
		}

		@Override
		public RoleMallInfo kdClone()
		{
			RoleMallInfo _kio_clobj = ksClone();
			_kio_clobj.mall = Stream.clone(mall);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( mall == null )
				mall = new Mall();
			is.pop(mall);
			if( log == null )
				log = new DBRoleMallLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(mall);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			mall = is.pop(Mall.class);
			log = is.pop(DBRoleMallLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(mall);
			os.push(log);
		}

		public int effectiveTime;
		public Mall mall;
		public DBRoleMallLog log;
	}

	public static class GroupBuy implements Stream.IStreamable, Stream.KCloneable<GroupBuy>, SStream.IStreamable
	{

		public GroupBuy() { }

		public GroupBuy(int open, TimeSpan time, String title, String content, 
		                int buyEndTime, int returnTime, byte crossserver, List<GroupBuyGoods> goods)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.buyEndTime = buyEndTime;
			this.returnTime = returnTime;
			this.crossserver = crossserver;
			this.goods = goods;
		}

		public GroupBuy ksClone()
		{
			return new GroupBuy(open, time, title, content, 
			                    buyEndTime, returnTime, crossserver, goods);
		}

		@Override
		public GroupBuy kdClone()
		{
			GroupBuy _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.goods = Stream.clone(goods);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			buyEndTime = is.popInteger();
			returnTime = is.popInteger();
			crossserver = is.popByte();
			goods = is.popList(GroupBuyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(buyEndTime);
			os.pushInteger(returnTime);
			os.pushByte(crossserver);
			os.pushList(goods);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			buyEndTime = is.popInteger();
			returnTime = is.popInteger();
			crossserver = is.popByte();
			goods = is.popList(GroupBuyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(buyEndTime);
			os.pushInteger(returnTime);
			os.pushByte(crossserver);
			os.pushList(goods);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public int buyEndTime;
		public int returnTime;
		public byte crossserver;
		public List<GroupBuyGoods> goods;
	}

	public static class GroupBuyGoods implements Stream.IStreamable, Stream.KCloneable<GroupBuyGoods>, SStream.IStreamable
	{

		public GroupBuyGoods() { }

		public GroupBuyGoods(int id, int iid, int icount, int price, 
		                     int vipReq, int levelReq, List<GroupBuyDiscount> discounts, GroupBuyRestriction restriction)
		{
			this.id = id;
			this.iid = iid;
			this.icount = icount;
			this.price = price;
			this.vipReq = vipReq;
			this.levelReq = levelReq;
			this.discounts = discounts;
			this.restriction = restriction;
		}

		public GroupBuyGoods ksClone()
		{
			return new GroupBuyGoods(id, iid, icount, price, 
			                         vipReq, levelReq, discounts, restriction);
		}

		@Override
		public GroupBuyGoods kdClone()
		{
			GroupBuyGoods _kio_clobj = ksClone();
			_kio_clobj.discounts = Stream.clone(discounts);
			_kio_clobj.restriction = Stream.cloneNullable(restriction);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			iid = is.popInteger();
			icount = is.popInteger();
			price = is.popInteger();
			vipReq = is.popInteger();
			levelReq = is.popInteger();
			discounts = is.popList(GroupBuyDiscount.class);
			restriction = is.popNullable(GroupBuyRestriction.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(iid);
			os.pushInteger(icount);
			os.pushInteger(price);
			os.pushInteger(vipReq);
			os.pushInteger(levelReq);
			os.pushList(discounts);
			os.pushNullable(restriction);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			iid = is.popInteger();
			icount = is.popInteger();
			price = is.popInteger();
			vipReq = is.popInteger();
			levelReq = is.popInteger();
			discounts = is.popList(GroupBuyDiscount.class);
			restriction = is.pop(GroupBuyRestriction.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(iid);
			os.pushInteger(icount);
			os.pushInteger(price);
			os.pushInteger(vipReq);
			os.pushInteger(levelReq);
			os.pushList(discounts);
			os.push(restriction);
		}

		public int id;
		public int iid;
		public int icount;
		public int price;
		public int vipReq;
		public int levelReq;
		public List<GroupBuyDiscount> discounts;
		public GroupBuyRestriction restriction;
	}

	public static class GroupBuyDiscount implements Stream.IStreamable, Stream.KCloneable<GroupBuyDiscount>, SStream.IStreamable
	{

		public GroupBuyDiscount() { }

		public GroupBuyDiscount(int countReq, int discount)
		{
			this.countReq = countReq;
			this.discount = discount;
		}

		public GroupBuyDiscount ksClone()
		{
			return new GroupBuyDiscount(countReq, discount);
		}

		@Override
		public GroupBuyDiscount kdClone()
		{
			GroupBuyDiscount _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			countReq = is.popInteger();
			discount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(countReq);
			os.pushInteger(discount);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			countReq = is.popInteger();
			discount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(countReq);
			os.pushInteger(discount);
		}

		public int countReq;
		public int discount;
	}

	public static class GroupBuyRestriction implements Stream.IStreamable, Stream.KCloneable<GroupBuyRestriction>, SStream.IStreamable
	{

		public GroupBuyRestriction() { }

		public GroupBuyRestriction(int times, byte dayRefresh)
		{
			this.times = times;
			this.dayRefresh = dayRefresh;
		}

		public GroupBuyRestriction ksClone()
		{
			return new GroupBuyRestriction(times, dayRefresh);
		}

		@Override
		public GroupBuyRestriction kdClone()
		{
			GroupBuyRestriction _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
			dayRefresh = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
			os.pushByte(dayRefresh);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			times = is.popInteger();
			dayRefresh = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(times);
			os.pushByte(dayRefresh);
		}

		public int times;
		public byte dayRefresh;
	}

	public static class RoleGroupBuyInfo implements Stream.IStreamable, Stream.KCloneable<RoleGroupBuyInfo>, SStream.IStreamable
	{

		public RoleGroupBuyInfo() { }

		public RoleGroupBuyInfo(int effectiveTime, GroupBuy cfg, DBRoleGroupBuyLog log, Map<Integer, Integer> buyCounts)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
			this.buyCounts = buyCounts;
		}

		public RoleGroupBuyInfo ksClone()
		{
			return new RoleGroupBuyInfo(effectiveTime, cfg, log, buyCounts);
		}

		@Override
		public RoleGroupBuyInfo kdClone()
		{
			RoleGroupBuyInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			_kio_clobj.buyCounts = new TreeMap<Integer, Integer>(buyCounts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new GroupBuy();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleGroupBuyLog();
			is.pop(log);
			buyCounts = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
			os.pushIntegerIntegerMap(buyCounts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(GroupBuy.class);
			log = is.pop(DBRoleGroupBuyLog.class);
			buyCounts = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
			os.pushIntegerIntegerMap(buyCounts);
		}

		public int effectiveTime;
		public GroupBuy cfg;
		public DBRoleGroupBuyLog log;
		public Map<Integer, Integer> buyCounts;
	}

	public static class LuckyRollerGift implements Stream.IStreamable, Stream.KCloneable<LuckyRollerGift>, SStream.IStreamable
	{

		public LuckyRollerGift() { }

		public LuckyRollerGift(int id, DummyGoods gift, float probability, int valuable, 
		                       int minRoll)
		{
			this.id = id;
			this.gift = gift;
			this.probability = probability;
			this.valuable = valuable;
			this.minRoll = minRoll;
		}

		public LuckyRollerGift ksClone()
		{
			return new LuckyRollerGift(id, gift, probability, valuable, 
			                           minRoll);
		}

		@Override
		public LuckyRollerGift kdClone()
		{
			LuckyRollerGift _kio_clobj = ksClone();
			_kio_clobj.gift = Stream.clone(gift);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( gift == null )
				gift = new DummyGoods();
			is.pop(gift);
			probability = is.popFloat();
			valuable = is.popInteger();
			minRoll = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(gift);
			os.pushFloat(probability);
			os.pushInteger(valuable);
			os.pushInteger(minRoll);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			gift = is.pop(DummyGoods.class);
			probability = is.popFloat();
			valuable = is.popInteger();
			minRoll = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(gift);
			os.pushFloat(probability);
			os.pushInteger(valuable);
			os.pushInteger(minRoll);
		}

		public int id;
		public DummyGoods gift;
		public float probability;
		public int valuable;
		public int minRoll;
	}

	public static class LuckyRoller implements Stream.IStreamable, Stream.KCloneable<LuckyRoller>, SStream.IStreamable
	{

		public LuckyRoller() { }

		public LuckyRoller(int open, TimeSpan time, String title, String content, 
		                   RoleLifeDaySpan phase, int price, List<LuckyRollerGift> gifts, DummyGoods giftex, 
		                   Map<Integer, Integer> maxRoll, int maxLogLength, int dayMaxPlayTimes)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.price = price;
			this.gifts = gifts;
			this.giftex = giftex;
			this.maxRoll = maxRoll;
			this.maxLogLength = maxLogLength;
			this.dayMaxPlayTimes = dayMaxPlayTimes;
		}

		public LuckyRoller ksClone()
		{
			return new LuckyRoller(open, time, title, content, 
			                       phase, price, gifts, giftex, 
			                       maxRoll, maxLogLength, dayMaxPlayTimes);
		}

		@Override
		public LuckyRoller kdClone()
		{
			LuckyRoller _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.gifts = Stream.clone(gifts);
			_kio_clobj.giftex = Stream.clone(giftex);
			_kio_clobj.maxRoll = new TreeMap<Integer, Integer>(maxRoll);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			price = is.popInteger();
			gifts = is.popList(LuckyRollerGift.class);
			if( giftex == null )
				giftex = new DummyGoods();
			is.pop(giftex);
			maxRoll = is.popIntegerIntegerTreeMap();
			maxLogLength = is.popInteger();
			dayMaxPlayTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(price);
			os.pushList(gifts);
			os.push(giftex);
			os.pushIntegerIntegerMap(maxRoll);
			os.pushInteger(maxLogLength);
			os.pushInteger(dayMaxPlayTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			price = is.popInteger();
			gifts = is.popList(LuckyRollerGift.class);
			giftex = is.pop(DummyGoods.class);
			maxRoll = is.popIntegerIntegerTreeMap();
			maxLogLength = is.popInteger();
			dayMaxPlayTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(price);
			os.pushList(gifts);
			os.push(giftex);
			os.pushIntegerIntegerMap(maxRoll);
			os.pushInteger(maxLogLength);
			os.pushInteger(dayMaxPlayTimes);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public int price;
		public List<LuckyRollerGift> gifts;
		public DummyGoods giftex;
		public Map<Integer, Integer> maxRoll;
		public int maxLogLength;
		public int dayMaxPlayTimes;
	}

	public static class LuckyRollerRecord implements Stream.IStreamable, Stream.KCloneable<LuckyRollerRecord>, SStream.IStreamable
	{

		public LuckyRollerRecord() { }

		public LuckyRollerRecord(String name, int id)
		{
			this.name = name;
			this.id = id;
		}

		public LuckyRollerRecord ksClone()
		{
			return new LuckyRollerRecord(name, id);
		}

		@Override
		public LuckyRollerRecord kdClone()
		{
			LuckyRollerRecord _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			name = is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(name);
			os.pushInteger(id);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			name = is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(name);
			os.pushInteger(id);
		}

		public String name;
		public int id;
	}

	public static class RoleLuckyRollerCfg implements Stream.IStreamable, Stream.KCloneable<RoleLuckyRollerCfg>, SStream.IStreamable
	{

		public RoleLuckyRollerCfg() { }

		public RoleLuckyRollerCfg(int id, TimeSpan time, String title, String content, 
		                          int price, List<LuckyRollerGift> gifts, DummyGoods giftex, int dayMaxPlayTimes)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.price = price;
			this.gifts = gifts;
			this.giftex = giftex;
			this.dayMaxPlayTimes = dayMaxPlayTimes;
		}

		public RoleLuckyRollerCfg ksClone()
		{
			return new RoleLuckyRollerCfg(id, time, title, content, 
			                              price, gifts, giftex, dayMaxPlayTimes);
		}

		@Override
		public RoleLuckyRollerCfg kdClone()
		{
			RoleLuckyRollerCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.gifts = Stream.clone(gifts);
			_kio_clobj.giftex = Stream.clone(giftex);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			price = is.popInteger();
			gifts = is.popList(LuckyRollerGift.class);
			if( giftex == null )
				giftex = new DummyGoods();
			is.pop(giftex);
			dayMaxPlayTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(price);
			os.pushList(gifts);
			os.push(giftex);
			os.pushInteger(dayMaxPlayTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			price = is.popInteger();
			gifts = is.popList(LuckyRollerGift.class);
			giftex = is.pop(DummyGoods.class);
			dayMaxPlayTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(price);
			os.pushList(gifts);
			os.push(giftex);
			os.pushInteger(dayMaxPlayTimes);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public int price;
		public List<LuckyRollerGift> gifts;
		public DummyGoods giftex;
		public int dayMaxPlayTimes;
	}

	public static class LuckyRollInfo implements Stream.IStreamable, Stream.KCloneable<LuckyRollInfo>, SStream.IStreamable
	{

		public LuckyRollInfo() { }

		public LuckyRollInfo(int effectiveTime, RoleLuckyRollerCfg cfg, List<LuckyRollerRecord> logs, int dayPlayTimes)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.logs = logs;
			this.dayPlayTimes = dayPlayTimes;
		}

		public LuckyRollInfo ksClone()
		{
			return new LuckyRollInfo(effectiveTime, cfg, logs, dayPlayTimes);
		}

		@Override
		public LuckyRollInfo kdClone()
		{
			LuckyRollInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.logs = Stream.clone(logs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleLuckyRollerCfg();
			is.pop(cfg);
			logs = is.popList(LuckyRollerRecord.class);
			dayPlayTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.pushList(logs);
			os.pushInteger(dayPlayTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleLuckyRollerCfg.class);
			logs = is.popList(LuckyRollerRecord.class);
			dayPlayTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.pushList(logs);
			os.pushInteger(dayPlayTimes);
		}

		public int effectiveTime;
		public RoleLuckyRollerCfg cfg;
		public List<LuckyRollerRecord> logs;
		public int dayPlayTimes;
	}

	public static class FlashSale implements Stream.IStreamable, Stream.KCloneable<FlashSale>, SStream.IStreamable
	{

		public FlashSale() { }

		public FlashSale(int open, TimeSpan time, String title, String content, 
		                 RoleLifeDaySpan phase, int buyStartTime, int buyEndTime, List<FlashSaleGoods> goods)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.buyStartTime = buyStartTime;
			this.buyEndTime = buyEndTime;
			this.goods = goods;
		}

		public FlashSale ksClone()
		{
			return new FlashSale(open, time, title, content, 
			                     phase, buyStartTime, buyEndTime, goods);
		}

		@Override
		public FlashSale kdClone()
		{
			FlashSale _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.goods = Stream.clone(goods);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			buyStartTime = is.popInteger();
			buyEndTime = is.popInteger();
			goods = is.popList(FlashSaleGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(buyStartTime);
			os.pushInteger(buyEndTime);
			os.pushList(goods);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			buyStartTime = is.popInteger();
			buyEndTime = is.popInteger();
			goods = is.popList(FlashSaleGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(buyStartTime);
			os.pushInteger(buyEndTime);
			os.pushList(goods);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public int buyStartTime;
		public int buyEndTime;
		public List<FlashSaleGoods> goods;
	}

	public static class FlashSaleVip2Times implements Stream.IStreamable, Stream.KCloneable<FlashSaleVip2Times>, SStream.IStreamable
	{

		public FlashSaleVip2Times() { }

		public FlashSaleVip2Times(int vip, int times)
		{
			this.vip = vip;
			this.times = times;
		}

		public FlashSaleVip2Times ksClone()
		{
			return new FlashSaleVip2Times(vip, times);
		}

		@Override
		public FlashSaleVip2Times kdClone()
		{
			FlashSaleVip2Times _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			vip = is.popInteger();
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(vip);
			os.pushInteger(times);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			vip = is.popInteger();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(vip);
			os.pushInteger(times);
		}

		public int vip;
		public int times;
	}

	public static class FlashSaleGoods implements Stream.IStreamable, Stream.KCloneable<FlashSaleGoods>, SStream.IStreamable
	{

		public FlashSaleGoods() { }

		public FlashSaleGoods(int id, String goodsname, int moneyid, int origprice, 
		                      int nowprice, int icon, int levelReq, List<FlashSaleVip2Times> v2t, 
		                      List<DummyGoods> items)
		{
			this.id = id;
			this.goodsname = goodsname;
			this.moneyid = moneyid;
			this.origprice = origprice;
			this.nowprice = nowprice;
			this.icon = icon;
			this.levelReq = levelReq;
			this.v2t = v2t;
			this.items = items;
		}

		public FlashSaleGoods ksClone()
		{
			return new FlashSaleGoods(id, goodsname, moneyid, origprice, 
			                          nowprice, icon, levelReq, v2t, 
			                          items);
		}

		@Override
		public FlashSaleGoods kdClone()
		{
			FlashSaleGoods _kio_clobj = ksClone();
			_kio_clobj.v2t = Stream.clone(v2t);
			_kio_clobj.items = Stream.clone(items);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			goodsname = is.popString();
			moneyid = is.popInteger();
			origprice = is.popInteger();
			nowprice = is.popInteger();
			icon = is.popInteger();
			levelReq = is.popInteger();
			v2t = is.popList(FlashSaleVip2Times.class);
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(goodsname);
			os.pushInteger(moneyid);
			os.pushInteger(origprice);
			os.pushInteger(nowprice);
			os.pushInteger(icon);
			os.pushInteger(levelReq);
			os.pushList(v2t);
			os.pushList(items);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			goodsname = is.popString();
			moneyid = is.popInteger();
			origprice = is.popInteger();
			nowprice = is.popInteger();
			icon = is.popInteger();
			levelReq = is.popInteger();
			v2t = is.popList(FlashSaleVip2Times.class);
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushString(goodsname);
			os.pushInteger(moneyid);
			os.pushInteger(origprice);
			os.pushInteger(nowprice);
			os.pushInteger(icon);
			os.pushInteger(levelReq);
			os.pushList(v2t);
			os.pushList(items);
		}

		public int id;
		public String goodsname;
		public int moneyid;
		public int origprice;
		public int nowprice;
		public int icon;
		public int levelReq;
		public List<FlashSaleVip2Times> v2t;
		public List<DummyGoods> items;
	}

	public static class RoleFlashSaleCfg implements Stream.IStreamable, Stream.KCloneable<RoleFlashSaleCfg>, SStream.IStreamable
	{

		public RoleFlashSaleCfg() { }

		public RoleFlashSaleCfg(int id, TimeSpan time, String title, String content, 
		                        int buyStartTime, int buyEndTime, List<FlashSaleGoods> goods)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.buyStartTime = buyStartTime;
			this.buyEndTime = buyEndTime;
			this.goods = goods;
		}

		public RoleFlashSaleCfg ksClone()
		{
			return new RoleFlashSaleCfg(id, time, title, content, 
			                            buyStartTime, buyEndTime, goods);
		}

		@Override
		public RoleFlashSaleCfg kdClone()
		{
			RoleFlashSaleCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.goods = Stream.clone(goods);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			buyStartTime = is.popInteger();
			buyEndTime = is.popInteger();
			goods = is.popList(FlashSaleGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(buyStartTime);
			os.pushInteger(buyEndTime);
			os.pushList(goods);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			buyStartTime = is.popInteger();
			buyEndTime = is.popInteger();
			goods = is.popList(FlashSaleGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(buyStartTime);
			os.pushInteger(buyEndTime);
			os.pushList(goods);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public int buyStartTime;
		public int buyEndTime;
		public List<FlashSaleGoods> goods;
	}

	public static class RoleFlashSaleInfo implements Stream.IStreamable, Stream.KCloneable<RoleFlashSaleInfo>, SStream.IStreamable
	{

		public RoleFlashSaleInfo() { }

		public RoleFlashSaleInfo(int effectiveTime, RoleFlashSaleCfg cfg, Map<Integer, Integer> log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleFlashSaleInfo ksClone()
		{
			return new RoleFlashSaleInfo(effectiveTime, cfg, log);
		}

		@Override
		public RoleFlashSaleInfo kdClone()
		{
			RoleFlashSaleInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = new TreeMap<Integer, Integer>(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleFlashSaleCfg();
			is.pop(cfg);
			log = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.pushIntegerIntegerMap(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleFlashSaleCfg.class);
			log = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.pushIntegerIntegerMap(log);
		}

		public int effectiveTime;
		public RoleFlashSaleCfg cfg;
		public Map<Integer, Integer> log;
	}

	public static class Advers implements Stream.IStreamable, Stream.KCloneable<Advers>, SStream.IStreamable
	{

		public Advers() { }

		public Advers(int open, int effectiveTime, TimeSpan time, String title, 
		              String content, List<Integer> icons)
		{
			this.open = open;
			this.effectiveTime = effectiveTime;
			this.time = time;
			this.title = title;
			this.content = content;
			this.icons = icons;
		}

		public Advers ksClone()
		{
			return new Advers(open, effectiveTime, time, title, 
			                  content, icons);
		}

		@Override
		public Advers kdClone()
		{
			Advers _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.icons = new ArrayList<Integer>(icons);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			effectiveTime = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			icons = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.pushInteger(effectiveTime);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushIntegerList(icons);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			effectiveTime = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			icons = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.pushInteger(effectiveTime);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushIntegerList(icons);
		}

		public int open;
		public int effectiveTime;
		public TimeSpan time;
		public String title;
		public String content;
		public List<Integer> icons;
	}

	public static class AdversInfo implements Stream.IStreamable, Stream.KCloneable<AdversInfo>, SStream.IStreamable
	{

		public AdversInfo() { }

		public AdversInfo(int effectiveTime, TimeSpan time, String title, String content, 
		                  List<Integer> icons)
		{
			this.effectiveTime = effectiveTime;
			this.time = time;
			this.title = title;
			this.content = content;
			this.icons = icons;
		}

		public AdversInfo ksClone()
		{
			return new AdversInfo(effectiveTime, time, title, content, 
			                      icons);
		}

		@Override
		public AdversInfo kdClone()
		{
			AdversInfo _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.icons = new ArrayList<Integer>(icons);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			icons = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushIntegerList(icons);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			icons = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushIntegerList(icons);
		}

		public int effectiveTime;
		public TimeSpan time;
		public String title;
		public String content;
		public List<Integer> icons;
	}

	public static class FirstPayGift implements Stream.IStreamable, Stream.KCloneable<FirstPayGift>, SStream.IStreamable
	{

		public FirstPayGift() { }

		public FirstPayGift(int open, TimeSpan time, String title, String content, 
		                    RoleLifeDaySpan phase, DummyGoods biggift, List<ClassTypeReward> gifts)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.biggift = biggift;
			this.gifts = gifts;
		}

		public FirstPayGift ksClone()
		{
			return new FirstPayGift(open, time, title, content, 
			                        phase, biggift, gifts);
		}

		@Override
		public FirstPayGift kdClone()
		{
			FirstPayGift _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.biggift = Stream.clone(biggift);
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			if( biggift == null )
				biggift = new DummyGoods();
			is.pop(biggift);
			gifts = is.popList(ClassTypeReward.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.push(biggift);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			biggift = is.pop(DummyGoods.class);
			gifts = is.popList(ClassTypeReward.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.push(biggift);
			os.pushList(gifts);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public DummyGoods biggift;
		public List<ClassTypeReward> gifts;
	}

	public static class RoleFirstPayGiftCfg implements Stream.IStreamable, Stream.KCloneable<RoleFirstPayGiftCfg>, SStream.IStreamable
	{

		public RoleFirstPayGiftCfg() { }

		public RoleFirstPayGiftCfg(int id, TimeSpan time, String title, String content, 
		                           DummyGoods biggift, List<ClassTypeReward> gifts)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.biggift = biggift;
			this.gifts = gifts;
		}

		public RoleFirstPayGiftCfg ksClone()
		{
			return new RoleFirstPayGiftCfg(id, time, title, content, 
			                               biggift, gifts);
		}

		@Override
		public RoleFirstPayGiftCfg kdClone()
		{
			RoleFirstPayGiftCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.biggift = Stream.clone(biggift);
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( biggift == null )
				biggift = new DummyGoods();
			is.pop(biggift);
			gifts = is.popList(ClassTypeReward.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(biggift);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			biggift = is.pop(DummyGoods.class);
			gifts = is.popList(ClassTypeReward.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(biggift);
			os.pushList(gifts);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public DummyGoods biggift;
		public List<ClassTypeReward> gifts;
	}

	public static class RoleFirstPayGiftInfo implements Stream.IStreamable, Stream.KCloneable<RoleFirstPayGiftInfo>, SStream.IStreamable
	{

		public RoleFirstPayGiftInfo() { }

		public RoleFirstPayGiftInfo(int effectiveTime, RoleFirstPayGiftCfg cfg, DBRoleFirstPayGiftLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleFirstPayGiftInfo ksClone()
		{
			return new RoleFirstPayGiftInfo(effectiveTime, cfg, log);
		}

		@Override
		public RoleFirstPayGiftInfo kdClone()
		{
			RoleFirstPayGiftInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleFirstPayGiftCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleFirstPayGiftLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleFirstPayGiftCfg.class);
			log = is.pop(DBRoleFirstPayGiftLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RoleFirstPayGiftCfg cfg;
		public DBRoleFirstPayGiftLog log;
	}

	public static class DailyPayGift implements Stream.IStreamable, Stream.KCloneable<DailyPayGift>, SStream.IStreamable
	{

		public DailyPayGift() { }

		public DailyPayGift(int open, TimeSpan time, RoleLifeDaySpan phase, Map<Integer, DayPayGift> gifts)
		{
			this.open = open;
			this.time = time;
			this.phase = phase;
			this.gifts = gifts;
		}

		public DailyPayGift ksClone()
		{
			return new DailyPayGift(open, time, phase, gifts);
		}

		@Override
		public DailyPayGift kdClone()
		{
			DailyPayGift _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			gifts = is.popIntegerTreeMap(DayPayGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.push(phase);
			os.pushIntegerMap(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			phase = is.pop(RoleLifeDaySpan.class);
			gifts = is.popIntegerTreeMap(DayPayGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.push(phase);
			os.pushIntegerMap(gifts);
		}

		public int open;
		public TimeSpan time;
		public RoleLifeDaySpan phase;
		public Map<Integer, DayPayGift> gifts;
	}

	public static class DayPayGift implements Stream.IStreamable, Stream.KCloneable<DayPayGift>, SStream.IStreamable
	{

		public DayPayGift() { }

		public DayPayGift(int pay, String title, String content, DummyGoods biggift, 
		                  List<DummyGoods> gifts)
		{
			this.pay = pay;
			this.title = title;
			this.content = content;
			this.biggift = biggift;
			this.gifts = gifts;
		}

		public DayPayGift ksClone()
		{
			return new DayPayGift(pay, title, content, biggift, 
			                      gifts);
		}

		@Override
		public DayPayGift kdClone()
		{
			DayPayGift _kio_clobj = ksClone();
			_kio_clobj.biggift = Stream.clone(biggift);
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pay = is.popInteger();
			title = is.popString();
			content = is.popString();
			if( biggift == null )
				biggift = new DummyGoods();
			is.pop(biggift);
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pay);
			os.pushString(title);
			os.pushString(content);
			os.push(biggift);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			pay = is.popInteger();
			title = is.popString();
			content = is.popString();
			biggift = is.pop(DummyGoods.class);
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(pay);
			os.pushString(title);
			os.pushString(content);
			os.push(biggift);
			os.pushList(gifts);
		}

		public int pay;
		public String title;
		public String content;
		public DummyGoods biggift;
		public List<DummyGoods> gifts;
	}

	public static class RoleDailyPayGiftCfg implements Stream.IStreamable, Stream.KCloneable<RoleDailyPayGiftCfg>, SStream.IStreamable
	{

		public RoleDailyPayGiftCfg() { }

		public RoleDailyPayGiftCfg(TimeSpan time, Map<Integer, DayPayGift> gifts)
		{
			this.time = time;
			this.gifts = gifts;
		}

		public RoleDailyPayGiftCfg ksClone()
		{
			return new RoleDailyPayGiftCfg(time, gifts);
		}

		@Override
		public RoleDailyPayGiftCfg kdClone()
		{
			RoleDailyPayGiftCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			gifts = is.popIntegerTreeMap(DayPayGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(time);
			os.pushIntegerMap(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			time = is.pop(TimeSpan.class);
			gifts = is.popIntegerTreeMap(DayPayGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(time);
			os.pushIntegerMap(gifts);
		}

		public TimeSpan time;
		public Map<Integer, DayPayGift> gifts;
	}

	public static class RoleDailyPayGiftInfo implements Stream.IStreamable, Stream.KCloneable<RoleDailyPayGiftInfo>, SStream.IStreamable
	{

		public RoleDailyPayGiftInfo() { }

		public RoleDailyPayGiftInfo(int effectiveTime, int cfgId, int curDay, DayPayGift cfg, 
		                            DBRoleDailyPayGiftLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfgId = cfgId;
			this.curDay = curDay;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleDailyPayGiftInfo ksClone()
		{
			return new RoleDailyPayGiftInfo(effectiveTime, cfgId, curDay, cfg, 
			                                log);
		}

		@Override
		public RoleDailyPayGiftInfo kdClone()
		{
			RoleDailyPayGiftInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfgId = is.popInteger();
			curDay = is.popInteger();
			if( cfg == null )
				cfg = new DayPayGift();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleDailyPayGiftLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(cfgId);
			os.pushInteger(curDay);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfgId = is.popInteger();
			curDay = is.popInteger();
			cfg = is.pop(DayPayGift.class);
			log = is.pop(DBRoleDailyPayGiftLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(cfgId);
			os.pushInteger(curDay);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public int cfgId;
		public int curDay;
		public DayPayGift cfg;
		public DBRoleDailyPayGiftLog log;
	}

	public static class LastPayGift implements Stream.IStreamable, Stream.KCloneable<LastPayGift>, SStream.IStreamable
	{

		public LastPayGift() { }

		public LastPayGift(int open, TimeSpan time, String title, String content, 
		                   RoleLifeDaySpan phase, int lastPayNum, int fromRegister, Map<Integer, DummyGoodList> gifts)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.lastPayNum = lastPayNum;
			this.fromRegister = fromRegister;
			this.gifts = gifts;
		}

		public LastPayGift ksClone()
		{
			return new LastPayGift(open, time, title, content, 
			                       phase, lastPayNum, fromRegister, gifts);
		}

		@Override
		public LastPayGift kdClone()
		{
			LastPayGift _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			lastPayNum = is.popInteger();
			fromRegister = is.popInteger();
			gifts = is.popIntegerTreeMap(DummyGoodList.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(lastPayNum);
			os.pushInteger(fromRegister);
			os.pushIntegerMap(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			lastPayNum = is.popInteger();
			fromRegister = is.popInteger();
			gifts = is.popIntegerTreeMap(DummyGoodList.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(lastPayNum);
			os.pushInteger(fromRegister);
			os.pushIntegerMap(gifts);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public int lastPayNum;
		public int fromRegister;
		public Map<Integer, DummyGoodList> gifts;
	}

	public static class RoleLastPayGiftCfg implements Stream.IStreamable, Stream.KCloneable<RoleLastPayGiftCfg>, SStream.IStreamable
	{

		public RoleLastPayGiftCfg() { }

		public RoleLastPayGiftCfg(int id, TimeSpan time, String title, String content, 
		                          int lastPayNum, int fromRegister, Map<Integer, DummyGoodList> gifts)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.lastPayNum = lastPayNum;
			this.fromRegister = fromRegister;
			this.gifts = gifts;
		}

		public RoleLastPayGiftCfg ksClone()
		{
			return new RoleLastPayGiftCfg(id, time, title, content, 
			                              lastPayNum, fromRegister, gifts);
		}

		@Override
		public RoleLastPayGiftCfg kdClone()
		{
			RoleLastPayGiftCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			lastPayNum = is.popInteger();
			fromRegister = is.popInteger();
			gifts = is.popIntegerTreeMap(DummyGoodList.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(lastPayNum);
			os.pushInteger(fromRegister);
			os.pushIntegerMap(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			lastPayNum = is.popInteger();
			fromRegister = is.popInteger();
			gifts = is.popIntegerTreeMap(DummyGoodList.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(lastPayNum);
			os.pushInteger(fromRegister);
			os.pushIntegerMap(gifts);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public int lastPayNum;
		public int fromRegister;
		public Map<Integer, DummyGoodList> gifts;
	}

	public static class RoleLastPayGiftInfo implements Stream.IStreamable, Stream.KCloneable<RoleLastPayGiftInfo>, SStream.IStreamable
	{

		public RoleLastPayGiftInfo() { }

		public RoleLastPayGiftInfo(int effectiveTime, RoleLastPayGiftCfg cfg, DBRoleLastPayGiftLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleLastPayGiftInfo ksClone()
		{
			return new RoleLastPayGiftInfo(effectiveTime, cfg, log);
		}

		@Override
		public RoleLastPayGiftInfo kdClone()
		{
			RoleLastPayGiftInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleLastPayGiftCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleLastPayGiftLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleLastPayGiftCfg.class);
			log = is.pop(DBRoleLastPayGiftLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RoleLastPayGiftCfg cfg;
		public DBRoleLastPayGiftLog log;
	}

	public static class ActivityChallengeGift implements Stream.IStreamable, Stream.KCloneable<ActivityChallengeGift>, SStream.IStreamable
	{

		public ActivityChallengeGift() { }

		public ActivityChallengeGift(int open, TimeSpan time, String title, String content, 
		                             RoleLifeDaySpan phase, int levelReq, int vipReq, List<ChallengeGift> gifts)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.levelReq = levelReq;
			this.vipReq = vipReq;
			this.gifts = gifts;
		}

		public ActivityChallengeGift ksClone()
		{
			return new ActivityChallengeGift(open, time, title, content, 
			                                 phase, levelReq, vipReq, gifts);
		}

		@Override
		public ActivityChallengeGift kdClone()
		{
			ActivityChallengeGift _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			levelReq = is.popInteger();
			vipReq = is.popInteger();
			gifts = is.popList(ChallengeGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(levelReq);
			os.pushInteger(vipReq);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			levelReq = is.popInteger();
			vipReq = is.popInteger();
			gifts = is.popList(ChallengeGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(levelReq);
			os.pushInteger(vipReq);
			os.pushList(gifts);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public int levelReq;
		public int vipReq;
		public List<ChallengeGift> gifts;
	}

	public static class ChallengeGift implements Stream.IStreamable, Stream.KCloneable<ChallengeGift>, SStream.IStreamable
	{

		public ChallengeGift() { }

		public ChallengeGift(int id, List<ChallengeTimeGift> gifts)
		{
			this.id = id;
			this.gifts = gifts;
		}

		public ChallengeGift ksClone()
		{
			return new ChallengeGift(id, gifts);
		}

		@Override
		public ChallengeGift kdClone()
		{
			ChallengeGift _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			gifts = is.popList(ChallengeTimeGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			gifts = is.popList(ChallengeTimeGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushList(gifts);
		}

		public int id;
		public List<ChallengeTimeGift> gifts;
	}

	public static class ChallengeTimeGift implements Stream.IStreamable, Stream.KCloneable<ChallengeTimeGift>, SStream.IStreamable
	{

		public ChallengeTimeGift() { }

		public ChallengeTimeGift(int times, List<DummyGoods> gifts)
		{
			this.times = times;
			this.gifts = gifts;
		}

		public ChallengeTimeGift ksClone()
		{
			return new ChallengeTimeGift(times, gifts);
		}

		@Override
		public ChallengeTimeGift kdClone()
		{
			ChallengeTimeGift _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			times = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(times);
			os.pushList(gifts);
		}

		public int times;
		public List<DummyGoods> gifts;
	}

	public static class DummyGoodList implements Stream.IStreamable, Stream.KCloneable<DummyGoodList>, SStream.IStreamable
	{

		public DummyGoodList() { }

		public DummyGoodList(List<DummyGoods> gifts)
		{
			this.gifts = gifts;
		}

		public DummyGoodList ksClone()
		{
			return new DummyGoodList(gifts);
		}

		@Override
		public DummyGoodList kdClone()
		{
			DummyGoodList _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushList(gifts);
		}

		public List<DummyGoods> gifts;
	}

	public static class RoleActivityChallengeGiftCfg implements Stream.IStreamable, Stream.KCloneable<RoleActivityChallengeGiftCfg>, SStream.IStreamable
	{

		public RoleActivityChallengeGiftCfg() { }

		public RoleActivityChallengeGiftCfg(int id, TimeSpan time, String title, String content, 
		                                    int levelReq, int vipReq, List<ChallengeGift> gifts)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.levelReq = levelReq;
			this.vipReq = vipReq;
			this.gifts = gifts;
		}

		public RoleActivityChallengeGiftCfg ksClone()
		{
			return new RoleActivityChallengeGiftCfg(id, time, title, content, 
			                                        levelReq, vipReq, gifts);
		}

		@Override
		public RoleActivityChallengeGiftCfg kdClone()
		{
			RoleActivityChallengeGiftCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			levelReq = is.popInteger();
			vipReq = is.popInteger();
			gifts = is.popList(ChallengeGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(levelReq);
			os.pushInteger(vipReq);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			levelReq = is.popInteger();
			vipReq = is.popInteger();
			gifts = is.popList(ChallengeGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(levelReq);
			os.pushInteger(vipReq);
			os.pushList(gifts);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public int levelReq;
		public int vipReq;
		public List<ChallengeGift> gifts;
	}

	public static class RoleActivityChallengeGiftInfo implements Stream.IStreamable, Stream.KCloneable<RoleActivityChallengeGiftInfo>, SStream.IStreamable
	{

		public RoleActivityChallengeGiftInfo() { }

		public RoleActivityChallengeGiftInfo(int effectiveTime, RoleActivityChallengeGiftCfg cfg, DBRoleActivityChallengeGiftLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleActivityChallengeGiftInfo ksClone()
		{
			return new RoleActivityChallengeGiftInfo(effectiveTime, cfg, log);
		}

		@Override
		public RoleActivityChallengeGiftInfo kdClone()
		{
			RoleActivityChallengeGiftInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleActivityChallengeGiftCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleActivityChallengeGiftLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleActivityChallengeGiftCfg.class);
			log = is.pop(DBRoleActivityChallengeGiftLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RoleActivityChallengeGiftCfg cfg;
		public DBRoleActivityChallengeGiftLog log;
	}

	public static class PayLevelGift implements Stream.IStreamable, Stream.KCloneable<PayLevelGift>, SStream.IStreamable
	{

		public PayLevelGift() { }

		public PayLevelGift(int pay, List<DummyGoods> gifts)
		{
			this.pay = pay;
			this.gifts = gifts;
		}

		public PayLevelGift ksClone()
		{
			return new PayLevelGift(pay, gifts);
		}

		@Override
		public PayLevelGift kdClone()
		{
			PayLevelGift _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pay = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pay);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			pay = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(pay);
			os.pushList(gifts);
		}

		public int pay;
		public List<DummyGoods> gifts;
	}

	public static class PayGift implements Stream.IStreamable, Stream.KCloneable<PayGift>, SStream.IStreamable
	{

		public PayGift() { }

		public PayGift(int open, TimeSpan time, String title, String content, 
		               RoleLifeDaySpan phase, List<PayLevelGift> levelGifts)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.levelGifts = levelGifts;
		}

		public PayGift ksClone()
		{
			return new PayGift(open, time, title, content, 
			                   phase, levelGifts);
		}

		@Override
		public PayGift kdClone()
		{
			PayGift _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.levelGifts = Stream.clone(levelGifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			levelGifts = is.popList(PayLevelGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushList(levelGifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			levelGifts = is.popList(PayLevelGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushList(levelGifts);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public List<PayLevelGift> levelGifts;
	}

	public static class RolePayGiftCfg implements Stream.IStreamable, Stream.KCloneable<RolePayGiftCfg>, SStream.IStreamable
	{

		public RolePayGiftCfg() { }

		public RolePayGiftCfg(int id, TimeSpan time, String title, String content, 
		                      List<PayLevelGift> levelGifts)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.levelGifts = levelGifts;
		}

		public RolePayGiftCfg ksClone()
		{
			return new RolePayGiftCfg(id, time, title, content, 
			                          levelGifts);
		}

		@Override
		public RolePayGiftCfg kdClone()
		{
			RolePayGiftCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.levelGifts = Stream.clone(levelGifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			levelGifts = is.popList(PayLevelGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(levelGifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			levelGifts = is.popList(PayLevelGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(levelGifts);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public List<PayLevelGift> levelGifts;
	}

	public static class RolePayGiftInfo implements Stream.IStreamable, Stream.KCloneable<RolePayGiftInfo>, SStream.IStreamable
	{

		public RolePayGiftInfo() { }

		public RolePayGiftInfo(int effectiveTime, RolePayGiftCfg cfg, DBRolePayGiftLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RolePayGiftInfo ksClone()
		{
			return new RolePayGiftInfo(effectiveTime, cfg, log);
		}

		@Override
		public RolePayGiftInfo kdClone()
		{
			RolePayGiftInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RolePayGiftCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRolePayGiftLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RolePayGiftCfg.class);
			log = is.pop(DBRolePayGiftLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RolePayGiftCfg cfg;
		public DBRolePayGiftLog log;
	}

	public static class ConsumeLevelGift implements Stream.IStreamable, Stream.KCloneable<ConsumeLevelGift>, SStream.IStreamable
	{

		public ConsumeLevelGift() { }

		public ConsumeLevelGift(int consume, List<DummyGoods> gifts)
		{
			this.consume = consume;
			this.gifts = gifts;
		}

		public ConsumeLevelGift ksClone()
		{
			return new ConsumeLevelGift(consume, gifts);
		}

		@Override
		public ConsumeLevelGift kdClone()
		{
			ConsumeLevelGift _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			consume = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(consume);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			consume = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(consume);
			os.pushList(gifts);
		}

		public int consume;
		public List<DummyGoods> gifts;
	}

	public static class ConsumeGift implements Stream.IStreamable, Stream.KCloneable<ConsumeGift>, SStream.IStreamable
	{

		public ConsumeGift() { }

		public ConsumeGift(int open, TimeSpan time, String title, String content, 
		                   RoleLifeDaySpan phase, List<ConsumeLevelGift> levelGifts)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.levelGifts = levelGifts;
		}

		public ConsumeGift ksClone()
		{
			return new ConsumeGift(open, time, title, content, 
			                       phase, levelGifts);
		}

		@Override
		public ConsumeGift kdClone()
		{
			ConsumeGift _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.levelGifts = Stream.clone(levelGifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			levelGifts = is.popList(ConsumeLevelGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushList(levelGifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			levelGifts = is.popList(ConsumeLevelGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushList(levelGifts);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public List<ConsumeLevelGift> levelGifts;
	}

	public static class RoleConsumeGiftCfg implements Stream.IStreamable, Stream.KCloneable<RoleConsumeGiftCfg>, SStream.IStreamable
	{

		public RoleConsumeGiftCfg() { }

		public RoleConsumeGiftCfg(int id, TimeSpan time, String title, String content, 
		                          List<ConsumeLevelGift> levelGifts)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.levelGifts = levelGifts;
		}

		public RoleConsumeGiftCfg ksClone()
		{
			return new RoleConsumeGiftCfg(id, time, title, content, 
			                              levelGifts);
		}

		@Override
		public RoleConsumeGiftCfg kdClone()
		{
			RoleConsumeGiftCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.levelGifts = Stream.clone(levelGifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			levelGifts = is.popList(ConsumeLevelGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(levelGifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			levelGifts = is.popList(ConsumeLevelGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(levelGifts);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public List<ConsumeLevelGift> levelGifts;
	}

	public static class RoleConsumeGiftInfo implements Stream.IStreamable, Stream.KCloneable<RoleConsumeGiftInfo>, SStream.IStreamable
	{

		public RoleConsumeGiftInfo() { }

		public RoleConsumeGiftInfo(int effectiveTime, RoleConsumeGiftCfg cfg, DBRoleConsumeGiftLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleConsumeGiftInfo ksClone()
		{
			return new RoleConsumeGiftInfo(effectiveTime, cfg, log);
		}

		@Override
		public RoleConsumeGiftInfo kdClone()
		{
			RoleConsumeGiftInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleConsumeGiftCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleConsumeGiftLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleConsumeGiftCfg.class);
			log = is.pop(DBRoleConsumeGiftLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RoleConsumeGiftCfg cfg;
		public DBRoleConsumeGiftLog log;
	}

	public static class UpgradeLevelGift implements Stream.IStreamable, Stream.KCloneable<UpgradeLevelGift>, SStream.IStreamable
	{

		public UpgradeLevelGift() { }

		public UpgradeLevelGift(int level, List<DummyGoods> gifts, DummyGoods giftEx)
		{
			this.level = level;
			this.gifts = gifts;
			this.giftEx = giftEx;
		}

		public UpgradeLevelGift ksClone()
		{
			return new UpgradeLevelGift(level, gifts, giftEx);
		}

		@Override
		public UpgradeLevelGift kdClone()
		{
			UpgradeLevelGift _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			_kio_clobj.giftEx = Stream.cloneNullable(giftEx);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			gifts = is.popList(DummyGoods.class);
			giftEx = is.popNullable(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushList(gifts);
			os.pushNullable(giftEx);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			level = is.popInteger();
			gifts = is.popList(DummyGoods.class);
			giftEx = is.pop(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(level);
			os.pushList(gifts);
			os.push(giftEx);
		}

		public int level;
		public List<DummyGoods> gifts;
		public DummyGoods giftEx;
	}

	public static class UpgradeGift implements Stream.IStreamable, Stream.KCloneable<UpgradeGift>, SStream.IStreamable
	{

		public UpgradeGift() { }

		public UpgradeGift(int open, TimeSpan time, String title, String content, 
		                   RoleLifeDaySpan phase, int limitedTime, List<UpgradeLevelGift> levelGifts)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.limitedTime = limitedTime;
			this.levelGifts = levelGifts;
		}

		public UpgradeGift ksClone()
		{
			return new UpgradeGift(open, time, title, content, 
			                       phase, limitedTime, levelGifts);
		}

		@Override
		public UpgradeGift kdClone()
		{
			UpgradeGift _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.levelGifts = Stream.clone(levelGifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			limitedTime = is.popInteger();
			levelGifts = is.popList(UpgradeLevelGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(limitedTime);
			os.pushList(levelGifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			limitedTime = is.popInteger();
			levelGifts = is.popList(UpgradeLevelGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(limitedTime);
			os.pushList(levelGifts);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public int limitedTime;
		public List<UpgradeLevelGift> levelGifts;
	}

	public static class RoleUpgradeGiftCfg implements Stream.IStreamable, Stream.KCloneable<RoleUpgradeGiftCfg>, SStream.IStreamable
	{

		public RoleUpgradeGiftCfg() { }

		public RoleUpgradeGiftCfg(int id, TimeSpan time, String title, String content, 
		                          int limitedTime, List<UpgradeLevelGift> levelGifts)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.limitedTime = limitedTime;
			this.levelGifts = levelGifts;
		}

		public RoleUpgradeGiftCfg ksClone()
		{
			return new RoleUpgradeGiftCfg(id, time, title, content, 
			                              limitedTime, levelGifts);
		}

		@Override
		public RoleUpgradeGiftCfg kdClone()
		{
			RoleUpgradeGiftCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.levelGifts = Stream.clone(levelGifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			limitedTime = is.popInteger();
			levelGifts = is.popList(UpgradeLevelGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(limitedTime);
			os.pushList(levelGifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			limitedTime = is.popInteger();
			levelGifts = is.popList(UpgradeLevelGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(limitedTime);
			os.pushList(levelGifts);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public int limitedTime;
		public List<UpgradeLevelGift> levelGifts;
	}

	public static class RoleUpgradeGiftInfo implements Stream.IStreamable, Stream.KCloneable<RoleUpgradeGiftInfo>, SStream.IStreamable
	{

		public RoleUpgradeGiftInfo() { }

		public RoleUpgradeGiftInfo(int effectiveTime, RoleUpgradeGiftCfg cfg, DBRoleUpgradeGiftLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleUpgradeGiftInfo ksClone()
		{
			return new RoleUpgradeGiftInfo(effectiveTime, cfg, log);
		}

		@Override
		public RoleUpgradeGiftInfo kdClone()
		{
			RoleUpgradeGiftInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleUpgradeGiftCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleUpgradeGiftLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleUpgradeGiftCfg.class);
			log = is.pop(DBRoleUpgradeGiftLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RoleUpgradeGiftCfg cfg;
		public DBRoleUpgradeGiftLog log;
	}

	public static class FundDayReturn implements Stream.IStreamable, Stream.KCloneable<FundDayReturn>, SStream.IStreamable
	{

		public FundDayReturn() { }

		public FundDayReturn(int daySeq, DummyGoods fundReturn)
		{
			this.daySeq = daySeq;
			this.fundReturn = fundReturn;
		}

		public FundDayReturn ksClone()
		{
			return new FundDayReturn(daySeq, fundReturn);
		}

		@Override
		public FundDayReturn kdClone()
		{
			FundDayReturn _kio_clobj = ksClone();
			_kio_clobj.fundReturn = Stream.clone(fundReturn);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			daySeq = is.popInteger();
			if( fundReturn == null )
				fundReturn = new DummyGoods();
			is.pop(fundReturn);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(daySeq);
			os.push(fundReturn);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			daySeq = is.popInteger();
			fundReturn = is.pop(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(daySeq);
			os.push(fundReturn);
		}

		public int daySeq;
		public DummyGoods fundReturn;
	}

	public static class InvestmentFund implements Stream.IStreamable, Stream.KCloneable<InvestmentFund>, SStream.IStreamable
	{

		public InvestmentFund() { }

		public InvestmentFund(int open, TimeSpan time, String title, String content, 
		                      RoleLifeDaySpan phase, int price, int buyEndTime, List<FundDayReturn> returns, 
		                      int levelNeed, int vipLevelNeed)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.price = price;
			this.buyEndTime = buyEndTime;
			this.returns = returns;
			this.levelNeed = levelNeed;
			this.vipLevelNeed = vipLevelNeed;
		}

		public InvestmentFund ksClone()
		{
			return new InvestmentFund(open, time, title, content, 
			                          phase, price, buyEndTime, returns, 
			                          levelNeed, vipLevelNeed);
		}

		@Override
		public InvestmentFund kdClone()
		{
			InvestmentFund _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.returns = Stream.clone(returns);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			price = is.popInteger();
			buyEndTime = is.popInteger();
			returns = is.popList(FundDayReturn.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(price);
			os.pushInteger(buyEndTime);
			os.pushList(returns);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			price = is.popInteger();
			buyEndTime = is.popInteger();
			returns = is.popList(FundDayReturn.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(price);
			os.pushInteger(buyEndTime);
			os.pushList(returns);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public int price;
		public int buyEndTime;
		public List<FundDayReturn> returns;
		public int levelNeed;
		public int vipLevelNeed;
	}

	public static class RoleInvestmentFundCfg implements Stream.IStreamable, Stream.KCloneable<RoleInvestmentFundCfg>, SStream.IStreamable
	{

		public RoleInvestmentFundCfg() { }

		public RoleInvestmentFundCfg(int id, TimeSpan time, String title, String content, 
		                             int price, int buyEndTime, List<FundDayReturn> returns, int levelNeed, 
		                             int vipLevelNeed)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.price = price;
			this.buyEndTime = buyEndTime;
			this.returns = returns;
			this.levelNeed = levelNeed;
			this.vipLevelNeed = vipLevelNeed;
		}

		public RoleInvestmentFundCfg ksClone()
		{
			return new RoleInvestmentFundCfg(id, time, title, content, 
			                                 price, buyEndTime, returns, levelNeed, 
			                                 vipLevelNeed);
		}

		@Override
		public RoleInvestmentFundCfg kdClone()
		{
			RoleInvestmentFundCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.returns = Stream.clone(returns);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			price = is.popInteger();
			buyEndTime = is.popInteger();
			returns = is.popList(FundDayReturn.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(price);
			os.pushInteger(buyEndTime);
			os.pushList(returns);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			price = is.popInteger();
			buyEndTime = is.popInteger();
			returns = is.popList(FundDayReturn.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(price);
			os.pushInteger(buyEndTime);
			os.pushList(returns);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public int price;
		public int buyEndTime;
		public List<FundDayReturn> returns;
		public int levelNeed;
		public int vipLevelNeed;
	}

	public static class RoleInvestmentFundInfo implements Stream.IStreamable, Stream.KCloneable<RoleInvestmentFundInfo>, SStream.IStreamable
	{

		public RoleInvestmentFundInfo() { }

		public RoleInvestmentFundInfo(int effectiveTime, RoleInvestmentFundCfg cfg, DBRoleInvestmentFundLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleInvestmentFundInfo ksClone()
		{
			return new RoleInvestmentFundInfo(effectiveTime, cfg, log);
		}

		@Override
		public RoleInvestmentFundInfo kdClone()
		{
			RoleInvestmentFundInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleInvestmentFundCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleInvestmentFundLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleInvestmentFundCfg.class);
			log = is.pop(DBRoleInvestmentFundLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RoleInvestmentFundCfg cfg;
		public DBRoleInvestmentFundLog log;
	}

	public static class FundLevelReturn implements Stream.IStreamable, Stream.KCloneable<FundLevelReturn>, SStream.IStreamable
	{

		public FundLevelReturn() { }

		public FundLevelReturn(int levelReq, DummyGoods fundReturn)
		{
			this.levelReq = levelReq;
			this.fundReturn = fundReturn;
		}

		public FundLevelReturn ksClone()
		{
			return new FundLevelReturn(levelReq, fundReturn);
		}

		@Override
		public FundLevelReturn kdClone()
		{
			FundLevelReturn _kio_clobj = ksClone();
			_kio_clobj.fundReturn = Stream.clone(fundReturn);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			levelReq = is.popInteger();
			if( fundReturn == null )
				fundReturn = new DummyGoods();
			is.pop(fundReturn);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(levelReq);
			os.push(fundReturn);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			levelReq = is.popInteger();
			fundReturn = is.pop(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(levelReq);
			os.push(fundReturn);
		}

		public int levelReq;
		public DummyGoods fundReturn;
	}

	public static class GrowthFund implements Stream.IStreamable, Stream.KCloneable<GrowthFund>, SStream.IStreamable
	{

		public GrowthFund() { }

		public GrowthFund(int open, TimeSpan time, String title, String content, 
		                  RoleLifeDaySpan phase, int price, int buyEndTime, List<FundLevelReturn> returns, 
		                  int levelNeed, int vipLevelNeed)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.price = price;
			this.buyEndTime = buyEndTime;
			this.returns = returns;
			this.levelNeed = levelNeed;
			this.vipLevelNeed = vipLevelNeed;
		}

		public GrowthFund ksClone()
		{
			return new GrowthFund(open, time, title, content, 
			                      phase, price, buyEndTime, returns, 
			                      levelNeed, vipLevelNeed);
		}

		@Override
		public GrowthFund kdClone()
		{
			GrowthFund _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.returns = Stream.clone(returns);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			price = is.popInteger();
			buyEndTime = is.popInteger();
			returns = is.popList(FundLevelReturn.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(price);
			os.pushInteger(buyEndTime);
			os.pushList(returns);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			price = is.popInteger();
			buyEndTime = is.popInteger();
			returns = is.popList(FundLevelReturn.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(price);
			os.pushInteger(buyEndTime);
			os.pushList(returns);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public int price;
		public int buyEndTime;
		public List<FundLevelReturn> returns;
		public int levelNeed;
		public int vipLevelNeed;
	}

	public static class RoleGrowthFundCfg implements Stream.IStreamable, Stream.KCloneable<RoleGrowthFundCfg>, SStream.IStreamable
	{

		public RoleGrowthFundCfg() { }

		public RoleGrowthFundCfg(int id, TimeSpan time, String title, String content, 
		                         int price, int buyEndTime, List<FundLevelReturn> returns, int levelNeed, 
		                         int vipLevelNeed)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.price = price;
			this.buyEndTime = buyEndTime;
			this.returns = returns;
			this.levelNeed = levelNeed;
			this.vipLevelNeed = vipLevelNeed;
		}

		public RoleGrowthFundCfg ksClone()
		{
			return new RoleGrowthFundCfg(id, time, title, content, 
			                             price, buyEndTime, returns, levelNeed, 
			                             vipLevelNeed);
		}

		@Override
		public RoleGrowthFundCfg kdClone()
		{
			RoleGrowthFundCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.returns = Stream.clone(returns);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			price = is.popInteger();
			buyEndTime = is.popInteger();
			returns = is.popList(FundLevelReturn.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(price);
			os.pushInteger(buyEndTime);
			os.pushList(returns);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			price = is.popInteger();
			buyEndTime = is.popInteger();
			returns = is.popList(FundLevelReturn.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(price);
			os.pushInteger(buyEndTime);
			os.pushList(returns);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public int price;
		public int buyEndTime;
		public List<FundLevelReturn> returns;
		public int levelNeed;
		public int vipLevelNeed;
	}

	public static class RoleGrowthFundInfo implements Stream.IStreamable, Stream.KCloneable<RoleGrowthFundInfo>, SStream.IStreamable
	{

		public RoleGrowthFundInfo() { }

		public RoleGrowthFundInfo(int effectiveTime, RoleGrowthFundCfg cfg, DBRoleGrowthFundLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleGrowthFundInfo ksClone()
		{
			return new RoleGrowthFundInfo(effectiveTime, cfg, log);
		}

		@Override
		public RoleGrowthFundInfo kdClone()
		{
			RoleGrowthFundInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleGrowthFundCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleGrowthFundLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleGrowthFundCfg.class);
			log = is.pop(DBRoleGrowthFundLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RoleGrowthFundCfg cfg;
		public DBRoleGrowthFundLog log;
	}

	public static class DropRatio implements Stream.IStreamable, Stream.KCloneable<DropRatio>, SStream.IStreamable
	{

		public DropRatio() { }

		public DropRatio(float exp, int fixedDrop, int randomDrop)
		{
			this.exp = exp;
			this.fixedDrop = fixedDrop;
			this.randomDrop = randomDrop;
		}

		public DropRatio ksClone()
		{
			return new DropRatio(exp, fixedDrop, randomDrop);
		}

		@Override
		public DropRatio kdClone()
		{
			DropRatio _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			exp = is.popFloat();
			fixedDrop = is.popInteger();
			randomDrop = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(exp);
			os.pushInteger(fixedDrop);
			os.pushInteger(randomDrop);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			exp = is.popFloat();
			fixedDrop = is.popInteger();
			randomDrop = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushFloat(exp);
			os.pushInteger(fixedDrop);
			os.pushInteger(randomDrop);
		}

		public float exp;
		public int fixedDrop;
		public int randomDrop;
	}

	public static class RewardRatio implements Stream.IStreamable, Stream.KCloneable<RewardRatio>, SStream.IStreamable
	{

		public RewardRatio() { }

		public RewardRatio(float exp, int fixedDrop)
		{
			this.exp = exp;
			this.fixedDrop = fixedDrop;
		}

		public RewardRatio ksClone()
		{
			return new RewardRatio(exp, fixedDrop);
		}

		@Override
		public RewardRatio kdClone()
		{
			RewardRatio _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			exp = is.popFloat();
			fixedDrop = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushFloat(exp);
			os.pushInteger(fixedDrop);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			exp = is.popFloat();
			fixedDrop = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushFloat(exp);
			os.pushInteger(fixedDrop);
		}

		public float exp;
		public int fixedDrop;
	}

	public static class MapcopyDropRatio implements Stream.IStreamable, Stream.KCloneable<MapcopyDropRatio>, SStream.IStreamable
	{

		public MapcopyDropRatio() { }

		public MapcopyDropRatio(int mapId, DropRatio drop, RewardRatio reward)
		{
			this.mapId = mapId;
			this.drop = drop;
			this.reward = reward;
		}

		public MapcopyDropRatio ksClone()
		{
			return new MapcopyDropRatio(mapId, drop, reward);
		}

		@Override
		public MapcopyDropRatio kdClone()
		{
			MapcopyDropRatio _kio_clobj = ksClone();
			_kio_clobj.drop = Stream.clone(drop);
			_kio_clobj.reward = Stream.clone(reward);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			if( drop == null )
				drop = new DropRatio();
			is.pop(drop);
			if( reward == null )
				reward = new RewardRatio();
			is.pop(reward);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.push(drop);
			os.push(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			mapId = is.popInteger();
			drop = is.pop(DropRatio.class);
			reward = is.pop(RewardRatio.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(mapId);
			os.push(drop);
			os.push(reward);
		}

		public int mapId;
		public DropRatio drop;
		public RewardRatio reward;
	}

	public static class MonsterDropRatio implements Stream.IStreamable, Stream.KCloneable<MonsterDropRatio>, SStream.IStreamable
	{

		public MonsterDropRatio() { }

		public MonsterDropRatio(int monsterId, DropRatio ratio)
		{
			this.monsterId = monsterId;
			this.ratio = ratio;
		}

		public MonsterDropRatio ksClone()
		{
			return new MonsterDropRatio(monsterId, ratio);
		}

		@Override
		public MonsterDropRatio kdClone()
		{
			MonsterDropRatio _kio_clobj = ksClone();
			_kio_clobj.ratio = Stream.clone(ratio);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			monsterId = is.popInteger();
			if( ratio == null )
				ratio = new DropRatio();
			is.pop(ratio);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(monsterId);
			os.push(ratio);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			monsterId = is.popInteger();
			ratio = is.pop(DropRatio.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(monsterId);
			os.push(ratio);
		}

		public int monsterId;
		public DropRatio ratio;
	}

	public static class DoubleDrop implements Stream.IStreamable, Stream.KCloneable<DoubleDrop>, SStream.IStreamable
	{

		public DoubleDrop() { }

		public DoubleDrop(int open, TimeSpan time, String title, String content, 
		                  List<MapcopyDropRatio> mapcopys, List<MonsterDropRatio> monsters)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.mapcopys = mapcopys;
			this.monsters = monsters;
		}

		public DoubleDrop ksClone()
		{
			return new DoubleDrop(open, time, title, content, 
			                      mapcopys, monsters);
		}

		@Override
		public DoubleDrop kdClone()
		{
			DoubleDrop _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.mapcopys = Stream.clone(mapcopys);
			_kio_clobj.monsters = Stream.clone(monsters);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			mapcopys = is.popList(MapcopyDropRatio.class);
			monsters = is.popList(MonsterDropRatio.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(mapcopys);
			os.pushList(monsters);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			mapcopys = is.popList(MapcopyDropRatio.class);
			monsters = is.popList(MonsterDropRatio.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(mapcopys);
			os.pushList(monsters);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public List<MapcopyDropRatio> mapcopys;
		public List<MonsterDropRatio> monsters;
	}

	public static class DoubleDropInfo implements Stream.IStreamable, Stream.KCloneable<DoubleDropInfo>, SStream.IStreamable
	{

		public DoubleDropInfo() { }

		public DoubleDropInfo(TimeSpan time, String title, String content)
		{
			this.time = time;
			this.title = title;
			this.content = content;
		}

		public DoubleDropInfo ksClone()
		{
			return new DoubleDropInfo(time, title, content);
		}

		@Override
		public DoubleDropInfo kdClone()
		{
			DoubleDropInfo _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(time);
			os.pushString(title);
			os.pushString(content);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(time);
			os.pushString(title);
			os.pushString(content);
		}

		public TimeSpan time;
		public String title;
		public String content;
	}

	public static class DoubleDropCfg implements Stream.IStreamable, Stream.KCloneable<DoubleDropCfg>, SStream.IStreamable
	{

		public DoubleDropCfg() { }

		public DoubleDropCfg(TimeSpan time, Map<Integer, DropRatio> mapcopys, Map<Integer, DropRatio> monsters)
		{
			this.time = time;
			this.mapcopys = mapcopys;
			this.monsters = monsters;
		}

		public DoubleDropCfg ksClone()
		{
			return new DoubleDropCfg(time, mapcopys, monsters);
		}

		@Override
		public DoubleDropCfg kdClone()
		{
			DoubleDropCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.mapcopys = Stream.clone(mapcopys);
			_kio_clobj.monsters = Stream.clone(monsters);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			mapcopys = is.popIntegerTreeMap(DropRatio.class);
			monsters = is.popIntegerTreeMap(DropRatio.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(time);
			os.pushIntegerMap(mapcopys);
			os.pushIntegerMap(monsters);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			time = is.pop(TimeSpan.class);
			mapcopys = is.popIntegerTreeMap(DropRatio.class);
			monsters = is.popIntegerTreeMap(DropRatio.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(time);
			os.pushIntegerMap(mapcopys);
			os.pushIntegerMap(monsters);
		}

		public TimeSpan time;
		public Map<Integer, DropRatio> mapcopys;
		public Map<Integer, DropRatio> monsters;
	}

	public static class ExtraDropTbl implements Stream.IStreamable, Stream.KCloneable<ExtraDropTbl>, SStream.IStreamable
	{

		public ExtraDropTbl() { }

		public ExtraDropTbl(List<DropEntry> drops)
		{
			this.drops = drops;
		}

		public ExtraDropTbl ksClone()
		{
			return new ExtraDropTbl(drops);
		}

		@Override
		public ExtraDropTbl kdClone()
		{
			ExtraDropTbl _kio_clobj = ksClone();
			_kio_clobj.drops = Stream.clone(drops);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			drops = is.popList(DropEntry.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(drops);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			drops = is.popList(DropEntry.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushList(drops);
		}

		public List<DropEntry> drops;
	}

	public static class MapcopyExtraDrop implements Stream.IStreamable, Stream.KCloneable<MapcopyExtraDrop>, SStream.IStreamable
	{

		public MapcopyExtraDrop() { }

		public MapcopyExtraDrop(int mapId, ExtraDropTbl drop)
		{
			this.mapId = mapId;
			this.drop = drop;
		}

		public MapcopyExtraDrop ksClone()
		{
			return new MapcopyExtraDrop(mapId, drop);
		}

		@Override
		public MapcopyExtraDrop kdClone()
		{
			MapcopyExtraDrop _kio_clobj = ksClone();
			_kio_clobj.drop = Stream.clone(drop);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			if( drop == null )
				drop = new ExtraDropTbl();
			is.pop(drop);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.push(drop);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			mapId = is.popInteger();
			drop = is.pop(ExtraDropTbl.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(mapId);
			os.push(drop);
		}

		public int mapId;
		public ExtraDropTbl drop;
	}

	public static class MonsterExtraDrop implements Stream.IStreamable, Stream.KCloneable<MonsterExtraDrop>, SStream.IStreamable
	{

		public MonsterExtraDrop() { }

		public MonsterExtraDrop(int monsterId, ExtraDropTbl drop)
		{
			this.monsterId = monsterId;
			this.drop = drop;
		}

		public MonsterExtraDrop ksClone()
		{
			return new MonsterExtraDrop(monsterId, drop);
		}

		@Override
		public MonsterExtraDrop kdClone()
		{
			MonsterExtraDrop _kio_clobj = ksClone();
			_kio_clobj.drop = Stream.clone(drop);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			monsterId = is.popInteger();
			if( drop == null )
				drop = new ExtraDropTbl();
			is.pop(drop);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(monsterId);
			os.push(drop);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			monsterId = is.popInteger();
			drop = is.pop(ExtraDropTbl.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(monsterId);
			os.push(drop);
		}

		public int monsterId;
		public ExtraDropTbl drop;
	}

	public static class ExtraDrop implements Stream.IStreamable, Stream.KCloneable<ExtraDrop>, SStream.IStreamable
	{

		public ExtraDrop() { }

		public ExtraDrop(int open, TimeSpan time, String title, String content, 
		                 List<MapcopyExtraDrop> mapcopys, List<MonsterExtraDrop> monsters)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.mapcopys = mapcopys;
			this.monsters = monsters;
		}

		public ExtraDrop ksClone()
		{
			return new ExtraDrop(open, time, title, content, 
			                     mapcopys, monsters);
		}

		@Override
		public ExtraDrop kdClone()
		{
			ExtraDrop _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.mapcopys = Stream.clone(mapcopys);
			_kio_clobj.monsters = Stream.clone(monsters);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			mapcopys = is.popList(MapcopyExtraDrop.class);
			monsters = is.popList(MonsterExtraDrop.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(mapcopys);
			os.pushList(monsters);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			mapcopys = is.popList(MapcopyExtraDrop.class);
			monsters = is.popList(MonsterExtraDrop.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(mapcopys);
			os.pushList(monsters);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public List<MapcopyExtraDrop> mapcopys;
		public List<MonsterExtraDrop> monsters;
	}

	public static class ExtraDropInfo implements Stream.IStreamable, Stream.KCloneable<ExtraDropInfo>, SStream.IStreamable
	{

		public ExtraDropInfo() { }

		public ExtraDropInfo(TimeSpan time, String title, String content, Set<Integer> drops)
		{
			this.time = time;
			this.title = title;
			this.content = content;
			this.drops = drops;
		}

		public ExtraDropInfo ksClone()
		{
			return new ExtraDropInfo(time, title, content, drops);
		}

		@Override
		public ExtraDropInfo kdClone()
		{
			ExtraDropInfo _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.drops = new TreeSet<Integer>(drops);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			drops = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushIntegerSet(drops);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			drops = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushIntegerSet(drops);
		}

		public TimeSpan time;
		public String title;
		public String content;
		public Set<Integer> drops;
	}

	public static class ExtraDropCfg implements Stream.IStreamable, Stream.KCloneable<ExtraDropCfg>, SStream.IStreamable
	{

		public ExtraDropCfg() { }

		public ExtraDropCfg(TimeSpan time, Map<Integer, ExtraDropTbl> mapcopys, Map<Integer, ExtraDropTbl> monsters)
		{
			this.time = time;
			this.mapcopys = mapcopys;
			this.monsters = monsters;
		}

		public ExtraDropCfg ksClone()
		{
			return new ExtraDropCfg(time, mapcopys, monsters);
		}

		@Override
		public ExtraDropCfg kdClone()
		{
			ExtraDropCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.mapcopys = Stream.clone(mapcopys);
			_kio_clobj.monsters = Stream.clone(monsters);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			mapcopys = is.popIntegerTreeMap(ExtraDropTbl.class);
			monsters = is.popIntegerTreeMap(ExtraDropTbl.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(time);
			os.pushIntegerMap(mapcopys);
			os.pushIntegerMap(monsters);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			time = is.pop(TimeSpan.class);
			mapcopys = is.popIntegerTreeMap(ExtraDropTbl.class);
			monsters = is.popIntegerTreeMap(ExtraDropTbl.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(time);
			os.pushIntegerMap(mapcopys);
			os.pushIntegerMap(monsters);
		}

		public TimeSpan time;
		public Map<Integer, ExtraDropTbl> mapcopys;
		public Map<Integer, ExtraDropTbl> monsters;
	}

	public static class ExchangeItemGift implements Stream.IStreamable, Stream.KCloneable<ExchangeItemGift>, SStream.IStreamable
	{

		public ExchangeItemGift() { }

		public ExchangeItemGift(int seq, int maxExchange, DummyGoods gift, List<DummyGoods> items)
		{
			this.seq = seq;
			this.maxExchange = maxExchange;
			this.gift = gift;
			this.items = items;
		}

		public ExchangeItemGift ksClone()
		{
			return new ExchangeItemGift(seq, maxExchange, gift, items);
		}

		@Override
		public ExchangeItemGift kdClone()
		{
			ExchangeItemGift _kio_clobj = ksClone();
			_kio_clobj.gift = Stream.clone(gift);
			_kio_clobj.items = Stream.clone(items);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
			maxExchange = is.popInteger();
			if( gift == null )
				gift = new DummyGoods();
			is.pop(gift);
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
			os.pushInteger(maxExchange);
			os.push(gift);
			os.pushList(items);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			seq = is.popInteger();
			maxExchange = is.popInteger();
			gift = is.pop(DummyGoods.class);
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(seq);
			os.pushInteger(maxExchange);
			os.push(gift);
			os.pushList(items);
		}

		public int seq;
		public int maxExchange;
		public DummyGoods gift;
		public List<DummyGoods> items;
	}

	public static class ExchangeGift implements Stream.IStreamable, Stream.KCloneable<ExchangeGift>, SStream.IStreamable
	{

		public ExchangeGift() { }

		public ExchangeGift(int open, TimeSpan time, String title, String content, 
		                    RoleLifeDaySpan phase, List<ExchangeItemGift> itemGifts)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.itemGifts = itemGifts;
		}

		public ExchangeGift ksClone()
		{
			return new ExchangeGift(open, time, title, content, 
			                        phase, itemGifts);
		}

		@Override
		public ExchangeGift kdClone()
		{
			ExchangeGift _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.itemGifts = Stream.clone(itemGifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			itemGifts = is.popList(ExchangeItemGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushList(itemGifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			itemGifts = is.popList(ExchangeItemGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushList(itemGifts);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public List<ExchangeItemGift> itemGifts;
	}

	public static class RoleExchangeGiftCfg implements Stream.IStreamable, Stream.KCloneable<RoleExchangeGiftCfg>, SStream.IStreamable
	{

		public RoleExchangeGiftCfg() { }

		public RoleExchangeGiftCfg(int id, TimeSpan time, String title, String content, 
		                           List<ExchangeItemGift> itemGifts)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.itemGifts = itemGifts;
		}

		public RoleExchangeGiftCfg ksClone()
		{
			return new RoleExchangeGiftCfg(id, time, title, content, 
			                               itemGifts);
		}

		@Override
		public RoleExchangeGiftCfg kdClone()
		{
			RoleExchangeGiftCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.itemGifts = Stream.clone(itemGifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			itemGifts = is.popList(ExchangeItemGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(itemGifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			itemGifts = is.popList(ExchangeItemGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(itemGifts);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public List<ExchangeItemGift> itemGifts;
	}

	public static class ExchangeGiftInfo implements Stream.IStreamable, Stream.KCloneable<ExchangeGiftInfo>, SStream.IStreamable
	{

		public ExchangeGiftInfo() { }

		public ExchangeGiftInfo(int effectiveTime, RoleExchangeGiftCfg cfg, DBRoleExchangeGiftLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public ExchangeGiftInfo ksClone()
		{
			return new ExchangeGiftInfo(effectiveTime, cfg, log);
		}

		@Override
		public ExchangeGiftInfo kdClone()
		{
			ExchangeGiftInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleExchangeGiftCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleExchangeGiftLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleExchangeGiftCfg.class);
			log = is.pop(DBRoleExchangeGiftLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RoleExchangeGiftCfg cfg;
		public DBRoleExchangeGiftLog log;
	}

	public static class LoginDayGift implements Stream.IStreamable, Stream.KCloneable<LoginDayGift>, SStream.IStreamable
	{

		public LoginDayGift() { }

		public LoginDayGift(int dayReq, List<DummyGoods> gifts)
		{
			this.dayReq = dayReq;
			this.gifts = gifts;
		}

		public LoginDayGift ksClone()
		{
			return new LoginDayGift(dayReq, gifts);
		}

		@Override
		public LoginDayGift kdClone()
		{
			LoginDayGift _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayReq = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayReq);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayReq = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dayReq);
			os.pushList(gifts);
		}

		public int dayReq;
		public List<DummyGoods> gifts;
	}

	public static class LoginGift implements Stream.IStreamable, Stream.KCloneable<LoginGift>, SStream.IStreamable
	{

		public LoginGift() { }

		public LoginGift(int open, TimeSpan time, String title, String content, 
		                 RoleLifeDaySpan phase, List<LoginDayGift> dayGifts)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.dayGifts = dayGifts;
		}

		public LoginGift ksClone()
		{
			return new LoginGift(open, time, title, content, 
			                     phase, dayGifts);
		}

		@Override
		public LoginGift kdClone()
		{
			LoginGift _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.dayGifts = Stream.clone(dayGifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			dayGifts = is.popList(LoginDayGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushList(dayGifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			dayGifts = is.popList(LoginDayGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushList(dayGifts);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public List<LoginDayGift> dayGifts;
	}

	public static class RoleLoginGiftCfg implements Stream.IStreamable, Stream.KCloneable<RoleLoginGiftCfg>, SStream.IStreamable
	{

		public RoleLoginGiftCfg() { }

		public RoleLoginGiftCfg(int id, TimeSpan time, String title, String content, 
		                        List<LoginDayGift> dayGifts)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.dayGifts = dayGifts;
		}

		public RoleLoginGiftCfg ksClone()
		{
			return new RoleLoginGiftCfg(id, time, title, content, 
			                            dayGifts);
		}

		@Override
		public RoleLoginGiftCfg kdClone()
		{
			RoleLoginGiftCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.dayGifts = Stream.clone(dayGifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			dayGifts = is.popList(LoginDayGift.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(dayGifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			dayGifts = is.popList(LoginDayGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(dayGifts);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public List<LoginDayGift> dayGifts;
	}

	public static class RoleLoginGiftInfo implements Stream.IStreamable, Stream.KCloneable<RoleLoginGiftInfo>, SStream.IStreamable
	{

		public RoleLoginGiftInfo() { }

		public RoleLoginGiftInfo(int effectiveTime, RoleLoginGiftCfg cfg, DBRoleLoginGiftLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleLoginGiftInfo ksClone()
		{
			return new RoleLoginGiftInfo(effectiveTime, cfg, log);
		}

		@Override
		public RoleLoginGiftInfo kdClone()
		{
			RoleLoginGiftInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleLoginGiftCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleLoginGiftLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleLoginGiftCfg.class);
			log = is.pop(DBRoleLoginGiftLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RoleLoginGiftCfg cfg;
		public DBRoleLoginGiftLog log;
	}

	public static class Pack implements Stream.IStreamable, Stream.KCloneable<Pack>, SStream.IStreamable
	{

		public Pack() { }

		public Pack(String title, String content, List<DummyGoods> gifts)
		{
			this.title = title;
			this.content = content;
			this.gifts = gifts;
		}

		public Pack ksClone()
		{
			return new Pack(title, content, gifts);
		}

		@Override
		public Pack kdClone()
		{
			Pack _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			title = is.popString();
			content = is.popString();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(title);
			os.pushString(content);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			title = is.popString();
			content = is.popString();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(title);
			os.pushString(content);
			os.pushList(gifts);
		}

		public String title;
		public String content;
		public List<DummyGoods> gifts;
	}

	public static class SpecialPack implements Stream.IStreamable, Stream.KCloneable<SpecialPack>, SStream.IStreamable
	{

		public SpecialPack() { }

		public SpecialPack(String shorcode, int maxUse, Set<String> channel, TimeSpan time, 
		                   Pack pack, int levelNeed, int vipLevelNeed)
		{
			this.shorcode = shorcode;
			this.maxUse = maxUse;
			this.channel = channel;
			this.time = time;
			this.pack = pack;
			this.levelNeed = levelNeed;
			this.vipLevelNeed = vipLevelNeed;
		}

		public SpecialPack ksClone()
		{
			return new SpecialPack(shorcode, maxUse, channel, time, 
			                       pack, levelNeed, vipLevelNeed);
		}

		@Override
		public SpecialPack kdClone()
		{
			SpecialPack _kio_clobj = ksClone();
			_kio_clobj.channel = new TreeSet<String>(channel);
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.pack = Stream.clone(pack);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			shorcode = is.popString();
			maxUse = is.popInteger();
			channel = is.popStringTreeSet();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			if( pack == null )
				pack = new Pack();
			is.pop(pack);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(shorcode);
			os.pushInteger(maxUse);
			os.pushStringSet(channel);
			os.push(time);
			os.push(pack);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			shorcode = is.popString();
			maxUse = is.popInteger();
			channel = is.popStringTreeSet();
			time = is.pop(TimeSpan.class);
			pack = is.pop(Pack.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(shorcode);
			os.pushInteger(maxUse);
			os.pushStringSet(channel);
			os.push(time);
			os.push(pack);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		public String shorcode;
		public int maxUse;
		public Set<String> channel;
		public TimeSpan time;
		public Pack pack;
		public int levelNeed;
		public int vipLevelNeed;
	}

	public static class SequencePack implements Stream.IStreamable, Stream.KCloneable<SequencePack>, SStream.IStreamable
	{

		public SequencePack() { }

		public SequencePack(int seq, TimeSpan time, Pack pack)
		{
			this.seq = seq;
			this.time = time;
			this.pack = pack;
		}

		public SequencePack ksClone()
		{
			return new SequencePack(seq, time, pack);
		}

		@Override
		public SequencePack kdClone()
		{
			SequencePack _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.pack = Stream.clone(pack);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			if( pack == null )
				pack = new Pack();
			is.pop(pack);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
			os.push(time);
			os.push(pack);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			seq = is.popInteger();
			time = is.pop(TimeSpan.class);
			pack = is.pop(Pack.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(seq);
			os.push(time);
			os.push(pack);
		}

		public int seq;
		public TimeSpan time;
		public Pack pack;
	}

	public static class BatchPacks implements Stream.IStreamable, Stream.KCloneable<BatchPacks>, SStream.IStreamable
	{

		public BatchPacks() { }

		public BatchPacks(int batch, int maxUse, Set<String> channel, List<SequencePack> packs, 
		                  int levelNeed, int vipLevelNeed)
		{
			this.batch = batch;
			this.maxUse = maxUse;
			this.channel = channel;
			this.packs = packs;
			this.levelNeed = levelNeed;
			this.vipLevelNeed = vipLevelNeed;
		}

		public BatchPacks ksClone()
		{
			return new BatchPacks(batch, maxUse, channel, packs, 
			                      levelNeed, vipLevelNeed);
		}

		@Override
		public BatchPacks kdClone()
		{
			BatchPacks _kio_clobj = ksClone();
			_kio_clobj.channel = new TreeSet<String>(channel);
			_kio_clobj.packs = Stream.clone(packs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			batch = is.popInteger();
			maxUse = is.popInteger();
			channel = is.popStringTreeSet();
			packs = is.popList(SequencePack.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(batch);
			os.pushInteger(maxUse);
			os.pushStringSet(channel);
			os.pushList(packs);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			batch = is.popInteger();
			maxUse = is.popInteger();
			channel = is.popStringTreeSet();
			packs = is.popList(SequencePack.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(batch);
			os.pushInteger(maxUse);
			os.pushStringSet(channel);
			os.pushList(packs);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		public int batch;
		public int maxUse;
		public Set<String> channel;
		public List<SequencePack> packs;
		public int levelNeed;
		public int vipLevelNeed;
	}

	public static class GiftPackage implements Stream.IStreamable, Stream.KCloneable<GiftPackage>, SStream.IStreamable
	{

		public GiftPackage() { }

		public GiftPackage(int open, TimeSpan time, String title, String content, 
		                   List<SpecialPack> specialPacks, List<BatchPacks> giftPacks)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.specialPacks = specialPacks;
			this.giftPacks = giftPacks;
		}

		public GiftPackage ksClone()
		{
			return new GiftPackage(open, time, title, content, 
			                       specialPacks, giftPacks);
		}

		@Override
		public GiftPackage kdClone()
		{
			GiftPackage _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.specialPacks = Stream.clone(specialPacks);
			_kio_clobj.giftPacks = Stream.clone(giftPacks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			specialPacks = is.popList(SpecialPack.class);
			giftPacks = is.popList(BatchPacks.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(specialPacks);
			os.pushList(giftPacks);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			specialPacks = is.popList(SpecialPack.class);
			giftPacks = is.popList(BatchPacks.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(specialPacks);
			os.pushList(giftPacks);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public List<SpecialPack> specialPacks;
		public List<BatchPacks> giftPacks;
	}

	public static class GiftPack implements Stream.IStreamable, Stream.KCloneable<GiftPack>, SStream.IStreamable
	{

		public GiftPack() { }

		public GiftPack(int maxUse, Set<String> channel, TimeSpan time, Pack pack, 
		                int levelNeed, int vipLevelNeed)
		{
			this.maxUse = maxUse;
			this.channel = channel;
			this.time = time;
			this.pack = pack;
			this.levelNeed = levelNeed;
			this.vipLevelNeed = vipLevelNeed;
		}

		public GiftPack ksClone()
		{
			return new GiftPack(maxUse, channel, time, pack, 
			                    levelNeed, vipLevelNeed);
		}

		@Override
		public GiftPack kdClone()
		{
			GiftPack _kio_clobj = ksClone();
			_kio_clobj.channel = new TreeSet<String>(channel);
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.pack = Stream.clone(pack);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			maxUse = is.popInteger();
			channel = is.popStringTreeSet();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			if( pack == null )
				pack = new Pack();
			is.pop(pack);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(maxUse);
			os.pushStringSet(channel);
			os.push(time);
			os.push(pack);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			maxUse = is.popInteger();
			channel = is.popStringTreeSet();
			time = is.pop(TimeSpan.class);
			pack = is.pop(Pack.class);
			levelNeed = is.popInteger();
			vipLevelNeed = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(maxUse);
			os.pushStringSet(channel);
			os.push(time);
			os.push(pack);
			os.pushInteger(levelNeed);
			os.pushInteger(vipLevelNeed);
		}

		public int maxUse;
		public Set<String> channel;
		public TimeSpan time;
		public Pack pack;
		public int levelNeed;
		public int vipLevelNeed;
	}

	public static class GiftPackageInfo implements Stream.IStreamable, Stream.KCloneable<GiftPackageInfo>, SStream.IStreamable
	{

		public GiftPackageInfo() { }

		public GiftPackageInfo(int effectiveTime, TimeSpan time, String title, String content)
		{
			this.effectiveTime = effectiveTime;
			this.time = time;
			this.title = title;
			this.content = content;
		}

		public GiftPackageInfo ksClone()
		{
			return new GiftPackageInfo(effectiveTime, time, title, content);
		}

		@Override
		public GiftPackageInfo kdClone()
		{
			GiftPackageInfo _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
		}

		public int effectiveTime;
		public TimeSpan time;
		public String title;
		public String content;
	}

	public static class UpgradeLevelPurchase implements Stream.IStreamable, Stream.KCloneable<UpgradeLevelPurchase>, SStream.IStreamable
	{

		public UpgradeLevelPurchase() { }

		public UpgradeLevelPurchase(int level, int limitedTime, List<DummyGoods> goods, int price)
		{
			this.level = level;
			this.limitedTime = limitedTime;
			this.goods = goods;
			this.price = price;
		}

		public UpgradeLevelPurchase ksClone()
		{
			return new UpgradeLevelPurchase(level, limitedTime, goods, price);
		}

		@Override
		public UpgradeLevelPurchase kdClone()
		{
			UpgradeLevelPurchase _kio_clobj = ksClone();
			_kio_clobj.goods = Stream.clone(goods);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			limitedTime = is.popInteger();
			goods = is.popList(DummyGoods.class);
			price = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushInteger(limitedTime);
			os.pushList(goods);
			os.pushInteger(price);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			level = is.popInteger();
			limitedTime = is.popInteger();
			goods = is.popList(DummyGoods.class);
			price = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(level);
			os.pushInteger(limitedTime);
			os.pushList(goods);
			os.pushInteger(price);
		}

		public int level;
		public int limitedTime;
		public List<DummyGoods> goods;
		public int price;
	}

	public static class UpgradePurchase implements Stream.IStreamable, Stream.KCloneable<UpgradePurchase>, SStream.IStreamable
	{

		public UpgradePurchase() { }

		public UpgradePurchase(int open, TimeSpan time, String title, String content, 
		                       RoleLifeDaySpan phase, UpgradeLevelPurchase levelPurchases)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.levelPurchases = levelPurchases;
		}

		public UpgradePurchase ksClone()
		{
			return new UpgradePurchase(open, time, title, content, 
			                           phase, levelPurchases);
		}

		@Override
		public UpgradePurchase kdClone()
		{
			UpgradePurchase _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.levelPurchases = Stream.clone(levelPurchases);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			if( levelPurchases == null )
				levelPurchases = new UpgradeLevelPurchase();
			is.pop(levelPurchases);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.push(levelPurchases);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			levelPurchases = is.pop(UpgradeLevelPurchase.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.push(levelPurchases);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public UpgradeLevelPurchase levelPurchases;
	}

	public static class RoleUpgradePurchaseCfg implements Stream.IStreamable, Stream.KCloneable<RoleUpgradePurchaseCfg>, SStream.IStreamable
	{

		public RoleUpgradePurchaseCfg() { }

		public RoleUpgradePurchaseCfg(int id, TimeSpan time, String title, String content, 
		                              UpgradeLevelPurchase levelPurchases)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.levelPurchases = levelPurchases;
		}

		public RoleUpgradePurchaseCfg ksClone()
		{
			return new RoleUpgradePurchaseCfg(id, time, title, content, 
			                                  levelPurchases);
		}

		@Override
		public RoleUpgradePurchaseCfg kdClone()
		{
			RoleUpgradePurchaseCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.levelPurchases = Stream.clone(levelPurchases);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( levelPurchases == null )
				levelPurchases = new UpgradeLevelPurchase();
			is.pop(levelPurchases);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(levelPurchases);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			levelPurchases = is.pop(UpgradeLevelPurchase.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(levelPurchases);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public UpgradeLevelPurchase levelPurchases;
	}

	public static class RoleUpgradePurchaseInfo implements Stream.IStreamable, Stream.KCloneable<RoleUpgradePurchaseInfo>, SStream.IStreamable
	{

		public RoleUpgradePurchaseInfo() { }

		public RoleUpgradePurchaseInfo(int effectiveTime, RoleUpgradePurchaseCfg cfg, DBRoleUpgradePurchaseLog log, int endTime)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
			this.endTime = endTime;
		}

		public RoleUpgradePurchaseInfo ksClone()
		{
			return new RoleUpgradePurchaseInfo(effectiveTime, cfg, log, endTime);
		}

		@Override
		public RoleUpgradePurchaseInfo kdClone()
		{
			RoleUpgradePurchaseInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleUpgradePurchaseCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleUpgradePurchaseLog();
			is.pop(log);
			endTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
			os.pushInteger(endTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleUpgradePurchaseCfg.class);
			log = is.pop(DBRoleUpgradePurchaseLog.class);
			endTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
			os.pushInteger(endTime);
		}

		public int effectiveTime;
		public RoleUpgradePurchaseCfg cfg;
		public DBRoleUpgradePurchaseLog log;
		public int endTime;
	}

	public static class DirectLevelPurchase implements Stream.IStreamable, Stream.KCloneable<DirectLevelPurchase>, SStream.IStreamable
	{

		public DirectLevelPurchase() { }

		public DirectLevelPurchase(int payLevel, int cardReq, int levelReq, int vipReq, 
		                           int dayBuyTimes, List<DummyGoods> gifts)
		{
			this.payLevel = payLevel;
			this.cardReq = cardReq;
			this.levelReq = levelReq;
			this.vipReq = vipReq;
			this.dayBuyTimes = dayBuyTimes;
			this.gifts = gifts;
		}

		public DirectLevelPurchase ksClone()
		{
			return new DirectLevelPurchase(payLevel, cardReq, levelReq, vipReq, 
			                               dayBuyTimes, gifts);
		}

		@Override
		public DirectLevelPurchase kdClone()
		{
			DirectLevelPurchase _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			payLevel = is.popInteger();
			cardReq = is.popInteger();
			levelReq = is.popInteger();
			vipReq = is.popInteger();
			dayBuyTimes = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(payLevel);
			os.pushInteger(cardReq);
			os.pushInteger(levelReq);
			os.pushInteger(vipReq);
			os.pushInteger(dayBuyTimes);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			payLevel = is.popInteger();
			cardReq = is.popInteger();
			levelReq = is.popInteger();
			vipReq = is.popInteger();
			dayBuyTimes = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(payLevel);
			os.pushInteger(cardReq);
			os.pushInteger(levelReq);
			os.pushInteger(vipReq);
			os.pushInteger(dayBuyTimes);
			os.pushList(gifts);
		}

		public int payLevel;
		public int cardReq;
		public int levelReq;
		public int vipReq;
		public int dayBuyTimes;
		public List<DummyGoods> gifts;
	}

	public static class DirectPurchase implements Stream.IStreamable, Stream.KCloneable<DirectPurchase>, SStream.IStreamable
	{

		public DirectPurchase() { }

		public DirectPurchase(int open, TimeSpan time, String title, String content, 
		                      RoleLifeDaySpan phase, List<DirectLevelPurchase> levelPurchases)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.levelPurchases = levelPurchases;
		}

		public DirectPurchase ksClone()
		{
			return new DirectPurchase(open, time, title, content, 
			                          phase, levelPurchases);
		}

		@Override
		public DirectPurchase kdClone()
		{
			DirectPurchase _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.levelPurchases = Stream.clone(levelPurchases);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			levelPurchases = is.popList(DirectLevelPurchase.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushList(levelPurchases);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			levelPurchases = is.popList(DirectLevelPurchase.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushList(levelPurchases);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public List<DirectLevelPurchase> levelPurchases;
	}

	public static class RoleDirectPurchaseCfg implements Stream.IStreamable, Stream.KCloneable<RoleDirectPurchaseCfg>, SStream.IStreamable
	{

		public RoleDirectPurchaseCfg() { }

		public RoleDirectPurchaseCfg(int id, TimeSpan time, String title, String content, 
		                             List<DirectLevelPurchase> levelPurchases)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.levelPurchases = levelPurchases;
		}

		public RoleDirectPurchaseCfg ksClone()
		{
			return new RoleDirectPurchaseCfg(id, time, title, content, 
			                                 levelPurchases);
		}

		@Override
		public RoleDirectPurchaseCfg kdClone()
		{
			RoleDirectPurchaseCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.levelPurchases = Stream.clone(levelPurchases);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			levelPurchases = is.popList(DirectLevelPurchase.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(levelPurchases);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			levelPurchases = is.popList(DirectLevelPurchase.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushList(levelPurchases);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public List<DirectLevelPurchase> levelPurchases;
	}

	public static class DirectPayInfo implements Stream.IStreamable, Stream.KCloneable<DirectPayInfo>, SStream.IStreamable
	{

		public DirectPayInfo() { }

		public DirectPayInfo(int id, Map<Integer, PayLevelInfo> payLevels, Map<Integer, Integer> leftRewardTimes)
		{
			this.id = id;
			this.payLevels = payLevels;
			this.leftRewardTimes = leftRewardTimes;
		}

		public DirectPayInfo ksClone()
		{
			return new DirectPayInfo(id, payLevels, leftRewardTimes);
		}

		@Override
		public DirectPayInfo kdClone()
		{
			DirectPayInfo _kio_clobj = ksClone();
			_kio_clobj.payLevels = Stream.clone(payLevels);
			_kio_clobj.leftRewardTimes = new TreeMap<Integer, Integer>(leftRewardTimes);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			payLevels = is.popIntegerTreeMap(PayLevelInfo.class);
			leftRewardTimes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushIntegerMap(payLevels);
			os.pushIntegerIntegerMap(leftRewardTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			payLevels = is.popIntegerTreeMap(PayLevelInfo.class);
			leftRewardTimes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushIntegerMap(payLevels);
			os.pushIntegerIntegerMap(leftRewardTimes);
		}

		public int id;
		public Map<Integer, PayLevelInfo> payLevels;
		public Map<Integer, Integer> leftRewardTimes;
	}

	public static class RoleDirectPurchaseInfo implements Stream.IStreamable, Stream.KCloneable<RoleDirectPurchaseInfo>, SStream.IStreamable
	{

		public RoleDirectPurchaseInfo() { }

		public RoleDirectPurchaseInfo(int effectiveTime, RoleDirectPurchaseCfg cfg, DBRoleDirectPurchaseLog log, DirectPayInfo info)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
			this.info = info;
		}

		public RoleDirectPurchaseInfo ksClone()
		{
			return new RoleDirectPurchaseInfo(effectiveTime, cfg, log, info);
		}

		@Override
		public RoleDirectPurchaseInfo kdClone()
		{
			RoleDirectPurchaseInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			_kio_clobj.info = Stream.clone(info);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleDirectPurchaseCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleDirectPurchaseLog();
			is.pop(log);
			if( info == null )
				info = new DirectPayInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
			os.push(info);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleDirectPurchaseCfg.class);
			log = is.pop(DBRoleDirectPurchaseLog.class);
			info = is.pop(DirectPayInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
			os.push(info);
		}

		public int effectiveTime;
		public RoleDirectPurchaseCfg cfg;
		public DBRoleDirectPurchaseLog log;
		public DirectPayInfo info;
	}

	public static class OneArmBanditDayLeft implements Stream.IStreamable, Stream.KCloneable<OneArmBanditDayLeft>, SStream.IStreamable
	{

		public OneArmBanditDayLeft() { }

		public OneArmBanditDayLeft(int daySeq, float left)
		{
			this.daySeq = daySeq;
			this.left = left;
		}

		public OneArmBanditDayLeft ksClone()
		{
			return new OneArmBanditDayLeft(daySeq, left);
		}

		@Override
		public OneArmBanditDayLeft kdClone()
		{
			OneArmBanditDayLeft _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			daySeq = is.popInteger();
			left = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(daySeq);
			os.pushFloat(left);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			daySeq = is.popInteger();
			left = is.popFloat();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(daySeq);
			os.pushFloat(left);
		}

		public int daySeq;
		public float left;
	}

	public static class ProbabilityEntity implements Stream.IStreamable, Stream.KCloneable<ProbabilityEntity>, SStream.IStreamable
	{

		public ProbabilityEntity() { }

		public ProbabilityEntity(int limit, float probability)
		{
			this.limit = limit;
			this.probability = probability;
		}

		public ProbabilityEntity ksClone()
		{
			return new ProbabilityEntity(limit, probability);
		}

		@Override
		public ProbabilityEntity kdClone()
		{
			ProbabilityEntity _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			limit = is.popInteger();
			probability = is.popFloat();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(limit);
			os.pushFloat(probability);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			limit = is.popInteger();
			probability = is.popFloat();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(limit);
			os.pushFloat(probability);
		}

		public int limit;
		public float probability;
	}

	public static class OneArmBandit implements Stream.IStreamable, Stream.KCloneable<OneArmBandit>, SStream.IStreamable
	{

		public OneArmBandit() { }

		public OneArmBandit(int open, TimeSpan time, String title, String content, 
		                    RoleLifeDaySpan phase, int levelTimesReq, int payTimesReq, List<ProbabilityEntity> probability, 
		                    List<OneArmBanditDayLeft> dayLeft)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.phase = phase;
			this.levelTimesReq = levelTimesReq;
			this.payTimesReq = payTimesReq;
			this.probability = probability;
			this.dayLeft = dayLeft;
		}

		public OneArmBandit ksClone()
		{
			return new OneArmBandit(open, time, title, content, 
			                        phase, levelTimesReq, payTimesReq, probability, 
			                        dayLeft);
		}

		@Override
		public OneArmBandit kdClone()
		{
			OneArmBandit _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.phase = Stream.clone(phase);
			_kio_clobj.probability = Stream.clone(probability);
			_kio_clobj.dayLeft = Stream.clone(dayLeft);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			if( phase == null )
				phase = new RoleLifeDaySpan();
			is.pop(phase);
			levelTimesReq = is.popInteger();
			payTimesReq = is.popInteger();
			probability = is.popList(ProbabilityEntity.class);
			dayLeft = is.popList(OneArmBanditDayLeft.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(levelTimesReq);
			os.pushInteger(payTimesReq);
			os.pushList(probability);
			os.pushList(dayLeft);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			phase = is.pop(RoleLifeDaySpan.class);
			levelTimesReq = is.popInteger();
			payTimesReq = is.popInteger();
			probability = is.popList(ProbabilityEntity.class);
			dayLeft = is.popList(OneArmBanditDayLeft.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.push(phase);
			os.pushInteger(levelTimesReq);
			os.pushInteger(payTimesReq);
			os.pushList(probability);
			os.pushList(dayLeft);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public RoleLifeDaySpan phase;
		public int levelTimesReq;
		public int payTimesReq;
		public List<ProbabilityEntity> probability;
		public List<OneArmBanditDayLeft> dayLeft;
	}

	public static class RoleOneArmBanditCfg implements Stream.IStreamable, Stream.KCloneable<RoleOneArmBanditCfg>, SStream.IStreamable
	{

		public RoleOneArmBanditCfg() { }

		public RoleOneArmBanditCfg(int id, TimeSpan time, String title, String content, 
		                           int levelTimesReq, int payTimesReq, List<OneArmBanditDayLeft> dayLeft)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.levelTimesReq = levelTimesReq;
			this.payTimesReq = payTimesReq;
			this.dayLeft = dayLeft;
		}

		public RoleOneArmBanditCfg ksClone()
		{
			return new RoleOneArmBanditCfg(id, time, title, content, 
			                               levelTimesReq, payTimesReq, dayLeft);
		}

		@Override
		public RoleOneArmBanditCfg kdClone()
		{
			RoleOneArmBanditCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.dayLeft = Stream.clone(dayLeft);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			levelTimesReq = is.popInteger();
			payTimesReq = is.popInteger();
			dayLeft = is.popList(OneArmBanditDayLeft.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(levelTimesReq);
			os.pushInteger(payTimesReq);
			os.pushList(dayLeft);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			levelTimesReq = is.popInteger();
			payTimesReq = is.popInteger();
			dayLeft = is.popList(OneArmBanditDayLeft.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(levelTimesReq);
			os.pushInteger(payTimesReq);
			os.pushList(dayLeft);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public int levelTimesReq;
		public int payTimesReq;
		public List<OneArmBanditDayLeft> dayLeft;
	}

	public static class RoleOneArmBanditInfo implements Stream.IStreamable, Stream.KCloneable<RoleOneArmBanditInfo>, SStream.IStreamable
	{

		public RoleOneArmBanditInfo() { }

		public RoleOneArmBanditInfo(int effectiveTime, RoleOneArmBanditCfg cfg, DBRoleOneArmBanditLog log)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
		}

		public RoleOneArmBanditInfo ksClone()
		{
			return new RoleOneArmBanditInfo(effectiveTime, cfg, log);
		}

		@Override
		public RoleOneArmBanditInfo kdClone()
		{
			RoleOneArmBanditInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleOneArmBanditCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleOneArmBanditLog();
			is.pop(log);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleOneArmBanditCfg.class);
			log = is.pop(DBRoleOneArmBanditLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
		}

		public int effectiveTime;
		public RoleOneArmBanditCfg cfg;
		public DBRoleOneArmBanditLog log;
	}

	public static class PayLevelRank implements Stream.IStreamable, Stream.KCloneable<PayLevelRank>, SStream.IStreamable
	{

		public PayLevelRank() { }

		public PayLevelRank(int rank, List<DummyGoods> gifts)
		{
			this.rank = rank;
			this.gifts = gifts;
		}

		public PayLevelRank ksClone()
		{
			return new PayLevelRank(rank, gifts);
		}

		@Override
		public PayLevelRank kdClone()
		{
			PayLevelRank _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rank = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rank);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rank = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(rank);
			os.pushList(gifts);
		}

		public int rank;
		public List<DummyGoods> gifts;
	}

	public static class PayRank implements Stream.IStreamable, Stream.KCloneable<PayRank>, SStream.IStreamable
	{

		public PayRank() { }

		public PayRank(int open, TimeSpan time, String title, String content, 
		               int recordEndTime, int maxLength, int showCount, List<PayLevelRank> rankList)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.recordEndTime = recordEndTime;
			this.maxLength = maxLength;
			this.showCount = showCount;
			this.rankList = rankList;
		}

		public PayRank ksClone()
		{
			return new PayRank(open, time, title, content, 
			                   recordEndTime, maxLength, showCount, rankList);
		}

		@Override
		public PayRank kdClone()
		{
			PayRank _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.rankList = Stream.clone(rankList);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			recordEndTime = is.popInteger();
			maxLength = is.popInteger();
			showCount = is.popInteger();
			rankList = is.popList(PayLevelRank.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(recordEndTime);
			os.pushInteger(maxLength);
			os.pushInteger(showCount);
			os.pushList(rankList);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			recordEndTime = is.popInteger();
			maxLength = is.popInteger();
			showCount = is.popInteger();
			rankList = is.popList(PayLevelRank.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(recordEndTime);
			os.pushInteger(maxLength);
			os.pushInteger(showCount);
			os.pushList(rankList);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public int recordEndTime;
		public int maxLength;
		public int showCount;
		public List<PayLevelRank> rankList;
	}

	public static class RolePayRankCfg implements Stream.IStreamable, Stream.KCloneable<RolePayRankCfg>, SStream.IStreamable
	{

		public RolePayRankCfg() { }

		public RolePayRankCfg(int id, TimeSpan time, String title, String content, 
		                      int recordEndTime, List<PayLevelRank> rankList)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.recordEndTime = recordEndTime;
			this.rankList = rankList;
		}

		public RolePayRankCfg ksClone()
		{
			return new RolePayRankCfg(id, time, title, content, 
			                          recordEndTime, rankList);
		}

		@Override
		public RolePayRankCfg kdClone()
		{
			RolePayRankCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.rankList = Stream.clone(rankList);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			recordEndTime = is.popInteger();
			rankList = is.popList(PayLevelRank.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(recordEndTime);
			os.pushList(rankList);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			recordEndTime = is.popInteger();
			rankList = is.popList(PayLevelRank.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(recordEndTime);
			os.pushList(rankList);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public int recordEndTime;
		public List<PayLevelRank> rankList;
	}

	public static class RolePayRankInfo implements Stream.IStreamable, Stream.KCloneable<RolePayRankInfo>, SStream.IStreamable
	{

		public RolePayRankInfo() { }

		public RolePayRankInfo(int effectiveTime, int selfRank, RolePayRankCfg cfg, DBRolePayRankLog log, 
		                       List<RankRole> ranks)
		{
			this.effectiveTime = effectiveTime;
			this.selfRank = selfRank;
			this.cfg = cfg;
			this.log = log;
			this.ranks = ranks;
		}

		public RolePayRankInfo ksClone()
		{
			return new RolePayRankInfo(effectiveTime, selfRank, cfg, log, 
			                           ranks);
		}

		@Override
		public RolePayRankInfo kdClone()
		{
			RolePayRankInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			_kio_clobj.ranks = Stream.clone(ranks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			selfRank = is.popInteger();
			if( cfg == null )
				cfg = new RolePayRankCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRolePayRankLog();
			is.pop(log);
			ranks = is.popList(RankRole.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(selfRank);
			os.push(cfg);
			os.push(log);
			os.pushList(ranks);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			selfRank = is.popInteger();
			cfg = is.pop(RolePayRankCfg.class);
			log = is.pop(DBRolePayRankLog.class);
			ranks = is.popList(RankRole.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(selfRank);
			os.push(cfg);
			os.push(log);
			os.pushList(ranks);
		}

		public int effectiveTime;
		public int selfRank;
		public RolePayRankCfg cfg;
		public DBRolePayRankLog log;
		public List<RankRole> ranks;
	}

	public static class ConsumeLevelRank implements Stream.IStreamable, Stream.KCloneable<ConsumeLevelRank>, SStream.IStreamable
	{

		public ConsumeLevelRank() { }

		public ConsumeLevelRank(int rank, List<DummyGoods> gifts)
		{
			this.rank = rank;
			this.gifts = gifts;
		}

		public ConsumeLevelRank ksClone()
		{
			return new ConsumeLevelRank(rank, gifts);
		}

		@Override
		public ConsumeLevelRank kdClone()
		{
			ConsumeLevelRank _kio_clobj = ksClone();
			_kio_clobj.gifts = Stream.clone(gifts);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rank = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rank);
			os.pushList(gifts);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rank = is.popInteger();
			gifts = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(rank);
			os.pushList(gifts);
		}

		public int rank;
		public List<DummyGoods> gifts;
	}

	public static class ConsumeRank implements Stream.IStreamable, Stream.KCloneable<ConsumeRank>, SStream.IStreamable
	{

		public ConsumeRank() { }

		public ConsumeRank(int open, TimeSpan time, String title, String content, 
		                   int recordEndTime, int maxRank, int showRank, List<ConsumeLevelRank> rankList)
		{
			this.open = open;
			this.time = time;
			this.title = title;
			this.content = content;
			this.recordEndTime = recordEndTime;
			this.maxRank = maxRank;
			this.showRank = showRank;
			this.rankList = rankList;
		}

		public ConsumeRank ksClone()
		{
			return new ConsumeRank(open, time, title, content, 
			                       recordEndTime, maxRank, showRank, rankList);
		}

		@Override
		public ConsumeRank kdClone()
		{
			ConsumeRank _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.rankList = Stream.clone(rankList);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			recordEndTime = is.popInteger();
			maxRank = is.popInteger();
			showRank = is.popInteger();
			rankList = is.popList(ConsumeLevelRank.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(recordEndTime);
			os.pushInteger(maxRank);
			os.pushInteger(showRank);
			os.pushList(rankList);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			open = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			recordEndTime = is.popInteger();
			maxRank = is.popInteger();
			showRank = is.popInteger();
			rankList = is.popList(ConsumeLevelRank.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(open);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(recordEndTime);
			os.pushInteger(maxRank);
			os.pushInteger(showRank);
			os.pushList(rankList);
		}

		public int open;
		public TimeSpan time;
		public String title;
		public String content;
		public int recordEndTime;
		public int maxRank;
		public int showRank;
		public List<ConsumeLevelRank> rankList;
	}

	public static class RoleConsumeRankCfg implements Stream.IStreamable, Stream.KCloneable<RoleConsumeRankCfg>, SStream.IStreamable
	{

		public RoleConsumeRankCfg() { }

		public RoleConsumeRankCfg(int id, TimeSpan time, String title, String content, 
		                          int recordEndTime, List<ConsumeLevelRank> rankList)
		{
			this.id = id;
			this.time = time;
			this.title = title;
			this.content = content;
			this.recordEndTime = recordEndTime;
			this.rankList = rankList;
		}

		public RoleConsumeRankCfg ksClone()
		{
			return new RoleConsumeRankCfg(id, time, title, content, 
			                              recordEndTime, rankList);
		}

		@Override
		public RoleConsumeRankCfg kdClone()
		{
			RoleConsumeRankCfg _kio_clobj = ksClone();
			_kio_clobj.time = Stream.clone(time);
			_kio_clobj.rankList = Stream.clone(rankList);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( time == null )
				time = new TimeSpan();
			is.pop(time);
			title = is.popString();
			content = is.popString();
			recordEndTime = is.popInteger();
			rankList = is.popList(ConsumeLevelRank.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(recordEndTime);
			os.pushList(rankList);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			time = is.pop(TimeSpan.class);
			title = is.popString();
			content = is.popString();
			recordEndTime = is.popInteger();
			rankList = is.popList(ConsumeLevelRank.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.push(time);
			os.pushString(title);
			os.pushString(content);
			os.pushInteger(recordEndTime);
			os.pushList(rankList);
		}

		public int id;
		public TimeSpan time;
		public String title;
		public String content;
		public int recordEndTime;
		public List<ConsumeLevelRank> rankList;
	}

	public static class RoleConsumeRankInfo implements Stream.IStreamable, Stream.KCloneable<RoleConsumeRankInfo>, SStream.IStreamable
	{

		public RoleConsumeRankInfo() { }

		public RoleConsumeRankInfo(int effectiveTime, RoleConsumeRankCfg cfg, DBRoleConsumeRankLog log, List<RankRole> ranks)
		{
			this.effectiveTime = effectiveTime;
			this.cfg = cfg;
			this.log = log;
			this.ranks = ranks;
		}

		public RoleConsumeRankInfo ksClone()
		{
			return new RoleConsumeRankInfo(effectiveTime, cfg, log, ranks);
		}

		@Override
		public RoleConsumeRankInfo kdClone()
		{
			RoleConsumeRankInfo _kio_clobj = ksClone();
			_kio_clobj.cfg = Stream.clone(cfg);
			_kio_clobj.log = Stream.clone(log);
			_kio_clobj.ranks = Stream.clone(ranks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			if( cfg == null )
				cfg = new RoleConsumeRankCfg();
			is.pop(cfg);
			if( log == null )
				log = new DBRoleConsumeRankLog();
			is.pop(log);
			ranks = is.popList(RankRole.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
			os.pushList(ranks);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			effectiveTime = is.popInteger();
			cfg = is.pop(RoleConsumeRankCfg.class);
			log = is.pop(DBRoleConsumeRankLog.class);
			ranks = is.popList(RankRole.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(effectiveTime);
			os.push(cfg);
			os.push(log);
			os.pushList(ranks);
		}

		public int effectiveTime;
		public RoleConsumeRankCfg cfg;
		public DBRoleConsumeRankLog log;
		public List<RankRole> ranks;
	}

	public static class ActivityInfo implements Stream.IStreamable, Stream.KCloneable<ActivityInfo>, SStream.IStreamable
	{

		public ActivityInfo() { }

		public ActivityInfo(int type, int id, String title, int notice)
		{
			this.type = type;
			this.id = id;
			this.title = title;
			this.notice = notice;
		}

		public ActivityInfo ksClone()
		{
			return new ActivityInfo(type, id, title, notice);
		}

		@Override
		public ActivityInfo kdClone()
		{
			ActivityInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			id = is.popInteger();
			title = is.popString();
			notice = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(id);
			os.pushString(title);
			os.pushInteger(notice);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			type = is.popInteger();
			id = is.popInteger();
			title = is.popString();
			notice = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(type);
			os.pushInteger(id);
			os.pushString(title);
			os.pushInteger(notice);
		}

		public int type;
		public int id;
		public String title;
		public int notice;
	}

	public static class UserSysteminfo implements Stream.IStreamable, Stream.KCloneable<UserSysteminfo>, SStream.IStreamable
	{

		public UserSysteminfo() { }

		public UserSysteminfo(String deviceID, String systemHardware, String systemSoftware, String cpuHardware, 
		                      int screenWidth, int screenHeight, float density, int network, 
		                      String macAddr, String loginIP)
		{
			this.deviceID = deviceID;
			this.systemHardware = systemHardware;
			this.systemSoftware = systemSoftware;
			this.cpuHardware = cpuHardware;
			this.screenWidth = screenWidth;
			this.screenHeight = screenHeight;
			this.density = density;
			this.network = network;
			this.macAddr = macAddr;
			this.loginIP = loginIP;
		}

		public UserSysteminfo ksClone()
		{
			return new UserSysteminfo(deviceID, systemHardware, systemSoftware, cpuHardware, 
			                          screenWidth, screenHeight, density, network, 
			                          macAddr, loginIP);
		}

		@Override
		public UserSysteminfo kdClone()
		{
			UserSysteminfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			deviceID = is.popString();
			systemHardware = is.popString();
			systemSoftware = is.popString();
			cpuHardware = is.popString();
			screenWidth = is.popInteger();
			screenHeight = is.popInteger();
			density = is.popFloat();
			network = is.popInteger();
			macAddr = is.popString();
			loginIP = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(deviceID);
			os.pushString(systemHardware);
			os.pushString(systemSoftware);
			os.pushString(cpuHardware);
			os.pushInteger(screenWidth);
			os.pushInteger(screenHeight);
			os.pushFloat(density);
			os.pushInteger(network);
			os.pushString(macAddr);
			os.pushString(loginIP);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			deviceID = is.popString();
			systemHardware = is.popString();
			systemSoftware = is.popString();
			cpuHardware = is.popString();
			screenWidth = is.popInteger();
			screenHeight = is.popInteger();
			density = is.popFloat();
			network = is.popInteger();
			macAddr = is.popString();
			loginIP = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(deviceID);
			os.pushString(systemHardware);
			os.pushString(systemSoftware);
			os.pushString(cpuHardware);
			os.pushInteger(screenWidth);
			os.pushInteger(screenHeight);
			os.pushFloat(density);
			os.pushInteger(network);
			os.pushString(macAddr);
			os.pushString(loginIP);
		}

		public String deviceID;
		public String systemHardware;
		public String systemSoftware;
		public String cpuHardware;
		public int screenWidth;
		public int screenHeight;
		public float density;
		public int network;
		public String macAddr;
		public String loginIP;
	}

	public static class UserClientinfo implements Stream.IStreamable, Stream.KCloneable<UserClientinfo>, SStream.IStreamable
	{

		public UserClientinfo() { }

		public UserClientinfo(String gameAppID, int clientVerPacket, int clientVerResource, Set<Integer> patchPackets)
		{
			this.gameAppID = gameAppID;
			this.clientVerPacket = clientVerPacket;
			this.clientVerResource = clientVerResource;
			this.patchPackets = patchPackets;
		}

		public UserClientinfo ksClone()
		{
			return new UserClientinfo(gameAppID, clientVerPacket, clientVerResource, patchPackets);
		}

		@Override
		public UserClientinfo kdClone()
		{
			UserClientinfo _kio_clobj = ksClone();
			_kio_clobj.patchPackets = new TreeSet<Integer>(patchPackets);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gameAppID = is.popString();
			clientVerPacket = is.popInteger();
			clientVerResource = is.popInteger();
			patchPackets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(gameAppID);
			os.pushInteger(clientVerPacket);
			os.pushInteger(clientVerResource);
			os.pushIntegerSet(patchPackets);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			gameAppID = is.popString();
			clientVerPacket = is.popInteger();
			clientVerResource = is.popInteger();
			patchPackets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(gameAppID);
			os.pushInteger(clientVerPacket);
			os.pushInteger(clientVerResource);
			os.pushIntegerSet(patchPackets);
		}

		public String gameAppID;
		public int clientVerPacket;
		public int clientVerResource;
		public Set<Integer> patchPackets;
	}

	public static class UserLoginParam implements Stream.IStreamable, Stream.KCloneable<UserLoginParam>, SStream.IStreamable
	{

		public static final byte eLoginNormal = 0;
		public static final byte eLoginReconnect = 1;
		public static final byte eLoginGod = 2;

		public UserLoginParam() { }

		public UserLoginParam(int loginType, String loginKey, String exParam)
		{
			this.loginType = loginType;
			this.loginKey = loginKey;
			this.exParam = exParam;
		}

		public UserLoginParam ksClone()
		{
			return new UserLoginParam(loginType, loginKey, exParam);
		}

		@Override
		public UserLoginParam kdClone()
		{
			UserLoginParam _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			loginType = is.popInteger();
			loginKey = is.popString();
			exParam = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(loginType);
			os.pushString(loginKey);
			os.pushString(exParam);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			loginType = is.popInteger();
			loginKey = is.popString();
			exParam = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(loginType);
			os.pushString(loginKey);
			os.pushString(exParam);
		}

		public int loginType;
		public String loginKey;
		public String exParam;
	}

	public static class UserLoginInfo implements Stream.IStreamable, Stream.KCloneable<UserLoginInfo>, SStream.IStreamable
	{

		public UserLoginInfo() { }

		public UserLoginInfo(UserLoginParam arg, UserClientinfo client, UserSysteminfo system)
		{
			this.arg = arg;
			this.client = client;
			this.system = system;
		}

		public UserLoginInfo ksClone()
		{
			return new UserLoginInfo(arg, client, system);
		}

		@Override
		public UserLoginInfo kdClone()
		{
			UserLoginInfo _kio_clobj = ksClone();
			_kio_clobj.arg = Stream.clone(arg);
			_kio_clobj.client = Stream.clone(client);
			_kio_clobj.system = Stream.clone(system);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( arg == null )
				arg = new UserLoginParam();
			is.pop(arg);
			if( client == null )
				client = new UserClientinfo();
			is.pop(client);
			if( system == null )
				system = new UserSysteminfo();
			is.pop(system);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(arg);
			os.push(client);
			os.push(system);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			arg = is.pop(UserLoginParam.class);
			client = is.pop(UserClientinfo.class);
			system = is.pop(UserSysteminfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(arg);
			os.push(client);
			os.push(system);
		}

		public UserLoginParam arg;
		public UserClientinfo client;
		public UserSysteminfo system;
	}

	public static class CreateRoleParam implements Stream.IStreamable, Stream.KCloneable<CreateRoleParam>, SStream.IStreamable
	{

		public CreateRoleParam() { }

		public CreateRoleParam(String name, byte gender, byte face, byte hair, 
		                       byte classType)
		{
			this.name = name;
			this.gender = gender;
			this.face = face;
			this.hair = hair;
			this.classType = classType;
		}

		public CreateRoleParam ksClone()
		{
			return new CreateRoleParam(name, gender, face, hair, 
			                           classType);
		}

		@Override
		public CreateRoleParam kdClone()
		{
			CreateRoleParam _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			name = is.popString();
			gender = is.popByte();
			face = is.popByte();
			hair = is.popByte();
			classType = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(name);
			os.pushByte(gender);
			os.pushByte(face);
			os.pushByte(hair);
			os.pushByte(classType);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			name = is.popString();
			gender = is.popByte();
			face = is.popByte();
			hair = is.popByte();
			classType = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(name);
			os.pushByte(gender);
			os.pushByte(face);
			os.pushByte(hair);
			os.pushByte(classType);
		}

		public String name;
		public byte gender;
		public byte face;
		public byte hair;
		public byte classType;
	}

	public static class Team implements Stream.IStreamable, Stream.KCloneable<Team>, SStream.IStreamable
	{

		public Team() { }

		public Team(int id, int leader, List<Integer> members)
		{
			this.id = id;
			this.leader = leader;
			this.members = members;
		}

		public Team ksClone()
		{
			return new Team(id, leader, members);
		}

		@Override
		public Team kdClone()
		{
			Team _kio_clobj = ksClone();
			_kio_clobj.members = new ArrayList<Integer>(members);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			leader = is.popInteger();
			members = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(leader);
			os.pushIntegerList(members);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			leader = is.popInteger();
			members = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(leader);
			os.pushIntegerList(members);
		}

		public int id;
		public int leader;
		public List<Integer> members;
	}

	public static class MRoom implements Stream.IStreamable, Stream.KCloneable<MRoom>, SStream.IStreamable
	{

		public MRoom() { }

		public MRoom(int id, int type, int mapId, int leader, 
		             List<Integer> members, int createTime)
		{
			this.id = id;
			this.type = type;
			this.mapId = mapId;
			this.leader = leader;
			this.members = members;
			this.createTime = createTime;
		}

		public MRoom ksClone()
		{
			return new MRoom(id, type, mapId, leader, 
			                 members, createTime);
		}

		@Override
		public MRoom kdClone()
		{
			MRoom _kio_clobj = ksClone();
			_kio_clobj.members = new ArrayList<Integer>(members);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			mapId = is.popInteger();
			leader = is.popInteger();
			members = is.popIntegerList();
			createTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(mapId);
			os.pushInteger(leader);
			os.pushIntegerList(members);
			os.pushInteger(createTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			mapId = is.popInteger();
			leader = is.popInteger();
			members = is.popIntegerList();
			createTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(mapId);
			os.pushInteger(leader);
			os.pushIntegerList(members);
			os.pushInteger(createTime);
		}

		public int id;
		public int type;
		public int mapId;
		public int leader;
		public List<Integer> members;
		public int createTime;
	}

	public static class ARoom implements Stream.IStreamable, Stream.KCloneable<ARoom>, SStream.IStreamable
	{

		public ARoom() { }

		public ARoom(int id, int type, int grade, int leader, 
		             List<Integer> members)
		{
			this.id = id;
			this.type = type;
			this.grade = grade;
			this.leader = leader;
			this.members = members;
		}

		public ARoom ksClone()
		{
			return new ARoom(id, type, grade, leader, 
			                 members);
		}

		@Override
		public ARoom kdClone()
		{
			ARoom _kio_clobj = ksClone();
			_kio_clobj.members = new ArrayList<Integer>(members);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			grade = is.popInteger();
			leader = is.popInteger();
			members = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(grade);
			os.pushInteger(leader);
			os.pushIntegerList(members);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			grade = is.popInteger();
			leader = is.popInteger();
			members = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(grade);
			os.pushInteger(leader);
			os.pushIntegerList(members);
		}

		public int id;
		public int type;
		public int grade;
		public int leader;
		public List<Integer> members;
	}

	public static class FRoom implements Stream.IStreamable, Stream.KCloneable<FRoom>, SStream.IStreamable
	{

		public FRoom() { }

		public FRoom(int id, int type, int leader, List<Integer> members)
		{
			this.id = id;
			this.type = type;
			this.leader = leader;
			this.members = members;
		}

		public FRoom ksClone()
		{
			return new FRoom(id, type, leader, members);
		}

		@Override
		public FRoom kdClone()
		{
			FRoom _kio_clobj = ksClone();
			_kio_clobj.members = new ArrayList<Integer>(members);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			leader = is.popInteger();
			members = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(leader);
			os.pushIntegerList(members);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			leader = is.popInteger();
			members = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(leader);
			os.pushIntegerList(members);
		}

		public int id;
		public int type;
		public int leader;
		public List<Integer> members;
	}

	public static class TeamOverview implements Stream.IStreamable, Stream.KCloneable<TeamOverview>, SStream.IStreamable
	{

		public TeamOverview() { }

		public TeamOverview(int id, int leader, String leaderName, int leaderLvl, 
		                    int memberCount)
		{
			this.id = id;
			this.leader = leader;
			this.leaderName = leaderName;
			this.leaderLvl = leaderLvl;
			this.memberCount = memberCount;
		}

		public TeamOverview ksClone()
		{
			return new TeamOverview(id, leader, leaderName, leaderLvl, 
			                        memberCount);
		}

		@Override
		public TeamOverview kdClone()
		{
			TeamOverview _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			leader = is.popInteger();
			leaderName = is.popString();
			leaderLvl = is.popInteger();
			memberCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(leader);
			os.pushString(leaderName);
			os.pushInteger(leaderLvl);
			os.pushInteger(memberCount);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			leader = is.popInteger();
			leaderName = is.popString();
			leaderLvl = is.popInteger();
			memberCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(leader);
			os.pushString(leaderName);
			os.pushInteger(leaderLvl);
			os.pushInteger(memberCount);
		}

		public int id;
		public int leader;
		public String leaderName;
		public int leaderLvl;
		public int memberCount;
	}

	public static class RoleBrief implements Stream.IStreamable, Stream.KCloneable<RoleBrief>, SStream.IStreamable
	{

		public RoleBrief() { }

		public RoleBrief(RoleOverview overview, RoleModel model)
		{
			this.overview = overview;
			this.model = model;
		}

		public RoleBrief ksClone()
		{
			return new RoleBrief(overview, model);
		}

		@Override
		public RoleBrief kdClone()
		{
			RoleBrief _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			_kio_clobj.model = Stream.clone(model);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
			if( model == null )
				model = new RoleModel();
			is.pop(model);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.push(model);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overview = is.pop(RoleOverview.class);
			model = is.pop(RoleModel.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overview);
			os.push(model);
		}

		public RoleOverview overview;
		public RoleModel model;
	}

	public static class RoleModel implements Stream.IStreamable, Stream.KCloneable<RoleModel>, SStream.IStreamable
	{

		public RoleModel() { }

		public RoleModel(int face, int hair, Map<Integer, Integer> equips, List<EquipPart> equipParts, 
		                 Map<Integer, Integer> curFashions, Map<Integer, Integer> showFashionTypes, ArmorBrief armor, HeirloomBrief heirloom)
		{
			this.face = face;
			this.hair = hair;
			this.equips = equips;
			this.equipParts = equipParts;
			this.curFashions = curFashions;
			this.showFashionTypes = showFashionTypes;
			this.armor = armor;
			this.heirloom = heirloom;
		}

		public RoleModel ksClone()
		{
			return new RoleModel(face, hair, equips, equipParts, 
			                     curFashions, showFashionTypes, armor, heirloom);
		}

		@Override
		public RoleModel kdClone()
		{
			RoleModel _kio_clobj = ksClone();
			_kio_clobj.equips = new TreeMap<Integer, Integer>(equips);
			_kio_clobj.equipParts = Stream.clone(equipParts);
			_kio_clobj.curFashions = new TreeMap<Integer, Integer>(curFashions);
			_kio_clobj.showFashionTypes = new TreeMap<Integer, Integer>(showFashionTypes);
			_kio_clobj.armor = Stream.clone(armor);
			_kio_clobj.heirloom = Stream.clone(heirloom);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			face = is.popInteger();
			hair = is.popInteger();
			equips = is.popIntegerIntegerTreeMap();
			equipParts = is.popList(EquipPart.class);
			curFashions = is.popIntegerIntegerTreeMap();
			showFashionTypes = is.popIntegerIntegerTreeMap();
			if( armor == null )
				armor = new ArmorBrief();
			is.pop(armor);
			if( heirloom == null )
				heirloom = new HeirloomBrief();
			is.pop(heirloom);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(face);
			os.pushInteger(hair);
			os.pushIntegerIntegerMap(equips);
			os.pushList(equipParts);
			os.pushIntegerIntegerMap(curFashions);
			os.pushIntegerIntegerMap(showFashionTypes);
			os.push(armor);
			os.push(heirloom);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			face = is.popInteger();
			hair = is.popInteger();
			equips = is.popIntegerIntegerTreeMap();
			equipParts = is.popList(EquipPart.class);
			curFashions = is.popIntegerIntegerTreeMap();
			showFashionTypes = is.popIntegerIntegerTreeMap();
			armor = is.pop(ArmorBrief.class);
			heirloom = is.pop(HeirloomBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(face);
			os.pushInteger(hair);
			os.pushIntegerIntegerMap(equips);
			os.pushList(equipParts);
			os.pushIntegerIntegerMap(curFashions);
			os.pushIntegerIntegerMap(showFashionTypes);
			os.push(armor);
			os.push(heirloom);
		}

		public int face;
		public int hair;
		public Map<Integer, Integer> equips;
		public List<EquipPart> equipParts;
		public Map<Integer, Integer> curFashions;
		public Map<Integer, Integer> showFashionTypes;
		public ArmorBrief armor;
		public HeirloomBrief heirloom;
	}

	public static class ArmorBrief implements Stream.IStreamable, Stream.KCloneable<ArmorBrief>, SStream.IStreamable
	{

		public ArmorBrief() { }

		public ArmorBrief(int id, int rank)
		{
			this.id = id;
			this.rank = rank;
		}

		public ArmorBrief ksClone()
		{
			return new ArmorBrief(id, rank);
		}

		@Override
		public ArmorBrief kdClone()
		{
			ArmorBrief _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			rank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(rank);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			rank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(rank);
		}

		public int id;
		public int rank;
	}

	public static class HeirloomBrief implements Stream.IStreamable, Stream.KCloneable<HeirloomBrief>, SStream.IStreamable
	{

		public HeirloomBrief() { }

		public HeirloomBrief(byte display, int perfectDegree)
		{
			this.display = display;
			this.perfectDegree = perfectDegree;
		}

		public HeirloomBrief ksClone()
		{
			return new HeirloomBrief(display, perfectDegree);
		}

		@Override
		public HeirloomBrief kdClone()
		{
			HeirloomBrief _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			display = is.popByte();
			perfectDegree = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(display);
			os.pushInteger(perfectDegree);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			display = is.popByte();
			perfectDegree = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushByte(display);
			os.pushInteger(perfectDegree);
		}

		public byte display;
		public int perfectDegree;
	}

	public static class RoleSocial implements Stream.IStreamable, Stream.KCloneable<RoleSocial>, SStream.IStreamable
	{

		public RoleSocial() { }

		public RoleSocial(RoleOverview role, int sectId, String sectName, String personalMsg)
		{
			this.role = role;
			this.sectId = sectId;
			this.sectName = sectName;
			this.personalMsg = personalMsg;
		}

		public RoleSocial ksClone()
		{
			return new RoleSocial(role, sectId, sectName, personalMsg);
		}

		@Override
		public RoleSocial kdClone()
		{
			RoleSocial _kio_clobj = ksClone();
			_kio_clobj.role = Stream.clone(role);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( role == null )
				role = new RoleOverview();
			is.pop(role);
			sectId = is.popInteger();
			sectName = is.popString();
			personalMsg = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(role);
			os.pushInteger(sectId);
			os.pushString(sectName);
			os.pushString(personalMsg);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			role = is.pop(RoleOverview.class);
			sectId = is.popInteger();
			sectName = is.popString();
			personalMsg = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(role);
			os.pushInteger(sectId);
			os.pushString(sectName);
			os.pushString(personalMsg);
		}

		public RoleOverview role;
		public int sectId;
		public String sectName;
		public String personalMsg;
	}

	public static class RoleOverview implements Stream.IStreamable, Stream.KCloneable<RoleOverview>, SStream.IStreamable
	{

		public RoleOverview() { }

		public RoleOverview(int id, String name, int gender, int headIcon, 
		                    int type, int tLvl, int bwType, int level, 
		                    int fightPower)
		{
			this.id = id;
			this.name = name;
			this.gender = gender;
			this.headIcon = headIcon;
			this.type = type;
			this.tLvl = tLvl;
			this.bwType = bwType;
			this.level = level;
			this.fightPower = fightPower;
		}

		public RoleOverview ksClone()
		{
			return new RoleOverview(id, name, gender, headIcon, 
			                        type, tLvl, bwType, level, 
			                        fightPower);
		}

		@Override
		public RoleOverview kdClone()
		{
			RoleOverview _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			gender = is.popInteger();
			headIcon = is.popInteger();
			type = is.popInteger();
			tLvl = is.popInteger();
			bwType = is.popInteger();
			level = is.popInteger();
			fightPower = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(gender);
			os.pushInteger(headIcon);
			os.pushInteger(type);
			os.pushInteger(tLvl);
			os.pushInteger(bwType);
			os.pushInteger(level);
			os.pushInteger(fightPower);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			gender = is.popInteger();
			headIcon = is.popInteger();
			type = is.popInteger();
			tLvl = is.popInteger();
			bwType = is.popInteger();
			level = is.popInteger();
			fightPower = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(gender);
			os.pushInteger(headIcon);
			os.pushInteger(type);
			os.pushInteger(tLvl);
			os.pushInteger(bwType);
			os.pushInteger(level);
			os.pushInteger(fightPower);
		}

		public int id;
		public String name;
		public int gender;
		public int headIcon;
		public int type;
		public int tLvl;
		public int bwType;
		public int level;
		public int fightPower;
	}

	public static class RoleKill implements Stream.IStreamable, Stream.KCloneable<RoleKill>, SStream.IStreamable
	{

		public RoleKill() { }

		public RoleKill(int id, String name, int addHonor)
		{
			this.id = id;
			this.name = name;
			this.addHonor = addHonor;
		}

		public RoleKill ksClone()
		{
			return new RoleKill(id, name, addHonor);
		}

		@Override
		public RoleKill kdClone()
		{
			RoleKill _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			addHonor = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(addHonor);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			addHonor = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(addHonor);
		}

		public int id;
		public String name;
		public int addHonor;
	}

	public static class RoleInfo implements Stream.IStreamable, Stream.KCloneable<RoleInfo>, SStream.IStreamable
	{

		public RoleInfo() { }

		public RoleInfo(int id, String name)
		{
			this.id = id;
			this.name = name;
		}

		public RoleInfo ksClone()
		{
			return new RoleInfo(id, name);
		}

		@Override
		public RoleInfo kdClone()
		{
			RoleInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
		}

		public int id;
		public String name;
	}

	public static class MasterMember implements Stream.IStreamable, SStream.IStreamable
	{

		public MasterMember() { }

		public MasterMember(RoleOverview overView, boolean online, int point)
		{
			this.overView = overView;
			this.online = online;
			this.point = point;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overView == null )
				overView = new RoleOverview();
			is.pop(overView);
			online = is.popBoolean();
			point = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overView);
			os.pushBoolean(online);
			os.pushInteger(point);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overView = is.pop(RoleOverview.class);
			online = is.popBoolean();
			point = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overView);
			os.pushBoolean(online);
			os.pushInteger(point);
		}

		public RoleOverview overView;
		public boolean online;
		public int point;
	}

	public static class MasterApplyEntry implements Stream.IStreamable, SStream.IStreamable
	{

		public MasterApplyEntry() { }

		public MasterApplyEntry(RoleOverview overView, int applyTime)
		{
			this.overView = overView;
			this.applyTime = applyTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overView == null )
				overView = new RoleOverview();
			is.pop(overView);
			applyTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overView);
			os.pushInteger(applyTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overView = is.pop(RoleOverview.class);
			applyTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overView);
			os.pushInteger(applyTime);
		}

		public RoleOverview overView;
		public int applyTime;
	}

	public static class MasterAnnounceEntry implements Stream.IStreamable, Stream.KCloneable<MasterAnnounceEntry>
	{

		public MasterAnnounceEntry() { }

		public MasterAnnounceEntry(int roleID, int insertTime, String content)
		{
			this.roleID = roleID;
			this.insertTime = insertTime;
			this.content = content;
		}

		public MasterAnnounceEntry ksClone()
		{
			return new MasterAnnounceEntry(roleID, insertTime, content);
		}

		@Override
		public MasterAnnounceEntry kdClone()
		{
			MasterAnnounceEntry _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			insertTime = is.popInteger();
			content = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(insertTime);
			os.pushString(content);
		}

		public int roleID;
		public int insertTime;
		public String content;
	}

	public static class MasterAnnounce implements Stream.IStreamable, Stream.KCloneable<MasterAnnounce>
	{

		public MasterAnnounce() { }

		public MasterAnnounce(List<MasterAnnounceEntry> announceList)
		{
			this.announceList = announceList;
		}

		public MasterAnnounce ksClone()
		{
			return new MasterAnnounce(announceList);
		}

		@Override
		public MasterAnnounce kdClone()
		{
			MasterAnnounce _kio_clobj = ksClone();
			_kio_clobj.announceList = Stream.clone(announceList);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			announceList = is.popList(MasterAnnounceEntry.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(announceList);
		}

		public List<MasterAnnounceEntry> announceList;
	}

	public static class GlobalRoleId implements Stream.IStreamable, Stream.KCloneable<GlobalRoleId>, SStream.IStreamable
	{

		public GlobalRoleId() { }

		public GlobalRoleId(int gsid, int roleid)
		{
			this.gsid = gsid;
			this.roleid = roleid;
		}

		public GlobalRoleId ksClone()
		{
			return new GlobalRoleId(gsid, roleid);
		}

		@Override
		public GlobalRoleId kdClone()
		{
			GlobalRoleId _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gsid = is.popInteger();
			roleid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(gsid);
			os.pushInteger(roleid);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			gsid = is.popInteger();
			roleid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(gsid);
			os.pushInteger(roleid);
		}

		public int gsid;
		public int roleid;
	}

	public static class GlobalRoleOverview implements Stream.IStreamable, Stream.KCloneable<GlobalRoleOverview>, SStream.IStreamable
	{

		public GlobalRoleOverview() { }

		public GlobalRoleOverview(int gsid, RoleOverview role)
		{
			this.gsid = gsid;
			this.role = role;
		}

		public GlobalRoleOverview ksClone()
		{
			return new GlobalRoleOverview(gsid, role);
		}

		@Override
		public GlobalRoleOverview kdClone()
		{
			GlobalRoleOverview _kio_clobj = ksClone();
			_kio_clobj.role = Stream.clone(role);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gsid = is.popInteger();
			if( role == null )
				role = new RoleOverview();
			is.pop(role);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(gsid);
			os.push(role);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			gsid = is.popInteger();
			role = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(gsid);
			os.push(role);
		}

		public int gsid;
		public RoleOverview role;
	}

	public static class RoleProfile implements Stream.IStreamable, Stream.KCloneable<RoleProfile>, SStream.IStreamable
	{

		public RoleProfile() { }

		public RoleProfile(RoleOverview overview, int curHp, int maxHp)
		{
			this.overview = overview;
			this.curHp = curHp;
			this.maxHp = maxHp;
		}

		public RoleProfile ksClone()
		{
			return new RoleProfile(overview, curHp, maxHp);
		}

		@Override
		public RoleProfile kdClone()
		{
			RoleProfile _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
			curHp = is.popInteger();
			maxHp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.pushInteger(curHp);
			os.pushInteger(maxHp);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overview = is.pop(RoleOverview.class);
			curHp = is.popInteger();
			maxHp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overview);
			os.pushInteger(curHp);
			os.pushInteger(maxHp);
		}

		public RoleOverview overview;
		public int curHp;
		public int maxHp;
	}

	public static class RoleTitle implements Stream.IStreamable, Stream.KCloneable<RoleTitle>, SStream.IStreamable
	{

		public RoleTitle() { }

		public RoleTitle(int pkGrade, int pkState, SectBrief sectBrief, int permanentTitle, 
		                 List<DBTitleSlot> timedTitles, int carOwner, int carRobber)
		{
			this.pkGrade = pkGrade;
			this.pkState = pkState;
			this.sectBrief = sectBrief;
			this.permanentTitle = permanentTitle;
			this.timedTitles = timedTitles;
			this.carOwner = carOwner;
			this.carRobber = carRobber;
		}

		public RoleTitle ksClone()
		{
			return new RoleTitle(pkGrade, pkState, sectBrief, permanentTitle, 
			                     timedTitles, carOwner, carRobber);
		}

		@Override
		public RoleTitle kdClone()
		{
			RoleTitle _kio_clobj = ksClone();
			_kio_clobj.sectBrief = Stream.clone(sectBrief);
			_kio_clobj.timedTitles = Stream.clone(timedTitles);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pkGrade = is.popInteger();
			pkState = is.popInteger();
			if( sectBrief == null )
				sectBrief = new SectBrief();
			is.pop(sectBrief);
			permanentTitle = is.popInteger();
			timedTitles = is.popList(DBTitleSlot.class);
			carOwner = is.popInteger();
			carRobber = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pkGrade);
			os.pushInteger(pkState);
			os.push(sectBrief);
			os.pushInteger(permanentTitle);
			os.pushList(timedTitles);
			os.pushInteger(carOwner);
			os.pushInteger(carRobber);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			pkGrade = is.popInteger();
			pkState = is.popInteger();
			sectBrief = is.pop(SectBrief.class);
			permanentTitle = is.popInteger();
			timedTitles = is.popList(DBTitleSlot.class);
			carOwner = is.popInteger();
			carRobber = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(pkGrade);
			os.pushInteger(pkState);
			os.push(sectBrief);
			os.pushInteger(permanentTitle);
			os.pushList(timedTitles);
			os.pushInteger(carOwner);
			os.pushInteger(carRobber);
		}

		public int pkGrade;
		public int pkState;
		public SectBrief sectBrief;
		public int permanentTitle;
		public List<DBTitleSlot> timedTitles;
		public int carOwner;
		public int carRobber;
	}

	public static class FightState implements Stream.IStreamable, Stream.KCloneable<FightState>, SStream.IStreamable
	{

		public FightState() { }

		public FightState(int curHp, int maxHp, Map<Integer, Integer> buffs, int armorWeak, 
		                  Set<Integer> states)
		{
			this.curHp = curHp;
			this.maxHp = maxHp;
			this.buffs = buffs;
			this.armorWeak = armorWeak;
			this.states = states;
		}

		public FightState ksClone()
		{
			return new FightState(curHp, maxHp, buffs, armorWeak, 
			                      states);
		}

		@Override
		public FightState kdClone()
		{
			FightState _kio_clobj = ksClone();
			_kio_clobj.buffs = new TreeMap<Integer, Integer>(buffs);
			_kio_clobj.states = new TreeSet<Integer>(states);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curHp = is.popInteger();
			maxHp = is.popInteger();
			buffs = is.popIntegerIntegerTreeMap();
			armorWeak = is.popInteger();
			states = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curHp);
			os.pushInteger(maxHp);
			os.pushIntegerIntegerMap(buffs);
			os.pushInteger(armorWeak);
			os.pushIntegerSet(states);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			curHp = is.popInteger();
			maxHp = is.popInteger();
			buffs = is.popIntegerIntegerTreeMap();
			armorWeak = is.popInteger();
			states = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(curHp);
			os.pushInteger(maxHp);
			os.pushIntegerIntegerMap(buffs);
			os.pushInteger(armorWeak);
			os.pushIntegerSet(states);
		}

		public int curHp;
		public int maxHp;
		public Map<Integer, Integer> buffs;
		public int armorWeak;
		public Set<Integer> states;
	}

	public static class RoleAppearance implements Stream.IStreamable, Stream.KCloneable<RoleAppearance>, SStream.IStreamable
	{

		public RoleAppearance() { }

		public RoleAppearance(int transfromedWeapon, int weaponForm, int horseShowID, int alterID, 
		                      int socialActionID, List<Integer> memberIDs, int mulRoleType, int wizardPetId)
		{
			this.transfromedWeapon = transfromedWeapon;
			this.weaponForm = weaponForm;
			this.horseShowID = horseShowID;
			this.alterID = alterID;
			this.socialActionID = socialActionID;
			this.memberIDs = memberIDs;
			this.mulRoleType = mulRoleType;
			this.wizardPetId = wizardPetId;
		}

		public RoleAppearance ksClone()
		{
			return new RoleAppearance(transfromedWeapon, weaponForm, horseShowID, alterID, 
			                          socialActionID, memberIDs, mulRoleType, wizardPetId);
		}

		@Override
		public RoleAppearance kdClone()
		{
			RoleAppearance _kio_clobj = ksClone();
			_kio_clobj.memberIDs = new ArrayList<Integer>(memberIDs);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			transfromedWeapon = is.popInteger();
			weaponForm = is.popInteger();
			horseShowID = is.popInteger();
			alterID = is.popInteger();
			socialActionID = is.popInteger();
			memberIDs = is.popIntegerList();
			mulRoleType = is.popInteger();
			wizardPetId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(transfromedWeapon);
			os.pushInteger(weaponForm);
			os.pushInteger(horseShowID);
			os.pushInteger(alterID);
			os.pushInteger(socialActionID);
			os.pushIntegerList(memberIDs);
			os.pushInteger(mulRoleType);
			os.pushInteger(wizardPetId);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			transfromedWeapon = is.popInteger();
			weaponForm = is.popInteger();
			horseShowID = is.popInteger();
			alterID = is.popInteger();
			socialActionID = is.popInteger();
			memberIDs = is.popIntegerList();
			mulRoleType = is.popInteger();
			wizardPetId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(transfromedWeapon);
			os.pushInteger(weaponForm);
			os.pushInteger(horseShowID);
			os.pushInteger(alterID);
			os.pushInteger(socialActionID);
			os.pushIntegerList(memberIDs);
			os.pushInteger(mulRoleType);
			os.pushInteger(wizardPetId);
		}

		public int transfromedWeapon;
		public int weaponForm;
		public int horseShowID;
		public int alterID;
		public int socialActionID;
		public List<Integer> memberIDs;
		public int mulRoleType;
		public int wizardPetId;
	}

	public static class RoleQueryDetail implements Stream.IStreamable, Stream.KCloneable<RoleQueryDetail>, SStream.IStreamable
	{

		public RoleQueryDetail() { }

		public RoleQueryDetail(RoleDetail detail, Map<Integer, RoleDetail> members)
		{
			this.detail = detail;
			this.members = members;
		}

		public RoleQueryDetail ksClone()
		{
			return new RoleQueryDetail(detail, members);
		}

		@Override
		public RoleQueryDetail kdClone()
		{
			RoleQueryDetail _kio_clobj = ksClone();
			_kio_clobj.detail = Stream.clone(detail);
			_kio_clobj.members = Stream.clone(members);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( detail == null )
				detail = new RoleDetail();
			is.pop(detail);
			members = is.popIntegerTreeMap(RoleDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(detail);
			os.pushIntegerMap(members);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			detail = is.pop(RoleDetail.class);
			members = is.popIntegerTreeMap(RoleDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(detail);
			os.pushIntegerMap(members);
		}

		public RoleDetail detail;
		public Map<Integer, RoleDetail> members;
	}

	public static class RoleDetail implements Stream.IStreamable, Stream.KCloneable<RoleDetail>, SStream.IStreamable
	{

		public RoleDetail() { }

		public RoleDetail(RoleOverview overview, RoleModel model, RoleTitle title, FightState state, 
		                  RoleAppearance appearance)
		{
			this.overview = overview;
			this.model = model;
			this.title = title;
			this.state = state;
			this.appearance = appearance;
		}

		public RoleDetail ksClone()
		{
			return new RoleDetail(overview, model, title, state, 
			                      appearance);
		}

		@Override
		public RoleDetail kdClone()
		{
			RoleDetail _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			_kio_clobj.model = Stream.clone(model);
			_kio_clobj.title = Stream.clone(title);
			_kio_clobj.state = Stream.clone(state);
			_kio_clobj.appearance = Stream.clone(appearance);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
			if( model == null )
				model = new RoleModel();
			is.pop(model);
			if( title == null )
				title = new RoleTitle();
			is.pop(title);
			if( state == null )
				state = new FightState();
			is.pop(state);
			if( appearance == null )
				appearance = new RoleAppearance();
			is.pop(appearance);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.push(model);
			os.push(title);
			os.push(state);
			os.push(appearance);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overview = is.pop(RoleOverview.class);
			model = is.pop(RoleModel.class);
			title = is.pop(RoleTitle.class);
			state = is.pop(FightState.class);
			appearance = is.pop(RoleAppearance.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overview);
			os.push(model);
			os.push(title);
			os.push(state);
			os.push(appearance);
		}

		public RoleOverview overview;
		public RoleModel model;
		public RoleTitle title;
		public FightState state;
		public RoleAppearance appearance;
	}

	public static class RolePowerDetail implements Stream.IStreamable, Stream.KCloneable<RolePowerDetail>, SStream.IStreamable
	{

		public RolePowerDetail() { }

		public RolePowerDetail(int equipPower, int skillPower, int weaponPower, int horsePower, 
		                       int sectAurasPower, int clanOwnerPower)
		{
			this.equipPower = equipPower;
			this.skillPower = skillPower;
			this.weaponPower = weaponPower;
			this.horsePower = horsePower;
			this.sectAurasPower = sectAurasPower;
			this.clanOwnerPower = clanOwnerPower;
		}

		public RolePowerDetail ksClone()
		{
			return new RolePowerDetail(equipPower, skillPower, weaponPower, horsePower, 
			                           sectAurasPower, clanOwnerPower);
		}

		@Override
		public RolePowerDetail kdClone()
		{
			RolePowerDetail _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			equipPower = is.popInteger();
			skillPower = is.popInteger();
			weaponPower = is.popInteger();
			horsePower = is.popInteger();
			sectAurasPower = is.popInteger();
			clanOwnerPower = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(equipPower);
			os.pushInteger(skillPower);
			os.pushInteger(weaponPower);
			os.pushInteger(horsePower);
			os.pushInteger(sectAurasPower);
			os.pushInteger(clanOwnerPower);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			equipPower = is.popInteger();
			skillPower = is.popInteger();
			weaponPower = is.popInteger();
			horsePower = is.popInteger();
			sectAurasPower = is.popInteger();
			clanOwnerPower = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(equipPower);
			os.pushInteger(skillPower);
			os.pushInteger(weaponPower);
			os.pushInteger(horsePower);
			os.pushInteger(sectAurasPower);
			os.pushInteger(clanOwnerPower);
		}

		public int equipPower;
		public int skillPower;
		public int weaponPower;
		public int horsePower;
		public int sectAurasPower;
		public int clanOwnerPower;
	}

	public static class RoleAchievement implements Stream.IStreamable, Stream.KCloneable<RoleAchievement>, SStream.IStreamable
	{

		public RoleAchievement() { }

		public RoleAchievement(int weaponsActived, int petsActived, int meadlsCollected, int skillLevels, 
		                       int bookLevels, int uskillLevels)
		{
			this.weaponsActived = weaponsActived;
			this.petsActived = petsActived;
			this.meadlsCollected = meadlsCollected;
			this.skillLevels = skillLevels;
			this.bookLevels = bookLevels;
			this.uskillLevels = uskillLevels;
		}

		public RoleAchievement ksClone()
		{
			return new RoleAchievement(weaponsActived, petsActived, meadlsCollected, skillLevels, 
			                           bookLevels, uskillLevels);
		}

		@Override
		public RoleAchievement kdClone()
		{
			RoleAchievement _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponsActived = is.popInteger();
			petsActived = is.popInteger();
			meadlsCollected = is.popInteger();
			skillLevels = is.popInteger();
			bookLevels = is.popInteger();
			uskillLevels = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponsActived);
			os.pushInteger(petsActived);
			os.pushInteger(meadlsCollected);
			os.pushInteger(skillLevels);
			os.pushInteger(bookLevels);
			os.pushInteger(uskillLevels);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			weaponsActived = is.popInteger();
			petsActived = is.popInteger();
			meadlsCollected = is.popInteger();
			skillLevels = is.popInteger();
			bookLevels = is.popInteger();
			uskillLevels = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(weaponsActived);
			os.pushInteger(petsActived);
			os.pushInteger(meadlsCollected);
			os.pushInteger(skillLevels);
			os.pushInteger(bookLevels);
			os.pushInteger(uskillLevels);
		}

		public int weaponsActived;
		public int petsActived;
		public int meadlsCollected;
		public int skillLevels;
		public int bookLevels;
		public int uskillLevels;
	}

	public static class RoleWearDetail implements Stream.IStreamable, Stream.KCloneable<RoleWearDetail>, SStream.IStreamable
	{

		public RoleWearDetail() { }

		public RoleWearDetail(int face, int hair, Map<Integer, Integer> curFashions, Map<Integer, Integer> showFashionTypes, 
		                      DBSealData seal, Map<Integer, DBWearEquip> wearEquips, List<DBEquipPart> wearParts, ArmorBrief armor, 
		                      HeirloomBrief heirloom)
		{
			this.face = face;
			this.hair = hair;
			this.curFashions = curFashions;
			this.showFashionTypes = showFashionTypes;
			this.seal = seal;
			this.wearEquips = wearEquips;
			this.wearParts = wearParts;
			this.armor = armor;
			this.heirloom = heirloom;
		}

		public RoleWearDetail ksClone()
		{
			return new RoleWearDetail(face, hair, curFashions, showFashionTypes, 
			                          seal, wearEquips, wearParts, armor, 
			                          heirloom);
		}

		@Override
		public RoleWearDetail kdClone()
		{
			RoleWearDetail _kio_clobj = ksClone();
			_kio_clobj.curFashions = new TreeMap<Integer, Integer>(curFashions);
			_kio_clobj.showFashionTypes = new TreeMap<Integer, Integer>(showFashionTypes);
			_kio_clobj.seal = Stream.clone(seal);
			_kio_clobj.wearEquips = Stream.clone(wearEquips);
			_kio_clobj.wearParts = Stream.clone(wearParts);
			_kio_clobj.armor = Stream.clone(armor);
			_kio_clobj.heirloom = Stream.clone(heirloom);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			face = is.popInteger();
			hair = is.popInteger();
			curFashions = is.popIntegerIntegerTreeMap();
			showFashionTypes = is.popIntegerIntegerTreeMap();
			if( seal == null )
				seal = new DBSealData();
			is.pop(seal);
			wearEquips = is.popIntegerTreeMap(DBWearEquip.class);
			wearParts = is.popList(DBEquipPart.class);
			if( armor == null )
				armor = new ArmorBrief();
			is.pop(armor);
			if( heirloom == null )
				heirloom = new HeirloomBrief();
			is.pop(heirloom);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(face);
			os.pushInteger(hair);
			os.pushIntegerIntegerMap(curFashions);
			os.pushIntegerIntegerMap(showFashionTypes);
			os.push(seal);
			os.pushIntegerMap(wearEquips);
			os.pushList(wearParts);
			os.push(armor);
			os.push(heirloom);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			face = is.popInteger();
			hair = is.popInteger();
			curFashions = is.popIntegerIntegerTreeMap();
			showFashionTypes = is.popIntegerIntegerTreeMap();
			seal = is.pop(DBSealData.class);
			wearEquips = is.popIntegerTreeMap(DBWearEquip.class);
			wearParts = is.popList(DBEquipPart.class);
			armor = is.pop(ArmorBrief.class);
			heirloom = is.pop(HeirloomBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(face);
			os.pushInteger(hair);
			os.pushIntegerIntegerMap(curFashions);
			os.pushIntegerIntegerMap(showFashionTypes);
			os.push(seal);
			os.pushIntegerMap(wearEquips);
			os.pushList(wearParts);
			os.push(armor);
			os.push(heirloom);
		}

		public int face;
		public int hair;
		public Map<Integer, Integer> curFashions;
		public Map<Integer, Integer> showFashionTypes;
		public DBSealData seal;
		public Map<Integer, DBWearEquip> wearEquips;
		public List<DBEquipPart> wearParts;
		public ArmorBrief armor;
		public HeirloomBrief heirloom;
	}

	public static class RoleFeature implements Stream.IStreamable, Stream.KCloneable<RoleFeature>, SStream.IStreamable
	{

		public RoleFeature() { }

		public RoleFeature(RoleOverview overview, RoleWearDetail wear, Map<Integer, Integer> properties, RolePowerDetail powerDetail, 
		                   RoleAchievement achievement, RoleRelationship relationship)
		{
			this.overview = overview;
			this.wear = wear;
			this.properties = properties;
			this.powerDetail = powerDetail;
			this.achievement = achievement;
			this.relationship = relationship;
		}

		public RoleFeature ksClone()
		{
			return new RoleFeature(overview, wear, properties, powerDetail, 
			                       achievement, relationship);
		}

		@Override
		public RoleFeature kdClone()
		{
			RoleFeature _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			_kio_clobj.wear = Stream.clone(wear);
			_kio_clobj.properties = new TreeMap<Integer, Integer>(properties);
			_kio_clobj.powerDetail = Stream.clone(powerDetail);
			_kio_clobj.achievement = Stream.clone(achievement);
			_kio_clobj.relationship = Stream.clone(relationship);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
			if( wear == null )
				wear = new RoleWearDetail();
			is.pop(wear);
			properties = is.popIntegerIntegerTreeMap();
			if( powerDetail == null )
				powerDetail = new RolePowerDetail();
			is.pop(powerDetail);
			if( achievement == null )
				achievement = new RoleAchievement();
			is.pop(achievement);
			if( relationship == null )
				relationship = new RoleRelationship();
			is.pop(relationship);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.push(wear);
			os.pushIntegerIntegerMap(properties);
			os.push(powerDetail);
			os.push(achievement);
			os.push(relationship);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overview = is.pop(RoleOverview.class);
			wear = is.pop(RoleWearDetail.class);
			properties = is.popIntegerIntegerTreeMap();
			powerDetail = is.pop(RolePowerDetail.class);
			achievement = is.pop(RoleAchievement.class);
			relationship = is.pop(RoleRelationship.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overview);
			os.push(wear);
			os.pushIntegerIntegerMap(properties);
			os.push(powerDetail);
			os.push(achievement);
			os.push(relationship);
		}

		public RoleOverview overview;
		public RoleWearDetail wear;
		public Map<Integer, Integer> properties;
		public RolePowerDetail powerDetail;
		public RoleAchievement achievement;
		public RoleRelationship relationship;
	}

	public static class RoleRelationship implements Stream.IStreamable, Stream.KCloneable<RoleRelationship>, SStream.IStreamable
	{

		public RoleRelationship() { }

		public RoleRelationship(String sectName, String partnerName)
		{
			this.sectName = sectName;
			this.partnerName = partnerName;
		}

		public RoleRelationship ksClone()
		{
			return new RoleRelationship(sectName, partnerName);
		}

		@Override
		public RoleRelationship kdClone()
		{
			RoleRelationship _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectName = is.popString();
			partnerName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(sectName);
			os.pushString(partnerName);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			sectName = is.popString();
			partnerName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(sectName);
			os.pushString(partnerName);
		}

		public String sectName;
		public String partnerName;
	}

	public static class FightPet implements Stream.IStreamable, Stream.KCloneable<FightPet>, SStream.IStreamable
	{

		public FightPet() { }

		public FightPet(int id, int level, int star, Map<Integer, Integer> breakSkills, 
		                int coPracticeLvl, int fightPower, List<Integer> skill, List<PetSpirit> curSpirits)
		{
			this.id = id;
			this.level = level;
			this.star = star;
			this.breakSkills = breakSkills;
			this.coPracticeLvl = coPracticeLvl;
			this.fightPower = fightPower;
			this.skill = skill;
			this.curSpirits = curSpirits;
		}

		public FightPet ksClone()
		{
			return new FightPet(id, level, star, breakSkills, 
			                    coPracticeLvl, fightPower, skill, curSpirits);
		}

		@Override
		public FightPet kdClone()
		{
			FightPet _kio_clobj = ksClone();
			_kio_clobj.breakSkills = new TreeMap<Integer, Integer>(breakSkills);
			_kio_clobj.skill = new ArrayList<Integer>(skill);
			_kio_clobj.curSpirits = Stream.clone(curSpirits);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			star = is.popInteger();
			breakSkills = is.popIntegerIntegerTreeMap();
			coPracticeLvl = is.popInteger();
			fightPower = is.popInteger();
			skill = is.popIntegerList();
			curSpirits = is.popList(PetSpirit.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(star);
			os.pushIntegerIntegerMap(breakSkills);
			os.pushInteger(coPracticeLvl);
			os.pushInteger(fightPower);
			os.pushIntegerList(skill);
			os.pushList(curSpirits);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			star = is.popInteger();
			breakSkills = is.popIntegerIntegerTreeMap();
			coPracticeLvl = is.popInteger();
			fightPower = is.popInteger();
			skill = is.popIntegerList();
			curSpirits = is.popList(PetSpirit.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(star);
			os.pushIntegerIntegerMap(breakSkills);
			os.pushInteger(coPracticeLvl);
			os.pushInteger(fightPower);
			os.pushIntegerList(skill);
			os.pushList(curSpirits);
		}

		public int id;
		public int level;
		public int star;
		public Map<Integer, Integer> breakSkills;
		public int coPracticeLvl;
		public int fightPower;
		public List<Integer> skill;
		public List<PetSpirit> curSpirits;
	}

	public static class PetHost implements Stream.IStreamable, Stream.KCloneable<PetHost>, SStream.IStreamable
	{

		public PetHost() { }

		public PetHost(int hostAtkw, int hostDefw, int hostAtkc, int hostDefc, 
		               int hostMasterW, int hostMasterC, int spiritTotalLays, int weaponTotalLays)
		{
			this.hostAtkw = hostAtkw;
			this.hostDefw = hostDefw;
			this.hostAtkc = hostAtkc;
			this.hostDefc = hostDefc;
			this.hostMasterW = hostMasterW;
			this.hostMasterC = hostMasterC;
			this.spiritTotalLays = spiritTotalLays;
			this.weaponTotalLays = weaponTotalLays;
		}

		public PetHost ksClone()
		{
			return new PetHost(hostAtkw, hostDefw, hostAtkc, hostDefc, 
			                   hostMasterW, hostMasterC, spiritTotalLays, weaponTotalLays);
		}

		@Override
		public PetHost kdClone()
		{
			PetHost _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hostAtkw = is.popInteger();
			hostDefw = is.popInteger();
			hostAtkc = is.popInteger();
			hostDefc = is.popInteger();
			hostMasterW = is.popInteger();
			hostMasterC = is.popInteger();
			spiritTotalLays = is.popInteger();
			weaponTotalLays = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hostAtkw);
			os.pushInteger(hostDefw);
			os.pushInteger(hostAtkc);
			os.pushInteger(hostDefc);
			os.pushInteger(hostMasterW);
			os.pushInteger(hostMasterC);
			os.pushInteger(spiritTotalLays);
			os.pushInteger(weaponTotalLays);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			hostAtkw = is.popInteger();
			hostDefw = is.popInteger();
			hostAtkc = is.popInteger();
			hostDefc = is.popInteger();
			hostMasterW = is.popInteger();
			hostMasterC = is.popInteger();
			spiritTotalLays = is.popInteger();
			weaponTotalLays = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(hostAtkw);
			os.pushInteger(hostDefw);
			os.pushInteger(hostAtkc);
			os.pushInteger(hostDefc);
			os.pushInteger(hostMasterW);
			os.pushInteger(hostMasterC);
			os.pushInteger(spiritTotalLays);
			os.pushInteger(weaponTotalLays);
		}

		public int hostAtkw;
		public int hostDefw;
		public int hostAtkc;
		public int hostDefc;
		public int hostMasterW;
		public int hostMasterC;
		public int spiritTotalLays;
		public int weaponTotalLays;
	}

	public static class PetOverview implements Stream.IStreamable, Stream.KCloneable<PetOverview>, SStream.IStreamable
	{

		public PetOverview() { }

		public PetOverview(int id, int level, int star, int fightPower)
		{
			this.id = id;
			this.level = level;
			this.star = star;
			this.fightPower = fightPower;
		}

		public PetOverview ksClone()
		{
			return new PetOverview(id, level, star, fightPower);
		}

		@Override
		public PetOverview kdClone()
		{
			PetOverview _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			star = is.popInteger();
			fightPower = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(star);
			os.pushInteger(fightPower);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			star = is.popInteger();
			fightPower = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(star);
			os.pushInteger(fightPower);
		}

		public int id;
		public int level;
		public int star;
		public int fightPower;
	}

	public static class PetProfile implements Stream.IStreamable, Stream.KCloneable<PetProfile>, SStream.IStreamable
	{

		public PetProfile() { }

		public PetProfile(PetOverview overview, int curHp, int maxHp)
		{
			this.overview = overview;
			this.curHp = curHp;
			this.maxHp = maxHp;
		}

		public PetProfile ksClone()
		{
			return new PetProfile(overview, curHp, maxHp);
		}

		@Override
		public PetProfile kdClone()
		{
			PetProfile _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new PetOverview();
			is.pop(overview);
			curHp = is.popInteger();
			maxHp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.pushInteger(curHp);
			os.pushInteger(maxHp);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overview = is.pop(PetOverview.class);
			curHp = is.popInteger();
			maxHp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overview);
			os.pushInteger(curHp);
			os.pushInteger(maxHp);
		}

		public PetOverview overview;
		public int curHp;
		public int maxHp;
	}

	public static class PetDetail implements Stream.IStreamable, Stream.KCloneable<PetDetail>, SStream.IStreamable
	{

		public PetDetail() { }

		public PetDetail(int ownerID, PetOverview profile, FightState state)
		{
			this.ownerID = ownerID;
			this.profile = profile;
			this.state = state;
		}

		public PetDetail ksClone()
		{
			return new PetDetail(ownerID, profile, state);
		}

		@Override
		public PetDetail kdClone()
		{
			PetDetail _kio_clobj = ksClone();
			_kio_clobj.profile = Stream.clone(profile);
			_kio_clobj.state = Stream.clone(state);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ownerID = is.popInteger();
			if( profile == null )
				profile = new PetOverview();
			is.pop(profile);
			if( state == null )
				state = new FightState();
			is.pop(state);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ownerID);
			os.push(profile);
			os.push(state);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			ownerID = is.popInteger();
			profile = is.pop(PetOverview.class);
			state = is.pop(FightState.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(ownerID);
			os.push(profile);
			os.push(state);
		}

		public int ownerID;
		public PetOverview profile;
		public FightState state;
	}

	public static class WeaponOverview implements Stream.IStreamable, Stream.KCloneable<WeaponOverview>, SStream.IStreamable
	{

		public WeaponOverview() { }

		public WeaponOverview(int id, int level, int star, int fightPower)
		{
			this.id = id;
			this.level = level;
			this.star = star;
			this.fightPower = fightPower;
		}

		public WeaponOverview ksClone()
		{
			return new WeaponOverview(id, level, star, fightPower);
		}

		@Override
		public WeaponOverview kdClone()
		{
			WeaponOverview _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			star = is.popInteger();
			fightPower = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(star);
			os.pushInteger(fightPower);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			star = is.popInteger();
			fightPower = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(star);
			os.pushInteger(fightPower);
		}

		public int id;
		public int level;
		public int star;
		public int fightPower;
	}

	public static class HorseOverview implements Stream.IStreamable, Stream.KCloneable<HorseOverview>, SStream.IStreamable
	{

		public HorseOverview() { }

		public HorseOverview(int id, int level, int star, int fightPower)
		{
			this.id = id;
			this.level = level;
			this.star = star;
			this.fightPower = fightPower;
		}

		public HorseOverview ksClone()
		{
			return new HorseOverview(id, level, star, fightPower);
		}

		@Override
		public HorseOverview kdClone()
		{
			HorseOverview _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			star = is.popInteger();
			fightPower = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(star);
			os.pushInteger(fightPower);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
			star = is.popInteger();
			fightPower = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
			os.pushInteger(star);
			os.pushInteger(fightPower);
		}

		public int id;
		public int level;
		public int star;
		public int fightPower;
	}

	public static class BWArenaArrayOverview implements Stream.IStreamable, Stream.KCloneable<BWArenaArrayOverview>, SStream.IStreamable
	{

		public BWArenaArrayOverview() { }

		public BWArenaArrayOverview(BattleArrayOverview array, int score, int win)
		{
			this.array = array;
			this.score = score;
			this.win = win;
		}

		public BWArenaArrayOverview ksClone()
		{
			return new BWArenaArrayOverview(array, score, win);
		}

		@Override
		public BWArenaArrayOverview kdClone()
		{
			BWArenaArrayOverview _kio_clobj = ksClone();
			_kio_clobj.array = Stream.clone(array);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( array == null )
				array = new BattleArrayOverview();
			is.pop(array);
			score = is.popInteger();
			win = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(array);
			os.pushInteger(score);
			os.pushInteger(win);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			array = is.pop(BattleArrayOverview.class);
			score = is.popInteger();
			win = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(array);
			os.pushInteger(score);
			os.pushInteger(win);
		}

		public BattleArrayOverview array;
		public int score;
		public int win;
	}

	public static class BattleEnemyOverview implements Stream.IStreamable, Stream.KCloneable<BattleEnemyOverview>, SStream.IStreamable
	{

		public BattleEnemyOverview() { }

		public BattleEnemyOverview(RoleSocial roleSocial, List<PetOverview> pets, byte hideDefence)
		{
			this.roleSocial = roleSocial;
			this.pets = pets;
			this.hideDefence = hideDefence;
		}

		public BattleEnemyOverview ksClone()
		{
			return new BattleEnemyOverview(roleSocial, pets, hideDefence);
		}

		@Override
		public BattleEnemyOverview kdClone()
		{
			BattleEnemyOverview _kio_clobj = ksClone();
			_kio_clobj.roleSocial = Stream.clone(roleSocial);
			_kio_clobj.pets = Stream.clone(pets);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( roleSocial == null )
				roleSocial = new RoleSocial();
			is.pop(roleSocial);
			pets = is.popList(PetOverview.class);
			hideDefence = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(roleSocial);
			os.pushList(pets);
			os.pushByte(hideDefence);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleSocial = is.pop(RoleSocial.class);
			pets = is.popList(PetOverview.class);
			hideDefence = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(roleSocial);
			os.pushList(pets);
			os.pushByte(hideDefence);
		}

		public RoleSocial roleSocial;
		public List<PetOverview> pets;
		public byte hideDefence;
	}

	public static class BattleArrayOverview implements Stream.IStreamable, Stream.KCloneable<BattleArrayOverview>, SStream.IStreamable
	{

		public BattleArrayOverview() { }

		public BattleArrayOverview(RoleSocial roleSocial, Map<Integer, PetOverview> pets)
		{
			this.roleSocial = roleSocial;
			this.pets = pets;
		}

		public BattleArrayOverview ksClone()
		{
			return new BattleArrayOverview(roleSocial, pets);
		}

		@Override
		public BattleArrayOverview kdClone()
		{
			BattleArrayOverview _kio_clobj = ksClone();
			_kio_clobj.roleSocial = Stream.clone(roleSocial);
			_kio_clobj.pets = Stream.clone(pets);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( roleSocial == null )
				roleSocial = new RoleSocial();
			is.pop(roleSocial);
			pets = is.popIntegerTreeMap(PetOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(roleSocial);
			os.pushIntegerMap(pets);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleSocial = is.pop(RoleSocial.class);
			pets = is.popIntegerTreeMap(PetOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(roleSocial);
			os.pushIntegerMap(pets);
		}

		public RoleSocial roleSocial;
		public Map<Integer, PetOverview> pets;
	}

	public static class BattleArrayProfile implements Stream.IStreamable, Stream.KCloneable<BattleArrayProfile>, SStream.IStreamable
	{

		public BattleArrayProfile() { }

		public BattleArrayProfile(RoleProfile role, Map<Integer, PetProfile> pets)
		{
			this.role = role;
			this.pets = pets;
		}

		public BattleArrayProfile ksClone()
		{
			return new BattleArrayProfile(role, pets);
		}

		@Override
		public BattleArrayProfile kdClone()
		{
			BattleArrayProfile _kio_clobj = ksClone();
			_kio_clobj.role = Stream.clone(role);
			_kio_clobj.pets = Stream.clone(pets);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( role == null )
				role = new RoleProfile();
			is.pop(role);
			pets = is.popIntegerTreeMap(PetProfile.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(role);
			os.pushIntegerMap(pets);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			role = is.pop(RoleProfile.class);
			pets = is.popIntegerTreeMap(PetProfile.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(role);
			os.pushIntegerMap(pets);
		}

		public RoleProfile role;
		public Map<Integer, PetProfile> pets;
	}

	public static class Hp implements Stream.IStreamable, Stream.KCloneable<Hp>, SStream.IStreamable
	{

		public Hp() { }

		public Hp(int curValue, int maxValue)
		{
			this.curValue = curValue;
			this.maxValue = maxValue;
		}

		public Hp ksClone()
		{
			return new Hp(curValue, maxValue);
		}

		@Override
		public Hp kdClone()
		{
			Hp _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curValue = is.popInteger();
			maxValue = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curValue);
			os.pushInteger(maxValue);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			curValue = is.popInteger();
			maxValue = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(curValue);
			os.pushInteger(maxValue);
		}

		public int curValue;
		public int maxValue;
	}

	public static class BattleArrayHp implements Stream.IStreamable, Stream.KCloneable<BattleArrayHp>, SStream.IStreamable
	{

		public BattleArrayHp() { }

		public BattleArrayHp(int roleId, Hp roleHp, Map<Integer, Hp> petsHp)
		{
			this.roleId = roleId;
			this.roleHp = roleHp;
			this.petsHp = petsHp;
		}

		public BattleArrayHp ksClone()
		{
			return new BattleArrayHp(roleId, roleHp, petsHp);
		}

		@Override
		public BattleArrayHp kdClone()
		{
			BattleArrayHp _kio_clobj = ksClone();
			_kio_clobj.roleHp = Stream.clone(roleHp);
			_kio_clobj.petsHp = Stream.clone(petsHp);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			if( roleHp == null )
				roleHp = new Hp();
			is.pop(roleHp);
			petsHp = is.popIntegerTreeMap(Hp.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.push(roleHp);
			os.pushIntegerMap(petsHp);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleId = is.popInteger();
			roleHp = is.pop(Hp.class);
			petsHp = is.popIntegerTreeMap(Hp.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(roleId);
			os.push(roleHp);
			os.pushIntegerMap(petsHp);
		}

		public int roleId;
		public Hp roleHp;
		public Map<Integer, Hp> petsHp;
	}

	public static class SuperArenaEnemy implements Stream.IStreamable, Stream.KCloneable<SuperArenaEnemy>, SStream.IStreamable
	{

		public SuperArenaEnemy() { }

		public SuperArenaEnemy(int id, String name, int headIcon, int bwType, 
		                       int hp, int maxHP, int lives)
		{
			this.id = id;
			this.name = name;
			this.headIcon = headIcon;
			this.bwType = bwType;
			this.hp = hp;
			this.maxHP = maxHP;
			this.lives = lives;
		}

		public SuperArenaEnemy ksClone()
		{
			return new SuperArenaEnemy(id, name, headIcon, bwType, 
			                           hp, maxHP, lives);
		}

		@Override
		public SuperArenaEnemy kdClone()
		{
			SuperArenaEnemy _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			headIcon = is.popInteger();
			bwType = is.popInteger();
			hp = is.popInteger();
			maxHP = is.popInteger();
			lives = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(headIcon);
			os.pushInteger(bwType);
			os.pushInteger(hp);
			os.pushInteger(maxHP);
			os.pushInteger(lives);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			headIcon = is.popInteger();
			bwType = is.popInteger();
			hp = is.popInteger();
			maxHP = is.popInteger();
			lives = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(headIcon);
			os.pushInteger(bwType);
			os.pushInteger(hp);
			os.pushInteger(maxHP);
			os.pushInteger(lives);
		}

		public int id;
		public String name;
		public int headIcon;
		public int bwType;
		public int hp;
		public int maxHP;
		public int lives;
	}

	public static class SuperArenaJoin implements Stream.IStreamable, Stream.KCloneable<SuperArenaJoin>
	{

		public SuperArenaJoin() { }

		public SuperArenaJoin(RoleOverview overview, int weekHonor, int historyHonor, int rankClearTime, 
		                      int elo)
		{
			this.overview = overview;
			this.weekHonor = weekHonor;
			this.historyHonor = historyHonor;
			this.rankClearTime = rankClearTime;
			this.elo = elo;
		}

		public SuperArenaJoin ksClone()
		{
			return new SuperArenaJoin(overview, weekHonor, historyHonor, rankClearTime, 
			                          elo);
		}

		@Override
		public SuperArenaJoin kdClone()
		{
			SuperArenaJoin _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
			weekHonor = is.popInteger();
			historyHonor = is.popInteger();
			rankClearTime = is.popInteger();
			elo = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.pushInteger(weekHonor);
			os.pushInteger(historyHonor);
			os.pushInteger(rankClearTime);
			os.pushInteger(elo);
		}

		public RoleOverview overview;
		public int weekHonor;
		public int historyHonor;
		public int rankClearTime;
		public int elo;
	}

	public static class MapRewards implements Stream.IStreamable, Stream.KCloneable<MapRewards>, SStream.IStreamable
	{

		public MapRewards() { }

		public MapRewards(int exp, int coin, List<DummyGoods> normalRewards, List<DummyGoods> cardRewards)
		{
			this.exp = exp;
			this.coin = coin;
			this.normalRewards = normalRewards;
			this.cardRewards = cardRewards;
		}

		public MapRewards ksClone()
		{
			return new MapRewards(exp, coin, normalRewards, cardRewards);
		}

		@Override
		public MapRewards kdClone()
		{
			MapRewards _kio_clobj = ksClone();
			_kio_clobj.normalRewards = Stream.clone(normalRewards);
			_kio_clobj.cardRewards = Stream.clone(cardRewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			exp = is.popInteger();
			coin = is.popInteger();
			normalRewards = is.popList(DummyGoods.class);
			cardRewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(exp);
			os.pushInteger(coin);
			os.pushList(normalRewards);
			os.pushList(cardRewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			exp = is.popInteger();
			coin = is.popInteger();
			normalRewards = is.popList(DummyGoods.class);
			cardRewards = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(exp);
			os.pushInteger(coin);
			os.pushList(normalRewards);
			os.pushList(cardRewards);
		}

		public int exp;
		public int coin;
		public List<DummyGoods> normalRewards;
		public List<DummyGoods> cardRewards;
	}

	public static class MapSummary implements Stream.IStreamable, Stream.KCloneable<MapSummary>, SStream.IStreamable
	{

		public MapSummary() { }

		public MapSummary(Map<Integer, Integer> monsters, List<MapRewards> rewards)
		{
			this.monsters = monsters;
			this.rewards = rewards;
		}

		public MapSummary ksClone()
		{
			return new MapSummary(monsters, rewards);
		}

		@Override
		public MapSummary kdClone()
		{
			MapSummary _kio_clobj = ksClone();
			_kio_clobj.monsters = new TreeMap<Integer, Integer>(monsters);
			_kio_clobj.rewards = Stream.clone(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			monsters = is.popIntegerIntegerTreeMap();
			rewards = is.popList(MapRewards.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(monsters);
			os.pushList(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			monsters = is.popIntegerIntegerTreeMap();
			rewards = is.popList(MapRewards.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(monsters);
			os.pushList(rewards);
		}

		public Map<Integer, Integer> monsters;
		public List<MapRewards> rewards;
	}

	public static class DropInfo implements Stream.IStreamable, Stream.KCloneable<DropInfo>, SStream.IStreamable
	{

		public DropInfo() { }

		public DropInfo(int dropID, int itemID, int itemCount)
		{
			this.dropID = dropID;
			this.itemID = itemID;
			this.itemCount = itemCount;
		}

		public DropInfo ksClone()
		{
			return new DropInfo(dropID, itemID, itemCount);
		}

		@Override
		public DropInfo kdClone()
		{
			DropInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dropID = is.popInteger();
			itemID = is.popInteger();
			itemCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dropID);
			os.pushInteger(itemID);
			os.pushInteger(itemCount);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dropID = is.popInteger();
			itemID = is.popInteger();
			itemCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dropID);
			os.pushInteger(itemID);
			os.pushInteger(itemCount);
		}

		public int dropID;
		public int itemID;
		public int itemCount;
	}

	public static class DropDetail implements Stream.IStreamable, Stream.KCloneable<DropDetail>, SStream.IStreamable
	{

		public DropDetail() { }

		public DropDetail(DropInfo drop, Vector3 position)
		{
			this.drop = drop;
			this.position = position;
		}

		public DropDetail ksClone()
		{
			return new DropDetail(drop, position);
		}

		@Override
		public DropDetail kdClone()
		{
			DropDetail _kio_clobj = ksClone();
			_kio_clobj.drop = Stream.clone(drop);
			_kio_clobj.position = Stream.clone(position);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( drop == null )
				drop = new DropInfo();
			is.pop(drop);
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(drop);
			os.push(position);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			drop = is.pop(DropInfo.class);
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(drop);
			os.push(position);
		}

		public DropInfo drop;
		public Vector3 position;
	}

	public static class ShopInfo implements Stream.IStreamable, Stream.KCloneable<ShopInfo>, SStream.IStreamable
	{

		public ShopInfo() { }

		public ShopInfo(int refreshTimes, List<DBShopGoods> goods)
		{
			this.refreshTimes = refreshTimes;
			this.goods = goods;
		}

		public ShopInfo ksClone()
		{
			return new ShopInfo(refreshTimes, goods);
		}

		@Override
		public ShopInfo kdClone()
		{
			ShopInfo _kio_clobj = ksClone();
			_kio_clobj.goods = Stream.clone(goods);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			refreshTimes = is.popInteger();
			goods = is.popList(DBShopGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(refreshTimes);
			os.pushList(goods);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			refreshTimes = is.popInteger();
			goods = is.popList(DBShopGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(refreshTimes);
			os.pushList(goods);
		}

		public int refreshTimes;
		public List<DBShopGoods> goods;
	}

	public static class GambleShopInfo implements Stream.IStreamable, Stream.KCloneable<GambleShopInfo>, SStream.IStreamable
	{

		public GambleShopInfo() { }

		public GambleShopInfo(int refreshTimes, List<DBGambleShopGoods> goods)
		{
			this.refreshTimes = refreshTimes;
			this.goods = goods;
		}

		public GambleShopInfo ksClone()
		{
			return new GambleShopInfo(refreshTimes, goods);
		}

		@Override
		public GambleShopInfo kdClone()
		{
			GambleShopInfo _kio_clobj = ksClone();
			_kio_clobj.goods = Stream.clone(goods);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			refreshTimes = is.popInteger();
			goods = is.popList(DBGambleShopGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(refreshTimes);
			os.pushList(goods);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			refreshTimes = is.popInteger();
			goods = is.popList(DBGambleShopGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(refreshTimes);
			os.pushList(goods);
		}

		public int refreshTimes;
		public List<DBGambleShopGoods> goods;
	}

	public static class SendFlowersInfo implements Stream.IStreamable, Stream.KCloneable<SendFlowersInfo>, SStream.IStreamable
	{

		public SendFlowersInfo() { }

		public SendFlowersInfo(int roleId, String roleName, int count)
		{
			this.roleId = roleId;
			this.roleName = roleName;
			this.count = count;
		}

		public SendFlowersInfo ksClone()
		{
			return new SendFlowersInfo(roleId, roleName, count);
		}

		@Override
		public SendFlowersInfo kdClone()
		{
			SendFlowersInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
			os.pushInteger(count);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
			os.pushInteger(count);
		}

		public int roleId;
		public String roleName;
		public int count;
	}

	public static class FlauntDiySkillInfo implements Stream.IStreamable, Stream.KCloneable<FlauntDiySkillInfo>, SStream.IStreamable
	{

		public FlauntDiySkillInfo() { }

		public FlauntDiySkillInfo(DBDiySkill diyskill, List<Integer> icons)
		{
			this.diyskill = diyskill;
			this.icons = icons;
		}

		public FlauntDiySkillInfo ksClone()
		{
			return new FlauntDiySkillInfo(diyskill, icons);
		}

		@Override
		public FlauntDiySkillInfo kdClone()
		{
			FlauntDiySkillInfo _kio_clobj = ksClone();
			_kio_clobj.diyskill = Stream.clone(diyskill);
			_kio_clobj.icons = new ArrayList<Integer>(icons);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( diyskill == null )
				diyskill = new DBDiySkill();
			is.pop(diyskill);
			icons = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(diyskill);
			os.pushIntegerList(icons);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			diyskill = is.pop(DBDiySkill.class);
			icons = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(diyskill);
			os.pushIntegerList(icons);
		}

		public DBDiySkill diyskill;
		public List<Integer> icons;
	}

	public static class MessageContent implements Stream.IStreamable, Stream.KCloneable<MessageContent>, SStream.IStreamable
	{

		public static final byte MsgTypeNormal = 0;
		public static final byte MsgTypeDiySkill = 1;
		public static final byte MsgTypeSendFlowers = 2;
		public static final byte MsgTypeMRoomInvite = 3;
		public static final byte MsgTypeSectInvite = 4;
		public static final byte MsgTypeJusticeInvite = 5;

		public MessageContent() { }

		public MessageContent(int type, String msg, DBEquip refEquip, FlauntDiySkillInfo refFlauntDiySkill, 
		                      SendFlowersInfo refSendFlowers)
		{
			this.type = type;
			this.msg = msg;
			this.refEquip = refEquip;
			this.refFlauntDiySkill = refFlauntDiySkill;
			this.refSendFlowers = refSendFlowers;
		}

		public MessageContent ksClone()
		{
			return new MessageContent(type, msg, refEquip, refFlauntDiySkill, 
			                          refSendFlowers);
		}

		@Override
		public MessageContent kdClone()
		{
			MessageContent _kio_clobj = ksClone();
			_kio_clobj.refEquip = Stream.cloneNullable(refEquip);
			_kio_clobj.refFlauntDiySkill = Stream.cloneNullable(refFlauntDiySkill);
			_kio_clobj.refSendFlowers = Stream.cloneNullable(refSendFlowers);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			msg = is.popString();
			refEquip = is.popNullable(DBEquip.class);
			refFlauntDiySkill = is.popNullable(FlauntDiySkillInfo.class);
			refSendFlowers = is.popNullable(SendFlowersInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushString(msg);
			os.pushNullable(refEquip);
			os.pushNullable(refFlauntDiySkill);
			os.pushNullable(refSendFlowers);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			type = is.popInteger();
			msg = is.popString();
			refEquip = is.pop(DBEquip.class);
			refFlauntDiySkill = is.pop(FlauntDiySkillInfo.class);
			refSendFlowers = is.pop(SendFlowersInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(type);
			os.pushString(msg);
			os.push(refEquip);
			os.push(refFlauntDiySkill);
			os.push(refSendFlowers);
		}

		public int type;
		public String msg;
		public DBEquip refEquip;
		public FlauntDiySkillInfo refFlauntDiySkill;
		public SendFlowersInfo refSendFlowers;
	}

	public static class MessageInfo implements Stream.IStreamable, Stream.KCloneable<MessageInfo>, SStream.IStreamable
	{

		public static final byte MTypeSys = 0;
		public static final byte MTypeWorld = 1;
		public static final byte MTypeSect = 2;
		public static final byte MTypeTeam = 3;
		public static final byte MTypePrivate = 4;
		public static final byte MTypeFight = 5;
		public static final byte MTypeAllServer = 6;
		public static final byte MTypeJusticeInvite = 7;

		public MessageInfo() { }

		public MessageInfo(int time, int type, int srcId, String srcName, 
		                   int srcSectId, int headIcon, int bwType, int vipLevel, 
		                   String gsName, MessageContent content)
		{
			this.time = time;
			this.type = type;
			this.srcId = srcId;
			this.srcName = srcName;
			this.srcSectId = srcSectId;
			this.headIcon = headIcon;
			this.bwType = bwType;
			this.vipLevel = vipLevel;
			this.gsName = gsName;
			this.content = content;
		}

		public MessageInfo ksClone()
		{
			return new MessageInfo(time, type, srcId, srcName, 
			                       srcSectId, headIcon, bwType, vipLevel, 
			                       gsName, content);
		}

		@Override
		public MessageInfo kdClone()
		{
			MessageInfo _kio_clobj = ksClone();
			_kio_clobj.content = Stream.clone(content);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			time = is.popInteger();
			type = is.popInteger();
			srcId = is.popInteger();
			srcName = is.popString();
			srcSectId = is.popInteger();
			headIcon = is.popInteger();
			bwType = is.popInteger();
			vipLevel = is.popInteger();
			gsName = is.popString();
			if( content == null )
				content = new MessageContent();
			is.pop(content);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(time);
			os.pushInteger(type);
			os.pushInteger(srcId);
			os.pushString(srcName);
			os.pushInteger(srcSectId);
			os.pushInteger(headIcon);
			os.pushInteger(bwType);
			os.pushInteger(vipLevel);
			os.pushString(gsName);
			os.push(content);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			time = is.popInteger();
			type = is.popInteger();
			srcId = is.popInteger();
			srcName = is.popString();
			srcSectId = is.popInteger();
			headIcon = is.popInteger();
			bwType = is.popInteger();
			vipLevel = is.popInteger();
			gsName = is.popString();
			content = is.pop(MessageContent.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(time);
			os.pushInteger(type);
			os.pushInteger(srcId);
			os.pushString(srcName);
			os.pushInteger(srcSectId);
			os.pushInteger(headIcon);
			os.pushInteger(bwType);
			os.pushInteger(vipLevel);
			os.pushString(gsName);
			os.push(content);
		}

		public int time;
		public int type;
		public int srcId;
		public String srcName;
		public int srcSectId;
		public int headIcon;
		public int bwType;
		public int vipLevel;
		public String gsName;
		public MessageContent content;
	}

	public static class MailBrief implements Stream.IStreamable, Stream.KCloneable<MailBrief>, SStream.IStreamable
	{

		public MailBrief() { }

		public MailBrief(int id, int type, int state, int fromID, 
		                 String fromName, int sendTime, int lifeTime, String title, 
		                 int attCount, List<Integer> additional)
		{
			this.id = id;
			this.type = type;
			this.state = state;
			this.fromID = fromID;
			this.fromName = fromName;
			this.sendTime = sendTime;
			this.lifeTime = lifeTime;
			this.title = title;
			this.attCount = attCount;
			this.additional = additional;
		}

		public MailBrief ksClone()
		{
			return new MailBrief(id, type, state, fromID, 
			                     fromName, sendTime, lifeTime, title, 
			                     attCount, additional);
		}

		@Override
		public MailBrief kdClone()
		{
			MailBrief _kio_clobj = ksClone();
			_kio_clobj.additional = new ArrayList<Integer>(additional);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			state = is.popInteger();
			fromID = is.popInteger();
			fromName = is.popString();
			sendTime = is.popInteger();
			lifeTime = is.popInteger();
			title = is.popString();
			attCount = is.popInteger();
			additional = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(state);
			os.pushInteger(fromID);
			os.pushString(fromName);
			os.pushInteger(sendTime);
			os.pushInteger(lifeTime);
			os.pushString(title);
			os.pushInteger(attCount);
			os.pushIntegerList(additional);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			state = is.popInteger();
			fromID = is.popInteger();
			fromName = is.popString();
			sendTime = is.popInteger();
			lifeTime = is.popInteger();
			title = is.popString();
			attCount = is.popInteger();
			additional = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(state);
			os.pushInteger(fromID);
			os.pushString(fromName);
			os.pushInteger(sendTime);
			os.pushInteger(lifeTime);
			os.pushString(title);
			os.pushInteger(attCount);
			os.pushIntegerList(additional);
		}

		public int id;
		public int type;
		public int state;
		public int fromID;
		public String fromName;
		public int sendTime;
		public int lifeTime;
		public String title;
		public int attCount;
		public List<Integer> additional;
	}

	public static class MailInfo implements Stream.IStreamable, Stream.KCloneable<MailInfo>, SStream.IStreamable
	{

		public MailInfo() { }

		public MailInfo(int pageNo, int pageCount, int mailCount, int unreadMailCount, 
		                List<MailBrief> mails)
		{
			this.pageNo = pageNo;
			this.pageCount = pageCount;
			this.mailCount = mailCount;
			this.unreadMailCount = unreadMailCount;
			this.mails = mails;
		}

		public MailInfo ksClone()
		{
			return new MailInfo(pageNo, pageCount, mailCount, unreadMailCount, 
			                    mails);
		}

		@Override
		public MailInfo kdClone()
		{
			MailInfo _kio_clobj = ksClone();
			_kio_clobj.mails = Stream.clone(mails);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pageNo = is.popInteger();
			pageCount = is.popInteger();
			mailCount = is.popInteger();
			unreadMailCount = is.popInteger();
			mails = is.popList(MailBrief.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pageNo);
			os.pushInteger(pageCount);
			os.pushInteger(mailCount);
			os.pushInteger(unreadMailCount);
			os.pushList(mails);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			pageNo = is.popInteger();
			pageCount = is.popInteger();
			mailCount = is.popInteger();
			unreadMailCount = is.popInteger();
			mails = is.popList(MailBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(pageNo);
			os.pushInteger(pageCount);
			os.pushInteger(mailCount);
			os.pushInteger(unreadMailCount);
			os.pushList(mails);
		}

		public int pageNo;
		public int pageCount;
		public int mailCount;
		public int unreadMailCount;
		public List<MailBrief> mails;
	}

	public static class RankRole implements Stream.IStreamable, Stream.KCloneable<RankRole>, SStream.IStreamable
	{

		public RankRole() { }

		public RankRole(RoleOverview role, int rankKey)
		{
			this.role = role;
			this.rankKey = rankKey;
		}

		public RankRole ksClone()
		{
			return new RankRole(role, rankKey);
		}

		@Override
		public RankRole kdClone()
		{
			RankRole _kio_clobj = ksClone();
			_kio_clobj.role = Stream.clone(role);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( role == null )
				role = new RoleOverview();
			is.pop(role);
			rankKey = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(role);
			os.pushInteger(rankKey);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			role = is.pop(RoleOverview.class);
			rankKey = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(role);
			os.pushInteger(rankKey);
		}

		public RoleOverview role;
		public int rankKey;
	}

	public static class RankBrief implements Stream.IStreamable, Stream.KCloneable<RankBrief>, SStream.IStreamable
	{

		public RankBrief() { }

		public RankBrief(int id, int createTime, int rankSize)
		{
			this.id = id;
			this.createTime = createTime;
			this.rankSize = rankSize;
		}

		public RankBrief ksClone()
		{
			return new RankBrief(id, createTime, rankSize);
		}

		@Override
		public RankBrief kdClone()
		{
			RankBrief _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			createTime = is.popInteger();
			rankSize = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(createTime);
			os.pushInteger(rankSize);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			createTime = is.popInteger();
			rankSize = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(createTime);
			os.pushInteger(rankSize);
		}

		public int id;
		public int createTime;
		public int rankSize;
	}

	public static class RankSect implements Stream.IStreamable, Stream.KCloneable<RankSect>, SStream.IStreamable
	{

		public RankSect() { }

		public RankSect(SectOverview sect, int rankKey)
		{
			this.sect = sect;
			this.rankKey = rankKey;
		}

		public RankSect ksClone()
		{
			return new RankSect(sect, rankKey);
		}

		@Override
		public RankSect kdClone()
		{
			RankSect _kio_clobj = ksClone();
			_kio_clobj.sect = Stream.clone(sect);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( sect == null )
				sect = new SectOverview();
			is.pop(sect);
			rankKey = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(sect);
			os.pushInteger(rankKey);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			sect = is.pop(SectOverview.class);
			rankKey = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(sect);
			os.pushInteger(rankKey);
		}

		public SectOverview sect;
		public int rankKey;
	}

	public static class RankDemon implements Stream.IStreamable, Stream.KCloneable<RankDemon>, SStream.IStreamable
	{

		public RankDemon() { }

		public RankDemon(int roleID, int rankKey)
		{
			this.roleID = roleID;
			this.rankKey = rankKey;
		}

		public RankDemon ksClone()
		{
			return new RankDemon(roleID, rankKey);
		}

		@Override
		public RankDemon kdClone()
		{
			RankDemon _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			rankKey = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(rankKey);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleID = is.popInteger();
			rankKey = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(rankKey);
		}

		public int roleID;
		public int rankKey;
	}

	public static class SectOverview implements Stream.IStreamable, Stream.KCloneable<SectOverview>, SStream.IStreamable
	{

		public SectOverview() { }

		public SectOverview(int sectId, String name, int level, int chiefId, 
		                    String chiefName, int memberCount, String creed, short icon, 
		                    short frame, int joinLvlReq)
		{
			this.sectId = sectId;
			this.name = name;
			this.level = level;
			this.chiefId = chiefId;
			this.chiefName = chiefName;
			this.memberCount = memberCount;
			this.creed = creed;
			this.icon = icon;
			this.frame = frame;
			this.joinLvlReq = joinLvlReq;
		}

		public SectOverview ksClone()
		{
			return new SectOverview(sectId, name, level, chiefId, 
			                        chiefName, memberCount, creed, icon, 
			                        frame, joinLvlReq);
		}

		@Override
		public SectOverview kdClone()
		{
			SectOverview _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectId = is.popInteger();
			name = is.popString();
			level = is.popInteger();
			chiefId = is.popInteger();
			chiefName = is.popString();
			memberCount = is.popInteger();
			creed = is.popString();
			icon = is.popShort();
			frame = is.popShort();
			joinLvlReq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sectId);
			os.pushString(name);
			os.pushInteger(level);
			os.pushInteger(chiefId);
			os.pushString(chiefName);
			os.pushInteger(memberCount);
			os.pushString(creed);
			os.pushShort(icon);
			os.pushShort(frame);
			os.pushInteger(joinLvlReq);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			sectId = is.popInteger();
			name = is.popString();
			level = is.popInteger();
			chiefId = is.popInteger();
			chiefName = is.popString();
			memberCount = is.popInteger();
			creed = is.popString();
			icon = is.popShort();
			frame = is.popShort();
			joinLvlReq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(sectId);
			os.pushString(name);
			os.pushInteger(level);
			os.pushInteger(chiefId);
			os.pushString(chiefName);
			os.pushInteger(memberCount);
			os.pushString(creed);
			os.pushShort(icon);
			os.pushShort(frame);
			os.pushInteger(joinLvlReq);
		}

		public int sectId;
		public String name;
		public int level;
		public int chiefId;
		public String chiefName;
		public int memberCount;
		public String creed;
		public short icon;
		public short frame;
		public int joinLvlReq;
	}

	public static class SectDetail implements Stream.IStreamable, Stream.KCloneable<SectDetail>, SStream.IStreamable
	{

		public SectDetail() { }

		public SectDetail(SectOverview overview, int lastUpgradeTime, int vitality, int applicants, 
		                  int dayMailTimes, byte applicationPush, String qqGroup, int dayKickTimes)
		{
			this.overview = overview;
			this.lastUpgradeTime = lastUpgradeTime;
			this.vitality = vitality;
			this.applicants = applicants;
			this.dayMailTimes = dayMailTimes;
			this.applicationPush = applicationPush;
			this.qqGroup = qqGroup;
			this.dayKickTimes = dayKickTimes;
		}

		public SectDetail ksClone()
		{
			return new SectDetail(overview, lastUpgradeTime, vitality, applicants, 
			                      dayMailTimes, applicationPush, qqGroup, dayKickTimes);
		}

		@Override
		public SectDetail kdClone()
		{
			SectDetail _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new SectOverview();
			is.pop(overview);
			lastUpgradeTime = is.popInteger();
			vitality = is.popInteger();
			applicants = is.popInteger();
			dayMailTimes = is.popInteger();
			applicationPush = is.popByte();
			qqGroup = is.popString();
			dayKickTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.pushInteger(lastUpgradeTime);
			os.pushInteger(vitality);
			os.pushInteger(applicants);
			os.pushInteger(dayMailTimes);
			os.pushByte(applicationPush);
			os.pushString(qqGroup);
			os.pushInteger(dayKickTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overview = is.pop(SectOverview.class);
			lastUpgradeTime = is.popInteger();
			vitality = is.popInteger();
			applicants = is.popInteger();
			dayMailTimes = is.popInteger();
			applicationPush = is.popByte();
			qqGroup = is.popString();
			dayKickTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overview);
			os.pushInteger(lastUpgradeTime);
			os.pushInteger(vitality);
			os.pushInteger(applicants);
			os.pushInteger(dayMailTimes);
			os.pushByte(applicationPush);
			os.pushString(qqGroup);
			os.pushInteger(dayKickTimes);
		}

		public SectOverview overview;
		public int lastUpgradeTime;
		public int vitality;
		public int applicants;
		public int dayMailTimes;
		public byte applicationPush;
		public String qqGroup;
		public int dayKickTimes;
	}

	public static class SectMember implements Stream.IStreamable, Stream.KCloneable<SectMember>, SStream.IStreamable
	{

		public SectMember() { }

		public SectMember(RoleOverview role, RoleSectStats stats, int joinTime, int lastLogoutTime)
		{
			this.role = role;
			this.stats = stats;
			this.joinTime = joinTime;
			this.lastLogoutTime = lastLogoutTime;
		}

		public SectMember ksClone()
		{
			return new SectMember(role, stats, joinTime, lastLogoutTime);
		}

		@Override
		public SectMember kdClone()
		{
			SectMember _kio_clobj = ksClone();
			_kio_clobj.role = Stream.clone(role);
			_kio_clobj.stats = Stream.clone(stats);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( role == null )
				role = new RoleOverview();
			is.pop(role);
			if( stats == null )
				stats = new RoleSectStats();
			is.pop(stats);
			joinTime = is.popInteger();
			lastLogoutTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(role);
			os.push(stats);
			os.pushInteger(joinTime);
			os.pushInteger(lastLogoutTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			role = is.pop(RoleOverview.class);
			stats = is.pop(RoleSectStats.class);
			joinTime = is.popInteger();
			lastLogoutTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(role);
			os.push(stats);
			os.pushInteger(joinTime);
			os.pushInteger(lastLogoutTime);
		}

		public RoleOverview role;
		public RoleSectStats stats;
		public int joinTime;
		public int lastLogoutTime;
	}

	public static class RoleSectData implements Stream.IStreamable, Stream.KCloneable<RoleSectData>, SStream.IStreamable
	{

		public RoleSectData() { }

		public RoleSectData(int contribution, int historyContribution, List<Integer> dayWorshipTimes, List<Integer> dayBanquetOpenTimes, 
		                    List<Integer> dayBanquetJoinTimes, Map<Integer, Integer> daySectMapEnterTimes, int historyBanquetOpenTimes, int leaveTimes, 
		                    int lastLeaveTime, int lastJoinTime, byte isByKick, SectBrief sectBrief)
		{
			this.contribution = contribution;
			this.historyContribution = historyContribution;
			this.dayWorshipTimes = dayWorshipTimes;
			this.dayBanquetOpenTimes = dayBanquetOpenTimes;
			this.dayBanquetJoinTimes = dayBanquetJoinTimes;
			this.daySectMapEnterTimes = daySectMapEnterTimes;
			this.historyBanquetOpenTimes = historyBanquetOpenTimes;
			this.leaveTimes = leaveTimes;
			this.lastLeaveTime = lastLeaveTime;
			this.lastJoinTime = lastJoinTime;
			this.isByKick = isByKick;
			this.sectBrief = sectBrief;
		}

		public RoleSectData ksClone()
		{
			return new RoleSectData(contribution, historyContribution, dayWorshipTimes, dayBanquetOpenTimes, 
			                        dayBanquetJoinTimes, daySectMapEnterTimes, historyBanquetOpenTimes, leaveTimes, 
			                        lastLeaveTime, lastJoinTime, isByKick, sectBrief);
		}

		@Override
		public RoleSectData kdClone()
		{
			RoleSectData _kio_clobj = ksClone();
			_kio_clobj.dayWorshipTimes = new ArrayList<Integer>(dayWorshipTimes);
			_kio_clobj.dayBanquetOpenTimes = new ArrayList<Integer>(dayBanquetOpenTimes);
			_kio_clobj.dayBanquetJoinTimes = new ArrayList<Integer>(dayBanquetJoinTimes);
			_kio_clobj.daySectMapEnterTimes = new TreeMap<Integer, Integer>(daySectMapEnterTimes);
			_kio_clobj.sectBrief = Stream.clone(sectBrief);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			contribution = is.popInteger();
			historyContribution = is.popInteger();
			dayWorshipTimes = is.popIntegerList();
			dayBanquetOpenTimes = is.popIntegerList();
			dayBanquetJoinTimes = is.popIntegerList();
			daySectMapEnterTimes = is.popIntegerIntegerTreeMap();
			historyBanquetOpenTimes = is.popInteger();
			leaveTimes = is.popInteger();
			lastLeaveTime = is.popInteger();
			lastJoinTime = is.popInteger();
			isByKick = is.popByte();
			if( sectBrief == null )
				sectBrief = new SectBrief();
			is.pop(sectBrief);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(contribution);
			os.pushInteger(historyContribution);
			os.pushIntegerList(dayWorshipTimes);
			os.pushIntegerList(dayBanquetOpenTimes);
			os.pushIntegerList(dayBanquetJoinTimes);
			os.pushIntegerIntegerMap(daySectMapEnterTimes);
			os.pushInteger(historyBanquetOpenTimes);
			os.pushInteger(leaveTimes);
			os.pushInteger(lastLeaveTime);
			os.pushInteger(lastJoinTime);
			os.pushByte(isByKick);
			os.push(sectBrief);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			contribution = is.popInteger();
			historyContribution = is.popInteger();
			dayWorshipTimes = is.popIntegerList();
			dayBanquetOpenTimes = is.popIntegerList();
			dayBanquetJoinTimes = is.popIntegerList();
			daySectMapEnterTimes = is.popIntegerIntegerTreeMap();
			historyBanquetOpenTimes = is.popInteger();
			leaveTimes = is.popInteger();
			lastLeaveTime = is.popInteger();
			lastJoinTime = is.popInteger();
			isByKick = is.popByte();
			sectBrief = is.pop(SectBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(contribution);
			os.pushInteger(historyContribution);
			os.pushIntegerList(dayWorshipTimes);
			os.pushIntegerList(dayBanquetOpenTimes);
			os.pushIntegerList(dayBanquetJoinTimes);
			os.pushIntegerIntegerMap(daySectMapEnterTimes);
			os.pushInteger(historyBanquetOpenTimes);
			os.pushInteger(leaveTimes);
			os.pushInteger(lastLeaveTime);
			os.pushInteger(lastJoinTime);
			os.pushByte(isByKick);
			os.push(sectBrief);
		}

		public int contribution;
		public int historyContribution;
		public List<Integer> dayWorshipTimes;
		public List<Integer> dayBanquetOpenTimes;
		public List<Integer> dayBanquetJoinTimes;
		public Map<Integer, Integer> daySectMapEnterTimes;
		public int historyBanquetOpenTimes;
		public int leaveTimes;
		public int lastLeaveTime;
		public int lastJoinTime;
		public byte isByKick;
		public SectBrief sectBrief;
	}

	public static class RoleSectStats implements Stream.IStreamable, Stream.KCloneable<RoleSectStats>, SStream.IStreamable
	{

		public RoleSectStats() { }

		public RoleSectStats(int contributionTotal, int dayVitality, int weekVitality, int weekSectMapTime)
		{
			this.contributionTotal = contributionTotal;
			this.dayVitality = dayVitality;
			this.weekVitality = weekVitality;
			this.weekSectMapTime = weekSectMapTime;
		}

		public RoleSectStats ksClone()
		{
			return new RoleSectStats(contributionTotal, dayVitality, weekVitality, weekSectMapTime);
		}

		@Override
		public RoleSectStats kdClone()
		{
			RoleSectStats _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			contributionTotal = is.popInteger();
			dayVitality = is.popInteger();
			weekVitality = is.popInteger();
			weekSectMapTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(contributionTotal);
			os.pushInteger(dayVitality);
			os.pushInteger(weekVitality);
			os.pushInteger(weekSectMapTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			contributionTotal = is.popInteger();
			dayVitality = is.popInteger();
			weekVitality = is.popInteger();
			weekSectMapTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(contributionTotal);
			os.pushInteger(dayVitality);
			os.pushInteger(weekVitality);
			os.pushInteger(weekSectMapTime);
		}

		public int contributionTotal;
		public int dayVitality;
		public int weekVitality;
		public int weekSectMapTime;
	}

	public static class SectWorshipedData implements Stream.IStreamable, Stream.KCloneable<SectWorshipedData>, SStream.IStreamable
	{

		public SectWorshipedData() { }

		public SectWorshipedData(int dayWorshipedTimes, int worshipReward)
		{
			this.dayWorshipedTimes = dayWorshipedTimes;
			this.worshipReward = worshipReward;
		}

		public SectWorshipedData ksClone()
		{
			return new SectWorshipedData(dayWorshipedTimes, worshipReward);
		}

		@Override
		public SectWorshipedData kdClone()
		{
			SectWorshipedData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayWorshipedTimes = is.popInteger();
			worshipReward = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayWorshipedTimes);
			os.pushInteger(worshipReward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			dayWorshipedTimes = is.popInteger();
			worshipReward = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(dayWorshipedTimes);
			os.pushInteger(worshipReward);
		}

		public int dayWorshipedTimes;
		public int worshipReward;
	}

	public static class SectInfo implements Stream.IStreamable, Stream.KCloneable<SectInfo>, SStream.IStreamable
	{

		public SectInfo() { }

		public SectInfo(RoleSectData data, SectDetail sect, RoleSectStats stats, int maxSectLvl, 
		                int sectFlagNum)
		{
			this.data = data;
			this.sect = sect;
			this.stats = stats;
			this.maxSectLvl = maxSectLvl;
			this.sectFlagNum = sectFlagNum;
		}

		public SectInfo ksClone()
		{
			return new SectInfo(data, sect, stats, maxSectLvl, 
			                    sectFlagNum);
		}

		@Override
		public SectInfo kdClone()
		{
			SectInfo _kio_clobj = ksClone();
			_kio_clobj.data = Stream.clone(data);
			_kio_clobj.sect = Stream.clone(sect);
			_kio_clobj.stats = Stream.clone(stats);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( data == null )
				data = new RoleSectData();
			is.pop(data);
			if( sect == null )
				sect = new SectDetail();
			is.pop(sect);
			if( stats == null )
				stats = new RoleSectStats();
			is.pop(stats);
			maxSectLvl = is.popInteger();
			sectFlagNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(data);
			os.push(sect);
			os.push(stats);
			os.pushInteger(maxSectLvl);
			os.pushInteger(sectFlagNum);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			data = is.pop(RoleSectData.class);
			sect = is.pop(SectDetail.class);
			stats = is.pop(RoleSectStats.class);
			maxSectLvl = is.popInteger();
			sectFlagNum = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(data);
			os.push(sect);
			os.push(stats);
			os.pushInteger(maxSectLvl);
			os.pushInteger(sectFlagNum);
		}

		public RoleSectData data;
		public SectDetail sect;
		public RoleSectStats stats;
		public int maxSectLvl;
		public int sectFlagNum;
	}

	public static class SectMembers implements Stream.IStreamable, Stream.KCloneable<SectMembers>, SStream.IStreamable
	{

		public SectMembers() { }

		public SectMembers(int chief, Set<Integer> deputy, Set<Integer> elder, List<SectMember> members)
		{
			this.chief = chief;
			this.deputy = deputy;
			this.elder = elder;
			this.members = members;
		}

		public SectMembers ksClone()
		{
			return new SectMembers(chief, deputy, elder, members);
		}

		@Override
		public SectMembers kdClone()
		{
			SectMembers _kio_clobj = ksClone();
			_kio_clobj.deputy = new TreeSet<Integer>(deputy);
			_kio_clobj.elder = new TreeSet<Integer>(elder);
			_kio_clobj.members = Stream.clone(members);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			chief = is.popInteger();
			deputy = is.popIntegerTreeSet();
			elder = is.popIntegerTreeSet();
			members = is.popList(SectMember.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(chief);
			os.pushIntegerSet(deputy);
			os.pushIntegerSet(elder);
			os.pushList(members);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			chief = is.popInteger();
			deputy = is.popIntegerTreeSet();
			elder = is.popIntegerTreeSet();
			members = is.popList(SectMember.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(chief);
			os.pushIntegerSet(deputy);
			os.pushIntegerSet(elder);
			os.pushList(members);
		}

		public int chief;
		public Set<Integer> deputy;
		public Set<Integer> elder;
		public List<SectMember> members;
	}

	public static class SectBanquet implements Stream.IStreamable, Stream.KCloneable<SectBanquet>, SStream.IStreamable
	{

		public SectBanquet() { }

		public SectBanquet(int bid, int openRoleId, String openRoleName, int type, 
		                   int openTime, Set<Integer> roles)
		{
			this.bid = bid;
			this.openRoleId = openRoleId;
			this.openRoleName = openRoleName;
			this.type = type;
			this.openTime = openTime;
			this.roles = roles;
		}

		public SectBanquet ksClone()
		{
			return new SectBanquet(bid, openRoleId, openRoleName, type, 
			                       openTime, roles);
		}

		@Override
		public SectBanquet kdClone()
		{
			SectBanquet _kio_clobj = ksClone();
			_kio_clobj.roles = new TreeSet<Integer>(roles);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bid = is.popInteger();
			openRoleId = is.popInteger();
			openRoleName = is.popString();
			type = is.popInteger();
			openTime = is.popInteger();
			roles = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bid);
			os.pushInteger(openRoleId);
			os.pushString(openRoleName);
			os.pushInteger(type);
			os.pushInteger(openTime);
			os.pushIntegerSet(roles);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			bid = is.popInteger();
			openRoleId = is.popInteger();
			openRoleName = is.popString();
			type = is.popInteger();
			openTime = is.popInteger();
			roles = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(bid);
			os.pushInteger(openRoleId);
			os.pushString(openRoleName);
			os.pushInteger(type);
			os.pushInteger(openTime);
			os.pushIntegerSet(roles);
		}

		public int bid;
		public int openRoleId;
		public String openRoleName;
		public int type;
		public int openTime;
		public Set<Integer> roles;
	}

	public static class SectMapAllocation implements Stream.IStreamable, Stream.KCloneable<SectMapAllocation>, SStream.IStreamable
	{

		public SectMapAllocation() { }

		public SectMapAllocation(Map<Integer, SectMapRewardRecord> rewards, Map<Integer, RoleOverview> members)
		{
			this.rewards = rewards;
			this.members = members;
		}

		public SectMapAllocation ksClone()
		{
			return new SectMapAllocation(rewards, members);
		}

		@Override
		public SectMapAllocation kdClone()
		{
			SectMapAllocation _kio_clobj = ksClone();
			_kio_clobj.rewards = Stream.clone(rewards);
			_kio_clobj.members = Stream.clone(members);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewards = is.popIntegerTreeMap(SectMapRewardRecord.class);
			members = is.popIntegerTreeMap(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(rewards);
			os.pushIntegerMap(members);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rewards = is.popIntegerTreeMap(SectMapRewardRecord.class);
			members = is.popIntegerTreeMap(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerMap(rewards);
			os.pushIntegerMap(members);
		}

		public Map<Integer, SectMapRewardRecord> rewards;
		public Map<Integer, RoleOverview> members;
	}

	public static class SectMapDamage implements Stream.IStreamable, Stream.KCloneable<SectMapDamage>, SStream.IStreamable
	{

		public SectMapDamage() { }

		public SectMapDamage(Map<Integer, Integer> accDamage, Map<Integer, Integer> maxDamage, Map<Integer, RoleOverview> members)
		{
			this.accDamage = accDamage;
			this.maxDamage = maxDamage;
			this.members = members;
		}

		public SectMapDamage ksClone()
		{
			return new SectMapDamage(accDamage, maxDamage, members);
		}

		@Override
		public SectMapDamage kdClone()
		{
			SectMapDamage _kio_clobj = ksClone();
			_kio_clobj.accDamage = new TreeMap<Integer, Integer>(accDamage);
			_kio_clobj.maxDamage = new TreeMap<Integer, Integer>(maxDamage);
			_kio_clobj.members = Stream.clone(members);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			accDamage = is.popIntegerIntegerTreeMap();
			maxDamage = is.popIntegerIntegerTreeMap();
			members = is.popIntegerTreeMap(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(accDamage);
			os.pushIntegerIntegerMap(maxDamage);
			os.pushIntegerMap(members);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			accDamage = is.popIntegerIntegerTreeMap();
			maxDamage = is.popIntegerIntegerTreeMap();
			members = is.popIntegerTreeMap(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(accDamage);
			os.pushIntegerIntegerMap(maxDamage);
			os.pushIntegerMap(members);
		}

		public Map<Integer, Integer> accDamage;
		public Map<Integer, Integer> maxDamage;
		public Map<Integer, RoleOverview> members;
	}

	public static class SectMapData implements Stream.IStreamable, Stream.KCloneable<SectMapData>, SStream.IStreamable
	{

		public SectMapData() { }

		public SectMapData(int id, int startTime, Map<Integer, Integer> progress, Map<Integer, Integer> accDamage, 
		                   Map<Integer, Integer> maxDamage)
		{
			this.id = id;
			this.startTime = startTime;
			this.progress = progress;
			this.accDamage = accDamage;
			this.maxDamage = maxDamage;
		}

		public SectMapData ksClone()
		{
			return new SectMapData(id, startTime, progress, accDamage, 
			                       maxDamage);
		}

		@Override
		public SectMapData kdClone()
		{
			SectMapData _kio_clobj = ksClone();
			_kio_clobj.progress = new TreeMap<Integer, Integer>(progress);
			_kio_clobj.accDamage = new TreeMap<Integer, Integer>(accDamage);
			_kio_clobj.maxDamage = new TreeMap<Integer, Integer>(maxDamage);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			startTime = is.popInteger();
			progress = is.popIntegerIntegerTreeMap();
			accDamage = is.popIntegerIntegerTreeMap();
			maxDamage = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(startTime);
			os.pushIntegerIntegerMap(progress);
			os.pushIntegerIntegerMap(accDamage);
			os.pushIntegerIntegerMap(maxDamage);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			startTime = is.popInteger();
			progress = is.popIntegerIntegerTreeMap();
			accDamage = is.popIntegerIntegerTreeMap();
			maxDamage = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(startTime);
			os.pushIntegerIntegerMap(progress);
			os.pushIntegerIntegerMap(accDamage);
			os.pushIntegerIntegerMap(maxDamage);
		}

		public int id;
		public int startTime;
		public Map<Integer, Integer> progress;
		public Map<Integer, Integer> accDamage;
		public Map<Integer, Integer> maxDamage;
	}

	public static class SectMapRewards implements Stream.IStreamable, Stream.KCloneable<SectMapRewards>, SStream.IStreamable
	{

		public SectMapRewards() { }

		public SectMapRewards(Map<Integer, SectMapRewardRecord> rewards)
		{
			this.rewards = rewards;
		}

		public SectMapRewards ksClone()
		{
			return new SectMapRewards(rewards);
		}

		@Override
		public SectMapRewards kdClone()
		{
			SectMapRewards _kio_clobj = ksClone();
			_kio_clobj.rewards = Stream.clone(rewards);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewards = is.popIntegerTreeMap(SectMapRewardRecord.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(rewards);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rewards = is.popIntegerTreeMap(SectMapRewardRecord.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerMap(rewards);
		}

		public Map<Integer, SectMapRewardRecord> rewards;
	}

	public static class SectMapStatus implements Stream.IStreamable, Stream.KCloneable<SectMapStatus>, SStream.IStreamable
	{

		public SectMapStatus() { }

		public SectMapStatus(int bossLostHp, int dayResetTimes)
		{
			this.bossLostHp = bossLostHp;
			this.dayResetTimes = dayResetTimes;
		}

		public SectMapStatus ksClone()
		{
			return new SectMapStatus(bossLostHp, dayResetTimes);
		}

		@Override
		public SectMapStatus kdClone()
		{
			SectMapStatus _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bossLostHp = is.popInteger();
			dayResetTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bossLostHp);
			os.pushInteger(dayResetTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			bossLostHp = is.popInteger();
			dayResetTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(bossLostHp);
			os.pushInteger(dayResetTimes);
		}

		public int bossLostHp;
		public int dayResetTimes;
	}

	public static class SectMapRewardRecord implements Stream.IStreamable, Stream.KCloneable<SectMapRewardRecord>, SStream.IStreamable
	{

		public SectMapRewardRecord() { }

		public SectMapRewardRecord(int rewardId, int count, List<Integer> applicants)
		{
			this.rewardId = rewardId;
			this.count = count;
			this.applicants = applicants;
		}

		public SectMapRewardRecord ksClone()
		{
			return new SectMapRewardRecord(rewardId, count, applicants);
		}

		@Override
		public SectMapRewardRecord kdClone()
		{
			SectMapRewardRecord _kio_clobj = ksClone();
			_kio_clobj.applicants = new ArrayList<Integer>(applicants);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewardId = is.popInteger();
			count = is.popInteger();
			applicants = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rewardId);
			os.pushInteger(count);
			os.pushIntegerList(applicants);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rewardId = is.popInteger();
			count = is.popInteger();
			applicants = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(rewardId);
			os.pushInteger(count);
			os.pushIntegerList(applicants);
		}

		public int rewardId;
		public int count;
		public List<Integer> applicants;
	}

	public static class SectMapRewardsLog implements Stream.IStreamable, Stream.KCloneable<SectMapRewardsLog>, SStream.IStreamable
	{

		public SectMapRewardsLog() { }

		public SectMapRewardsLog(int time, int rewardId, int roleId, String roleName)
		{
			this.time = time;
			this.rewardId = rewardId;
			this.roleId = roleId;
			this.roleName = roleName;
		}

		public SectMapRewardsLog ksClone()
		{
			return new SectMapRewardsLog(time, rewardId, roleId, roleName);
		}

		@Override
		public SectMapRewardsLog kdClone()
		{
			SectMapRewardsLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			time = is.popInteger();
			rewardId = is.popInteger();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(time);
			os.pushInteger(rewardId);
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			time = is.popInteger();
			rewardId = is.popInteger();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(time);
			os.pushInteger(rewardId);
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int time;
		public int rewardId;
		public int roleId;
		public String roleName;
	}

	public static class SectMapAttacker implements Stream.IStreamable, Stream.KCloneable<SectMapAttacker>, SStream.IStreamable
	{

		public SectMapAttacker() { }

		public SectMapAttacker(int roleId, int endProgressTime, int startProgress, int endProgress, 
		                       int accDamage, int accDamageRank, int maxDamageRank, int exReward)
		{
			this.roleId = roleId;
			this.endProgressTime = endProgressTime;
			this.startProgress = startProgress;
			this.endProgress = endProgress;
			this.accDamage = accDamage;
			this.accDamageRank = accDamageRank;
			this.maxDamageRank = maxDamageRank;
			this.exReward = exReward;
		}

		public SectMapAttacker ksClone()
		{
			return new SectMapAttacker(roleId, endProgressTime, startProgress, endProgress, 
			                           accDamage, accDamageRank, maxDamageRank, exReward);
		}

		@Override
		public SectMapAttacker kdClone()
		{
			SectMapAttacker _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			endProgressTime = is.popInteger();
			startProgress = is.popInteger();
			endProgress = is.popInteger();
			accDamage = is.popInteger();
			accDamageRank = is.popInteger();
			maxDamageRank = is.popInteger();
			exReward = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(endProgressTime);
			os.pushInteger(startProgress);
			os.pushInteger(endProgress);
			os.pushInteger(accDamage);
			os.pushInteger(accDamageRank);
			os.pushInteger(maxDamageRank);
			os.pushInteger(exReward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleId = is.popInteger();
			endProgressTime = is.popInteger();
			startProgress = is.popInteger();
			endProgress = is.popInteger();
			accDamage = is.popInteger();
			accDamageRank = is.popInteger();
			maxDamageRank = is.popInteger();
			exReward = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(endProgressTime);
			os.pushInteger(startProgress);
			os.pushInteger(endProgress);
			os.pushInteger(accDamage);
			os.pushInteger(accDamageRank);
			os.pushInteger(maxDamageRank);
			os.pushInteger(exReward);
		}

		public int roleId;
		public int endProgressTime;
		public int startProgress;
		public int endProgress;
		public int accDamage;
		public int accDamageRank;
		public int maxDamageRank;
		public int exReward;
	}

	public static class SectMapInfo implements Stream.IStreamable, Stream.KCloneable<SectMapInfo>, SStream.IStreamable
	{

		public SectMapInfo() { }

		public SectMapInfo(Map<Integer, Integer> progress, RoleOverview curAttacker)
		{
			this.progress = progress;
			this.curAttacker = curAttacker;
		}

		public SectMapInfo ksClone()
		{
			return new SectMapInfo(progress, curAttacker);
		}

		@Override
		public SectMapInfo kdClone()
		{
			SectMapInfo _kio_clobj = ksClone();
			_kio_clobj.progress = new TreeMap<Integer, Integer>(progress);
			_kio_clobj.curAttacker = Stream.clone(curAttacker);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			progress = is.popIntegerIntegerTreeMap();
			if( curAttacker == null )
				curAttacker = new RoleOverview();
			is.pop(curAttacker);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(progress);
			os.push(curAttacker);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			progress = is.popIntegerIntegerTreeMap();
			curAttacker = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(progress);
			os.push(curAttacker);
		}

		public Map<Integer, Integer> progress;
		public RoleOverview curAttacker;
	}

	public static class SectDeliverTaskInfo implements Stream.IStreamable, Stream.KCloneable<SectDeliverTaskInfo>, SStream.IStreamable
	{

		public SectDeliverTaskInfo() { }

		public SectDeliverTaskInfo(int id, byte flag)
		{
			this.id = id;
			this.flag = flag;
		}

		public SectDeliverTaskInfo ksClone()
		{
			return new SectDeliverTaskInfo(id, flag);
		}

		@Override
		public SectDeliverTaskInfo kdClone()
		{
			SectDeliverTaskInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			flag = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushByte(flag);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			flag = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushByte(flag);
		}

		public int id;
		public byte flag;
	}

	public static class Scope implements Stream.IStreamable, Stream.KCloneable<Scope>, SStream.IStreamable
	{

		public Scope() { }

		public Scope(int type, List<Integer> args)
		{
			this.type = type;
			this.args = args;
		}

		public Scope ksClone()
		{
			return new Scope(type, args);
		}

		@Override
		public Scope kdClone()
		{
			Scope _kio_clobj = ksClone();
			_kio_clobj.args = new ArrayList<Integer>(args);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			args = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushIntegerList(args);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			type = is.popInteger();
			args = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(type);
			os.pushIntegerList(args);
		}

		public int type;
		public List<Integer> args;
	}

	public static class SubStatus implements Stream.IStreamable, Stream.KCloneable<SubStatus>, SStream.IStreamable
	{

		public SubStatus() { }

		public SubStatus(int odds, int buffID)
		{
			this.odds = odds;
			this.buffID = buffID;
		}

		public SubStatus ksClone()
		{
			return new SubStatus(odds, buffID);
		}

		@Override
		public SubStatus kdClone()
		{
			SubStatus _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			odds = is.popInteger();
			buffID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(odds);
			os.pushInteger(buffID);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			odds = is.popInteger();
			buffID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(odds);
			os.pushInteger(buffID);
		}

		public int odds;
		public int buffID;
	}

	public static class SectTaskReward implements Stream.IStreamable, Stream.KCloneable<SectTaskReward>, SStream.IStreamable
	{

		public SectTaskReward() { }

		public SectTaskReward(int exp, int ontribution, List<DummyGoods> items, Map<Integer, Integer> tasks)
		{
			this.exp = exp;
			this.ontribution = ontribution;
			this.items = items;
			this.tasks = tasks;
		}

		public SectTaskReward ksClone()
		{
			return new SectTaskReward(exp, ontribution, items, tasks);
		}

		@Override
		public SectTaskReward kdClone()
		{
			SectTaskReward _kio_clobj = ksClone();
			_kio_clobj.items = Stream.clone(items);
			_kio_clobj.tasks = new TreeMap<Integer, Integer>(tasks);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			exp = is.popInteger();
			ontribution = is.popInteger();
			items = is.popList(DummyGoods.class);
			tasks = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(exp);
			os.pushInteger(ontribution);
			os.pushList(items);
			os.pushIntegerIntegerMap(tasks);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			exp = is.popInteger();
			ontribution = is.popInteger();
			items = is.popList(DummyGoods.class);
			tasks = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(exp);
			os.pushInteger(ontribution);
			os.pushList(items);
			os.pushIntegerIntegerMap(tasks);
		}

		public int exp;
		public int ontribution;
		public List<DummyGoods> items;
		public Map<Integer, Integer> tasks;
	}

	public static class ArenaStateInfo implements Stream.IStreamable, Stream.KCloneable<ArenaStateInfo>, SStream.IStreamable
	{

		public ArenaStateInfo() { }

		public ArenaStateInfo(int point, int rankNow, int rankBest, int timeUsed, 
		                      int timeBuyed, int lastFightTime, List<Integer> pets, Map<Integer, BattleEnemyOverview> enemies, 
		                      int scoreReward, byte hideDefence)
		{
			this.point = point;
			this.rankNow = rankNow;
			this.rankBest = rankBest;
			this.timeUsed = timeUsed;
			this.timeBuyed = timeBuyed;
			this.lastFightTime = lastFightTime;
			this.pets = pets;
			this.enemies = enemies;
			this.scoreReward = scoreReward;
			this.hideDefence = hideDefence;
		}

		public ArenaStateInfo ksClone()
		{
			return new ArenaStateInfo(point, rankNow, rankBest, timeUsed, 
			                          timeBuyed, lastFightTime, pets, enemies, 
			                          scoreReward, hideDefence);
		}

		@Override
		public ArenaStateInfo kdClone()
		{
			ArenaStateInfo _kio_clobj = ksClone();
			_kio_clobj.pets = new ArrayList<Integer>(pets);
			_kio_clobj.enemies = Stream.clone(enemies);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			point = is.popInteger();
			rankNow = is.popInteger();
			rankBest = is.popInteger();
			timeUsed = is.popInteger();
			timeBuyed = is.popInteger();
			lastFightTime = is.popInteger();
			pets = is.popIntegerList();
			enemies = is.popIntegerTreeMap(BattleEnemyOverview.class);
			scoreReward = is.popInteger();
			hideDefence = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(point);
			os.pushInteger(rankNow);
			os.pushInteger(rankBest);
			os.pushInteger(timeUsed);
			os.pushInteger(timeBuyed);
			os.pushInteger(lastFightTime);
			os.pushIntegerList(pets);
			os.pushIntegerMap(enemies);
			os.pushInteger(scoreReward);
			os.pushByte(hideDefence);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			point = is.popInteger();
			rankNow = is.popInteger();
			rankBest = is.popInteger();
			timeUsed = is.popInteger();
			timeBuyed = is.popInteger();
			lastFightTime = is.popInteger();
			pets = is.popIntegerList();
			enemies = is.popIntegerTreeMap(BattleEnemyOverview.class);
			scoreReward = is.popInteger();
			hideDefence = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(point);
			os.pushInteger(rankNow);
			os.pushInteger(rankBest);
			os.pushInteger(timeUsed);
			os.pushInteger(timeBuyed);
			os.pushInteger(lastFightTime);
			os.pushIntegerList(pets);
			os.pushIntegerMap(enemies);
			os.pushInteger(scoreReward);
			os.pushByte(hideDefence);
		}

		public int point;
		public int rankNow;
		public int rankBest;
		public int timeUsed;
		public int timeBuyed;
		public int lastFightTime;
		public List<Integer> pets;
		public Map<Integer, BattleEnemyOverview> enemies;
		public int scoreReward;
		public byte hideDefence;
	}

	public static class SuperArenaInfo implements Stream.IStreamable, Stream.KCloneable<SuperArenaInfo>, SStream.IStreamable
	{

		public SuperArenaInfo() { }

		public SuperArenaInfo(int point, int weekRank, Map<Integer, SuperArenaLog> logs, Set<Integer> pets)
		{
			this.point = point;
			this.weekRank = weekRank;
			this.logs = logs;
			this.pets = pets;
		}

		public SuperArenaInfo ksClone()
		{
			return new SuperArenaInfo(point, weekRank, logs, pets);
		}

		@Override
		public SuperArenaInfo kdClone()
		{
			SuperArenaInfo _kio_clobj = ksClone();
			_kio_clobj.logs = Stream.clone(logs);
			_kio_clobj.pets = new TreeSet<Integer>(pets);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			point = is.popInteger();
			weekRank = is.popInteger();
			logs = is.popIntegerTreeMap(SuperArenaLog.class);
			pets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(point);
			os.pushInteger(weekRank);
			os.pushIntegerMap(logs);
			os.pushIntegerSet(pets);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			point = is.popInteger();
			weekRank = is.popInteger();
			logs = is.popIntegerTreeMap(SuperArenaLog.class);
			pets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(point);
			os.pushInteger(weekRank);
			os.pushIntegerMap(logs);
			os.pushIntegerSet(pets);
		}

		public int point;
		public int weekRank;
		public Map<Integer, SuperArenaLog> logs;
		public Set<Integer> pets;
	}

	public static class BWArenaInfo implements Stream.IStreamable, Stream.KCloneable<BWArenaInfo>, SStream.IStreamable
	{

		public BWArenaInfo() { }

		public BWArenaInfo(int rank, int timeUsed, int timeBuyed, int dayRefreshTimes, 
		                   Set<Integer> pets, int lvl, int exp, int rewardScore, 
		                   List<BWArenaArrayOverview> enemies)
		{
			this.rank = rank;
			this.timeUsed = timeUsed;
			this.timeBuyed = timeBuyed;
			this.dayRefreshTimes = dayRefreshTimes;
			this.pets = pets;
			this.lvl = lvl;
			this.exp = exp;
			this.rewardScore = rewardScore;
			this.enemies = enemies;
		}

		public BWArenaInfo ksClone()
		{
			return new BWArenaInfo(rank, timeUsed, timeBuyed, dayRefreshTimes, 
			                       pets, lvl, exp, rewardScore, 
			                       enemies);
		}

		@Override
		public BWArenaInfo kdClone()
		{
			BWArenaInfo _kio_clobj = ksClone();
			_kio_clobj.pets = new TreeSet<Integer>(pets);
			_kio_clobj.enemies = Stream.clone(enemies);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rank = is.popInteger();
			timeUsed = is.popInteger();
			timeBuyed = is.popInteger();
			dayRefreshTimes = is.popInteger();
			pets = is.popIntegerTreeSet();
			lvl = is.popInteger();
			exp = is.popInteger();
			rewardScore = is.popInteger();
			enemies = is.popList(BWArenaArrayOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rank);
			os.pushInteger(timeUsed);
			os.pushInteger(timeBuyed);
			os.pushInteger(dayRefreshTimes);
			os.pushIntegerSet(pets);
			os.pushInteger(lvl);
			os.pushInteger(exp);
			os.pushInteger(rewardScore);
			os.pushList(enemies);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rank = is.popInteger();
			timeUsed = is.popInteger();
			timeBuyed = is.popInteger();
			dayRefreshTimes = is.popInteger();
			pets = is.popIntegerTreeSet();
			lvl = is.popInteger();
			exp = is.popInteger();
			rewardScore = is.popInteger();
			enemies = is.popList(BWArenaArrayOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(rank);
			os.pushInteger(timeUsed);
			os.pushInteger(timeBuyed);
			os.pushInteger(dayRefreshTimes);
			os.pushIntegerSet(pets);
			os.pushInteger(lvl);
			os.pushInteger(exp);
			os.pushInteger(rewardScore);
			os.pushList(enemies);
		}

		public int rank;
		public int timeUsed;
		public int timeBuyed;
		public int dayRefreshTimes;
		public Set<Integer> pets;
		public int lvl;
		public int exp;
		public int rewardScore;
		public List<BWArenaArrayOverview> enemies;
	}

	public static class ArenaEnemy implements Stream.IStreamable, Stream.KCloneable<ArenaEnemy>, SStream.IStreamable
	{

		public ArenaEnemy() { }

		public ArenaEnemy(int rank, RoleOverview info)
		{
			this.rank = rank;
			this.info = info;
		}

		public ArenaEnemy ksClone()
		{
			return new ArenaEnemy(rank, info);
		}

		@Override
		public ArenaEnemy kdClone()
		{
			ArenaEnemy _kio_clobj = ksClone();
			_kio_clobj.info = Stream.clone(info);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rank = is.popInteger();
			if( info == null )
				info = new RoleOverview();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rank);
			os.push(info);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rank = is.popInteger();
			info = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(rank);
			os.push(info);
		}

		public int rank;
		public RoleOverview info;
	}

	public static class ArenaArray implements Stream.IStreamable, Stream.KCloneable<ArenaArray>, SStream.IStreamable
	{

		public ArenaArray() { }

		public ArenaArray(int fightPower, RoleProfile role, List<PetProfile> pets)
		{
			this.fightPower = fightPower;
			this.role = role;
			this.pets = pets;
		}

		public ArenaArray ksClone()
		{
			return new ArenaArray(fightPower, role, pets);
		}

		@Override
		public ArenaArray kdClone()
		{
			ArenaArray _kio_clobj = ksClone();
			_kio_clobj.role = Stream.clone(role);
			_kio_clobj.pets = Stream.clone(pets);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fightPower = is.popInteger();
			if( role == null )
				role = new RoleProfile();
			is.pop(role);
			pets = is.popList(PetProfile.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(fightPower);
			os.push(role);
			os.pushList(pets);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			fightPower = is.popInteger();
			role = is.pop(RoleProfile.class);
			pets = is.popList(PetProfile.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(fightPower);
			os.push(role);
			os.pushList(pets);
		}

		public int fightPower;
		public RoleProfile role;
		public List<PetProfile> pets;
	}

	public static class SectFinishedTaskRes implements Stream.IStreamable, Stream.KCloneable<SectFinishedTaskRes>, SStream.IStreamable
	{

		public SectFinishedTaskRes() { }

		public SectFinishedTaskRes(List<SectFinishedSelfTask> sectTask, Map<Integer, Integer> shareCount)
		{
			this.sectTask = sectTask;
			this.shareCount = shareCount;
		}

		public SectFinishedTaskRes ksClone()
		{
			return new SectFinishedTaskRes(sectTask, shareCount);
		}

		@Override
		public SectFinishedTaskRes kdClone()
		{
			SectFinishedTaskRes _kio_clobj = ksClone();
			_kio_clobj.sectTask = Stream.clone(sectTask);
			_kio_clobj.shareCount = new TreeMap<Integer, Integer>(shareCount);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectTask = is.popList(SectFinishedSelfTask.class);
			shareCount = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(sectTask);
			os.pushIntegerIntegerMap(shareCount);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			sectTask = is.popList(SectFinishedSelfTask.class);
			shareCount = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushList(sectTask);
			os.pushIntegerIntegerMap(shareCount);
		}

		public List<SectFinishedSelfTask> sectTask;
		public Map<Integer, Integer> shareCount;
	}

	public static class BossState implements Stream.IStreamable, Stream.KCloneable<BossState>, SStream.IStreamable
	{

		public BossState() { }

		public BossState(int state, String killerName)
		{
			this.state = state;
			this.killerName = killerName;
		}

		public BossState ksClone()
		{
			return new BossState(state, killerName);
		}

		@Override
		public BossState kdClone()
		{
			BossState _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			state = is.popInteger();
			killerName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(state);
			os.pushString(killerName);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			state = is.popInteger();
			killerName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(state);
			os.pushString(killerName);
		}

		public int state;
		public String killerName;
	}

	public static class FriendOverview implements Stream.IStreamable, Stream.KCloneable<FriendOverview>, SStream.IStreamable
	{

		public FriendOverview() { }

		public FriendOverview(RoleOverview overview, String personalMsg, int lastLoginTime, byte online)
		{
			this.overview = overview;
			this.personalMsg = personalMsg;
			this.lastLoginTime = lastLoginTime;
			this.online = online;
		}

		public FriendOverview ksClone()
		{
			return new FriendOverview(overview, personalMsg, lastLoginTime, online);
		}

		@Override
		public FriendOverview kdClone()
		{
			FriendOverview _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
			personalMsg = is.popString();
			lastLoginTime = is.popInteger();
			online = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.pushString(personalMsg);
			os.pushInteger(lastLoginTime);
			os.pushByte(online);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overview = is.pop(RoleOverview.class);
			personalMsg = is.popString();
			lastLoginTime = is.popInteger();
			online = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overview);
			os.pushString(personalMsg);
			os.pushInteger(lastLoginTime);
			os.pushByte(online);
		}

		public RoleOverview overview;
		public String personalMsg;
		public int lastLoginTime;
		public byte online;
	}

	public static class EnemyOverview implements Stream.IStreamable, Stream.KCloneable<EnemyOverview>, SStream.IStreamable
	{

		public EnemyOverview() { }

		public EnemyOverview(RoleOverview overview, int killTime, int curMapID, int curLine)
		{
			this.overview = overview;
			this.killTime = killTime;
			this.curMapID = curMapID;
			this.curLine = curLine;
		}

		public EnemyOverview ksClone()
		{
			return new EnemyOverview(overview, killTime, curMapID, curLine);
		}

		@Override
		public EnemyOverview kdClone()
		{
			EnemyOverview _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
			killTime = is.popInteger();
			curMapID = is.popInteger();
			curLine = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.pushInteger(killTime);
			os.pushInteger(curMapID);
			os.pushInteger(curLine);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overview = is.pop(RoleOverview.class);
			killTime = is.popInteger();
			curMapID = is.popInteger();
			curLine = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overview);
			os.pushInteger(killTime);
			os.pushInteger(curMapID);
			os.pushInteger(curLine);
		}

		public RoleOverview overview;
		public int killTime;
		public int curMapID;
		public int curLine;
	}

	public static class FriendInfo implements Stream.IStreamable, Stream.KCloneable<FriendInfo>, SStream.IStreamable
	{

		public FriendInfo() { }

		public FriendInfo(int focusValue, int addTime, int sendVit, int receiveVit, 
		                  int eachFriend, FriendOverview fov)
		{
			this.focusValue = focusValue;
			this.addTime = addTime;
			this.sendVit = sendVit;
			this.receiveVit = receiveVit;
			this.eachFriend = eachFriend;
			this.fov = fov;
		}

		public FriendInfo ksClone()
		{
			return new FriendInfo(focusValue, addTime, sendVit, receiveVit, 
			                      eachFriend, fov);
		}

		@Override
		public FriendInfo kdClone()
		{
			FriendInfo _kio_clobj = ksClone();
			_kio_clobj.fov = Stream.clone(fov);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			focusValue = is.popInteger();
			addTime = is.popInteger();
			sendVit = is.popInteger();
			receiveVit = is.popInteger();
			eachFriend = is.popInteger();
			if( fov == null )
				fov = new FriendOverview();
			is.pop(fov);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(focusValue);
			os.pushInteger(addTime);
			os.pushInteger(sendVit);
			os.pushInteger(receiveVit);
			os.pushInteger(eachFriend);
			os.push(fov);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			focusValue = is.popInteger();
			addTime = is.popInteger();
			sendVit = is.popInteger();
			receiveVit = is.popInteger();
			eachFriend = is.popInteger();
			fov = is.pop(FriendOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(focusValue);
			os.pushInteger(addTime);
			os.pushInteger(sendVit);
			os.pushInteger(receiveVit);
			os.pushInteger(eachFriend);
			os.push(fov);
		}

		public int focusValue;
		public int addTime;
		public int sendVit;
		public int receiveVit;
		public int eachFriend;
		public FriendOverview fov;
	}

	public static class FlowerOverview implements Stream.IStreamable, Stream.KCloneable<FlowerOverview>, SStream.IStreamable
	{

		public FlowerOverview() { }

		public FlowerOverview(RoleOverview overview, int vipLvl, int charm, int contribution)
		{
			this.overview = overview;
			this.vipLvl = vipLvl;
			this.charm = charm;
			this.contribution = contribution;
		}

		public FlowerOverview ksClone()
		{
			return new FlowerOverview(overview, vipLvl, charm, contribution);
		}

		@Override
		public FlowerOverview kdClone()
		{
			FlowerOverview _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
			vipLvl = is.popInteger();
			charm = is.popInteger();
			contribution = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.pushInteger(vipLvl);
			os.pushInteger(charm);
			os.pushInteger(contribution);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overview = is.pop(RoleOverview.class);
			vipLvl = is.popInteger();
			charm = is.popInteger();
			contribution = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overview);
			os.pushInteger(vipLvl);
			os.pushInteger(charm);
			os.pushInteger(contribution);
		}

		public RoleOverview overview;
		public int vipLvl;
		public int charm;
		public int contribution;
	}

	public static class FlowerLog implements Stream.IStreamable, Stream.KCloneable<FlowerLog>
	{

		public FlowerLog() { }

		public FlowerLog(int roleID, int count)
		{
			this.roleID = roleID;
			this.count = count;
		}

		public FlowerLog ksClone()
		{
			return new FlowerLog(roleID, count);
		}

		@Override
		public FlowerLog kdClone()
		{
			FlowerLog _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(count);
		}

		public int roleID;
		public int count;
	}

	public static class TimeData implements Stream.IStreamable, Stream.KCloneable<TimeData>, SStream.IStreamable
	{

		public TimeData() { }

		public TimeData(int rid, int time)
		{
			this.rid = rid;
			this.time = time;
		}

		public TimeData ksClone()
		{
			return new TimeData(rid, time);
		}

		@Override
		public TimeData kdClone()
		{
			TimeData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			time = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(time);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rid = is.popInteger();
			time = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(time);
		}

		public int rid;
		public int time;
	}

	public static class ChallengeTaskInfo implements Stream.IStreamable, Stream.KCloneable<ChallengeTaskInfo>, SStream.IStreamable
	{

		public ChallengeTaskInfo() { }

		public ChallengeTaskInfo(int type, int seq, int seqValue, byte reward)
		{
			this.type = type;
			this.seq = seq;
			this.seqValue = seqValue;
			this.reward = reward;
		}

		public ChallengeTaskInfo ksClone()
		{
			return new ChallengeTaskInfo(type, seq, seqValue, reward);
		}

		@Override
		public ChallengeTaskInfo kdClone()
		{
			ChallengeTaskInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			seq = is.popInteger();
			seqValue = is.popInteger();
			reward = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(seq);
			os.pushInteger(seqValue);
			os.pushByte(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			type = is.popInteger();
			seq = is.popInteger();
			seqValue = is.popInteger();
			reward = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(type);
			os.pushInteger(seq);
			os.pushInteger(seqValue);
			os.pushByte(reward);
		}

		public int type;
		public int seq;
		public int seqValue;
		public byte reward;
	}

	public static class FameInfo implements Stream.IStreamable, Stream.KCloneable<FameInfo>, SStream.IStreamable
	{

		public FameInfo() { }

		public FameInfo(int reawrd, int upgradeTime, List<Integer> nextLevelCond)
		{
			this.reawrd = reawrd;
			this.upgradeTime = upgradeTime;
			this.nextLevelCond = nextLevelCond;
		}

		public FameInfo ksClone()
		{
			return new FameInfo(reawrd, upgradeTime, nextLevelCond);
		}

		@Override
		public FameInfo kdClone()
		{
			FameInfo _kio_clobj = ksClone();
			_kio_clobj.nextLevelCond = new ArrayList<Integer>(nextLevelCond);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			reawrd = is.popInteger();
			upgradeTime = is.popInteger();
			nextLevelCond = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(reawrd);
			os.pushInteger(upgradeTime);
			os.pushIntegerList(nextLevelCond);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			reawrd = is.popInteger();
			upgradeTime = is.popInteger();
			nextLevelCond = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(reawrd);
			os.pushInteger(upgradeTime);
			os.pushIntegerList(nextLevelCond);
		}

		public int reawrd;
		public int upgradeTime;
		public List<Integer> nextLevelCond;
	}

	public static class QuizGiftRankRole implements Stream.IStreamable, Stream.KCloneable<QuizGiftRankRole>, SStream.IStreamable
	{

		public QuizGiftRankRole() { }

		public QuizGiftRankRole(int bonus, int roleId, String roleName)
		{
			this.bonus = bonus;
			this.roleId = roleId;
			this.roleName = roleName;
		}

		public QuizGiftRankRole ksClone()
		{
			return new QuizGiftRankRole(bonus, roleId, roleName);
		}

		@Override
		public QuizGiftRankRole kdClone()
		{
			QuizGiftRankRole _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bonus = is.popInteger();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bonus);
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			bonus = is.popInteger();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(bonus);
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int bonus;
		public int roleId;
		public String roleName;
	}

	public static class QuizGiftInfo implements Stream.IStreamable, Stream.KCloneable<QuizGiftInfo>, SStream.IStreamable
	{

		public QuizGiftInfo() { }

		public QuizGiftInfo(int startTime, int curSeq, int curQuestion, DBQuizGift data)
		{
			this.startTime = startTime;
			this.curSeq = curSeq;
			this.curQuestion = curQuestion;
			this.data = data;
		}

		public QuizGiftInfo ksClone()
		{
			return new QuizGiftInfo(startTime, curSeq, curQuestion, data);
		}

		@Override
		public QuizGiftInfo kdClone()
		{
			QuizGiftInfo _kio_clobj = ksClone();
			_kio_clobj.data = Stream.clone(data);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			startTime = is.popInteger();
			curSeq = is.popInteger();
			curQuestion = is.popInteger();
			if( data == null )
				data = new DBQuizGift();
			is.pop(data);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(startTime);
			os.pushInteger(curSeq);
			os.pushInteger(curQuestion);
			os.push(data);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			startTime = is.popInteger();
			curSeq = is.popInteger();
			curQuestion = is.popInteger();
			data = is.pop(DBQuizGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(startTime);
			os.pushInteger(curSeq);
			os.pushInteger(curQuestion);
			os.push(data);
		}

		public int startTime;
		public int curSeq;
		public int curQuestion;
		public DBQuizGift data;
	}

	public static class ForceWarOverview implements Stream.IStreamable, Stream.KCloneable<ForceWarOverview>, SStream.IStreamable
	{

		public ForceWarOverview() { }

		public ForceWarOverview(int rid, int rank, String name, int level, 
		                        int kills, int bekills, int killNpcs, int assist, 
		                        int score, int gainFeat, byte quit)
		{
			this.rid = rid;
			this.rank = rank;
			this.name = name;
			this.level = level;
			this.kills = kills;
			this.bekills = bekills;
			this.killNpcs = killNpcs;
			this.assist = assist;
			this.score = score;
			this.gainFeat = gainFeat;
			this.quit = quit;
		}

		public ForceWarOverview ksClone()
		{
			return new ForceWarOverview(rid, rank, name, level, 
			                            kills, bekills, killNpcs, assist, 
			                            score, gainFeat, quit);
		}

		@Override
		public ForceWarOverview kdClone()
		{
			ForceWarOverview _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			rank = is.popInteger();
			name = is.popString();
			level = is.popInteger();
			kills = is.popInteger();
			bekills = is.popInteger();
			killNpcs = is.popInteger();
			assist = is.popInteger();
			score = is.popInteger();
			gainFeat = is.popInteger();
			quit = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(rank);
			os.pushString(name);
			os.pushInteger(level);
			os.pushInteger(kills);
			os.pushInteger(bekills);
			os.pushInteger(killNpcs);
			os.pushInteger(assist);
			os.pushInteger(score);
			os.pushInteger(gainFeat);
			os.pushByte(quit);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			rid = is.popInteger();
			rank = is.popInteger();
			name = is.popString();
			level = is.popInteger();
			kills = is.popInteger();
			bekills = is.popInteger();
			killNpcs = is.popInteger();
			assist = is.popInteger();
			score = is.popInteger();
			gainFeat = is.popInteger();
			quit = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(rank);
			os.pushString(name);
			os.pushInteger(level);
			os.pushInteger(kills);
			os.pushInteger(bekills);
			os.pushInteger(killNpcs);
			os.pushInteger(assist);
			os.pushInteger(score);
			os.pushInteger(gainFeat);
			os.pushByte(quit);
		}

		public int rid;
		public int rank;
		public String name;
		public int level;
		public int kills;
		public int bekills;
		public int killNpcs;
		public int assist;
		public int score;
		public int gainFeat;
		public byte quit;
	}

	public static class ForceWarJoin implements Stream.IStreamable, Stream.KCloneable<ForceWarJoin>, SStream.IStreamable
	{

		public ForceWarJoin() { }

		public ForceWarJoin(RoleOverview overview, int dayEnterTimes, int curWeekFeat, int rankClearTime)
		{
			this.overview = overview;
			this.dayEnterTimes = dayEnterTimes;
			this.curWeekFeat = curWeekFeat;
			this.rankClearTime = rankClearTime;
		}

		public ForceWarJoin ksClone()
		{
			return new ForceWarJoin(overview, dayEnterTimes, curWeekFeat, rankClearTime);
		}

		@Override
		public ForceWarJoin kdClone()
		{
			ForceWarJoin _kio_clobj = ksClone();
			_kio_clobj.overview = Stream.clone(overview);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
			dayEnterTimes = is.popInteger();
			curWeekFeat = is.popInteger();
			rankClearTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(curWeekFeat);
			os.pushInteger(rankClearTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			overview = is.pop(RoleOverview.class);
			dayEnterTimes = is.popInteger();
			curWeekFeat = is.popInteger();
			rankClearTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(overview);
			os.pushInteger(dayEnterTimes);
			os.pushInteger(curWeekFeat);
			os.pushInteger(rankClearTime);
		}

		public RoleOverview overview;
		public int dayEnterTimes;
		public int curWeekFeat;
		public int rankClearTime;
	}

	public static class RankClearTime implements Stream.IStreamable, Stream.KCloneable<RankClearTime>, SStream.IStreamable
	{

		public RankClearTime() { }

		public RankClearTime(int whiteClearTime, int blackClearTime)
		{
			this.whiteClearTime = whiteClearTime;
			this.blackClearTime = blackClearTime;
		}

		public RankClearTime ksClone()
		{
			return new RankClearTime(whiteClearTime, blackClearTime);
		}

		@Override
		public RankClearTime kdClone()
		{
			RankClearTime _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			whiteClearTime = is.popInteger();
			blackClearTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(whiteClearTime);
			os.pushInteger(blackClearTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			whiteClearTime = is.popInteger();
			blackClearTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(whiteClearTime);
			os.pushInteger(blackClearTime);
		}

		public int whiteClearTime;
		public int blackClearTime;
	}

	public static class MulRoleInfo implements Stream.IStreamable, Stream.KCloneable<MulRoleInfo>, SStream.IStreamable
	{

		public MulRoleInfo() { }

		public MulRoleInfo(int type, int leader, List<Integer> members)
		{
			this.type = type;
			this.leader = leader;
			this.members = members;
		}

		public MulRoleInfo ksClone()
		{
			return new MulRoleInfo(type, leader, members);
		}

		@Override
		public MulRoleInfo kdClone()
		{
			MulRoleInfo _kio_clobj = ksClone();
			_kio_clobj.members = new ArrayList<Integer>(members);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			leader = is.popInteger();
			members = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(leader);
			os.pushIntegerList(members);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			type = is.popInteger();
			leader = is.popInteger();
			members = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(type);
			os.pushInteger(leader);
			os.pushIntegerList(members);
		}

		public int type;
		public int leader;
		public List<Integer> members;
	}

	public static class DamageInfo implements Stream.IStreamable, Stream.KCloneable<DamageInfo>, SStream.IStreamable
	{

		public DamageInfo() { }

		public DamageInfo(int roleID, String roleName, int damage)
		{
			this.roleID = roleID;
			this.roleName = roleName;
			this.damage = damage;
		}

		public DamageInfo ksClone()
		{
			return new DamageInfo(roleID, roleName, damage);
		}

		@Override
		public DamageInfo kdClone()
		{
			DamageInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
			damage = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(damage);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
			damage = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(damage);
		}

		public int roleID;
		public String roleName;
		public int damage;
	}

	public static class BossReward implements Stream.IStreamable, Stream.KCloneable<BossReward>, SStream.IStreamable
	{

		public BossReward() { }

		public BossReward(DamageInfo damage, Map<Integer, Integer> reward)
		{
			this.damage = damage;
			this.reward = reward;
		}

		public BossReward ksClone()
		{
			return new BossReward(damage, reward);
		}

		@Override
		public BossReward kdClone()
		{
			BossReward _kio_clobj = ksClone();
			_kio_clobj.damage = Stream.clone(damage);
			_kio_clobj.reward = new TreeMap<Integer, Integer>(reward);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( damage == null )
				damage = new DamageInfo();
			is.pop(damage);
			reward = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(damage);
			os.pushIntegerIntegerMap(reward);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			damage = is.pop(DamageInfo.class);
			reward = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(damage);
			os.pushIntegerIntegerMap(reward);
		}

		public DamageInfo damage;
		public Map<Integer, Integer> reward;
	}

	public static class BossRecord implements Stream.IStreamable, Stream.KCloneable<BossRecord>, SStream.IStreamable
	{

		public BossRecord() { }

		public BossRecord(BossReward killer, List<BossReward> rank)
		{
			this.killer = killer;
			this.rank = rank;
		}

		public BossRecord ksClone()
		{
			return new BossRecord(killer, rank);
		}

		@Override
		public BossRecord kdClone()
		{
			BossRecord _kio_clobj = ksClone();
			_kio_clobj.killer = Stream.clone(killer);
			_kio_clobj.rank = Stream.clone(rank);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( killer == null )
				killer = new BossReward();
			is.pop(killer);
			rank = is.popList(BossReward.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(killer);
			os.pushList(rank);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			killer = is.pop(BossReward.class);
			rank = is.popList(BossReward.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(killer);
			os.pushList(rank);
		}

		public BossReward killer;
		public List<BossReward> rank;
	}

	public static class MarriageShareOverView implements Stream.IStreamable, Stream.KCloneable<MarriageShareOverView>, SStream.IStreamable
	{

		public MarriageShareOverView() { }

		public MarriageShareOverView(int marriageType, int marriageExp, int marriageLevel, Map<Integer, MarriageSkillInfo> marriageSkill, 
		                             int marriageTime, int marriageStep, RoleOverview marriageRole)
		{
			this.marriageType = marriageType;
			this.marriageExp = marriageExp;
			this.marriageLevel = marriageLevel;
			this.marriageSkill = marriageSkill;
			this.marriageTime = marriageTime;
			this.marriageStep = marriageStep;
			this.marriageRole = marriageRole;
		}

		public MarriageShareOverView ksClone()
		{
			return new MarriageShareOverView(marriageType, marriageExp, marriageLevel, marriageSkill, 
			                                 marriageTime, marriageStep, marriageRole);
		}

		@Override
		public MarriageShareOverView kdClone()
		{
			MarriageShareOverView _kio_clobj = ksClone();
			_kio_clobj.marriageSkill = Stream.clone(marriageSkill);
			_kio_clobj.marriageRole = Stream.clone(marriageRole);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			marriageType = is.popInteger();
			marriageExp = is.popInteger();
			marriageLevel = is.popInteger();
			marriageSkill = is.popIntegerTreeMap(MarriageSkillInfo.class);
			marriageTime = is.popInteger();
			marriageStep = is.popInteger();
			if( marriageRole == null )
				marriageRole = new RoleOverview();
			is.pop(marriageRole);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(marriageType);
			os.pushInteger(marriageExp);
			os.pushInteger(marriageLevel);
			os.pushIntegerMap(marriageSkill);
			os.pushInteger(marriageTime);
			os.pushInteger(marriageStep);
			os.push(marriageRole);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			marriageType = is.popInteger();
			marriageExp = is.popInteger();
			marriageLevel = is.popInteger();
			marriageSkill = is.popIntegerTreeMap(MarriageSkillInfo.class);
			marriageTime = is.popInteger();
			marriageStep = is.popInteger();
			marriageRole = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(marriageType);
			os.pushInteger(marriageExp);
			os.pushInteger(marriageLevel);
			os.pushIntegerMap(marriageSkill);
			os.pushInteger(marriageTime);
			os.pushInteger(marriageStep);
			os.push(marriageRole);
		}

		public int marriageType;
		public int marriageExp;
		public int marriageLevel;
		public Map<Integer, MarriageSkillInfo> marriageSkill;
		public int marriageTime;
		public int marriageStep;
		public RoleOverview marriageRole;
	}

	public static class MarriageSkillInfo implements Stream.IStreamable, Stream.KCloneable<MarriageSkillInfo>, SStream.IStreamable
	{

		public MarriageSkillInfo() { }

		public MarriageSkillInfo(int skillId, int skillLevel, int skillUpTimes)
		{
			this.skillId = skillId;
			this.skillLevel = skillLevel;
			this.skillUpTimes = skillUpTimes;
		}

		public MarriageSkillInfo ksClone()
		{
			return new MarriageSkillInfo(skillId, skillLevel, skillUpTimes);
		}

		@Override
		public MarriageSkillInfo kdClone()
		{
			MarriageSkillInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
			skillLevel = is.popInteger();
			skillUpTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
			os.pushInteger(skillLevel);
			os.pushInteger(skillUpTimes);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			skillId = is.popInteger();
			skillLevel = is.popInteger();
			skillUpTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(skillId);
			os.pushInteger(skillLevel);
			os.pushInteger(skillUpTimes);
		}

		public int skillId;
		public int skillLevel;
		public int skillUpTimes;
	}

	public static class RoleDamageDetail implements Stream.IStreamable, Stream.KCloneable<RoleDamageDetail>, SStream.IStreamable
	{

		public RoleDamageDetail() { }

		public RoleDamageDetail(RoleOverview role, int damage)
		{
			this.role = role;
			this.damage = damage;
		}

		public RoleDamageDetail ksClone()
		{
			return new RoleDamageDetail(role, damage);
		}

		@Override
		public RoleDamageDetail kdClone()
		{
			RoleDamageDetail _kio_clobj = ksClone();
			_kio_clobj.role = Stream.clone(role);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( role == null )
				role = new RoleOverview();
			is.pop(role);
			damage = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(role);
			os.pushInteger(damage);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			role = is.pop(RoleOverview.class);
			damage = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(role);
			os.pushInteger(damage);
		}

		public RoleOverview role;
		public int damage;
	}

	public static class AttackDamageDetail implements Stream.IStreamable, Stream.KCloneable<AttackDamageDetail>, SStream.IStreamable
	{

		public AttackDamageDetail() { }

		public AttackDamageDetail(String attackName, int damage)
		{
			this.attackName = attackName;
			this.damage = damage;
		}

		public AttackDamageDetail ksClone()
		{
			return new AttackDamageDetail(attackName, damage);
		}

		@Override
		public AttackDamageDetail kdClone()
		{
			AttackDamageDetail _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			attackName = is.popString();
			damage = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(attackName);
			os.pushInteger(damage);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			attackName = is.popString();
			damage = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(attackName);
			os.pushInteger(damage);
		}

		public String attackName;
		public int damage;
	}

	public static class SectGroupMapCurInfo implements Stream.IStreamable, Stream.KCloneable<SectGroupMapCurInfo>, SStream.IStreamable
	{

		public SectGroupMapCurInfo() { }

		public SectGroupMapCurInfo(int curMapId, int curInstance, int curProgress, Set<Integer> curRoles)
		{
			this.curMapId = curMapId;
			this.curInstance = curInstance;
			this.curProgress = curProgress;
			this.curRoles = curRoles;
		}

		public SectGroupMapCurInfo ksClone()
		{
			return new SectGroupMapCurInfo(curMapId, curInstance, curProgress, curRoles);
		}

		@Override
		public SectGroupMapCurInfo kdClone()
		{
			SectGroupMapCurInfo _kio_clobj = ksClone();
			_kio_clobj.curRoles = new TreeSet<Integer>(curRoles);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curMapId = is.popInteger();
			curInstance = is.popInteger();
			curProgress = is.popInteger();
			curRoles = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curMapId);
			os.pushInteger(curInstance);
			os.pushInteger(curProgress);
			os.pushIntegerSet(curRoles);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			curMapId = is.popInteger();
			curInstance = is.popInteger();
			curProgress = is.popInteger();
			curRoles = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(curMapId);
			os.pushInteger(curInstance);
			os.pushInteger(curProgress);
			os.pushIntegerSet(curRoles);
		}

		public int curMapId;
		public int curInstance;
		public int curProgress;
		public Set<Integer> curRoles;
	}

	public static class MapFlagInfo implements Stream.IStreamable, Stream.KCloneable<MapFlagInfo>, SStream.IStreamable
	{

		public MapFlagInfo() { }

		public MapFlagInfo(int mapId, MapFlagSectOverView curSect, int occupyTime, int lastRoleRewardTime, 
		                   int lastSectRewardTime, byte cantake)
		{
			this.mapId = mapId;
			this.curSect = curSect;
			this.occupyTime = occupyTime;
			this.lastRoleRewardTime = lastRoleRewardTime;
			this.lastSectRewardTime = lastSectRewardTime;
			this.cantake = cantake;
		}

		public MapFlagInfo ksClone()
		{
			return new MapFlagInfo(mapId, curSect, occupyTime, lastRoleRewardTime, 
			                       lastSectRewardTime, cantake);
		}

		@Override
		public MapFlagInfo kdClone()
		{
			MapFlagInfo _kio_clobj = ksClone();
			_kio_clobj.curSect = Stream.clone(curSect);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			if( curSect == null )
				curSect = new MapFlagSectOverView();
			is.pop(curSect);
			occupyTime = is.popInteger();
			lastRoleRewardTime = is.popInteger();
			lastSectRewardTime = is.popInteger();
			cantake = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.push(curSect);
			os.pushInteger(occupyTime);
			os.pushInteger(lastRoleRewardTime);
			os.pushInteger(lastSectRewardTime);
			os.pushByte(cantake);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			mapId = is.popInteger();
			curSect = is.pop(MapFlagSectOverView.class);
			occupyTime = is.popInteger();
			lastRoleRewardTime = is.popInteger();
			lastSectRewardTime = is.popInteger();
			cantake = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(mapId);
			os.push(curSect);
			os.pushInteger(occupyTime);
			os.pushInteger(lastRoleRewardTime);
			os.pushInteger(lastSectRewardTime);
			os.pushByte(cantake);
		}

		public int mapId;
		public MapFlagSectOverView curSect;
		public int occupyTime;
		public int lastRoleRewardTime;
		public int lastSectRewardTime;
		public byte cantake;
	}

	public static class MonsterProcess implements Stream.IStreamable, Stream.KCloneable<MonsterProcess>, SStream.IStreamable
	{

		public MonsterProcess() { }

		public MonsterProcess(Map<Integer, Integer> monsterProcess)
		{
			this.monsterProcess = monsterProcess;
		}

		public MonsterProcess ksClone()
		{
			return new MonsterProcess(monsterProcess);
		}

		@Override
		public MonsterProcess kdClone()
		{
			MonsterProcess _kio_clobj = ksClone();
			_kio_clobj.monsterProcess = new TreeMap<Integer, Integer>(monsterProcess);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			monsterProcess = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(monsterProcess);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			monsterProcess = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(monsterProcess);
		}

		public Map<Integer, Integer> monsterProcess;
	}

	public static class MapFlagSectOverView implements Stream.IStreamable, Stream.KCloneable<MapFlagSectOverView>, SStream.IStreamable
	{

		public MapFlagSectOverView() { }

		public MapFlagSectOverView(int sectId, String sectName, int sectIcon)
		{
			this.sectId = sectId;
			this.sectName = sectName;
			this.sectIcon = sectIcon;
		}

		public MapFlagSectOverView ksClone()
		{
			return new MapFlagSectOverView(sectId, sectName, sectIcon);
		}

		@Override
		public MapFlagSectOverView kdClone()
		{
			MapFlagSectOverView _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectId = is.popInteger();
			sectName = is.popString();
			sectIcon = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sectId);
			os.pushString(sectName);
			os.pushInteger(sectIcon);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			sectId = is.popInteger();
			sectName = is.popString();
			sectIcon = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(sectId);
			os.pushString(sectName);
			os.pushInteger(sectIcon);
		}

		public int sectId;
		public String sectName;
		public int sectIcon;
	}

	public static class ActivityEntity implements Stream.IStreamable, Stream.KCloneable<ActivityEntity>, SStream.IStreamable
	{

		public ActivityEntity() { }

		public ActivityEntity(int id, int entityType, int mapID, int mapLine, 
		                      int seq)
		{
			this.id = id;
			this.entityType = entityType;
			this.mapID = mapID;
			this.mapLine = mapLine;
			this.seq = seq;
		}

		public ActivityEntity ksClone()
		{
			return new ActivityEntity(id, entityType, mapID, mapLine, 
			                          seq);
		}

		@Override
		public ActivityEntity kdClone()
		{
			ActivityEntity _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			entityType = is.popInteger();
			mapID = is.popInteger();
			mapLine = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(entityType);
			os.pushInteger(mapID);
			os.pushInteger(mapLine);
			os.pushInteger(seq);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			entityType = is.popInteger();
			mapID = is.popInteger();
			mapLine = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushInteger(entityType);
			os.pushInteger(mapID);
			os.pushInteger(mapLine);
			os.pushInteger(seq);
		}

		public int id;
		public int entityType;
		public int mapID;
		public int mapLine;
		public int seq;
	}

	public static class RevengeEntity implements Stream.IStreamable, Stream.KCloneable<RevengeEntity>, SStream.IStreamable
	{

		public RevengeEntity() { }

		public RevengeEntity(int id, String name)
		{
			this.id = id;
			this.name = name;
		}

		public RevengeEntity ksClone()
		{
			return new RevengeEntity(id, name);
		}

		@Override
		public RevengeEntity kdClone()
		{
			RevengeEntity _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
		}

		public int id;
		public String name;
	}

	public static class OfflineReward implements Stream.IStreamable, Stream.KCloneable<OfflineReward>, SStream.IStreamable
	{

		public OfflineReward() { }

		public OfflineReward(long exp, long realExp, List<DummyGoods> items)
		{
			this.exp = exp;
			this.realExp = realExp;
			this.items = items;
		}

		public OfflineReward ksClone()
		{
			return new OfflineReward(exp, realExp, items);
		}

		@Override
		public OfflineReward kdClone()
		{
			OfflineReward _kio_clobj = ksClone();
			_kio_clobj.items = Stream.clone(items);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			exp = is.popLong();
			realExp = is.popLong();
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushLong(exp);
			os.pushLong(realExp);
			os.pushList(items);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			exp = is.popLong();
			realExp = is.popLong();
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushLong(exp);
			os.pushLong(realExp);
			os.pushList(items);
		}

		public long exp;
		public long realExp;
		public List<DummyGoods> items;
	}

	public static class ProposeData implements Stream.IStreamable, Stream.KCloneable<ProposeData>
	{

		public ProposeData() { }

		public ProposeData(int grade, int marriageEndTime)
		{
			this.grade = grade;
			this.marriageEndTime = marriageEndTime;
		}

		public ProposeData ksClone()
		{
			return new ProposeData(grade, marriageEndTime);
		}

		@Override
		public ProposeData kdClone()
		{
			ProposeData _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			grade = is.popInteger();
			marriageEndTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(grade);
			os.pushInteger(marriageEndTime);
		}

		public int grade;
		public int marriageEndTime;
	}

	public static class RoleDemonHole implements Stream.IStreamable, Stream.KCloneable<RoleDemonHole>, SStream.IStreamable
	{

		public RoleDemonHole() { }

		public RoleDemonHole(RoleOverview role, int kills, int bekills, int curFloor)
		{
			this.role = role;
			this.kills = kills;
			this.bekills = bekills;
			this.curFloor = curFloor;
		}

		public RoleDemonHole ksClone()
		{
			return new RoleDemonHole(role, kills, bekills, curFloor);
		}

		@Override
		public RoleDemonHole kdClone()
		{
			RoleDemonHole _kio_clobj = ksClone();
			_kio_clobj.role = Stream.clone(role);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( role == null )
				role = new RoleOverview();
			is.pop(role);
			kills = is.popInteger();
			bekills = is.popInteger();
			curFloor = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(role);
			os.pushInteger(kills);
			os.pushInteger(bekills);
			os.pushInteger(curFloor);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			role = is.pop(RoleOverview.class);
			kills = is.popInteger();
			bekills = is.popInteger();
			curFloor = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.push(role);
			os.pushInteger(kills);
			os.pushInteger(bekills);
			os.pushInteger(curFloor);
		}

		public RoleOverview role;
		public int kills;
		public int bekills;
		public int curFloor;
	}

	public static class SyncGroupMapBean implements Stream.IStreamable, Stream.KCloneable<SyncGroupMapBean>
	{

		public SyncGroupMapBean() { }

		public SyncGroupMapBean(Map<Integer, DBSectGroupMapData> sectGroupMapInfo, List<Integer> sectMemberLevel)
		{
			this.sectGroupMapInfo = sectGroupMapInfo;
			this.sectMemberLevel = sectMemberLevel;
		}

		public SyncGroupMapBean ksClone()
		{
			return new SyncGroupMapBean(sectGroupMapInfo, sectMemberLevel);
		}

		@Override
		public SyncGroupMapBean kdClone()
		{
			SyncGroupMapBean _kio_clobj = ksClone();
			_kio_clobj.sectGroupMapInfo = Stream.clone(sectGroupMapInfo);
			_kio_clobj.sectMemberLevel = new ArrayList<Integer>(sectMemberLevel);
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectGroupMapInfo = is.popIntegerTreeMap(DBSectGroupMapData.class);
			sectMemberLevel = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(sectGroupMapInfo);
			os.pushIntegerList(sectMemberLevel);
		}

		public Map<Integer, DBSectGroupMapData> sectGroupMapInfo;
		public List<Integer> sectMemberLevel;
	}

	public static class EmergencyInfo implements Stream.IStreamable, Stream.KCloneable<EmergencyInfo>, SStream.IStreamable
	{

		public EmergencyInfo() { }

		public EmergencyInfo(int activityId, int instanceId, int roleSize, byte isFinish, 
		                     int openTime)
		{
			this.activityId = activityId;
			this.instanceId = instanceId;
			this.roleSize = roleSize;
			this.isFinish = isFinish;
			this.openTime = openTime;
		}

		public EmergencyInfo ksClone()
		{
			return new EmergencyInfo(activityId, instanceId, roleSize, isFinish, 
			                         openTime);
		}

		@Override
		public EmergencyInfo kdClone()
		{
			EmergencyInfo _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			activityId = is.popInteger();
			instanceId = is.popInteger();
			roleSize = is.popInteger();
			isFinish = is.popByte();
			openTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(activityId);
			os.pushInteger(instanceId);
			os.pushInteger(roleSize);
			os.pushByte(isFinish);
			os.pushInteger(openTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			activityId = is.popInteger();
			instanceId = is.popInteger();
			roleSize = is.popInteger();
			isFinish = is.popByte();
			openTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(activityId);
			os.pushInteger(instanceId);
			os.pushInteger(roleSize);
			os.pushByte(isFinish);
			os.pushInteger(openTime);
		}

		public int activityId;
		public int instanceId;
		public int roleSize;
		public byte isFinish;
		public int openTime;
	}

	public static class SocialComment implements Stream.IStreamable, Stream.KCloneable<SocialComment>, SStream.IStreamable
	{

		public SocialComment() { }

		public SocialComment(int serverId, int roleId, String serverName, String roleName, 
		                     int commentId, String comment, int liked, int disliked, 
		                     int sendTime)
		{
			this.serverId = serverId;
			this.roleId = roleId;
			this.serverName = serverName;
			this.roleName = roleName;
			this.commentId = commentId;
			this.comment = comment;
			this.liked = liked;
			this.disliked = disliked;
			this.sendTime = sendTime;
		}

		public SocialComment ksClone()
		{
			return new SocialComment(serverId, roleId, serverName, roleName, 
			                         commentId, comment, liked, disliked, 
			                         sendTime);
		}

		@Override
		public SocialComment kdClone()
		{
			SocialComment _kio_clobj = ksClone();
			return _kio_clobj;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			serverId = is.popInteger();
			roleId = is.popInteger();
			serverName = is.popString();
			roleName = is.popString();
			commentId = is.popInteger();
			comment = is.popString();
			liked = is.popInteger();
			disliked = is.popInteger();
			sendTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(serverId);
			os.pushInteger(roleId);
			os.pushString(serverName);
			os.pushString(roleName);
			os.pushInteger(commentId);
			os.pushString(comment);
			os.pushInteger(liked);
			os.pushInteger(disliked);
			os.pushInteger(sendTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			serverId = is.popInteger();
			roleId = is.popInteger();
			serverName = is.popString();
			roleName = is.popString();
			commentId = is.popInteger();
			comment = is.popString();
			liked = is.popInteger();
			disliked = is.popInteger();
			sendTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushInteger(serverId);
			os.pushInteger(roleId);
			os.pushString(serverName);
			os.pushString(roleName);
			os.pushInteger(commentId);
			os.pushString(comment);
			os.pushInteger(liked);
			os.pushInteger(disliked);
			os.pushInteger(sendTime);
		}

		public int serverId;
		public int roleId;
		public String serverName;
		public String roleName;
		public int commentId;
		public String comment;
		public int liked;
		public int disliked;
		public int sendTime;
	}

	public static class MapSkillData implements Stream.IStreamable, SStream.IStreamable
	{

		public MapSkillData() { }

		public MapSkillData(Map<Integer, Integer> skillUseTime, int skillCommonUseTime)
		{
			this.skillUseTime = skillUseTime;
			this.skillCommonUseTime = skillCommonUseTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillUseTime = is.popIntegerIntegerTreeMap();
			skillCommonUseTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(skillUseTime);
			os.pushInteger(skillCommonUseTime);
		}

		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			skillUseTime = is.popIntegerIntegerTreeMap();
			skillCommonUseTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushIntegerIntegerMap(skillUseTime);
			os.pushInteger(skillCommonUseTime);
		}

		public Map<Integer, Integer> skillUseTime;
		public int skillCommonUseTime;
	}

	// echo client stamp + 1
	public static class server_echo implements Stream.IStreamable, SStream.IStrPacket
	{

		public server_echo() { }

		public server_echo(int stamp)
		{
			this.stamp = stamp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			stamp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(stamp);
		}

		@Override
		public String getPacketName()
		{
			return "server_echo";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			stamp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(stamp);
		}

		public int stamp;
	}

	// sync server info
	public static class server_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public server_info() { }

		public server_info(int now, int id, int openDay)
		{
			this.now = now;
			this.id = id;
			this.openDay = openDay;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			now = is.popInteger();
			id = is.popInteger();
			openDay = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(now);
			os.pushInteger(id);
			os.pushInteger(openDay);
		}

		@Override
		public String getPacketName()
		{
			return "server_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			now = is.popInteger();
			id = is.popInteger();
			openDay = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(now);
			os.pushInteger(id);
			os.pushInteger(openDay);
		}

		public int now;
		public int id;
		public int openDay;
	}

	// 强制用户退出
	public static class user_force_close implements Stream.IStreamable, SStream.IStrPacket
	{

		public user_force_close() { }

		public user_force_close(int errCode)
		{
			this.errCode = errCode;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			errCode = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(errCode);
		}

		@Override
		public String getPacketName()
		{
			return "user_force_close";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			errCode = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(errCode);
		}

		public int errCode;
	}

	// 用户登录后返回角色列表
	public static class user_role_list implements Stream.IStreamable, SStream.IStrPacket
	{

		public user_role_list() { }

		public user_role_list(List<RoleBrief> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(RoleBrief.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "user_role_list";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popList(RoleBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roles);
		}

		public List<RoleBrief> roles;
	}

	// 客户端登录响应
	public static class user_login_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public user_login_res() { }

		public user_login_res(int errCode, int arg, String reason)
		{
			this.errCode = errCode;
			this.arg = arg;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			errCode = is.popInteger();
			arg = is.popInteger();
			reason = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(errCode);
			os.pushInteger(arg);
			os.pushString(reason);
		}

		@Override
		public String getPacketName()
		{
			return "user_login_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			errCode = is.popInteger();
			arg = is.popInteger();
			reason = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(errCode);
			os.pushInteger(arg);
			os.pushString(reason);
		}

		public int errCode;
		public int arg;
		public String reason;
	}

	// 客户端通知服务器要退出到选人界面
	public static class role_logout_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_logout_res() { }

		public role_logout_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "role_logout_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 客户端查询排队位置
	public static class role_loginqueue_pos implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_loginqueue_pos() { }

		public role_loginqueue_pos(int pos)
		{
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pos);
		}

		@Override
		public String getPacketName()
		{
			return "role_loginqueue_pos";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pos);
		}

		public int pos;
	}

	// sync role refresh day
	public static class game_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public game_sync() { }

		public game_sync(int refreshDay)
		{
			this.refreshDay = refreshDay;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			refreshDay = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(refreshDay);
		}

		@Override
		public String getPacketName()
		{
			return "game_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			refreshDay = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(refreshDay);
		}

		public int refreshDay;
	}

	// sync client assert ignore list
	public static class assert_ignore_list implements Stream.IStreamable, SStream.IStrPacket
	{

		public assert_ignore_list() { }

		public assert_ignore_list(Set<String> keywords)
		{
			this.keywords = keywords;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			keywords = is.popStringTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushStringSet(keywords);
		}

		@Override
		public String getPacketName()
		{
			return "assert_ignore_list";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			keywords = is.popStringTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushStringSet(keywords);
		}

		public Set<String> keywords;
	}

	// 同步角色基本信息
	public static class role_base implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_base() { }

		public role_base(int id, String name, int createTime, short headIcon, 
		                 byte gender, byte face, byte hair, byte classType, 
		                 byte transformLevel, byte bwType, int vipLvl, int level, 
		                 long exp, long expVolume, int lastLevelUpTime, int lastReviveTime, 
		                 int vit, int vitRevertTime, int lastUseHpTime, int hpPool, 
		                 int diamondF, int diamondR, int coinF, int coinR, 
		                 int equipEnergy, int gemEnergy, int bookInspiration, int dayBuyCoinTimes, 
		                 int dayBuyVitTimes, Map<Integer, Integer> dayUseItemsTimes, int loginDays, int pkValue, 
		                 int nextLeaveWrongPosTime, int charm, int credit)
		{
			this.id = id;
			this.name = name;
			this.createTime = createTime;
			this.headIcon = headIcon;
			this.gender = gender;
			this.face = face;
			this.hair = hair;
			this.classType = classType;
			this.transformLevel = transformLevel;
			this.bwType = bwType;
			this.vipLvl = vipLvl;
			this.level = level;
			this.exp = exp;
			this.expVolume = expVolume;
			this.lastLevelUpTime = lastLevelUpTime;
			this.lastReviveTime = lastReviveTime;
			this.vit = vit;
			this.vitRevertTime = vitRevertTime;
			this.lastUseHpTime = lastUseHpTime;
			this.hpPool = hpPool;
			this.diamondF = diamondF;
			this.diamondR = diamondR;
			this.coinF = coinF;
			this.coinR = coinR;
			this.equipEnergy = equipEnergy;
			this.gemEnergy = gemEnergy;
			this.bookInspiration = bookInspiration;
			this.dayBuyCoinTimes = dayBuyCoinTimes;
			this.dayBuyVitTimes = dayBuyVitTimes;
			this.dayUseItemsTimes = dayUseItemsTimes;
			this.loginDays = loginDays;
			this.pkValue = pkValue;
			this.nextLeaveWrongPosTime = nextLeaveWrongPosTime;
			this.charm = charm;
			this.credit = credit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			createTime = is.popInteger();
			headIcon = is.popShort();
			gender = is.popByte();
			face = is.popByte();
			hair = is.popByte();
			classType = is.popByte();
			transformLevel = is.popByte();
			bwType = is.popByte();
			vipLvl = is.popInteger();
			level = is.popInteger();
			exp = is.popLong();
			expVolume = is.popLong();
			lastLevelUpTime = is.popInteger();
			lastReviveTime = is.popInteger();
			vit = is.popInteger();
			vitRevertTime = is.popInteger();
			lastUseHpTime = is.popInteger();
			hpPool = is.popInteger();
			diamondF = is.popInteger();
			diamondR = is.popInteger();
			coinF = is.popInteger();
			coinR = is.popInteger();
			equipEnergy = is.popInteger();
			gemEnergy = is.popInteger();
			bookInspiration = is.popInteger();
			dayBuyCoinTimes = is.popInteger();
			dayBuyVitTimes = is.popInteger();
			dayUseItemsTimes = is.popIntegerIntegerTreeMap();
			loginDays = is.popInteger();
			pkValue = is.popInteger();
			nextLeaveWrongPosTime = is.popInteger();
			charm = is.popInteger();
			credit = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(createTime);
			os.pushShort(headIcon);
			os.pushByte(gender);
			os.pushByte(face);
			os.pushByte(hair);
			os.pushByte(classType);
			os.pushByte(transformLevel);
			os.pushByte(bwType);
			os.pushInteger(vipLvl);
			os.pushInteger(level);
			os.pushLong(exp);
			os.pushLong(expVolume);
			os.pushInteger(lastLevelUpTime);
			os.pushInteger(lastReviveTime);
			os.pushInteger(vit);
			os.pushInteger(vitRevertTime);
			os.pushInteger(lastUseHpTime);
			os.pushInteger(hpPool);
			os.pushInteger(diamondF);
			os.pushInteger(diamondR);
			os.pushInteger(coinF);
			os.pushInteger(coinR);
			os.pushInteger(equipEnergy);
			os.pushInteger(gemEnergy);
			os.pushInteger(bookInspiration);
			os.pushInteger(dayBuyCoinTimes);
			os.pushInteger(dayBuyVitTimes);
			os.pushIntegerIntegerMap(dayUseItemsTimes);
			os.pushInteger(loginDays);
			os.pushInteger(pkValue);
			os.pushInteger(nextLeaveWrongPosTime);
			os.pushInteger(charm);
			os.pushInteger(credit);
		}

		@Override
		public String getPacketName()
		{
			return "role_base";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			name = is.popString();
			createTime = is.popInteger();
			headIcon = is.popShort();
			gender = is.popByte();
			face = is.popByte();
			hair = is.popByte();
			classType = is.popByte();
			transformLevel = is.popByte();
			bwType = is.popByte();
			vipLvl = is.popInteger();
			level = is.popInteger();
			exp = is.popLong();
			expVolume = is.popLong();
			lastLevelUpTime = is.popInteger();
			lastReviveTime = is.popInteger();
			vit = is.popInteger();
			vitRevertTime = is.popInteger();
			lastUseHpTime = is.popInteger();
			hpPool = is.popInteger();
			diamondF = is.popInteger();
			diamondR = is.popInteger();
			coinF = is.popInteger();
			coinR = is.popInteger();
			equipEnergy = is.popInteger();
			gemEnergy = is.popInteger();
			bookInspiration = is.popInteger();
			dayBuyCoinTimes = is.popInteger();
			dayBuyVitTimes = is.popInteger();
			dayUseItemsTimes = is.popIntegerIntegerTreeMap();
			loginDays = is.popInteger();
			pkValue = is.popInteger();
			nextLeaveWrongPosTime = is.popInteger();
			charm = is.popInteger();
			credit = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushString(name);
			os.pushInteger(createTime);
			os.pushShort(headIcon);
			os.pushByte(gender);
			os.pushByte(face);
			os.pushByte(hair);
			os.pushByte(classType);
			os.pushByte(transformLevel);
			os.pushByte(bwType);
			os.pushInteger(vipLvl);
			os.pushInteger(level);
			os.pushLong(exp);
			os.pushLong(expVolume);
			os.pushInteger(lastLevelUpTime);
			os.pushInteger(lastReviveTime);
			os.pushInteger(vit);
			os.pushInteger(vitRevertTime);
			os.pushInteger(lastUseHpTime);
			os.pushInteger(hpPool);
			os.pushInteger(diamondF);
			os.pushInteger(diamondR);
			os.pushInteger(coinF);
			os.pushInteger(coinR);
			os.pushInteger(equipEnergy);
			os.pushInteger(gemEnergy);
			os.pushInteger(bookInspiration);
			os.pushInteger(dayBuyCoinTimes);
			os.pushInteger(dayBuyVitTimes);
			os.pushIntegerIntegerMap(dayUseItemsTimes);
			os.pushInteger(loginDays);
			os.pushInteger(pkValue);
			os.pushInteger(nextLeaveWrongPosTime);
			os.pushInteger(charm);
			os.pushInteger(credit);
		}

		public int id;
		public String name;
		public int createTime;
		public short headIcon;
		public byte gender;
		public byte face;
		public byte hair;
		public byte classType;
		public byte transformLevel;
		public byte bwType;
		public int vipLvl;
		public int level;
		public long exp;
		public long expVolume;
		public int lastLevelUpTime;
		public int lastReviveTime;
		public int vit;
		public int vitRevertTime;
		public int lastUseHpTime;
		public int hpPool;
		public int diamondF;
		public int diamondR;
		public int coinF;
		public int coinR;
		public int equipEnergy;
		public int gemEnergy;
		public int bookInspiration;
		public int dayBuyCoinTimes;
		public int dayBuyVitTimes;
		public Map<Integer, Integer> dayUseItemsTimes;
		public int loginDays;
		public int pkValue;
		public int nextLeaveWrongPosTime;
		public int charm;
		public int credit;
	}

	// 特权卡更新信息
	public static class role_specialcards implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_specialcards() { }

		public role_specialcards(List<DBSpecialCardData> cards)
		{
			this.cards = cards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cards = is.popList(DBSpecialCardData.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(cards);
		}

		@Override
		public String getPacketName()
		{
			return "role_specialcards";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cards = is.popList(DBSpecialCardData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(cards);
		}

		public List<DBSpecialCardData> cards;
	}

	// 同步角色背包信息
	public static class role_bag implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_bag() { }

		public role_bag(DBItemCells bag)
		{
			this.bag = bag;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( bag == null )
				bag = new DBItemCells();
			is.pop(bag);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(bag);
		}

		@Override
		public String getPacketName()
		{
			return "role_bag";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bag = is.pop(DBItemCells.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(bag);
		}

		public DBItemCells bag;
	}

	// 同步角色穿戴信息
	public static class role_wear implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_wear() { }

		public role_wear(List<DBEquipPart> wearParts, Map<Integer, DBWearEquip> wearEquips)
		{
			this.wearParts = wearParts;
			this.wearEquips = wearEquips;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			wearParts = is.popList(DBEquipPart.class);
			wearEquips = is.popIntegerTreeMap(DBWearEquip.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(wearParts);
			os.pushIntegerMap(wearEquips);
		}

		@Override
		public String getPacketName()
		{
			return "role_wear";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			wearParts = is.popList(DBEquipPart.class);
			wearEquips = is.popIntegerTreeMap(DBWearEquip.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(wearParts);
			os.pushIntegerMap(wearEquips);
		}

		public List<DBEquipPart> wearParts;
		public Map<Integer, DBWearEquip> wearEquips;
	}

	// 同步角色套装收集信息
	public static class role_suite implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_suite() { }

		public role_suite(Map<Integer, DBSuite> suites)
		{
			this.suites = suites;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			suites = is.popIntegerTreeMap(DBSuite.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(suites);
		}

		@Override
		public String getPacketName()
		{
			return "role_suite";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			suites = is.popIntegerTreeMap(DBSuite.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(suites);
		}

		public Map<Integer, DBSuite> suites;
	}

	// 同步角色龙印信息
	public static class role_sealinfo implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sealinfo() { }

		public role_sealinfo(DBSealData seal)
		{
			this.seal = seal;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( seal == null )
				seal = new DBSealData();
			is.pop(seal);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(seal);
		}

		@Override
		public String getPacketName()
		{
			return "role_sealinfo";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seal = is.pop(DBSealData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(seal);
		}

		public DBSealData seal;
	}

	// 同步角色技能信息
	public static class role_skill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_skill() { }

		public role_skill(Map<Integer, DBSkill> skills, List<Integer> curSkills, int curUniqueSkill)
		{
			this.skills = skills;
			this.curSkills = curSkills;
			this.curUniqueSkill = curUniqueSkill;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skills = is.popIntegerTreeMap(DBSkill.class);
			curSkills = is.popIntegerList();
			curUniqueSkill = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(skills);
			os.pushIntegerList(curSkills);
			os.pushInteger(curUniqueSkill);
		}

		@Override
		public String getPacketName()
		{
			return "role_skill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skills = is.popIntegerTreeMap(DBSkill.class);
			curSkills = is.popIntegerList();
			curUniqueSkill = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(skills);
			os.pushIntegerList(curSkills);
			os.pushInteger(curUniqueSkill);
		}

		public Map<Integer, DBSkill> skills;
		public List<Integer> curSkills;
		public int curUniqueSkill;
	}

	// 同步角色心法信息
	public static class role_spirit implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_spirit() { }

		public role_spirit(Map<Integer, DBSpirit> spirits, List<Integer> curSpirits)
		{
			this.spirits = spirits;
			this.curSpirits = curSpirits;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spirits = is.popIntegerTreeMap(DBSpirit.class);
			curSpirits = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(spirits);
			os.pushIntegerList(curSpirits);
		}

		@Override
		public String getPacketName()
		{
			return "role_spirit";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			spirits = is.popIntegerTreeMap(DBSpirit.class);
			curSpirits = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(spirits);
			os.pushIntegerList(curSpirits);
		}

		public Map<Integer, DBSpirit> spirits;
		public List<Integer> curSpirits;
	}

	// 同步角色神兵信息
	public static class role_weapon implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_weapon() { }

		public role_weapon(DBWeaponTask task, Map<Integer, DBWeapon> weapons, int curWeapon, int dayEnterMapTimes)
		{
			this.task = task;
			this.weapons = weapons;
			this.curWeapon = curWeapon;
			this.dayEnterMapTimes = dayEnterMapTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( task == null )
				task = new DBWeaponTask();
			is.pop(task);
			weapons = is.popIntegerTreeMap(DBWeapon.class);
			curWeapon = is.popInteger();
			dayEnterMapTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(task);
			os.pushIntegerMap(weapons);
			os.pushInteger(curWeapon);
			os.pushInteger(dayEnterMapTimes);
		}

		@Override
		public String getPacketName()
		{
			return "role_weapon";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			task = is.pop(DBWeaponTask.class);
			weapons = is.popIntegerTreeMap(DBWeapon.class);
			curWeapon = is.popInteger();
			dayEnterMapTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(task);
			os.pushIntegerMap(weapons);
			os.pushInteger(curWeapon);
			os.pushInteger(dayEnterMapTimes);
		}

		public DBWeaponTask task;
		public Map<Integer, DBWeapon> weapons;
		public int curWeapon;
		public int dayEnterMapTimes;
	}

	// 同步角色佣兵信息
	public static class role_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_pet() { }

		public role_pet(Map<Integer, DBPet> pets, Set<Integer> worldMapPets, Set<Integer> privateMapPets, Set<Integer> sectMapPets, 
		                Set<Integer> activityMapPets)
		{
			this.pets = pets;
			this.worldMapPets = worldMapPets;
			this.privateMapPets = privateMapPets;
			this.sectMapPets = sectMapPets;
			this.activityMapPets = activityMapPets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pets = is.popIntegerTreeMap(DBPet.class);
			worldMapPets = is.popIntegerTreeSet();
			privateMapPets = is.popIntegerTreeSet();
			sectMapPets = is.popIntegerTreeSet();
			activityMapPets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(pets);
			os.pushIntegerSet(worldMapPets);
			os.pushIntegerSet(privateMapPets);
			os.pushIntegerSet(sectMapPets);
			os.pushIntegerSet(activityMapPets);
		}

		@Override
		public String getPacketName()
		{
			return "role_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pets = is.popIntegerTreeMap(DBPet.class);
			worldMapPets = is.popIntegerTreeSet();
			privateMapPets = is.popIntegerTreeSet();
			sectMapPets = is.popIntegerTreeSet();
			activityMapPets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(pets);
			os.pushIntegerSet(worldMapPets);
			os.pushIntegerSet(privateMapPets);
			os.pushIntegerSet(sectMapPets);
			os.pushIntegerSet(activityMapPets);
		}

		public Map<Integer, DBPet> pets;
		public Set<Integer> worldMapPets;
		public Set<Integer> privateMapPets;
		public Set<Integer> sectMapPets;
		public Set<Integer> activityMapPets;
	}

	// 同步角色当前主线任务信息
	public static class role_task implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_task() { }

		public role_task(DBMainTask task)
		{
			this.task = task;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( task == null )
				task = new DBMainTask();
			is.pop(task);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(task);
		}

		@Override
		public String getPacketName()
		{
			return "role_task";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			task = is.pop(DBMainTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(task);
		}

		public DBMainTask task;
	}

	// 同步坐骑信息（登录时同步）
	public static class role_horseinfo implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_horseinfo() { }

		public role_horseinfo(DBHorse info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new DBHorse();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "role_horseinfo";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(DBHorse.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public DBHorse info;
	}

	// 同步当前藏宝图、收藏品(登录时同步)
	public static class role_treasure_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_treasure_info() { }

		public role_treasure_info(MapState curMap, Map<Integer, Byte> medals)
		{
			this.curMap = curMap;
			this.medals = medals;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( curMap == null )
				curMap = new MapState();
			is.pop(curMap);
			medals = is.popIntegerByteTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(curMap);
			os.pushIntegerByteMap(medals);
		}

		@Override
		public String getPacketName()
		{
			return "role_treasure_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curMap = is.pop(MapState.class);
			medals = is.popIntegerByteTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(curMap);
			os.pushIntegerByteMap(medals);
		}

		public MapState curMap;
		public Map<Integer, Byte> medals;
	}

	// 登录后同步的普通副本地图进度信息
	public static class role_normal_mapcopy_log implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_normal_mapcopy_log() { }

		public role_normal_mapcopy_log(Map<Integer, DBNormalMapCopyLog> logs)
		{
			this.logs = logs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			logs = is.popIntegerTreeMap(DBNormalMapCopyLog.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(logs);
		}

		@Override
		public String getPacketName()
		{
			return "role_normal_mapcopy_log";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			logs = is.popIntegerTreeMap(DBNormalMapCopyLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(logs);
		}

		public Map<Integer, DBNormalMapCopyLog> logs;
	}

	// 登录后同步的活动副本地图组进度信息
	public static class role_activity_mapgroup_log implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_activity_mapgroup_log() { }

		public role_activity_mapgroup_log(Map<Integer, DBActivityMapGroupLog> logs)
		{
			this.logs = logs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			logs = is.popIntegerTreeMap(DBActivityMapGroupLog.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(logs);
		}

		@Override
		public String getPacketName()
		{
			return "role_activity_mapgroup_log";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			logs = is.popIntegerTreeMap(DBActivityMapGroupLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(logs);
		}

		public Map<Integer, DBActivityMapGroupLog> logs;
	}

	// 登录后同步守护副本进度信息
	public static class role_towerdefence_log implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_towerdefence_log() { }

		public role_towerdefence_log(Map<Integer, DBTowerDefenceMapLog> logs)
		{
			this.logs = logs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			logs = is.popIntegerTreeMap(DBTowerDefenceMapLog.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(logs);
		}

		@Override
		public String getPacketName()
		{
			return "role_towerdefence_log";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			logs = is.popIntegerTreeMap(DBTowerDefenceMapLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(logs);
		}

		public Map<Integer, DBTowerDefenceMapLog> logs;
	}

	// 登录后同步竞技场参与次数
	public static class role_arena_entertimes implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_arena_entertimes() { }

		public role_arena_entertimes(int enterTime)
		{
			this.enterTime = enterTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			enterTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(enterTime);
		}

		@Override
		public String getPacketName()
		{
			return "role_arena_entertimes";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			enterTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(enterTime);
		}

		public int enterTime;
	}

	// 同步角色当前自创武功信息
	public static class role_diyskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_diyskill() { }

		public role_diyskill(DBDiySkill diySkill, int diyskillTimes)
		{
			this.diySkill = diySkill;
			this.diyskillTimes = diyskillTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( diySkill == null )
				diySkill = new DBDiySkill();
			is.pop(diySkill);
			diyskillTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(diySkill);
			os.pushInteger(diyskillTimes);
		}

		@Override
		public String getPacketName()
		{
			return "role_diyskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			diySkill = is.pop(DBDiySkill.class);
			diyskillTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(diySkill);
			os.pushInteger(diyskillTimes);
		}

		public DBDiySkill diySkill;
		public int diyskillTimes;
	}

	// 同步角色帮派名字和职位
	public static class role_sectinfo implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sectinfo() { }

		public role_sectinfo(SectBrief info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new SectBrief();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "role_sectinfo";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(SectBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public SectBrief info;
	}

	// 同步角色帮派光环信息
	public static class role_sectaura implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sectaura() { }

		public role_sectaura(Map<Integer, Integer> auras)
		{
			this.auras = auras;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			auras = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(auras);
		}

		@Override
		public String getPacketName()
		{
			return "role_sectaura";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			auras = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(auras);
		}

		public Map<Integer, Integer> auras;
	}

	// 同步角色帮派任务信息
	public static class role_secttask implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_secttask() { }

		public role_secttask(SectReceivedTask task)
		{
			this.task = task;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( task == null )
				task = new SectReceivedTask();
			is.pop(task);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(task);
		}

		@Override
		public String getPacketName()
		{
			return "role_secttask";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			task = is.pop(SectReceivedTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(task);
		}

		public SectReceivedTask task;
	}

	// 同步角色组队信息
	public static class role_team implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_team() { }

		public role_team(Team team)
		{
			this.team = team;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( team == null )
				team = new Team();
			is.pop(team);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(team);
		}

		@Override
		public String getPacketName()
		{
			return "role_team";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			team = is.pop(Team.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(team);
		}

		public Team team;
	}

	// 同步副本房间信息
	public static class role_mroom implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mroom() { }

		public role_mroom(MRoom room)
		{
			this.room = room;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( room == null )
				room = new MRoom();
			is.pop(room);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(room);
		}

		@Override
		public String getPacketName()
		{
			return "role_mroom";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			room = is.pop(MRoom.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(room);
		}

		public MRoom room;
	}

	// 同步好友信息
	public static class role_friends implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_friends() { }

		public role_friends(Map<Integer, FriendOverview> friends)
		{
			this.friends = friends;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			friends = is.popIntegerTreeMap(FriendOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(friends);
		}

		@Override
		public String getPacketName()
		{
			return "role_friends";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			friends = is.popIntegerTreeMap(FriendOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(friends);
		}

		public Map<Integer, FriendOverview> friends;
	}

	// 同步最近聊天信息
	public static class role_msg implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_msg() { }

		public role_msg(List<MessageInfo> msgs)
		{
			this.msgs = msgs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			msgs = is.popList(MessageInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(msgs);
		}

		@Override
		public String getPacketName()
		{
			return "role_msg";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			msgs = is.popList(MessageInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(msgs);
		}

		public List<MessageInfo> msgs;
	}

	// 同步师徒系统基本信息(暂时作废)
	public static class master_brief_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_brief_sync() { }

		public master_brief_sync(int masterRoleID, String masterRoleName, int apprenticeCount, boolean graduated, 
		                         int point, int reputation)
		{
			this.masterRoleID = masterRoleID;
			this.masterRoleName = masterRoleName;
			this.apprenticeCount = apprenticeCount;
			this.graduated = graduated;
			this.point = point;
			this.reputation = reputation;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			masterRoleID = is.popInteger();
			masterRoleName = is.popString();
			apprenticeCount = is.popInteger();
			graduated = is.popBoolean();
			point = is.popInteger();
			reputation = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(masterRoleID);
			os.pushString(masterRoleName);
			os.pushInteger(apprenticeCount);
			os.pushBoolean(graduated);
			os.pushInteger(point);
			os.pushInteger(reputation);
		}

		@Override
		public String getPacketName()
		{
			return "master_brief_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			masterRoleID = is.popInteger();
			masterRoleName = is.popString();
			apprenticeCount = is.popInteger();
			graduated = is.popBoolean();
			point = is.popInteger();
			reputation = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(masterRoleID);
			os.pushString(masterRoleName);
			os.pushInteger(apprenticeCount);
			os.pushBoolean(graduated);
			os.pushInteger(point);
			os.pushInteger(reputation);
		}

		public int masterRoleID;
		public String masterRoleName;
		public int apprenticeCount;
		public boolean graduated;
		public int point;
		public int reputation;
	}

	// 拜师申请通知
	public static class master_apply_notice implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_apply_notice() { }

		public master_apply_notice(ApprenticeDetail apprentice)
		{
			this.apprentice = apprentice;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( apprentice == null )
				apprentice = new ApprenticeDetail();
			is.pop(apprentice);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(apprentice);
		}

		@Override
		public String getPacketName()
		{
			return "master_apply_notice";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			apprentice = is.pop(ApprenticeDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(apprentice);
		}

		public ApprenticeDetail apprentice;
	}

	// 面对面收徒申请通知
	public static class master_offer_notice implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_offer_notice() { }

		public master_offer_notice(MasterDetail master)
		{
			this.master = master;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( master == null )
				master = new MasterDetail();
			is.pop(master);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(master);
		}

		@Override
		public String getPacketName()
		{
			return "master_offer_notice";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			master = is.pop(MasterDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(master);
		}

		public MasterDetail master;
	}

	// 拜师申请被处理通知
	public static class master_accept_apply_notice implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_accept_apply_notice() { }

		public master_accept_apply_notice(int masterID, String masterName, boolean accept)
		{
			this.masterID = masterID;
			this.masterName = masterName;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			masterID = is.popInteger();
			masterName = is.popString();
			accept = is.popBoolean();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(masterID);
			os.pushString(masterName);
			os.pushBoolean(accept);
		}

		@Override
		public String getPacketName()
		{
			return "master_accept_apply_notice";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			masterID = is.popInteger();
			masterName = is.popString();
			accept = is.popBoolean();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(masterID);
			os.pushString(masterName);
			os.pushBoolean(accept);
		}

		public int masterID;
		public String masterName;
		public boolean accept;
	}

	// 收徒申请通过通知
	public static class master_accept_offer_notice implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_accept_offer_notice() { }

		public master_accept_offer_notice(int appID, String appName)
		{
			this.appID = appID;
			this.appName = appName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			appID = is.popInteger();
			appName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(appID);
			os.pushString(appName);
		}

		@Override
		public String getPacketName()
		{
			return "master_accept_offer_notice";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			appID = is.popInteger();
			appName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(appID);
			os.pushString(appName);
		}

		public int appID;
		public String appName;
	}

	// 拜师申请回应
	public static class master_apply_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_apply_res() { }

		public master_apply_res(int retCode, int targetRoleID)
		{
			this.retCode = retCode;
			this.targetRoleID = targetRoleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
		}

		@Override
		public String getPacketName()
		{
			return "master_apply_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
		}

		public int retCode;
		public int targetRoleID;
	}

	// 接受当面收徒申请回应
	public static class master_accept_offer_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_accept_offer_res() { }

		public master_accept_offer_res(int retCode, int targetRoleID)
		{
			this.retCode = retCode;
			this.targetRoleID = targetRoleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
		}

		@Override
		public String getPacketName()
		{
			return "master_accept_offer_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
		}

		public int retCode;
		public int targetRoleID;
	}

	// 当面收徒申请回应
	public static class master_offer_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_offer_res() { }

		public master_offer_res(int retCode, int targetRoleID)
		{
			this.retCode = retCode;
			this.targetRoleID = targetRoleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
		}

		@Override
		public String getPacketName()
		{
			return "master_offer_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
		}

		public int retCode;
		public int targetRoleID;
	}

	// 接受拜师申请回应
	public static class master_accept_apply_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_accept_apply_res() { }

		public master_accept_apply_res(int retCode, int targetRoleID, boolean accept)
		{
			this.retCode = retCode;
			this.targetRoleID = targetRoleID;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
			accept = is.popBoolean();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
			os.pushBoolean(accept);
		}

		@Override
		public String getPacketName()
		{
			return "master_accept_apply_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
			accept = is.popBoolean();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
			os.pushBoolean(accept);
		}

		public int retCode;
		public int targetRoleID;
		public boolean accept;
	}

	// 叛师回应
	public static class master_betray_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_betray_res() { }

		public master_betray_res(int retCode)
		{
			this.retCode = retCode;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
		}

		@Override
		public String getPacketName()
		{
			return "master_betray_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
		}

		public int retCode;
	}

	// 出师回应
	public static class master_graduate_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_graduate_res() { }

		public master_graduate_res(int retCode)
		{
			this.retCode = retCode;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
		}

		@Override
		public String getPacketName()
		{
			return "master_graduate_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
		}

		public int retCode;
	}

	// 同意出师申请回应
	public static class master_agree_graduate_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_agree_graduate_res() { }

		public master_agree_graduate_res(int retCode, int targetRoleID, boolean agree)
		{
			this.retCode = retCode;
			this.targetRoleID = targetRoleID;
			this.agree = agree;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
			agree = is.popBoolean();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
			os.pushBoolean(agree);
		}

		@Override
		public String getPacketName()
		{
			return "master_agree_graduate_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
			agree = is.popBoolean();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
			os.pushBoolean(agree);
		}

		public int retCode;
		public int targetRoleID;
		public boolean agree;
	}

	// 开除回应
	public static class master_dismiss_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_dismiss_res() { }

		public master_dismiss_res(int retCode, int targetRoleID)
		{
			this.retCode = retCode;
			this.targetRoleID = targetRoleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
		}

		@Override
		public String getPacketName()
		{
			return "master_dismiss_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushInteger(targetRoleID);
		}

		public int retCode;
		public int targetRoleID;
	}

	// 查询自己的收徒宣言回应
	public static class master_get_announce_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_get_announce_res() { }

		public master_get_announce_res(int retCode, String content)
		{
			this.retCode = retCode;
			this.content = content;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			content = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushString(content);
		}

		@Override
		public String getPacketName()
		{
			return "master_get_announce_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			content = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushString(content);
		}

		public int retCode;
		public String content;
	}

	// 设置自己的收徒宣言回应
	public static class master_set_announce_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_set_announce_res() { }

		public master_set_announce_res(int retCode, String content)
		{
			this.retCode = retCode;
			this.content = content;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			content = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushString(content);
		}

		@Override
		public String getPacketName()
		{
			return "master_set_announce_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			content = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushString(content);
		}

		public int retCode;
		public String content;
	}

	// 删除自己的收徒宣言回应
	public static class master_del_announce_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_del_announce_res() { }

		public master_del_announce_res(int retCode)
		{
			this.retCode = retCode;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
		}

		@Override
		public String getPacketName()
		{
			return "master_del_announce_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
		}

		public int retCode;
	}

	// 基本信息通知
	public static class master_brief_info_notice implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_brief_info_notice() { }

		public master_brief_info_notice(int master, List<Integer> apprentices, int lastDismissTime, int lastBetrayTime)
		{
			this.master = master;
			this.apprentices = apprentices;
			this.lastDismissTime = lastDismissTime;
			this.lastBetrayTime = lastBetrayTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			master = is.popInteger();
			apprentices = is.popIntegerList();
			lastDismissTime = is.popInteger();
			lastBetrayTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(master);
			os.pushIntegerList(apprentices);
			os.pushInteger(lastDismissTime);
			os.pushInteger(lastBetrayTime);
		}

		@Override
		public String getPacketName()
		{
			return "master_brief_info_notice";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			master = is.popInteger();
			apprentices = is.popIntegerList();
			lastDismissTime = is.popInteger();
			lastBetrayTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(master);
			os.pushIntegerList(apprentices);
			os.pushInteger(lastDismissTime);
			os.pushInteger(lastBetrayTime);
		}

		public int master;
		public List<Integer> apprentices;
		public int lastDismissTime;
		public int lastBetrayTime;
	}

	// 请求基本信息回应
	public static class master_info_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_info_res() { }

		public master_info_res(int retCode, int masterRoleID, int apprenticeCount, int point, 
		                       int reputation, int lastDismissTime, int lastBetrayTime, int lastReqGraduateTime, 
		                       List<MasterMember> members, String masterAnnounce)
		{
			this.retCode = retCode;
			this.masterRoleID = masterRoleID;
			this.apprenticeCount = apprenticeCount;
			this.point = point;
			this.reputation = reputation;
			this.lastDismissTime = lastDismissTime;
			this.lastBetrayTime = lastBetrayTime;
			this.lastReqGraduateTime = lastReqGraduateTime;
			this.members = members;
			this.masterAnnounce = masterAnnounce;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			masterRoleID = is.popInteger();
			apprenticeCount = is.popInteger();
			point = is.popInteger();
			reputation = is.popInteger();
			lastDismissTime = is.popInteger();
			lastBetrayTime = is.popInteger();
			lastReqGraduateTime = is.popInteger();
			members = is.popList(MasterMember.class);
			masterAnnounce = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushInteger(masterRoleID);
			os.pushInteger(apprenticeCount);
			os.pushInteger(point);
			os.pushInteger(reputation);
			os.pushInteger(lastDismissTime);
			os.pushInteger(lastBetrayTime);
			os.pushInteger(lastReqGraduateTime);
			os.pushList(members);
			os.pushString(masterAnnounce);
		}

		@Override
		public String getPacketName()
		{
			return "master_info_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			masterRoleID = is.popInteger();
			apprenticeCount = is.popInteger();
			point = is.popInteger();
			reputation = is.popInteger();
			lastDismissTime = is.popInteger();
			lastBetrayTime = is.popInteger();
			lastReqGraduateTime = is.popInteger();
			members = is.popList(MasterMember.class);
			masterAnnounce = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushInteger(masterRoleID);
			os.pushInteger(apprenticeCount);
			os.pushInteger(point);
			os.pushInteger(reputation);
			os.pushInteger(lastDismissTime);
			os.pushInteger(lastBetrayTime);
			os.pushInteger(lastReqGraduateTime);
			os.pushList(members);
			os.pushString(masterAnnounce);
		}

		public int retCode;
		public int masterRoleID;
		public int apprenticeCount;
		public int point;
		public int reputation;
		public int lastDismissTime;
		public int lastBetrayTime;
		public int lastReqGraduateTime;
		public List<MasterMember> members;
		public String masterAnnounce;
	}

	// 查看个人消息回应
	public static class master_msg_list_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_msg_list_res() { }

		public master_msg_list_res(int retCode, List<MasterApplyEntry> applyList, List<MasterApplyEntry> betrayList, List<MasterApplyEntry> graduateReqList)
		{
			this.retCode = retCode;
			this.applyList = applyList;
			this.betrayList = betrayList;
			this.graduateReqList = graduateReqList;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			applyList = is.popList(MasterApplyEntry.class);
			betrayList = is.popList(MasterApplyEntry.class);
			graduateReqList = is.popList(MasterApplyEntry.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushList(applyList);
			os.pushList(betrayList);
			os.pushList(graduateReqList);
		}

		@Override
		public String getPacketName()
		{
			return "master_msg_list_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			applyList = is.popList(MasterApplyEntry.class);
			betrayList = is.popList(MasterApplyEntry.class);
			graduateReqList = is.popList(MasterApplyEntry.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushList(applyList);
			os.pushList(betrayList);
			os.pushList(graduateReqList);
		}

		public int retCode;
		public List<MasterApplyEntry> applyList;
		public List<MasterApplyEntry> betrayList;
		public List<MasterApplyEntry> graduateReqList;
	}

	// 删除叛师消息回应
	public static class master_remove_betray_msg_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_remove_betray_msg_res() { }

		public master_remove_betray_msg_res(int retCode, int roleID)
		{
			this.retCode = retCode;
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "master_remove_betray_msg_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushInteger(roleID);
		}

		public int retCode;
		public int roleID;
	}

	// 请求师父列表回应
	public static class master_list_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_list_res() { }

		public master_list_res(int retCode, int startIndex, List<MasterDetail> masters)
		{
			this.retCode = retCode;
			this.startIndex = startIndex;
			this.masters = masters;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			startIndex = is.popInteger();
			masters = is.popList(MasterDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushInteger(startIndex);
			os.pushList(masters);
		}

		@Override
		public String getPacketName()
		{
			return "master_list_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			startIndex = is.popInteger();
			masters = is.popList(MasterDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushInteger(startIndex);
			os.pushList(masters);
		}

		public int retCode;
		public int startIndex;
		public List<MasterDetail> masters;
	}

	// 查看活跃回应
	public static class master_list_apprentice_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_list_apprentice_res() { }

		public master_list_apprentice_res(int retCode, List<ApprenticeDetail> apprentices)
		{
			this.retCode = retCode;
			this.apprentices = apprentices;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			apprentices = is.popList(ApprenticeDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushList(apprentices);
		}

		@Override
		public String getPacketName()
		{
			return "master_list_apprentice_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			apprentices = is.popList(ApprenticeDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushList(apprentices);
		}

		public int retCode;
		public List<ApprenticeDetail> apprentices;
	}

	// 请求任务进度回应
	public static class master_tasks_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_tasks_res() { }

		public master_tasks_res(int retCode, List<DBMasterTask> tasks)
		{
			this.retCode = retCode;
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			retCode = is.popInteger();
			tasks = is.popList(DBMasterTask.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(retCode);
			os.pushList(tasks);
		}

		@Override
		public String getPacketName()
		{
			return "master_tasks_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			retCode = is.popInteger();
			tasks = is.popList(DBMasterTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(retCode);
			os.pushList(tasks);
		}

		public int retCode;
		public List<DBMasterTask> tasks;
	}

	// 师徒商城同步协议
	public static class master_shopsync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_shopsync_res() { }

		public master_shopsync_res(ShopInfo info, int currency)
		{
			this.info = info;
			this.currency = currency;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ShopInfo();
			is.pop(info);
			currency = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
			os.pushInteger(currency);
		}

		@Override
		public String getPacketName()
		{
			return "master_shopsync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ShopInfo.class);
			currency = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
			os.pushInteger(currency);
		}

		public ShopInfo info;
		public int currency;
	}

	// 师徒商城刷新协议
	public static class master_shoprefresh_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_shoprefresh_res() { }

		public master_shoprefresh_res(ShopInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ShopInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "master_shoprefresh_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ShopInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public ShopInfo info;
	}

	// 师徒商城买商品协议
	public static class master_shopbuy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_shopbuy_res() { }

		public master_shopbuy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "master_shopbuy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步4v4竞技场信息
	public static class role_superarena implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_superarena() { }

		public role_superarena(ARoom room, int state, int joinTime, int joinType, 
		                       int weekHonor, int historyHonor)
		{
			this.room = room;
			this.state = state;
			this.joinTime = joinTime;
			this.joinType = joinType;
			this.weekHonor = weekHonor;
			this.historyHonor = historyHonor;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( room == null )
				room = new ARoom();
			is.pop(room);
			state = is.popInteger();
			joinTime = is.popInteger();
			joinType = is.popInteger();
			weekHonor = is.popInteger();
			historyHonor = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(room);
			os.pushInteger(state);
			os.pushInteger(joinTime);
			os.pushInteger(joinType);
			os.pushInteger(weekHonor);
			os.pushInteger(historyHonor);
		}

		@Override
		public String getPacketName()
		{
			return "role_superarena";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			room = is.pop(ARoom.class);
			state = is.popInteger();
			joinTime = is.popInteger();
			joinType = is.popInteger();
			weekHonor = is.popInteger();
			historyHonor = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(room);
			os.pushInteger(state);
			os.pushInteger(joinTime);
			os.pushInteger(joinType);
			os.pushInteger(weekHonor);
			os.pushInteger(historyHonor);
		}

		public ARoom room;
		public int state;
		public int joinTime;
		public int joinType;
		public int weekHonor;
		public int historyHonor;
	}

	// 同步势力战信息(登录时同步)
	public static class role_forcewar implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_forcewar() { }

		public role_forcewar(int joinTime, int joinType, int weekFeats, int totalFeats, 
		                     int punishEndTime, FRoom room)
		{
			this.joinTime = joinTime;
			this.joinType = joinType;
			this.weekFeats = weekFeats;
			this.totalFeats = totalFeats;
			this.punishEndTime = punishEndTime;
			this.room = room;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			joinTime = is.popInteger();
			joinType = is.popInteger();
			weekFeats = is.popInteger();
			totalFeats = is.popInteger();
			punishEndTime = is.popInteger();
			if( room == null )
				room = new FRoom();
			is.pop(room);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(joinTime);
			os.pushInteger(joinType);
			os.pushInteger(weekFeats);
			os.pushInteger(totalFeats);
			os.pushInteger(punishEndTime);
			os.push(room);
		}

		@Override
		public String getPacketName()
		{
			return "role_forcewar";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			joinTime = is.popInteger();
			joinType = is.popInteger();
			weekFeats = is.popInteger();
			totalFeats = is.popInteger();
			punishEndTime = is.popInteger();
			room = is.pop(FRoom.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(joinTime);
			os.pushInteger(joinType);
			os.pushInteger(weekFeats);
			os.pushInteger(totalFeats);
			os.pushInteger(punishEndTime);
			os.push(room);
		}

		public int joinTime;
		public int joinType;
		public int weekFeats;
		public int totalFeats;
		public int punishEndTime;
		public FRoom room;
	}

	// 指引信息同步
	public static class role_leadinfo implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_leadinfo() { }

		public role_leadinfo(Set<Integer> info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			info = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(info);
		}

		@Override
		public String getPacketName()
		{
			return "role_leadinfo";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(info);
		}

		public Set<Integer> info;
	}

	// 强制剧情同步
	public static class role_leadplot implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_leadplot() { }

		public role_leadplot(Map<Integer, Integer> plot)
		{
			this.plot = plot;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			plot = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(plot);
		}

		@Override
		public String getPacketName()
		{
			return "role_leadplot";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			plot = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(plot);
		}

		public Map<Integer, Integer> plot;
	}

	// 即将开启预览
	public static class role_func_preview implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_func_preview() { }

		public role_func_preview(int preview)
		{
			this.preview = preview;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			preview = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(preview);
		}

		@Override
		public String getPacketName()
		{
			return "role_func_preview";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			preview = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(preview);
		}

		public int preview;
	}

	// 江湖客栈引导
	public static class role_treasureguide implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_treasureguide() { }

		public role_treasureguide(int guide)
		{
			this.guide = guide;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			guide = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(guide);
		}

		@Override
		public String getPacketName()
		{
			return "role_treasureguide";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			guide = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(guide);
		}

		public int guide;
	}

	// 离线经验
	public static class role_offlineexp implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_offlineexp() { }

		public role_offlineexp(DBOfflineExp info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new DBOfflineExp();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "role_offlineexp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(DBOfflineExp.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public DBOfflineExp info;
	}

	// 登录时同步历练系统(历练、藏书、参悟)
	public static class role_expcoin implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_expcoin() { }

		public role_expcoin(int curExpCoin, Map<Integer, Integer> books, Map<Integer, Integer> bagBooks, Map<Integer, GraspInfo> grasps, 
		                    DBDMGTransfer dmgTransfer)
		{
			this.curExpCoin = curExpCoin;
			this.books = books;
			this.bagBooks = bagBooks;
			this.grasps = grasps;
			this.dmgTransfer = dmgTransfer;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curExpCoin = is.popInteger();
			books = is.popIntegerIntegerTreeMap();
			bagBooks = is.popIntegerIntegerTreeMap();
			grasps = is.popIntegerTreeMap(GraspInfo.class);
			if( dmgTransfer == null )
				dmgTransfer = new DBDMGTransfer();
			is.pop(dmgTransfer);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curExpCoin);
			os.pushIntegerIntegerMap(books);
			os.pushIntegerIntegerMap(bagBooks);
			os.pushIntegerMap(grasps);
			os.push(dmgTransfer);
		}

		@Override
		public String getPacketName()
		{
			return "role_expcoin";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curExpCoin = is.popInteger();
			books = is.popIntegerIntegerTreeMap();
			bagBooks = is.popIntegerIntegerTreeMap();
			grasps = is.popIntegerTreeMap(GraspInfo.class);
			dmgTransfer = is.pop(DBDMGTransfer.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(curExpCoin);
			os.pushIntegerIntegerMap(books);
			os.pushIntegerIntegerMap(bagBooks);
			os.pushIntegerMap(grasps);
			os.push(dmgTransfer);
		}

		public int curExpCoin;
		public Map<Integer, Integer> books;
		public Map<Integer, Integer> bagBooks;
		public Map<Integer, GraspInfo> grasps;
		public DBDMGTransfer dmgTransfer;
	}

	// 登录时同步称号信息
	public static class role_titles implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_titles() { }

		public role_titles(Map<Integer, Integer> titles, int curPermanent, List<DBTitleSlot> equipedtitles, int slotsize)
		{
			this.titles = titles;
			this.curPermanent = curPermanent;
			this.equipedtitles = equipedtitles;
			this.slotsize = slotsize;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			titles = is.popIntegerIntegerTreeMap();
			curPermanent = is.popInteger();
			equipedtitles = is.popList(DBTitleSlot.class);
			slotsize = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(titles);
			os.pushInteger(curPermanent);
			os.pushList(equipedtitles);
			os.pushInteger(slotsize);
		}

		@Override
		public String getPacketName()
		{
			return "role_titles";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			titles = is.popIntegerIntegerTreeMap();
			curPermanent = is.popInteger();
			equipedtitles = is.popList(DBTitleSlot.class);
			slotsize = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(titles);
			os.pushInteger(curPermanent);
			os.pushList(equipedtitles);
			os.pushInteger(slotsize);
		}

		public Map<Integer, Integer> titles;
		public int curPermanent;
		public List<DBTitleSlot> equipedtitles;
		public int slotsize;
	}

	// 登录时同步复活相关信息
	public static class role_revive_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_revive_info() { }

		public role_revive_info(int insuitReviveTimes)
		{
			this.insuitReviveTimes = insuitReviveTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			insuitReviveTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(insuitReviveTimes);
		}

		@Override
		public String getPacketName()
		{
			return "role_revive_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			insuitReviveTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(insuitReviveTimes);
		}

		public int insuitReviveTimes;
	}

	// 登录时同步支线任务信息
	public static class role_branch_task implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_branch_task() { }

		public role_branch_task(Map<Integer, DBBranchTask> tasks)
		{
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tasks = is.popIntegerTreeMap(DBBranchTask.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(tasks);
		}

		@Override
		public String getPacketName()
		{
			return "role_branch_task";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tasks = is.popIntegerTreeMap(DBBranchTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(tasks);
		}

		public Map<Integer, DBBranchTask> tasks;
	}

	public static class role_climb_tower implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_climb_tower() { }

		public role_climb_tower(DBClimbTower data)
		{
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( data == null )
				data = new DBClimbTower();
			is.pop(data);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(data);
		}

		@Override
		public String getPacketName()
		{
			return "role_climb_tower";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			data = is.pop(DBClimbTower.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(data);
		}

		public DBClimbTower data;
	}

	// 登录时同步运镖信息
	public static class role_sect_deliver implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sect_deliver() { }

		public role_sect_deliver(DBSectDeliver sectdeliver)
		{
			this.sectdeliver = sectdeliver;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( sectdeliver == null )
				sectdeliver = new DBSectDeliver();
			is.pop(sectdeliver);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(sectdeliver);
		}

		@Override
		public String getPacketName()
		{
			return "role_sect_deliver";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sectdeliver = is.pop(DBSectDeliver.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(sectdeliver);
		}

		public DBSectDeliver sectdeliver;
	}

	// 同步添加赏金币
	public static class role_add_robmoney implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_robmoney() { }

		public role_add_robmoney(int value, int reason)
		{
			this.value = value;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			value = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(value);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_robmoney";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			value = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(value);
			os.pushInteger(reason);
		}

		public int value;
		public int reason;
	}

	// 登录时同步劫镖标志
	public static class role_rob_flag implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_rob_flag() { }

		public role_rob_flag(byte flag)
		{
			this.flag = flag;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			flag = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(flag);
		}

		@Override
		public String getPacketName()
		{
			return "role_rob_flag";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			flag = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushByte(flag);
		}

		public byte flag;
	}

	// 登录时同步镖车位置
	public static class role_escortcar_location implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_escortcar_location() { }

		public role_escortcar_location(MapLocation mapLocation, int curLine)
		{
			this.mapLocation = mapLocation;
			this.curLine = curLine;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( mapLocation == null )
				mapLocation = new MapLocation();
			is.pop(mapLocation);
			curLine = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(mapLocation);
			os.pushInteger(curLine);
		}

		@Override
		public String getPacketName()
		{
			return "role_escortcar_location";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapLocation = is.pop(MapLocation.class);
			curLine = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(mapLocation);
			os.pushInteger(curLine);
		}

		public MapLocation mapLocation;
		public int curLine;
	}

	// 登录时同步七日留存信息
	public static class role_rmactivity implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_rmactivity() { }

		public role_rmactivity(int pos)
		{
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pos);
		}

		@Override
		public String getPacketName()
		{
			return "role_rmactivity";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pos);
		}

		public int pos;
	}

	// 同步服务器冲关等级
	public static class speedup_level implements Stream.IStreamable, SStream.IStrPacket
	{

		public speedup_level() { }

		public speedup_level(int lvl)
		{
			this.lvl = lvl;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lvl = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lvl);
		}

		@Override
		public String getPacketName()
		{
			return "speedup_level";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			lvl = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(lvl);
		}

		public int lvl;
	}

	// 同步姻缘等级
	public static class role_marriage_level implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_marriage_level() { }

		public role_marriage_level(int level)
		{
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "role_marriage_level";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(level);
		}

		public int level;
	}

	// 通知客户端切换地图
	public static class role_change_map implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_change_map() { }

		public role_change_map(MapLocation location, int curLine)
		{
			this.location = location;
			this.curLine = curLine;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( location == null )
				location = new MapLocation();
			is.pop(location);
			curLine = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(location);
			os.pushInteger(curLine);
		}

		@Override
		public String getPacketName()
		{
			return "role_change_map";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			location = is.pop(MapLocation.class);
			curLine = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(location);
			os.pushInteger(curLine);
		}

		public MapLocation location;
		public int curLine;
	}

	// 通知客户端当前地图神兵天隙NPC
	public static class role_weapon_npc implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_weapon_npc() { }

		public role_weapon_npc(int npcID)
		{
			this.npcID = npcID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(npcID);
		}

		@Override
		public String getPacketName()
		{
			return "role_weapon_npc";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(npcID);
		}

		public int npcID;
	}

	// 通知新聊天信息到达
	public static class role_new_msg implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_new_msg() { }

		public role_new_msg(MessageInfo msg)
		{
			this.msg = msg;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( msg == null )
				msg = new MessageInfo();
			is.pop(msg);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(msg);
		}

		@Override
		public String getPacketName()
		{
			return "role_new_msg";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			msg = is.pop(MessageInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(msg);
		}

		public MessageInfo msg;
	}

	// 通知客户端队友击杀
	public static class role_team_kill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_team_kill() { }

		public role_team_kill(int type, int id, int count)
		{
			this.type = type;
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "role_team_kill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int type;
		public int id;
		public int count;
	}

	// 通知客户端角色钻石增加
	public static class role_add_diamond implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_diamond() { }

		public role_add_diamond(int amount, int free, int reason)
		{
			this.amount = amount;
			this.free = free;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			amount = is.popInteger();
			free = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(amount);
			os.pushInteger(free);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_diamond";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			amount = is.popInteger();
			free = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(amount);
			os.pushInteger(free);
			os.pushInteger(reason);
		}

		public int amount;
		public int free;
		public int reason;
	}

	// 通知客户端角色金币增加
	public static class role_add_coin implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_coin() { }

		public role_add_coin(int amount, int free, int reason)
		{
			this.amount = amount;
			this.free = free;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			amount = is.popInteger();
			free = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(amount);
			os.pushInteger(free);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_coin";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			amount = is.popInteger();
			free = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(amount);
			os.pushInteger(free);
			os.pushInteger(reason);
		}

		public int amount;
		public int free;
		public int reason;
	}

	// 通知客户端角色帮贡增加
	public static class role_add_sectcontribution implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_sectcontribution() { }

		public role_add_sectcontribution(int amount)
		{
			this.amount = amount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			amount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(amount);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_sectcontribution";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			amount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(amount);
		}

		public int amount;
	}

	// 通知客户端角色竞技场点数增加
	public static class role_add_arenapoint implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_arenapoint() { }

		public role_add_arenapoint(int amount, int reason)
		{
			this.amount = amount;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_arenapoint";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		public int amount;
		public int reason;
	}

	// 通知客户端角色4v4竞技场点数增加
	public static class role_add_superarenahonor implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_superarenahonor() { }

		public role_add_superarenahonor(int amount, int reason)
		{
			this.amount = amount;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_superarenahonor";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		public int amount;
		public int reason;
	}

	// 通知客户端角色商誉值增加
	public static class role_add_credit implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_credit() { }

		public role_add_credit(int amount, int reason)
		{
			this.amount = amount;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_credit";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		public int amount;
		public int reason;
	}

	// 通知客户端角色装备能量增加
	public static class role_add_equipenergy implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_equipenergy() { }

		public role_add_equipenergy(int amount, int reason)
		{
			this.amount = amount;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_equipenergy";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		public int amount;
		public int reason;
	}

	// 通知客户端角色宝石能量增加
	public static class role_add_gemenergy implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_gemenergy() { }

		public role_add_gemenergy(int amount, int reason)
		{
			this.amount = amount;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_gemenergy";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		public int amount;
		public int reason;
	}

	// 通知客户端角色心法悟性增加
	public static class role_add_bookinspiration implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_bookinspiration() { }

		public role_add_bookinspiration(int amount, int reason)
		{
			this.amount = amount;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_bookinspiration";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			amount = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(amount);
			os.pushInteger(reason);
		}

		public int amount;
		public int reason;
	}

	// 通知客户端角色经验增长
	public static class role_add_exp implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_exp() { }

		public role_add_exp(long exp, long offlineexp)
		{
			this.exp = exp;
			this.offlineexp = offlineexp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			exp = is.popLong();
			offlineexp = is.popLong();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushLong(exp);
			os.pushLong(offlineexp);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_exp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			exp = is.popLong();
			offlineexp = is.popLong();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushLong(exp);
			os.pushLong(offlineexp);
		}

		public long exp;
		public long offlineexp;
	}

	// 通知客户端角色历练币增长
	public static class role_add_expcoin implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_expcoin() { }

		public role_add_expcoin(int expCoin, int reason)
		{
			this.expCoin = expCoin;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			expCoin = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(expCoin);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_expcoin";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			expCoin = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(expCoin);
			os.pushInteger(reason);
		}

		public int expCoin;
		public int reason;
	}

	// 通知客户端角色离线精灵修炼点增长
	public static class role_add_offline_func_point implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_offline_func_point() { }

		public role_add_offline_func_point(int offlineFuncPoint, int reason)
		{
			this.offlineFuncPoint = offlineFuncPoint;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			offlineFuncPoint = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(offlineFuncPoint);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_offline_func_point";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			offlineFuncPoint = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(offlineFuncPoint);
			os.pushInteger(reason);
		}

		public int offlineFuncPoint;
		public int reason;
	}

	// 通知客户端角色体力增长
	public static class role_add_vit implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_vit() { }

		public role_add_vit(int vit, int reason)
		{
			this.vit = vit;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			vit = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(vit);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_vit";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			vit = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(vit);
			os.pushInteger(reason);
		}

		public int vit;
		public int reason;
	}

	// 通知客户端角色分解能量增长
	public static class role_add_splitsp implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_splitsp() { }

		public role_add_splitsp(int splitsp, int reason)
		{
			this.splitsp = splitsp;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			splitsp = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(splitsp);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_splitsp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			splitsp = is.popInteger();
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(splitsp);
			os.pushInteger(reason);
		}

		public int splitsp;
		public int reason;
	}

	// 通知客户端角色魅力值增长
	public static class role_add_charm implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_charm() { }

		public role_add_charm(int charm)
		{
			this.charm = charm;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			charm = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(charm);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_charm";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			charm = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(charm);
		}

		public int charm;
	}

	// 通知客户端角色武勋(累计的武勋)增加
	public static class role_add_feat implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_feat() { }

		public role_add_feat(int feat)
		{
			this.feat = feat;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			feat = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(feat);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_feat";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			feat = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(feat);
		}

		public int feat;
	}

	// 通知客户端增加道具
	public static class role_add_item implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_item() { }

		public role_add_item(GameItem item, int reason)
		{
			this.item = item;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( item == null )
				item = new GameItem();
			is.pop(item);
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(item);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_item";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			item = is.pop(GameItem.class);
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(item);
			os.pushInteger(reason);
		}

		public GameItem item;
		public int reason;
	}

	// 通知客户端增加道具
	public static class role_add_items implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_items() { }

		public role_add_items(List<GameItem> items, int reason)
		{
			this.items = items;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			items = is.popList(GameItem.class);
			reason = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(items);
			os.pushInteger(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_items";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			items = is.popList(GameItem.class);
			reason = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(items);
			os.pushInteger(reason);
		}

		public List<GameItem> items;
		public int reason;
	}

	// 通知客户端增加随从战绩
	public static class pet_add_exploit implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_add_exploit() { }

		public pet_add_exploit(int petID, int exploit)
		{
			this.petID = petID;
			this.exploit = exploit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petID = is.popInteger();
			exploit = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petID);
			os.pushInteger(exploit);
		}

		@Override
		public String getPacketName()
		{
			return "pet_add_exploit";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petID = is.popInteger();
			exploit = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petID);
			os.pushInteger(exploit);
		}

		public int petID;
		public int exploit;
	}

	// 通知客户端更新称号(endTime 0：删除称号， -1：增加永久称号， >0：增加时效称号)
	public static class role_title_update implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_title_update() { }

		public role_title_update(int id, int endTime)
		{
			this.id = id;
			this.endTime = endTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			endTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(endTime);
		}

		@Override
		public String getPacketName()
		{
			return "role_title_update";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			endTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(endTime);
		}

		public int id;
		public int endTime;
	}

	// 血池自动使用协议
	public static class role_hppool_used implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_hppool_used() { }

		public role_hppool_used(int useHp)
		{
			this.useHp = useHp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			useHp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(useHp);
		}

		@Override
		public String getPacketName()
		{
			return "role_hppool_used";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			useHp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(useHp);
		}

		public int useHp;
	}

	// 通知客户端进行当天计数刷新（需要刷新 loginDays，每日计数清零如每日进入副本次数等）
	public static class role_day_refresh implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_day_refresh";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派光环更新协议
	public static class sect_aura_update implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_aura_update() { }

		public sect_aura_update(int id, int level)
		{
			this.id = id;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "sect_aura_update";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(level);
		}

		public int id;
		public int level;
	}

	// 通知客户端角色宗门矿增加
	public static class role_add_ore implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_add_ore() { }

		public role_add_ore(int type, int value)
		{
			this.type = type;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(value);
		}

		@Override
		public String getPacketName()
		{
			return "role_add_ore";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(value);
		}

		public int type;
		public int value;
	}

	// 通知客户端显示服务器角色战力值，用于调试
	public static class role_show_power implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_show_power() { }

		public role_show_power(int power)
		{
			this.power = power;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			power = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(power);
		}

		@Override
		public String getPacketName()
		{
			return "role_show_power";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			power = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(power);
		}

		public int power;
	}

	// 通知客户端显示服务器偏移时间，用于调试
	public static class role_show_timeoffset implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_show_timeoffset() { }

		public role_show_timeoffset(int ofsetsecond)
		{
			this.ofsetsecond = ofsetsecond;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ofsetsecond = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ofsetsecond);
		}

		@Override
		public String getPacketName()
		{
			return "role_show_timeoffset";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ofsetsecond = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ofsetsecond);
		}

		public int ofsetsecond;
	}

	/*
	 * 			打开二级功能界面测试红点通知
	 * 			第0位为是否有新邮件
	 * 			第1位为是否有新完成的日常任务
	 * 			第2位为是否有新完成的挑战任务
	 * 			第3位为福利小红点（不包括特权卡）
	 * 			第4位为是否有新的运营活动奖可以领取
	 * 			第5位为是否有竞技场积分奖励可以领取
	 * 			第6位为是否有首充奖励可以领取
	 * 			第7位为是否有在线奖励可以参与
	 * 			第8位为是否有在线奖励可以领取
	 * 			第9位为是否有团购活动（是否显示团购图标）
	 * 			第10位为是否有团购商品能购买（是否显示团购小红点）
	 * 			第11位为是否有限时商品能购买（是否显示限时特卖小红点）
	 * 			第12位为
	 * 			第13位为是否有约战NPC通知（是否显示约战NPC图标）
	 * 			第14位为
	 * 			第15位为是否有充值活动相关小红点
	 * 			第16位为是否有师徒相关小红点
	 */
	public static class role_notice implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_notice() { }

		public role_notice(int notice)
		{
			this.notice = notice;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			notice = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(notice);
		}

		@Override
		public String getPacketName()
		{
			return "role_notice";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			notice = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(notice);
		}

		public int notice;
	}

	/*
	 * 			第0位为是否有新的调研奖励
	 * 			第1位为是否有新的封测巨献奖励
	 * 			第2位为是否有新的等级奖励
	 * 			第3位为是否有新的资料完善奖励
	 * 			第4位为是否有新的最后冲刺奖励
	 * 			第5位为是否有新的限时领奖奖励
	 * 			第6位为是否有新的强化比拼奖励
	 * 			第7位为是否有新的官方调研奖励
	 * 			isFirstLogin返回是否为本日第一次登陆，是则返回1，否则返回0
	 */
	public static class role_betaactivity_notice implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_betaactivity_notice() { }

		public role_betaactivity_notice(int notice, int isFirstLogin, int showWebLink)
		{
			this.notice = notice;
			this.isFirstLogin = isFirstLogin;
			this.showWebLink = showWebLink;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			notice = is.popInteger();
			isFirstLogin = is.popInteger();
			showWebLink = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(notice);
			os.pushInteger(isFirstLogin);
			os.pushInteger(showWebLink);
		}

		@Override
		public String getPacketName()
		{
			return "role_betaactivity_notice";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			notice = is.popInteger();
			isFirstLogin = is.popInteger();
			showWebLink = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(notice);
			os.pushInteger(isFirstLogin);
			os.pushInteger(showWebLink);
		}

		public int notice;
		public int isFirstLogin;
		public int showWebLink;
	}

	public static class role_firstpay implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_firstpay() { }

		public role_firstpay(int finished)
		{
			this.finished = finished;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			finished = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(finished);
		}

		@Override
		public String getPacketName()
		{
			return "role_firstpay";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			finished = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(finished);
		}

		public int finished;
	}

	// 通知客户端同步随从合修任务
	public static class role_new_pet_task implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_new_pet_task() { }

		public role_new_pet_task(int petid, int taskid)
		{
			this.petid = petid;
			this.taskid = taskid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petid = is.popInteger();
			taskid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petid);
			os.pushInteger(taskid);
		}

		@Override
		public String getPacketName()
		{
			return "role_new_pet_task";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petid = is.popInteger();
			taskid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petid);
			os.pushInteger(taskid);
		}

		public int petid;
		public int taskid;
	}

	// 通知秘境任务
	public static class role_secret_task implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_secret_task() { }

		public role_secret_task(DBSecretTaskData data)
		{
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( data == null )
				data = new DBSecretTaskData();
			is.pop(data);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(data);
		}

		@Override
		public String getPacketName()
		{
			return "role_secret_task";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			data = is.pop(DBSecretTaskData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(data);
		}

		public DBSecretTaskData data;
	}

	// 同步帮派申请人数
	public static class sect_applications_number implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_applications_number() { }

		public sect_applications_number(int num)
		{
			this.num = num;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			num = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(num);
		}

		@Override
		public String getPacketName()
		{
			return "sect_applications_number";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			num = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(num);
		}

		public int num;
	}

	// 同步每日评论次数
	public static class messageboard_day_comment_time implements Stream.IStreamable, SStream.IStrPacket
	{

		public messageboard_day_comment_time() { }

		public messageboard_day_comment_time(int time)
		{
			this.time = time;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			time = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(time);
		}

		@Override
		public String getPacketName()
		{
			return "messageboard_day_comment_time";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			time = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(time);
		}

		public int time;
	}

	// 发送聊天消息响应
	public static class msg_send_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public msg_send_res() { }

		public msg_send_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "msg_send_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知玩家被禁言
	public static class role_chat_banned implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_chat_banned() { }

		public role_chat_banned(int leftTime, String reason)
		{
			this.leftTime = leftTime;
			this.reason = reason;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			leftTime = is.popInteger();
			reason = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(leftTime);
			os.pushString(reason);
		}

		@Override
		public String getPacketName()
		{
			return "role_chat_banned";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			leftTime = is.popInteger();
			reason = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(leftTime);
			os.pushString(reason);
		}

		public int leftTime;
		public String reason;
	}

	// 同步玩家聊天房间
	public static class role_chat_room implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_chat_room() { }

		public role_chat_room(String roomID)
		{
			this.roomID = roomID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roomID = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(roomID);
		}

		@Override
		public String getPacketName()
		{
			return "role_chat_room";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roomID = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(roomID);
		}

		public String roomID;
	}

	// 进入大地图传送点响应
	public static class waypoint_enter_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public waypoint_enter_res() { }

		public waypoint_enter_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "waypoint_enter_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 脱离卡死点
	public static class wrongpos_leave_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public wrongpos_leave_res() { }

		public wrongpos_leave_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "wrongpos_leave_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步世界地图分线状态(curLine: 从1开始)
	public static class worldline_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public worldline_sync_res() { }

		public worldline_sync_res(int curLine, int count)
		{
			this.curLine = curLine;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curLine = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curLine);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "worldline_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curLine = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(curLine);
			os.pushInteger(count);
		}

		public int curLine;
		public int count;
	}

	// 切换当前地图分线
	public static class worldline_change_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public worldline_change_res() { }

		public worldline_change_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "worldline_change_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 查询机器人信息响应
	public static class query_robot_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_robot_res() { }

		public query_robot_res(RoleBrief brief)
		{
			this.brief = brief;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( brief == null )
				brief = new RoleBrief();
			is.pop(brief);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(brief);
		}

		@Override
		public String getPacketName()
		{
			return "query_robot_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			brief = is.pop(RoleBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(brief);
		}

		public RoleBrief brief;
	}

	// 查询玩家信息响应
	public static class query_rolebrief_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_rolebrief_res() { }

		public query_rolebrief_res(RoleBrief brief, int teamID)
		{
			this.brief = brief;
			this.teamID = teamID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( brief == null )
				brief = new RoleBrief();
			is.pop(brief);
			teamID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(brief);
			os.pushInteger(teamID);
		}

		@Override
		public String getPacketName()
		{
			return "query_rolebrief_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			brief = is.pop(RoleBrief.class);
			teamID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(brief);
			os.pushInteger(teamID);
		}

		public RoleBrief brief;
		public int teamID;
	}

	// 获取玩家的特性信息
	public static class query_rolefeature_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_rolefeature_res() { }

		public query_rolefeature_res(RoleFeature feature)
		{
			this.feature = feature;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( feature == null )
				feature = new RoleFeature();
			is.pop(feature);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(feature);
		}

		@Override
		public String getPacketName()
		{
			return "query_rolefeature_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			feature = is.pop(RoleFeature.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(feature);
		}

		public RoleFeature feature;
	}

	// 获取玩家所有已获得的佣兵信息
	public static class query_petoverviews_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_petoverviews_res() { }

		public query_petoverviews_res(List<PetOverview> pets)
		{
			this.pets = pets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pets = is.popList(PetOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(pets);
		}

		@Override
		public String getPacketName()
		{
			return "query_petoverviews_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pets = is.popList(PetOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(pets);
		}

		public List<PetOverview> pets;
	}

	// 获取玩家所有已获得的神兵信息
	public static class query_weaponoverviews_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_weaponoverviews_res() { }

		public query_weaponoverviews_res(List<WeaponOverview> weapons)
		{
			this.weapons = weapons;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weapons = is.popList(WeaponOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(weapons);
		}

		@Override
		public String getPacketName()
		{
			return "query_weaponoverviews_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weapons = is.popList(WeaponOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(weapons);
		}

		public List<WeaponOverview> weapons;
	}

	// 原地复活响应
	public static class role_revive_insitu_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_revive_insitu_res() { }

		public role_revive_insitu_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "role_revive_insitu_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 其他方式复活响应
	public static class role_revive_other_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_revive_other_res() { }

		public role_revive_other_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "role_revive_other_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 安全点复活
	public static class role_revive_safe_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_revive_safe_res() { }

		public role_revive_safe_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "role_revive_safe_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 转职
	public static class role_transform_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_transform_res() { }

		public role_transform_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "role_transform_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 签到同步
	public static class checkin_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public checkin_sync_res() { }

		public checkin_sync_res(CheckInInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new CheckInInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "checkin_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(CheckInInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public CheckInInfo info;
	}

	// 签到領獎
	public static class checkin_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public checkin_take_res() { }

		public checkin_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "checkin_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 商城同步
	public static class mall_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mall_sync_res() { }

		public mall_sync_res(RoleMallInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new RoleMallInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "mall_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(RoleMallInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public RoleMallInfo info;
	}

	// 商城购买
	public static class mall_buy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mall_buy_res() { }

		public mall_buy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mall_buy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 福利同步
	public static class benefit_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public benefit_sync_res() { }

		public benefit_sync_res(int checkinGift, int dailyOnlineGift, int dailyVitReward, List<ActivityInfo> activities)
		{
			this.checkinGift = checkinGift;
			this.dailyOnlineGift = dailyOnlineGift;
			this.dailyVitReward = dailyVitReward;
			this.activities = activities;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			checkinGift = is.popInteger();
			dailyOnlineGift = is.popInteger();
			dailyVitReward = is.popInteger();
			activities = is.popList(ActivityInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(checkinGift);
			os.pushInteger(dailyOnlineGift);
			os.pushInteger(dailyVitReward);
			os.pushList(activities);
		}

		@Override
		public String getPacketName()
		{
			return "benefit_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			checkinGift = is.popInteger();
			dailyOnlineGift = is.popInteger();
			dailyVitReward = is.popInteger();
			activities = is.popList(ActivityInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(checkinGift);
			os.pushInteger(dailyOnlineGift);
			os.pushInteger(dailyVitReward);
			os.pushList(activities);
		}

		public int checkinGift;
		public int dailyOnlineGift;
		public int dailyVitReward;
		public List<ActivityInfo> activities;
	}

	// 充值相关活动同步
	public static class payactivity_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public payactivity_sync_res() { }

		public payactivity_sync_res(List<ActivityInfo> activities)
		{
			this.activities = activities;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			activities = is.popList(ActivityInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(activities);
		}

		@Override
		public String getPacketName()
		{
			return "payactivity_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			activities = is.popList(ActivityInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(activities);
		}

		public List<ActivityInfo> activities;
	}

	// 同步首次充值送礼活动信息
	public static class firstpaygift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public firstpaygift_sync_res() { }

		public firstpaygift_sync_res(int ok, RoleFirstPayGiftInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleFirstPayGiftInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "firstpaygift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleFirstPayGiftInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleFirstPayGiftInfo info;
	}

	// 领取首次充值送礼活动奖励
	public static class firstpaygift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public firstpaygift_take_res() { }

		public firstpaygift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "firstpaygift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步每日充值送礼活动信息
	public static class dailypaygift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public dailypaygift_sync_res() { }

		public dailypaygift_sync_res(int ok, RoleDailyPayGiftInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleDailyPayGiftInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "dailypaygift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleDailyPayGiftInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleDailyPayGiftInfo info;
	}

	// 领取每日充值送礼活动奖励
	public static class dailypaygift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public dailypaygift_take_res() { }

		public dailypaygift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "dailypaygift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步持续充值送礼活动信息
	public static class lastpaygift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public lastpaygift_sync_res() { }

		public lastpaygift_sync_res(int ok, RoleLastPayGiftInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleLastPayGiftInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "lastpaygift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleLastPayGiftInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleLastPayGiftInfo info;
	}

	// 领取持续充值送礼活动奖励
	public static class lastpaygift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public lastpaygift_take_res() { }

		public lastpaygift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "lastpaygift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步活动挑战活动信息
	public static class activitychallengegift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public activitychallengegift_sync_res() { }

		public activitychallengegift_sync_res(int ok, RoleActivityChallengeGiftInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleActivityChallengeGiftInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "activitychallengegift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleActivityChallengeGiftInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleActivityChallengeGiftInfo info;
	}

	// 领取活动挑战活动奖励
	public static class activitychallengegift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public activitychallengegift_take_res() { }

		public activitychallengegift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "activitychallengegift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步升级特惠活动信息
	public static class upgradepurchase_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public upgradepurchase_sync_res() { }

		public upgradepurchase_sync_res(int ok, RoleUpgradePurchaseInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleUpgradePurchaseInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "upgradepurchase_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleUpgradePurchaseInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleUpgradePurchaseInfo info;
	}

	// 购买升级特惠活动奖励
	public static class upgradepurchase_buy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public upgradepurchase_buy_res() { }

		public upgradepurchase_buy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "upgradepurchase_buy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步充值送礼活动信息
	public static class paygift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public paygift_sync_res() { }

		public paygift_sync_res(int ok, RolePayGiftInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RolePayGiftInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "paygift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RolePayGiftInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RolePayGiftInfo info;
	}

	// 领取充值送礼活动奖励
	public static class paygift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public paygift_take_res() { }

		public paygift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "paygift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步消费送礼活动信息
	public static class consumegift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public consumegift_sync_res() { }

		public consumegift_sync_res(int ok, RoleConsumeGiftInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleConsumeGiftInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "consumegift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleConsumeGiftInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleConsumeGiftInfo info;
	}

	// 领取消费送礼活动奖励
	public static class consumegift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public consumegift_take_res() { }

		public consumegift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "consumegift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步冲级送礼活动信息
	public static class upgradegift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public upgradegift_sync_res() { }

		public upgradegift_sync_res(int ok, RoleUpgradeGiftInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleUpgradeGiftInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "upgradegift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleUpgradeGiftInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleUpgradeGiftInfo info;
	}

	// 领取冲级送礼活动奖励
	public static class upgradegift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public upgradegift_take_res() { }

		public upgradegift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "upgradegift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步投资基金活动信息
	public static class investmentfund_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public investmentfund_sync_res() { }

		public investmentfund_sync_res(int ok, RoleInvestmentFundInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleInvestmentFundInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "investmentfund_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleInvestmentFundInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleInvestmentFundInfo info;
	}

	// 买投资基金
	public static class investmentfund_buy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public investmentfund_buy_res() { }

		public investmentfund_buy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "investmentfund_buy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 领取投资基金活动奖励
	public static class investmentfund_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public investmentfund_take_res() { }

		public investmentfund_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "investmentfund_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步成长基金活动信息
	public static class growthfund_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public growthfund_sync_res() { }

		public growthfund_sync_res(int ok, RoleGrowthFundInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleGrowthFundInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "growthfund_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleGrowthFundInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleGrowthFundInfo info;
	}

	// 买成长基金
	public static class growthfund_buy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public growthfund_buy_res() { }

		public growthfund_buy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "growthfund_buy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 领取成长基金活动奖励
	public static class growthfund_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public growthfund_take_res() { }

		public growthfund_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "growthfund_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步双倍掉落副本活动信息
	public static class doubledrop_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public doubledrop_sync_res() { }

		public doubledrop_sync_res(int ok, DoubleDropInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new DoubleDropInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "doubledrop_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(DoubleDropInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public DoubleDropInfo info;
	}

	// 同步额外掉落副本活动信息
	public static class extradrop_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public extradrop_sync_res() { }

		public extradrop_sync_res(int ok, ExtraDropInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new ExtraDropInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "extradrop_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(ExtraDropInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public ExtraDropInfo info;
	}

	// 同步兑换礼品活动信息
	public static class exchangegift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public exchangegift_sync_res() { }

		public exchangegift_sync_res(int ok, ExchangeGiftInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new ExchangeGiftInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "exchangegift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(ExchangeGiftInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public ExchangeGiftInfo info;
	}

	// 领取兑换礼品
	public static class exchangegift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public exchangegift_take_res() { }

		public exchangegift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "exchangegift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步累积登录送礼活动信息
	public static class logingift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public logingift_sync_res() { }

		public logingift_sync_res(int ok, RoleLoginGiftInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleLoginGiftInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "logingift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleLoginGiftInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleLoginGiftInfo info;
	}

	// 领取累积登录送礼活动奖励
	public static class logingift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public logingift_take_res() { }

		public logingift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "logingift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步礼包兑换活动信息
	public static class giftpackage_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public giftpackage_sync_res() { }

		public giftpackage_sync_res(int ok, GiftPackageInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new GiftPackageInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "giftpackage_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(GiftPackageInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public GiftPackageInfo info;
	}

	// 兑换礼包
	public static class giftpackage_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public giftpackage_take_res() { }

		public giftpackage_take_res(int ok, Pack pack)
		{
			this.ok = ok;
			this.pack = pack;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( pack == null )
				pack = new Pack();
			is.pop(pack);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(pack);
		}

		@Override
		public String getPacketName()
		{
			return "giftpackage_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			pack = is.pop(Pack.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(pack);
		}

		public int ok;
		public Pack pack;
	}

	// 公测返现兑换查询结果
	public static class pbtcashback_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pbtcashback_sync_res() { }

		public pbtcashback_sync_res(int ok, int result)
		{
			this.ok = ok;
			this.result = result;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			result = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushInteger(result);
		}

		@Override
		public String getPacketName()
		{
			return "pbtcashback_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			result = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushInteger(result);
		}

		public int ok;
		public int result;
	}

	// 公测返现兑换
	public static class pbtcashback_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pbtcashback_take_res() { }

		public pbtcashback_take_res(int ok, int addtion)
		{
			this.ok = ok;
			this.addtion = addtion;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			addtion = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushInteger(addtion);
		}

		@Override
		public String getPacketName()
		{
			return "pbtcashback_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			addtion = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushInteger(addtion);
		}

		public int ok;
		public int addtion;
	}

	// 充值排行活动同步
	public static class payrank_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public payrank_sync_res() { }

		public payrank_sync_res(int ok, RolePayRankInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RolePayRankInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "payrank_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RolePayRankInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RolePayRankInfo info;
	}

	// 团购活动同步
	public static class groupbuy_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public groupbuy_sync_res() { }

		public groupbuy_sync_res(int ok, RoleGroupBuyInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleGroupBuyInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "groupbuy_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleGroupBuyInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleGroupBuyInfo info;
	}

	// 购买团购商品
	public static class groupbuy_buy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public groupbuy_buy_res() { }

		public groupbuy_buy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "groupbuy_buy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 团购活动同步
	public static class flashsale_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public flashsale_sync_res() { }

		public flashsale_sync_res(int ok, RoleFlashSaleInfo infos)
		{
			this.ok = ok;
			this.infos = infos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( infos == null )
				infos = new RoleFlashSaleInfo();
			is.pop(infos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(infos);
		}

		@Override
		public String getPacketName()
		{
			return "flashsale_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			infos = is.pop(RoleFlashSaleInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(infos);
		}

		public int ok;
		public RoleFlashSaleInfo infos;
	}

	// 购买团购商品
	public static class flashsale_buy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public flashsale_buy_res() { }

		public flashsale_buy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "flashsale_buy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 转盘同步
	public static class luckyroll_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public luckyroll_sync_res() { }

		public luckyroll_sync_res(int ok, LuckyRollInfo infos)
		{
			this.ok = ok;
			this.infos = infos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( infos == null )
				infos = new LuckyRollInfo();
			is.pop(infos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(infos);
		}

		@Override
		public String getPacketName()
		{
			return "luckyroll_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			infos = is.pop(LuckyRollInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(infos);
		}

		public int ok;
		public LuckyRollInfo infos;
	}

	// 转转盘回应
	public static class luckyroll_play_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public luckyroll_play_res() { }

		public luckyroll_play_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "luckyroll_play_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 直购礼包活动信息
	public static class directpurchase_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public directpurchase_sync_res() { }

		public directpurchase_sync_res(int ok, RoleDirectPurchaseInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleDirectPurchaseInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "directpurchase_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleDirectPurchaseInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleDirectPurchaseInfo info;
	}

	// 领取直购礼包活动奖励
	public static class directpurchase_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public directpurchase_take_res() { }

		public directpurchase_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "directpurchase_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 老虎机活动信息
	public static class onearmbandit_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public onearmbandit_sync_res() { }

		public onearmbandit_sync_res(int ok, RoleOneArmBanditInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new RoleOneArmBanditInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "onearmbandit_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(RoleOneArmBanditInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public RoleOneArmBanditInfo info;
	}

	// 领取老虎机活动奖励的元宝数
	public static class onearmbandit_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public onearmbandit_take_res() { }

		public onearmbandit_take_res(int gift)
		{
			this.gift = gift;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gift = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(gift);
		}

		@Override
		public String getPacketName()
		{
			return "onearmbandit_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			gift = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(gift);
		}

		public int gift;
	}

	// 广告同步协议回应
	public static class adver_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public adver_sync_res() { }

		public adver_sync_res(int ok, Advers advers)
		{
			this.ok = ok;
			this.advers = advers;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( advers == null )
				advers = new Advers();
			is.pop(advers);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(advers);
		}

		@Override
		public String getPacketName()
		{
			return "adver_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			advers = is.pop(Advers.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(advers);
		}

		public int ok;
		public Advers advers;
	}

	// 主动离开副本响应
	public static class mapcopy_leave_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mapcopy_leave_res() { }

		public mapcopy_leave_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mapcopy_leave_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 首次进入副本后或断线重登录后通知客户端副本的时间信息
	public static class role_mapcopy_timesync implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mapcopy_timesync() { }

		public role_mapcopy_timesync(int mapId, int startTime)
		{
			this.mapId = mapId;
			this.startTime = startTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			startTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(startTime);
		}

		@Override
		public String getPacketName()
		{
			return "role_mapcopy_timesync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			startTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(startTime);
		}

		public int mapId;
		public int startTime;
	}

	// 首次进入副本后或断线重登录后通知客户端当前副本是否可以拾取
	public static class role_mapcopy_cantake_drop implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mapcopy_cantake_drop() { }

		public role_mapcopy_cantake_drop(int mapId, byte canTakeDrop)
		{
			this.mapId = mapId;
			this.canTakeDrop = canTakeDrop;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			canTakeDrop = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushByte(canTakeDrop);
		}

		@Override
		public String getPacketName()
		{
			return "role_mapcopy_cantake_drop";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			canTakeDrop = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushByte(canTakeDrop);
		}

		public int mapId;
		public byte canTakeDrop;
	}

	// 开始进入标准副本响应
	public static class normalmap_start_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public normalmap_start_res() { }

		public normalmap_start_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "normalmap_start_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 开始进入活动副本响应
	public static class activitymap_start_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public activitymap_start_res() { }

		public activitymap_start_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "activitymap_start_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知客户端普通副本开始（不包括副本扫荡）
	public static class role_commonmap_start implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_commonmap_start() { }

		public role_commonmap_start(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "role_commonmap_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 通知客户端普通副本结束（不包括副本扫荡，可能是boss死亡结束，可能是玩家死亡结束，可能是完成副本，也可能是未完成副本）socre 小于等于 0未完成
	public static class role_commonmap_end implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_commonmap_end() { }

		public role_commonmap_end(int mapId, int score)
		{
			this.mapId = mapId;
			this.score = score;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			score = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(score);
		}

		@Override
		public String getPacketName()
		{
			return "role_commonmap_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			score = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(score);
		}

		public int mapId;
		public int score;
	}

	// 活动副本杀怪计数同步
	public static class role_activitymap_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_activitymap_sync() { }

		public role_activitymap_sync(int mapId, int killMonsters)
		{
			this.mapId = mapId;
			this.killMonsters = killMonsters;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			killMonsters = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(killMonsters);
		}

		@Override
		public String getPacketName()
		{
			return "role_activitymap_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			killMonsters = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(killMonsters);
		}

		public int mapId;
		public int killMonsters;
	}

	// 通知客户端开始副本翻盘奖励（不包括副本扫荡）
	public static class role_commonmap_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_commonmap_result() { }

		public role_commonmap_result(int mapId, int score, int finishTime, int deadTimes, 
		                             int killMonsters, MapRewards rewards, int process)
		{
			this.mapId = mapId;
			this.score = score;
			this.finishTime = finishTime;
			this.deadTimes = deadTimes;
			this.killMonsters = killMonsters;
			this.rewards = rewards;
			this.process = process;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			score = is.popInteger();
			finishTime = is.popInteger();
			deadTimes = is.popInteger();
			killMonsters = is.popInteger();
			if( rewards == null )
				rewards = new MapRewards();
			is.pop(rewards);
			process = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(score);
			os.pushInteger(finishTime);
			os.pushInteger(deadTimes);
			os.pushInteger(killMonsters);
			os.push(rewards);
			os.pushInteger(process);
		}

		@Override
		public String getPacketName()
		{
			return "role_commonmap_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			score = is.popInteger();
			finishTime = is.popInteger();
			deadTimes = is.popInteger();
			killMonsters = is.popInteger();
			rewards = is.pop(MapRewards.class);
			process = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(score);
			os.pushInteger(finishTime);
			os.pushInteger(deadTimes);
			os.pushInteger(killMonsters);
			os.push(rewards);
			os.pushInteger(process);
		}

		public int mapId;
		public int score;
		public int finishTime;
		public int deadTimes;
		public int killMonsters;
		public MapRewards rewards;
		public int process;
	}

	// 自动翻牌抽奖
	public static class role_commonmap_autocard implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_commonmap_autocard() { }

		public role_commonmap_autocard(DummyGoods item)
		{
			this.item = item;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( item == null )
				item = new DummyGoods();
			is.pop(item);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(item);
		}

		@Override
		public String getPacketName()
		{
			return "role_commonmap_autocard";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			item = is.pop(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(item);
		}

		public DummyGoods item;
	}

	// 手动翻牌抽奖回应
	public static class commonmap_selectcard_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public commonmap_selectcard_res() { }

		public commonmap_selectcard_res(DummyGoods item)
		{
			this.item = item;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( item == null )
				item = new DummyGoods();
			is.pop(item);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(item);
		}

		@Override
		public String getPacketName()
		{
			return "commonmap_selectcard_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			item = is.pop(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(item);
		}

		public DummyGoods item;
	}

	// 购买进入标准副本次数的响应
	public static class normalmap_buytimes_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public normalmap_buytimes_res() { }

		public normalmap_buytimes_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "normalmap_buytimes_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 购买进入活动副本次数的响应
	public static class activitymap_buytimes_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public activitymap_buytimes_res() { }

		public activitymap_buytimes_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "activitymap_buytimes_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 副本扫荡请求响应（返回是否成功以及成功时的奖励）
	public static class privatemap_sweep_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public privatemap_sweep_res() { }

		public privatemap_sweep_res(MapSummary summary)
		{
			this.summary = summary;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( summary == null )
				summary = new MapSummary();
			is.pop(summary);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(summary);
		}

		@Override
		public String getPacketName()
		{
			return "privatemap_sweep_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			summary = is.pop(MapSummary.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(summary);
		}

		public MapSummary summary;
	}

	// 活动副本扫荡请求响应（返回是否成功以及成功时的奖励）
	public static class activity_sweep_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public activity_sweep_res() { }

		public activity_sweep_res(MapSummary summary)
		{
			this.summary = summary;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( summary == null )
				summary = new MapSummary();
			is.pop(summary);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(summary);
		}

		@Override
		public String getPacketName()
		{
			return "activity_sweep_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			summary = is.pop(MapSummary.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(summary);
		}

		public MapSummary summary;
	}

	// 同步系统邮件
	public static class mail_syncsys_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_syncsys_res() { }

		public mail_syncsys_res(MailInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new MailInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "mail_syncsys_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(MailInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public MailInfo info;
	}

	// 同步临时邮件
	public static class mail_synctmp_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_synctmp_res() { }

		public mail_synctmp_res(MailInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new MailInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "mail_synctmp_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(MailInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public MailInfo info;
	}

	// 读邮件
	public static class mail_read_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_read_res() { }

		public mail_read_res(DBMail mail)
		{
			this.mail = mail;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( mail == null )
				mail = new DBMail();
			is.pop(mail);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(mail);
		}

		@Override
		public String getPacketName()
		{
			return "mail_read_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mail = is.pop(DBMail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(mail);
		}

		public DBMail mail;
	}

	// 读系统邮件
	public static class mail_readsys_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_readsys_res() { }

		public mail_readsys_res(DBMail mail)
		{
			this.mail = mail;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( mail == null )
				mail = new DBMail();
			is.pop(mail);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(mail);
		}

		@Override
		public String getPacketName()
		{
			return "mail_readsys_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mail = is.pop(DBMail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(mail);
		}

		public DBMail mail;
	}

	// 读临时邮件
	public static class mail_readtmp_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_readtmp_res() { }

		public mail_readtmp_res(DBMail mail)
		{
			this.mail = mail;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( mail == null )
				mail = new DBMail();
			is.pop(mail);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(mail);
		}

		@Override
		public String getPacketName()
		{
			return "mail_readtmp_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mail = is.pop(DBMail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(mail);
		}

		public DBMail mail;
	}

	// 取邮件附件
	public static class mail_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_take_res() { }

		public mail_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mail_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 取系统邮件附件
	public static class mail_takesys_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_takesys_res() { }

		public mail_takesys_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mail_takesys_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 取临时邮件附件
	public static class mail_taketmp_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_taketmp_res() { }

		public mail_taketmp_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mail_taketmp_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 邮件删除
	public static class mail_del_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_del_res() { }

		public mail_del_res(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_del_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 系统邮件删除
	public static class mail_delsys_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_delsys_res() { }

		public mail_delsys_res(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_delsys_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 临时邮件删除
	public static class mail_deltmp_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_deltmp_res() { }

		public mail_deltmp_res(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_deltmp_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 取全部系统邮件附件
	public static class mail_takeallsys_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_takeallsys_res() { }

		public mail_takeallsys_res(int leftMails)
		{
			this.leftMails = leftMails;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			leftMails = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(leftMails);
		}

		@Override
		public String getPacketName()
		{
			return "mail_takeallsys_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			leftMails = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(leftMails);
		}

		public int leftMails;
	}

	// 取全部临时邮件附件
	public static class mail_takealltmp_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_takealltmp_res() { }

		public mail_takealltmp_res(int leftMails)
		{
			this.leftMails = leftMails;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			leftMails = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(leftMails);
		}

		@Override
		public String getPacketName()
		{
			return "mail_takealltmp_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			leftMails = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(leftMails);
		}

		public int leftMails;
	}

	public static class role_tempmail_full implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_tempmail_full";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 系统同步滚动通知消息
	public static class rollnotice_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public rollnotice_sync() { }

		public rollnotice_sync(List<Integer> rollnotices)
		{
			this.rollnotices = rollnotices;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rollnotices = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(rollnotices);
		}

		@Override
		public String getPacketName()
		{
			return "rollnotice_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rollnotices = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(rollnotices);
		}

		public List<Integer> rollnotices;
	}

	// rollnotice_query的异步响应
	public static class rollnotice_detail implements Stream.IStreamable, SStream.IStrPacket
	{

		public rollnotice_detail() { }

		public rollnotice_detail(DBRollNotice notice)
		{
			this.notice = notice;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( notice == null )
				notice = new DBRollNotice();
			is.pop(notice);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(notice);
		}

		@Override
		public String getPacketName()
		{
			return "rollnotice_detail";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			notice = is.pop(DBRollNotice.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(notice);
		}

		public DBRollNotice notice;
	}

	// 同步排行榜
	public static class rank_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rank_sync_res() { }

		public rank_sync_res(List<RankBrief> result)
		{
			this.result = result;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			result = is.popList(RankBrief.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(result);
		}

		@Override
		public String getPacketName()
		{
			return "rank_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			result = is.popList(RankBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(result);
		}

		public List<RankBrief> result;
	}

	// 同步帮派排行榜
	public static class sectrank_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectrank_sync_res() { }

		public sectrank_sync_res(List<RankBrief> result)
		{
			this.result = result;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			result = is.popList(RankBrief.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(result);
		}

		@Override
		public String getPacketName()
		{
			return "sectrank_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			result = is.popList(RankBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(result);
		}

		public List<RankBrief> result;
	}

	// 获取排行榜列表
	public static class rank_get_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rank_get_res() { }

		public rank_get_res(int ok, List<RankRole> ranks)
		{
			this.ok = ok;
			this.ranks = ranks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			ranks = is.popList(RankRole.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(ranks);
		}

		@Override
		public String getPacketName()
		{
			return "rank_get_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			ranks = is.popList(RankRole.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(ranks);
		}

		public int ok;
		public List<RankRole> ranks;
	}

	// 获取排行榜列表
	public static class sectrank_get_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectrank_get_res() { }

		public sectrank_get_res(int ok, List<RankSect> ranks)
		{
			this.ok = ok;
			this.ranks = ranks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			ranks = is.popList(RankSect.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(ranks);
		}

		@Override
		public String getPacketName()
		{
			return "sectrank_get_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			ranks = is.popList(RankSect.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(ranks);
		}

		public int ok;
		public List<RankSect> ranks;
	}

	// 获取自己排名(不在榜上返回0)
	public static class rank_self_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rank_self_res() { }

		public rank_self_res(int selfRank)
		{
			this.selfRank = selfRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			selfRank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(selfRank);
		}

		@Override
		public String getPacketName()
		{
			return "rank_self_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			selfRank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(selfRank);
		}

		public int selfRank;
	}

	// 获取自己帮派排名(不在榜上返回0)
	public static class sectrank_self_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectrank_self_res() { }

		public sectrank_self_res(int sectRank)
		{
			this.sectRank = sectRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectRank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sectRank);
		}

		@Override
		public String getPacketName()
		{
			return "sectrank_self_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sectRank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(sectRank);
		}

		public int sectRank;
	}

	// 买金币
	public static class buy_coin_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public buy_coin_res() { }

		public buy_coin_res(List<Integer> result)
		{
			this.result = result;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			result = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(result);
		}

		@Override
		public String getPacketName()
		{
			return "buy_coin_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			result = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(result);
		}

		public List<Integer> result;
	}

	// 买体力
	public static class buy_vit_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public buy_vit_res() { }

		public buy_vit_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "buy_vit_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 充值结果通知信息
	public static class role_pay_notice implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_pay_notice() { }

		public role_pay_notice(int payLevel, int payPoints, int addDiamond, int addCredit)
		{
			this.payLevel = payLevel;
			this.payPoints = payPoints;
			this.addDiamond = addDiamond;
			this.addCredit = addCredit;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			payLevel = is.popInteger();
			payPoints = is.popInteger();
			addDiamond = is.popInteger();
			addCredit = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(payLevel);
			os.pushInteger(payPoints);
			os.pushInteger(addDiamond);
			os.pushInteger(addCredit);
		}

		@Override
		public String getPacketName()
		{
			return "role_pay_notice";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			payLevel = is.popInteger();
			payPoints = is.popInteger();
			addDiamond = is.popInteger();
			addCredit = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(payLevel);
			os.pushInteger(payPoints);
			os.pushInteger(addDiamond);
			os.pushInteger(addCredit);
		}

		public int payLevel;
		public int payPoints;
		public int addDiamond;
		public int addCredit;
	}

	// vip更新信息
	public static class user_vip_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public user_vip_sync() { }

		public user_vip_sync(int vipLvl, int points)
		{
			this.vipLvl = vipLvl;
			this.points = points;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			vipLvl = is.popInteger();
			points = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(vipLvl);
			os.pushInteger(points);
		}

		@Override
		public String getPacketName()
		{
			return "user_vip_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			vipLvl = is.popInteger();
			points = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(vipLvl);
			os.pushInteger(points);
		}

		public int vipLvl;
		public int points;
	}

	// 同步充值信息
	public static class pay_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pay_sync_res() { }

		public pay_sync_res(PayInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new PayInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "pay_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(PayInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public PayInfo info;
	}

	// 神模式充值
	public static class pay_asgod_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pay_asgod_res() { }

		public pay_asgod_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pay_asgod_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 领取vip礼包的响应信息
	public static class vip_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public vip_take_res() { }

		public vip_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "vip_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 背包扩展
	public static class bag_expand_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_expand_res() { }

		public bag_expand_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_expand_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 出售背包里的装备
	public static class bag_sellequip_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_sellequip_res() { }

		public bag_sellequip_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_sellequip_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 出售背包里的道具物品
	public static class bag_sellitem_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_sellitem_res() { }

		public bag_sellitem_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_sellitem_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 出售背包里的宝石
	public static class bag_sellgem_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_sellgem_res() { }

		public bag_sellgem_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_sellgem_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 出售背包里的心法书
	public static class bag_sellbook_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_sellbook_res() { }

		public bag_sellbook_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_sellbook_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 批量出售背包里的装备
	public static class bag_batchsellequips_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_batchsellequips_res() { }

		public bag_batchsellequips_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_batchsellequips_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 出售背包里的道具物品
	public static class bag_batchsellitems_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_batchsellitems_res() { }

		public bag_batchsellitems_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_batchsellitems_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 出售背包里的宝石物品
	public static class bag_batchsellgems_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_batchsellgems_res() { }

		public bag_batchsellgems_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_batchsellgems_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 出售背包里的心法书物品
	public static class bag_batchsellbooks_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_batchsellbooks_res() { }

		public bag_batchsellbooks_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_batchsellbooks_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用道具礼包
	public static class bag_useitemgift_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemgift_res() { }

		public bag_useitemgift_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemgift_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用道具金币包
	public static class bag_useitemcoin_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemcoin_res() { }

		public bag_useitemcoin_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemcoin_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用道具钻石包
	public static class bag_useitemdiamond_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemdiamond_res() { }

		public bag_useitemdiamond_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemdiamond_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用道具经验丹
	public static class bag_useitemexp_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemexp_res() { }

		public bag_useitemexp_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemexp_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用道具普通回复hp
	public static class bag_useitemhp_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemhp_res() { }

		public bag_useitemhp_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemhp_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用道具vip普通回复hp
	public static class bag_useitemhppool_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemhppool_res() { }

		public bag_useitemhppool_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemhppool_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用道具宝箱,返回值-1表示背包空间不足，不足以打开宝箱
	public static class bag_useitemchest_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemchest_res() { }

		public bag_useitemchest_res(int ok, List<Rewards> items)
		{
			this.ok = ok;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			items = is.popList(Rewards.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(items);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemchest_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			items = is.popList(Rewards.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(items);
		}

		public int ok;
		public List<Rewards> items;
	}

	// 使用道具装备能量丹
	public static class bag_useitemequipenergy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemequipenergy_res() { }

		public bag_useitemequipenergy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemequipenergy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用道具宝石能量丹
	public static class bag_useitemgemenergy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemgemenergy_res() { }

		public bag_useitemgemenergy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemgemenergy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用道具心法悟性丹
	public static class bag_useiteminspiration_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useiteminspiration_res() { }

		public bag_useiteminspiration_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useiteminspiration_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用道具体力丹
	public static class bag_useitemvit_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemvit_res() { }

		public bag_useitemvit_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemvit_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用时装道具
	public static class bag_useitemfashion_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemfashion_res() { }

		public bag_useitemfashion_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemfashion_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用历练瓶(满)道具
	public static class bag_useitemexpcoinpool_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemexpcoinpool_res() { }

		public bag_useitemexpcoinpool_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemexpcoinpool_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用月卡道具
	public static class bag_usemonthlycard_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_usemonthlycard_res() { }

		public bag_usemonthlycard_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_usemonthlycard_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用VIP体验卡道具
	public static class bag_usevipcard_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_usevipcard_res() { }

		public bag_usevipcard_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_usevipcard_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用增加武勋道具
	public static class bag_useitemfeat_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemfeat_res() { }

		public bag_useitemfeat_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemfeat_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用技能道具
	public static class bag_useitemskill_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemskill_res() { }

		public bag_useitemskill_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemskill_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用信件道具
	public static class bag_useitemletter_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemletter_res() { }

		public bag_useitemletter_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemletter_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用善恶值道具
	public static class bag_useitemevil_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemevil_res() { }

		public bag_useitemevil_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemevil_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 合成碎片
	public static class bag_piececompose_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_piececompose_res() { }

		public bag_piececompose_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_piececompose_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用能力强化道具
	public static class bag_useitempropstrength_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitempropstrength_res() { }

		public bag_useitempropstrength_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitempropstrength_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用离线精灵修炼点添加道具
	public static class bag_useitemofflinefuncpoint_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemofflinefuncpoint_res() { }

		public bag_useitemofflinefuncpoint_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemofflinefuncpoint_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用称号道具
	public static class bag_useitemtitle_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemtitle_res() { }

		public bag_useitemtitle_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemtitle_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用绝技道具
	public static class bag_useitemuskill_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemuskill_res() { }

		public bag_useitemuskill_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemuskill_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用头像激活道具
	public static class bag_useitemhead_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemhead_res() { }

		public bag_useitemhead_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemhead_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 穿装备
	public static class equip_upwear_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_upwear_res() { }

		public equip_upwear_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "equip_upwear_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 脱装备
	public static class equip_downwear_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_downwear_res() { }

		public equip_downwear_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "equip_downwear_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 装备强化
	public static class equip_levelup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_levelup_res() { }

		public equip_levelup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "equip_levelup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 批量装备强化
	public static class equip_batchlevelup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_batchlevelup_res() { }

		public equip_batchlevelup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "equip_batchlevelup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 装备升星
	public static class equip_starup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_starup_res() { }

		public equip_starup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "equip_starup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 水晶装备修复
	public static class equip_repair_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_repair_res() { }

		public equip_repair_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "equip_repair_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 自动穿装备
	public static class equip_autoupwear_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_autoupwear_res() { }

		public equip_autoupwear_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "equip_autoupwear_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 装备部位宝石升级
	public static class gem_levelup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public gem_levelup_res() { }

		public gem_levelup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "gem_levelup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 装备部位宝石镶嵌
	public static class gem_inlay_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public gem_inlay_res() { }

		public gem_inlay_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "gem_inlay_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 装备部位宝石升级
	public static class gem_unlay_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public gem_unlay_res() { }

		public gem_unlay_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "gem_unlay_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 装备精炼
	public static class equip_refine_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_refine_res() { }

		public equip_refine_res(List<Prop> props)
		{
			this.props = props;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			props = is.popList(Prop.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(props);
		}

		@Override
		public String getPacketName()
		{
			return "equip_refine_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			props = is.popList(Prop.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(props);
		}

		public List<Prop> props;
	}

	// 同步打造界面信息打造(equip:当前正在打造的装备, legends:当前打造出来的属性)
	public static class legend_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public legend_sync_res() { }

		public legend_sync_res(DBEquip equip, List<Integer> legends)
		{
			this.equip = equip;
			this.legends = legends;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( equip == null )
				equip = new DBEquip();
			is.pop(equip);
			legends = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(equip);
			os.pushIntegerList(legends);
		}

		@Override
		public String getPacketName()
		{
			return "legend_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			equip = is.pop(DBEquip.class);
			legends = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(equip);
			os.pushIntegerList(legends);
		}

		public DBEquip equip;
		public List<Integer> legends;
	}

	// 打造传世装备
	public static class legend_make_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public legend_make_res() { }

		public legend_make_res(List<Integer> legends)
		{
			this.legends = legends;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			legends = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(legends);
		}

		@Override
		public String getPacketName()
		{
			return "legend_make_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			legends = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(legends);
		}

		public List<Integer> legends;
	}

	// 放弃传世装备属性
	public static class legend_quit_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public legend_quit_res() { }

		public legend_quit_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "legend_quit_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 保存传世装备属性
	public static class legend_save_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public legend_save_res() { }

		public legend_save_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "legend_save_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 选择技能上战
	public static class skill_select_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public skill_select_res() { }

		public skill_select_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "skill_select_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 技能升级
	public static class skill_levelup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public skill_levelup_res() { }

		public skill_levelup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "skill_levelup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 技能升界
	public static class skill_enhance_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public skill_enhance_res() { }

		public skill_enhance_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "skill_enhance_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 技能解锁
	public static class skill_unlock_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public skill_unlock_res() { }

		public skill_unlock_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "skill_unlock_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 装备绝技
	public static class uniqueskill_set_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public uniqueskill_set_res() { }

		public uniqueskill_set_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "uniqueskill_set_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 心法学习
	public static class spirit_learn_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public spirit_learn_res() { }

		public spirit_learn_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "spirit_learn_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 心法研读
	public static class spirit_levelup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public spirit_levelup_res() { }

		public spirit_levelup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "spirit_levelup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 心法装备
	public static class spirit_install_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public spirit_install_res() { }

		public spirit_install_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "spirit_install_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 心法卸载
	public static class spirit_uninstall_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public spirit_uninstall_res() { }

		public spirit_uninstall_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "spirit_uninstall_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 合成神兵
	public static class weapon_make_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_make_res() { }

		public weapon_make_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_make_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 神兵升级
	public static class weapon_levelup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_levelup_res() { }

		public weapon_levelup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_levelup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 神兵买等级
	public static class weapon_buylevel_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_buylevel_res() { }

		public weapon_buylevel_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_buylevel_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 神兵升星
	public static class weapon_starup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_starup_res() { }

		public weapon_starup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_starup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 选择使用神兵
	public static class weapon_select_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_select_res() { }

		public weapon_select_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_select_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 打开神兵界面同步信息
	public static class weapon_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_sync_res() { }

		public weapon_sync_res(Map<Integer, Integer> masters)
		{
			this.masters = masters;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			masters = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(masters);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			masters = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(masters);
		}

		public Map<Integer, Integer> masters;
	}

	// 神兵特技激活
	public static class weapon_uskill_open_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_uskill_open_res() { }

		public weapon_uskill_open_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_uskill_open_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 设置神兵形态
	public static class weapon_setform_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_setform_res() { }

		public weapon_setform_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_setform_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 进入神兵副本请求
	public static class weaponmap_start_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weaponmap_start_res() { }

		public weaponmap_start_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weaponmap_start_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 打开佣兵界面,同步信息
	public static class pet_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_sync_res() { }

		public pet_sync_res(Map<Integer, Integer> allSpirits)
		{
			this.allSpirits = allSpirits;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			allSpirits = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(allSpirits);
		}

		@Override
		public String getPacketName()
		{
			return "pet_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			allSpirits = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(allSpirits);
		}

		public Map<Integer, Integer> allSpirits;
	}

	// 生成佣兵
	public static class pet_make_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_make_res() { }

		public pet_make_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_make_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 佣兵转职
	public static class pet_transform_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_transform_res() { }

		public pet_transform_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_transform_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 佣兵升级
	public static class pet_levelup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_levelup_res() { }

		public pet_levelup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_levelup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 佣兵买等级
	public static class pet_buylevel_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_buylevel_res() { }

		public pet_buylevel_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_buylevel_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 佣兵升星
	public static class pet_starup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_starup_res() { }

		public pet_starup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_starup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 佣兵突破等级提升
	public static class pet_breakskillvlup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_breakskillvlup_res() { }

		public pet_breakskillvlup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_breakskillvlup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 世界地图佣兵设置
	public static class pet_worldmapset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_worldmapset_res() { }

		public pet_worldmapset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_worldmapset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 单人副本佣兵设置
	public static class pet_privatemapset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_privatemapset_res() { }

		public pet_privatemapset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_privatemapset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派副本佣兵设置
	public static class pet_sectmapset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_sectmapset_res() { }

		public pet_sectmapset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_sectmapset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 活动副本佣兵设置
	public static class pet_activitymapset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_activitymapset_res() { }

		public pet_activitymapset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_activitymapset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 进入身世副本协议
	public static class lifetaskmap_start_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public lifetaskmap_start_res() { }

		public lifetaskmap_start_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "lifetaskmap_start_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 武库心法升级(第一次相当于解锁心法)
	public static class petspirit_lvlup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public petspirit_lvlup_res() { }

		public petspirit_lvlup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "petspirit_lvlup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 随从心法修习(第一次默认保存)
	public static class petspirit_learn_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public petspirit_learn_res() { }

		public petspirit_learn_res(int spiritLvl)
		{
			this.spiritLvl = spiritLvl;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spiritLvl = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spiritLvl);
		}

		@Override
		public String getPacketName()
		{
			return "petspirit_learn_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			spiritLvl = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(spiritLvl);
		}

		public int spiritLvl;
	}

	// 随从心法替换
	public static class petspirit_replace_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public petspirit_replace_res() { }

		public petspirit_replace_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "petspirit_replace_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 日常任务同步任务列表协议
	public static class dtask_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public dtask_sync_res() { }

		public dtask_sync_res(List<DBDailyTask> tasks)
		{
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tasks = is.popList(DBDailyTask.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(tasks);
		}

		@Override
		public String getPacketName()
		{
			return "dtask_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tasks = is.popList(DBDailyTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(tasks);
		}

		public List<DBDailyTask> tasks;
	}

	// 日常任务获取任务奖励协议
	public static class dtask_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public dtask_take_res() { }

		public dtask_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "dtask_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 挑战任务同步任务列表协议
	public static class chtask_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public chtask_sync_res() { }

		public chtask_sync_res(Map<Integer, DBChallengeTask> tasks, Map<Integer, Integer> maxValues, Map<Integer, Integer> achPoints)
		{
			this.tasks = tasks;
			this.maxValues = maxValues;
			this.achPoints = achPoints;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tasks = is.popIntegerTreeMap(DBChallengeTask.class);
			maxValues = is.popIntegerIntegerTreeMap();
			achPoints = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(tasks);
			os.pushIntegerIntegerMap(maxValues);
			os.pushIntegerIntegerMap(achPoints);
		}

		@Override
		public String getPacketName()
		{
			return "chtask_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tasks = is.popIntegerTreeMap(DBChallengeTask.class);
			maxValues = is.popIntegerIntegerTreeMap();
			achPoints = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(tasks);
			os.pushIntegerIntegerMap(maxValues);
			os.pushIntegerIntegerMap(achPoints);
		}

		public Map<Integer, DBChallengeTask> tasks;
		public Map<Integer, Integer> maxValues;
		public Map<Integer, Integer> achPoints;
	}

	// 挑战任务获取任务奖励协议
	public static class chtask_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public chtask_take_res() { }

		public chtask_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "chtask_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 名望同步协议
	public static class fame_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public fame_sync_res() { }

		public fame_sync_res(FameInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new FameInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "fame_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(FameInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public FameInfo info;
	}

	// 名望晋级协议
	public static class fame_upgrade_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public fame_upgrade_res() { }

		public fame_upgrade_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "fame_upgrade_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 名望获取名望奖励协议
	public static class fame_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public fame_take_res() { }

		public fame_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "fame_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 每日在线奖励同步在线奖励协议
	public static class onlinegift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public onlinegift_sync_res() { }

		public onlinegift_sync_res(DBDailyOnlineGift info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new DBDailyOnlineGift();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "onlinegift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(DBDailyOnlineGift.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public DBDailyOnlineGift info;
	}

	// 每日在线奖励获取奖励协议
	public static class onlinegift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public onlinegift_take_res() { }

		public onlinegift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "onlinegift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 离线经验奖励领取协议
	public static class offlineexp_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public offlineexp_take_res() { }

		public offlineexp_take_res(OfflineReward offlineRewards)
		{
			this.offlineRewards = offlineRewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( offlineRewards == null )
				offlineRewards = new OfflineReward();
			is.pop(offlineRewards);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(offlineRewards);
		}

		@Override
		public String getPacketName()
		{
			return "offlineexp_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			offlineRewards = is.pop(OfflineReward.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(offlineRewards);
		}

		public OfflineReward offlineRewards;
	}

	// 全服答题活动同步协议
	public static class quizgift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public quizgift_sync_res() { }

		public quizgift_sync_res(QuizGiftInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new QuizGiftInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "quizgift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(QuizGiftInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public QuizGiftInfo info;
	}

	// 全服答题活动查询排行榜
	public static class quizgift_qrank_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public quizgift_qrank_res() { }

		public quizgift_qrank_res(List<QuizGiftRankRole> rank)
		{
			this.rank = rank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rank = is.popList(QuizGiftRankRole.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(rank);
		}

		@Override
		public String getPacketName()
		{
			return "quizgift_qrank_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rank = is.popList(QuizGiftRankRole.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(rank);
		}

		public List<QuizGiftRankRole> rank;
	}

	// 全服答题活动答题协议
	public static class quizgift_answer_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public quizgift_answer_res() { }

		public quizgift_answer_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "quizgift_answer_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步幸运转盘信息
	public static class sync_luckywheel_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_luckywheel_res() { }

		public sync_luckywheel_res(DBLuckyWheel info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new DBLuckyWheel();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "sync_luckywheel_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(DBLuckyWheel.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public DBLuckyWheel info;
	}

	// 幸运转盘抽奖
	public static class luckywheel_ondraw_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public luckywheel_ondraw_res() { }

		public luckywheel_ondraw_res(int pos)
		{
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pos);
		}

		@Override
		public String getPacketName()
		{
			return "luckywheel_ondraw_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pos);
		}

		public int pos;
	}

	// 购买幸运转盘抽奖次数
	public static class luckywheel_buydrawtimes_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public luckywheel_buydrawtimes_res() { }

		public luckywheel_buydrawtimes_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "luckywheel_buydrawtimes_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 燃放烟花
	public static class play_firework_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public play_firework_res() { }

		public play_firework_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "play_firework_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知客户端播放烟花的广播协议
	public static class notify_play_firework implements Stream.IStreamable, SStream.IStrPacket
	{

		public notify_play_firework() { }

		public notify_play_firework(String roleName, int mapID, int fireworkID)
		{
			this.roleName = roleName;
			this.mapID = mapID;
			this.fireworkID = fireworkID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleName = is.popString();
			mapID = is.popInteger();
			fireworkID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(roleName);
			os.pushInteger(mapID);
			os.pushInteger(fireworkID);
		}

		@Override
		public String getPacketName()
		{
			return "notify_play_firework";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleName = is.popString();
			mapID = is.popInteger();
			fireworkID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(roleName);
			os.pushInteger(mapID);
			os.pushInteger(fireworkID);
		}

		public String roleName;
		public int mapID;
		public int fireworkID;
	}

	// 抢红包响应协议
	public static class redenvelope_snatch_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public redenvelope_snatch_res() { }

		public redenvelope_snatch_res(int ok, int dayGetGiftTimes)
		{
			this.ok = ok;
			this.dayGetGiftTimes = dayGetGiftTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			dayGetGiftTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushInteger(dayGetGiftTimes);
		}

		@Override
		public String getPacketName()
		{
			return "redenvelope_snatch_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			dayGetGiftTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushInteger(dayGetGiftTimes);
		}

		public int ok;
		public int dayGetGiftTimes;
	}

	// 红包通知协议
	public static class redenvelope_notice implements Stream.IStreamable, SStream.IStrPacket
	{

		public redenvelope_notice() { }

		public redenvelope_notice(int startTime, int id, int payLevel)
		{
			this.startTime = startTime;
			this.id = id;
			this.payLevel = payLevel;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			startTime = is.popInteger();
			id = is.popInteger();
			payLevel = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(startTime);
			os.pushInteger(id);
			os.pushInteger(payLevel);
		}

		@Override
		public String getPacketName()
		{
			return "redenvelope_notice";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			startTime = is.popInteger();
			id = is.popInteger();
			payLevel = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(startTime);
			os.pushInteger(id);
			os.pushInteger(payLevel);
		}

		public int startTime;
		public int id;
		public int payLevel;
	}

	// 接取主线任务
	public static class mtask_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mtask_take_res() { }

		public mtask_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mtask_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 放弃主线任务
	public static class mtask_quit_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mtask_quit_res() { }

		public mtask_quit_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mtask_quit_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 主线任务领取奖励
	public static class mtask_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mtask_reward_res() { }

		public mtask_reward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mtask_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 神兵任务领取奖励
	public static class wtask_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public wtask_reward_res() { }

		public wtask_reward_res(int nextTaskId, int receiveTime)
		{
			this.nextTaskId = nextTaskId;
			this.receiveTime = receiveTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			nextTaskId = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(nextTaskId);
			os.pushInteger(receiveTime);
		}

		@Override
		public String getPacketName()
		{
			return "wtask_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			nextTaskId = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(nextTaskId);
			os.pushInteger(receiveTime);
		}

		public int nextTaskId;
		public int receiveTime;
	}

	// 佣兵任务领取奖励
	public static class ptask_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public ptask_reward_res() { }

		public ptask_reward_res(int nextTaskId)
		{
			this.nextTaskId = nextTaskId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			nextTaskId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(nextTaskId);
		}

		@Override
		public String getPacketName()
		{
			return "ptask_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			nextTaskId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(nextTaskId);
		}

		public int nextTaskId;
	}

	// 接取佣兵身世任务
	public static class petlifetask_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public petlifetask_take_res() { }

		public petlifetask_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "petlifetask_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 佣兵身世任务领取奖励
	public static class petlifetask_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public petlifetask_reward_res() { }

		public petlifetask_reward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "petlifetask_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 任务定点使用道具
	public static class task_useitem_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_useitem_res() { }

		public task_useitem_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "task_useitem_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 任务提交道具
	public static class task_submititem_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_submititem_res() { }

		public task_submititem_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "task_submititem_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 随从任务提交道具
	public static class pettask_submititem_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pettask_submititem_res() { }

		public pettask_submititem_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pettask_submititem_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 随从身世任务提交道具
	public static class petlifetask_submititem_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public petlifetask_submititem_res() { }

		public petlifetask_submititem_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "petlifetask_submititem_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 任务npc对话
	public static class task_dialog_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_dialog_res() { }

		public task_dialog_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "task_dialog_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 任务护送NPC
	public static class task_conveynpc_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_conveynpc_res() { }

		public task_conveynpc_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "task_conveynpc_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 任务护送物件
	public static class task_conveyitem_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_conveyitem_res() { }

		public task_conveyitem_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "task_conveyitem_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 任务文字答题
	public static class task_answer_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_answer_res() { }

		public task_answer_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "task_answer_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 随机答题
	public static class task_randquestion_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_randquestion_res() { }

		public task_randquestion_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "task_randquestion_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 请求挖矿的响应协议
	public static class role_mine_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mine_res() { }

		public role_mine_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "role_mine_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 设置攻击模式回应
	public static class set_attackmode_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public set_attackmode_res() { }

		public set_attackmode_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "set_attackmode_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知新队员加入队伍
	public static class team_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_sync() { }

		public team_sync(Team team)
		{
			this.team = team;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( team == null )
				team = new Team();
			is.pop(team);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(team);
		}

		@Override
		public String getPacketName()
		{
			return "team_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			team = is.pop(Team.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(team);
		}

		public Team team;
	}

	// 通知其他队员新队员加入队伍
	public static class team_join implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_join() { }

		public team_join(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "team_join";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知其他队员有成员离开队伍
	public static class team_leave implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_leave() { }

		public team_leave(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "team_leave";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知其他队员有成员被踢出队伍
	public static class team_kick implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_kick() { }

		public team_kick(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "team_kick";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知队伍队伍解散
	public static class team_dissolve implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "team_dissolve";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 通知队伍换队长
	public static class team_change_leader implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_change_leader() { }

		public team_change_leader(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "team_change_leader";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知客户端队伍成员信息的变化后的更新值或客户端主动查询值
	public static class team_member_profile implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_member_profile() { }

		public team_member_profile(RoleProfile profile, int mapId, Vector3 position, int state, 
		                           int line)
		{
			this.profile = profile;
			this.mapId = mapId;
			this.position = position;
			this.state = state;
			this.line = line;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( profile == null )
				profile = new RoleProfile();
			is.pop(profile);
			mapId = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			state = is.popInteger();
			line = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(profile);
			os.pushInteger(mapId);
			os.push(position);
			os.pushInteger(state);
			os.pushInteger(line);
		}

		@Override
		public String getPacketName()
		{
			return "team_member_profile";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			profile = is.pop(RoleProfile.class);
			mapId = is.popInteger();
			position = is.pop(Vector3.class);
			state = is.popInteger();
			line = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(profile);
			os.pushInteger(mapId);
			os.push(position);
			os.pushInteger(state);
			os.pushInteger(line);
		}

		public RoleProfile profile;
		public int mapId;
		public Vector3 position;
		public int state;
		public int line;
	}

	// 通知客户端队伍成员的hp变化更新后的新值
	public static class team_member_hp implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_member_hp() { }

		public team_member_hp(int roleId, int hp, int hpMax)
		{
			this.roleId = roleId;
			this.hp = hp;
			this.hpMax = hpMax;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			hp = is.popInteger();
			hpMax = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(hp);
			os.pushInteger(hpMax);
		}

		@Override
		public String getPacketName()
		{
			return "team_member_hp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			hp = is.popInteger();
			hpMax = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(hp);
			os.pushInteger(hpMax);
		}

		public int roleId;
		public int hp;
		public int hpMax;
	}

	// 通知客户端队伍成员的位置变化更新后的新值
	public static class team_member_position implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_member_position() { }

		public team_member_position(int roleId, int mapId, Vector3 position, int line)
		{
			this.roleId = roleId;
			this.mapId = mapId;
			this.position = position;
			this.line = line;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			mapId = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			line = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(mapId);
			os.push(position);
			os.pushInteger(line);
		}

		@Override
		public String getPacketName()
		{
			return "team_member_position";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			mapId = is.popInteger();
			position = is.pop(Vector3.class);
			line = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(mapId);
			os.push(position);
			os.pushInteger(line);
		}

		public int roleId;
		public int mapId;
		public Vector3 position;
		public int line;
	}

	// 通知客户端队伍成员的连接状态变化,state大于1是连接状态，为0是断线
	public static class team_member_connection implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_member_connection() { }

		public team_member_connection(int roleId, int state)
		{
			this.roleId = roleId;
			this.state = state;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(state);
		}

		@Override
		public String getPacketName()
		{
			return "team_member_connection";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(state);
		}

		public int roleId;
		public int state;
	}

	// 查询玩家的队伍信息的响应
	public static class team_role_query_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_role_query_res() { }

		public team_role_query_res(int teamId)
		{
			this.teamId = teamId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			teamId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(teamId);
		}

		@Override
		public String getPacketName()
		{
			return "team_role_query_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			teamId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(teamId);
		}

		public int teamId;
	}

	// 邀请其他玩家组队响应(返回邀请操作是否成功，大于0成功并向对方发送邀请消息，对方已经下线-1，队伍已满-2，对方已经在队伍中-3, 对方正在副本中-5)
	public static class team_invite_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_invite_res() { }

		public team_invite_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "team_invite_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 转发其他玩家的组队邀请
	public static class team_invite_forward implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_invite_forward() { }

		public team_invite_forward(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "team_invite_forward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 玩家是否同意接收组队邀请操作响应(返回对邀请响应的操作是否成功，大于0操作成功(拒绝或接受成功)，如果接受失败：对方已经下线-1，队伍已满-2，邀请人已经加入其它队伍-3)
	public static class team_invitedby_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_invitedby_res() { }

		public team_invitedby_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "team_invitedby_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知邀请者前面的邀请被拒绝
	public static class team_invite_refuse implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_invite_refuse() { }

		public team_invite_refuse(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "team_invite_refuse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知邀请者前面的邀请正忙
	public static class team_invite_busy implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_invite_busy() { }

		public team_invite_busy(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "team_invite_busy";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知邀请者前面的邀请在指引状态
	public static class team_invite_lead implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_invite_lead() { }

		public team_invite_lead(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "team_invite_lead";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 其他玩家申请组队响应(返回申请操作是否成功，大于0成功并向队长或申请人发送申请消息，队长或申请人已经下线-1，队伍已满-2，本人已经在其他队伍-3(此项客户端预处理，服务器做保证，正常逻辑不会返回-3))
	public static class team_apply_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_apply_res() { }

		public team_apply_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "team_apply_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 转发其他玩家的组队申请
	public static class team_apply_forward implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_apply_forward() { }

		public team_apply_forward(RoleOverview role)
		{
			this.role = role;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( role == null )
				role = new RoleOverview();
			is.pop(role);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(role);
		}

		@Override
		public String getPacketName()
		{
			return "team_apply_forward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			role = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(role);
		}

		public RoleOverview role;
	}

	// 队长是否同意接受组队申请操作响应(返回对申请响应的操作是否成功，大于0操作成功(拒绝或接受成功)，如果接受失败：对方已经下线-1，队伍已满-2，申请人已经加入其它队伍-3)
	public static class team_appliedby_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_appliedby_res() { }

		public team_appliedby_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "team_appliedby_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知申请者前面的申请被队长拒绝
	public static class team_apply_refuse implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_apply_refuse() { }

		public team_apply_refuse(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "team_apply_refuse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 离开队伍响应(返回离开队伍是否成功)
	public static class team_leave_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_leave_res() { }

		public team_leave_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "team_leave_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 踢出队伍成员协议(返回踢出队伍成员是否成功)
	public static class team_kick_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_kick_res() { }

		public team_kick_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "team_kick_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 解散队伍响应(返回解散队伍是否成功)
	public static class team_dissolve_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_dissolve_res() { }

		public team_dissolve_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "team_dissolve_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 队伍切换队长响应(返回换队长是否成功)
	public static class team_change_leader_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_change_leader_res() { }

		public team_change_leader_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "team_change_leader_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 本队伍信息查询响应协议
	public static class team_self_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_self_res() { }

		public team_self_res(List<RoleOverview> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "team_self_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roles);
		}

		public List<RoleOverview> roles;
	}

	// 附近的队伍响应协议
	public static class team_mapt_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_mapt_res() { }

		public team_mapt_res(List<TeamOverview> teams)
		{
			this.teams = teams;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			teams = is.popList(TeamOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(teams);
		}

		@Override
		public String getPacketName()
		{
			return "team_mapt_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			teams = is.popList(TeamOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(teams);
		}

		public List<TeamOverview> teams;
	}

	// 附近的人响应协议
	public static class team_mapr_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_mapr_res() { }

		public team_mapr_res(List<RoleOverview> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "team_mapr_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roles);
		}

		public List<RoleOverview> roles;
	}

	// 通知新成员加入房间同步当前房间信息
	public static class mroom_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_sync() { }

		public mroom_sync(MRoom room)
		{
			this.room = room;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( room == null )
				room = new MRoom();
			is.pop(room);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(room);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			room = is.pop(MRoom.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(room);
		}

		public MRoom room;
	}

	// 通知其他成员员新成员加入房间
	public static class mroom_join implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_join() { }

		public mroom_join(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_join";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知其他成员有成员离开房间
	public static class mroom_leave implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_leave() { }

		public mroom_leave(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_leave";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知其他成员有成员被踢出房间
	public static class mroom_kick implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_kick() { }

		public mroom_kick(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_kick";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知成员换队长
	public static class mroom_change_leader implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_change_leader() { }

		public mroom_change_leader(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_change_leader";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知房间其他成员的连接状态变化,state大于1是连接状态，为0是断线
	public static class mroom_member_connection implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_member_connection() { }

		public mroom_member_connection(int roleId, int state)
		{
			this.roleId = roleId;
			this.state = state;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(state);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_member_connection";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(state);
		}

		public int roleId;
		public int state;
	}

	// 创建新副本房间响应协议
	public static class mroom_create_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_create_res() { }

		public mroom_create_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_create_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 新成员点击加入副本房间协议
	public static class mroom_enter_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_enter_res() { }

		public mroom_enter_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_enter_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 新成员快速加入副本房间协议
	public static class mroom_qenter_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_qenter_res() { }

		public mroom_qenter_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_qenter_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 房间队长邀请新人加入副本房间协议
	public static class mroom_invite_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_invite_res() { }

		public mroom_invite_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_invite_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 转发其他玩家进入房间的邀请
	public static class mroom_invite_forward implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_invite_forward() { }

		public mroom_invite_forward(int roleId, String roleName, int mapId, int roomId, 
		                            int type)
		{
			this.roleId = roleId;
			this.roleName = roleName;
			this.mapId = mapId;
			this.roomId = roomId;
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
			mapId = is.popInteger();
			roomId = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
			os.pushInteger(mapId);
			os.pushInteger(roomId);
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_invite_forward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
			mapId = is.popInteger();
			roomId = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
			os.pushInteger(mapId);
			os.pushInteger(roomId);
			os.pushInteger(type);
		}

		public int roleId;
		public String roleName;
		public int mapId;
		public int roomId;
		public int type;
	}

	// 玩家是否同意加入副本房间的协议
	public static class mroom_invitedby_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_invitedby_res() { }

		public mroom_invitedby_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_invitedby_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知邀请者前面的邀请被拒绝
	public static class mroom_invite_refuse implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_invite_refuse() { }

		public mroom_invite_refuse(int roleId, String roleName)
		{
			this.roleId = roleId;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_invite_refuse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushString(roleName);
		}

		public int roleId;
		public String roleName;
	}

	// 通知邀请者被邀请的人正忙
	public static class mroom_invite_busy implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_invite_busy() { }

		public mroom_invite_busy(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_invite_busy";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知邀请者被邀请的人条件不满足
	public static class mroom_invite_fail implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_invite_fail() { }

		public mroom_invite_fail(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_invite_fail";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 离开房间的响应(返回离开房间是否成功)
	public static class mroom_leave_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_leave_res() { }

		public mroom_leave_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_leave_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 踢出队伍成员协议(返回踢出队伍成员是否成功)
	public static class mroom_kick_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_kick_res() { }

		public mroom_kick_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_kick_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 副本房间更换房主响应(返回换房主是否成功)
	public static class mroom_change_leader_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_change_leader_res() { }

		public mroom_change_leader_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_change_leader_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 本房间信息查询响应协议
	public static class mroom_self_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_self_res() { }

		public mroom_self_res(List<RoleOverview> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_self_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roles);
		}

		public List<RoleOverview> roles;
	}

	// 房间附近的人响应协议
	public static class mroom_mapr_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_mapr_res() { }

		public mroom_mapr_res(List<RoleOverview> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_mapr_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roles);
		}

		public List<RoleOverview> roles;
	}

	// 房间列表查询响应协议
	public static class mroom_query_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_query_res() { }

		public mroom_query_res(List<TeamOverview> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(TeamOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_query_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popList(TeamOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roles);
		}

		public List<TeamOverview> roles;
	}

	// 有新申请加入帮派的通知协议
	public static class sect_notice_application implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_notice_application";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派中被人膜拜的通知协议
	public static class sect_notice_worship implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_notice_worship";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派中有宴席开放并且自己没有参加过的通知协议
	public static class sect_notice_banquet implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_notice_banquet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派中可以继续接取任务的通知协议
	public static class sect_notice_tasks implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_notice_tasks";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派中有共享出去的任务呗完成后有奖励可以领取
	public static class sect_notice_sharedtaskreward implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_notice_sharedtaskreward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 打开帮派界面同步帮派信息请求的响应协议
	public static class sect_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_sync_res() { }

		public sect_sync_res(SectInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new SectInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "sect_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(SectInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public SectInfo info;
	}

	// 创建帮派响应协议
	public static class sect_create_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_create_res() { }

		public sect_create_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_create_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 批量查询帮派是否被申请响应协议
	public static class sect_queryapplied_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_queryapplied_res() { }

		public sect_queryapplied_res(Set<Integer> applied)
		{
			this.applied = applied;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			applied = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(applied);
		}

		@Override
		public String getPacketName()
		{
			return "sect_queryapplied_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			applied = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(applied);
		}

		public Set<Integer> applied;
	}

	// 刷新帮派列表响应协议
	public static class sect_list_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_list_res() { }

		public sect_list_res(List<SectOverview> list)
		{
			this.list = list;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			list = is.popList(SectOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(list);
		}

		@Override
		public String getPacketName()
		{
			return "sect_list_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			list = is.popList(SectOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(list);
		}

		public List<SectOverview> list;
	}

	// 批量查询帮派信息响应协议
	public static class sect_query_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_query_res() { }

		public sect_query_res(List<SectOverview> overviews)
		{
			this.overviews = overviews;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			overviews = is.popList(SectOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(overviews);
		}

		@Override
		public String getPacketName()
		{
			return "sect_query_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			overviews = is.popList(SectOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(overviews);
		}

		public List<SectOverview> overviews;
	}

	// 搜索帮派信息响应协议
	public static class sect_searchbyid_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_searchbyid_res() { }

		public sect_searchbyid_res(SectOverview overview)
		{
			this.overview = overview;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new SectOverview();
			is.pop(overview);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
		}

		@Override
		public String getPacketName()
		{
			return "sect_searchbyid_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			overview = is.pop(SectOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(overview);
		}

		public SectOverview overview;
	}

	// 搜索帮派信息响应协议
	public static class sect_searchbyname_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_searchbyname_res() { }

		public sect_searchbyname_res(SectOverview overview)
		{
			this.overview = overview;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new SectOverview();
			is.pop(overview);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
		}

		@Override
		public String getPacketName()
		{
			return "sect_searchbyname_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			overview = is.pop(SectOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(overview);
		}

		public SectOverview overview;
	}

	// 申请加入帮派响应协议
	public static class sect_apply_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_apply_res() { }

		public sect_apply_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_apply_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 快速申请加入帮派响应协议，返回新申请加入的帮派ID
	public static class sect_qapply_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_qapply_res() { }

		public sect_qapply_res(Set<Integer> sects)
		{
			this.sects = sects;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sects = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(sects);
		}

		@Override
		public String getPacketName()
		{
			return "sect_qapply_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sects = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(sects);
		}

		public Set<Integer> sects;
	}

	// 查询帮派成员响应协议(返回的帮派成员最后上线时间0为当前在线，-1为批准加入后一直未上线，大于0为最后上线时间)
	public static class sect_members_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_members_res() { }

		public sect_members_res(int ok, SectMembers members)
		{
			this.ok = ok;
			this.members = members;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( members == null )
				members = new SectMembers();
			is.pop(members);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(members);
		}

		@Override
		public String getPacketName()
		{
			return "sect_members_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			members = is.pop(SectMembers.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(members);
		}

		public int ok;
		public SectMembers members;
	}

	// 帮派申请列表响应协议
	public static class sect_applications_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_applications_res() { }

		public sect_applications_res(int ok, List<RoleOverview> applications)
		{
			this.ok = ok;
			this.applications = applications;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			applications = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(applications);
		}

		@Override
		public String getPacketName()
		{
			return "sect_applications_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			applications = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(applications);
		}

		public int ok;
		public List<RoleOverview> applications;
	}

	// 帮派历史事件列表响应协议
	public static class sect_history_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_history_res() { }

		public sect_history_res(int ok, List<DBSectHistory> history)
		{
			this.ok = ok;
			this.history = history;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			history = is.popList(DBSectHistory.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(history);
		}

		@Override
		public String getPacketName()
		{
			return "sect_history_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			history = is.popList(DBSectHistory.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(history);
		}

		public int ok;
		public List<DBSectHistory> history;
	}

	// 帮派管理同意或拒绝申请入帮响应协议
	public static class sect_appliedby_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_appliedby_res() { }

		public sect_appliedby_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_appliedby_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派管理同意或拒绝全部申请入帮响应协议
	public static class sect_appliedbyall_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_appliedbyall_res() { }

		public sect_appliedbyall_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_appliedbyall_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派管理踢出协议
	public static class sect_kick_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_kick_res() { }

		public sect_kick_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_kick_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 离开帮派协议
	public static class sect_leave_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_leave_res() { }

		public sect_leave_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_leave_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 解散帮派协议
	public static class sect_disband_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_disband_res() { }

		public sect_disband_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_disband_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派管理任命响应协议
	public static class sect_appoint_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_appoint_res() { }

		public sect_appoint_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_appoint_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派宗旨协议
	public static class sect_changecreed_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_changecreed_res() { }

		public sect_changecreed_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_changecreed_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 修改帮派名字协议
	public static class sect_changename_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_changename_res() { }

		public sect_changename_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_changename_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 修改帮派图标协议
	public static class sect_changeicon_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_changeicon_res() { }

		public sect_changeicon_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_changeicon_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 修改帮派申请加入等级需求协议
	public static class sect_joinlvl_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_joinlvl_res() { }

		public sect_joinlvl_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_joinlvl_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派发送邮件协议
	public static class sect_sendemail_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_sendemail_res() { }

		public sect_sendemail_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_sendemail_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派升级协议
	public static class sect_upgrade_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_upgrade_res() { }

		public sect_upgrade_res(int timestamp)
		{
			this.timestamp = timestamp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			timestamp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(timestamp);
		}

		@Override
		public String getPacketName()
		{
			return "sect_upgrade_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			timestamp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(timestamp);
		}

		public int timestamp;
	}

	// 帮派加速升级冷却协议
	public static class sect_accelerate_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_accelerate_res() { }

		public sect_accelerate_res(int timestamp)
		{
			this.timestamp = timestamp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			timestamp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(timestamp);
		}

		@Override
		public String getPacketName()
		{
			return "sect_accelerate_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			timestamp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(timestamp);
		}

		public int timestamp;
	}

	// 帮派光环捐献道具增加经验点协议
	public static class sect_auraexpadd_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_auraexpadd_res() { }

		public sect_auraexpadd_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_auraexpadd_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派技能查询协议
	public static class sect_aurasync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_aurasync_res() { }

		public sect_aurasync_res(int ok, List<DBSectAura> auras)
		{
			this.ok = ok;
			this.auras = auras;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			auras = is.popList(DBSectAura.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(auras);
		}

		@Override
		public String getPacketName()
		{
			return "sect_aurasync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			auras = is.popList(DBSectAura.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(auras);
		}

		public int ok;
		public List<DBSectAura> auras;
	}

	// 帮派膜拜协议
	public static class sect_worship_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_worship_res() { }

		public sect_worship_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_worship_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派同步膜拜奖励协议
	public static class sect_syncworshipreward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_syncworshipreward_res() { }

		public sect_syncworshipreward_res(int ok, SectWorshipedData data)
		{
			this.ok = ok;
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( data == null )
				data = new SectWorshipedData();
			is.pop(data);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(data);
		}

		@Override
		public String getPacketName()
		{
			return "sect_syncworshipreward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			data = is.pop(SectWorshipedData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(data);
		}

		public int ok;
		public SectWorshipedData data;
	}

	// 帮派领取膜拜奖励协议
	public static class sect_takeworshipreward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_takeworshipreward_res() { }

		public sect_takeworshipreward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_takeworshipreward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派开启宴席协议
	public static class sect_openbanquet_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_openbanquet_res() { }

		public sect_openbanquet_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_openbanquet_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派宴席列表协议
	public static class sect_listbanquet_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_listbanquet_res() { }

		public sect_listbanquet_res(int ok, List<SectBanquet> banquets)
		{
			this.ok = ok;
			this.banquets = banquets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			banquets = is.popList(SectBanquet.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(banquets);
		}

		@Override
		public String getPacketName()
		{
			return "sect_listbanquet_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			banquets = is.popList(SectBanquet.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(banquets);
		}

		public int ok;
		public List<SectBanquet> banquets;
	}

	// 帮派帮派宴席协议
	public static class sect_joinbanquet_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_joinbanquet_res() { }

		public sect_joinbanquet_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_joinbanquet_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派商城同步协议
	public static class sect_shopsync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_shopsync_res() { }

		public sect_shopsync_res(ShopInfo info, int currency)
		{
			this.info = info;
			this.currency = currency;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ShopInfo();
			is.pop(info);
			currency = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
			os.pushInteger(currency);
		}

		@Override
		public String getPacketName()
		{
			return "sect_shopsync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ShopInfo.class);
			currency = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
			os.pushInteger(currency);
		}

		public ShopInfo info;
		public int currency;
	}

	// 帮派商城刷新协议
	public static class sect_shoprefresh_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_shoprefresh_res() { }

		public sect_shoprefresh_res(ShopInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ShopInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "sect_shoprefresh_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ShopInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public ShopInfo info;
	}

	// 帮派商城买商品协议
	public static class sect_shopbuy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_shopbuy_res() { }

		public sect_shopbuy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_shopbuy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知客户端帮派副本开始
	public static class role_sectmap_start implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sectmap_start() { }

		public role_sectmap_start(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "role_sectmap_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 通知客户端帮派副本结束
	public static class role_sectmap_end implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sectmap_end() { }

		public role_sectmap_end(int mapId, int progress)
		{
			this.mapId = mapId;
			this.progress = progress;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			progress = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(progress);
		}

		@Override
		public String getPacketName()
		{
			return "role_sectmap_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			progress = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(progress);
		}

		public int mapId;
		public int progress;
	}

	// 通知客户端帮派副本结束 extraReward 额外奖励帮贡值
	public static class role_sectmap_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sectmap_result() { }

		public role_sectmap_result(int mapId, int progress, int damage, int accDamageRank, 
		                           int maxDamageRank, int extraReward, Map<Integer, Integer> items, int goldReward)
		{
			this.mapId = mapId;
			this.progress = progress;
			this.damage = damage;
			this.accDamageRank = accDamageRank;
			this.maxDamageRank = maxDamageRank;
			this.extraReward = extraReward;
			this.items = items;
			this.goldReward = goldReward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			progress = is.popInteger();
			damage = is.popInteger();
			accDamageRank = is.popInteger();
			maxDamageRank = is.popInteger();
			extraReward = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
			goldReward = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(progress);
			os.pushInteger(damage);
			os.pushInteger(accDamageRank);
			os.pushInteger(maxDamageRank);
			os.pushInteger(extraReward);
			os.pushIntegerIntegerMap(items);
			os.pushInteger(goldReward);
		}

		@Override
		public String getPacketName()
		{
			return "role_sectmap_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			progress = is.popInteger();
			damage = is.popInteger();
			accDamageRank = is.popInteger();
			maxDamageRank = is.popInteger();
			extraReward = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
			goldReward = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(progress);
			os.pushInteger(damage);
			os.pushInteger(accDamageRank);
			os.pushInteger(maxDamageRank);
			os.pushInteger(extraReward);
			os.pushIntegerIntegerMap(items);
			os.pushInteger(goldReward);
		}

		public int mapId;
		public int progress;
		public int damage;
		public int accDamageRank;
		public int maxDamageRank;
		public int extraReward;
		public Map<Integer, Integer> items;
		public int goldReward;
	}

	// 进入帮派副本挑战协议
	public static class sectmap_start_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_start_res() { }

		public sectmap_start_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_start_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派副本完成过的状态协议, map的key是当前所有已经开启过的副本Id，value按照位表示为：第0位为是否通关过，第1位为当前是否正在开启
	public static class sectmap_status_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_status_res() { }

		public sectmap_status_res(int ok, Map<Integer, Integer> finsihed)
		{
			this.ok = ok;
			this.finsihed = finsihed;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			finsihed = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushIntegerIntegerMap(finsihed);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_status_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			finsihed = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushIntegerIntegerMap(finsihed);
		}

		public int ok;
		public Map<Integer, Integer> finsihed;
	}

	// 查询帮派副本进度协议 hp-1为未开启，hp为10000为已完成，hp大于等于0为正在进行中,hp值不超过10000是万分比数值
	public static class sectmap_query_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_query_res() { }

		public sectmap_query_res(int ok, SectMapStatus status)
		{
			this.ok = ok;
			this.status = status;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( status == null )
				status = new SectMapStatus();
			is.pop(status);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(status);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_query_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			status = is.pop(SectMapStatus.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(status);
		}

		public int ok;
		public SectMapStatus status;
	}

	// 帮派开启或重置副本协议
	public static class sectmap_open_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_open_res() { }

		public sectmap_open_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_open_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 所有帮派副本奖励已分配日志记录
	public static class sectmap_rewards_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_rewards_res() { }

		public sectmap_rewards_res(int ok, List<SectMapRewardsLog> logs)
		{
			this.ok = ok;
			this.logs = logs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			logs = is.popList(SectMapRewardsLog.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(logs);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_rewards_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			logs = is.popList(SectMapRewardsLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(logs);
		}

		public int ok;
		public List<SectMapRewardsLog> logs;
	}

	// 当前帮派副本申请奖励协议
	public static class sectmap_apply_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_apply_res() { }

		public sectmap_apply_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_apply_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 当前帮派副本奖励分配信息
	public static class sectmap_allocation_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_allocation_res() { }

		public sectmap_allocation_res(int ok, SectMapAllocation allocation)
		{
			this.ok = ok;
			this.allocation = allocation;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( allocation == null )
				allocation = new SectMapAllocation();
			is.pop(allocation);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(allocation);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_allocation_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			allocation = is.pop(SectMapAllocation.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(allocation);
		}

		public int ok;
		public SectMapAllocation allocation;
	}

	// 当前帮派副本伤害输出信息
	public static class sectmap_damage_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_damage_res() { }

		public sectmap_damage_res(int ok, SectMapDamage damage)
		{
			this.ok = ok;
			this.damage = damage;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( damage == null )
				damage = new SectMapDamage();
			is.pop(damage);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(damage);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_damage_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			damage = is.pop(SectMapDamage.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(damage);
		}

		public int ok;
		public SectMapDamage damage;
	}

	// 帮派副本同步进度协议
	public static class sectmap_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_sync_res() { }

		public sectmap_sync_res(int ok, SectMapInfo info)
		{
			this.ok = ok;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( info == null )
				info = new SectMapInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			info = is.pop(SectMapInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(info);
		}

		public int ok;
		public SectMapInfo info;
	}

	// 帮派个人任务详细信息结果
	public static class sect_task_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_sync_res() { }

		public sect_task_sync_res(SectSelfTaskInfo sectTask)
		{
			this.sectTask = sectTask;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( sectTask == null )
				sectTask = new SectSelfTaskInfo();
			is.pop(sectTask);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(sectTask);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sectTask = is.pop(SectSelfTaskInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(sectTask);
		}

		public SectSelfTaskInfo sectTask;
	}

	// 帮派共享任务详细信息结果分包开始
	public static class sect_share_task_sync_start implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_share_task_sync_start() { }

		public sect_share_task_sync_start(int stCancelTime)
		{
			this.stCancelTime = stCancelTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			stCancelTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(stCancelTime);
		}

		@Override
		public String getPacketName()
		{
			return "sect_share_task_sync_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			stCancelTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(stCancelTime);
		}

		public int stCancelTime;
	}

	// 帮派共享任务详细信息结果分包信息
	public static class sect_share_task_sync_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_share_task_sync_info() { }

		public sect_share_task_sync_info(List<SectSharedTask> tasks)
		{
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tasks = is.popList(SectSharedTask.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(tasks);
		}

		@Override
		public String getPacketName()
		{
			return "sect_share_task_sync_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tasks = is.popList(SectSharedTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(tasks);
		}

		public List<SectSharedTask> tasks;
	}

	// 帮派共享任务详细信息结果分包结束
	public static class sect_share_task_sync_end implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_share_task_sync_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派共享任务详细信息结果
	public static class sect_share_task_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_share_task_sync_res() { }

		public sect_share_task_sync_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_share_task_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派完成的个人任务详细信息结果
	public static class sect_finish_task_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_finish_task_sync_res() { }

		public sect_finish_task_sync_res(SectFinishedTaskRes tasks)
		{
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( tasks == null )
				tasks = new SectFinishedTaskRes();
			is.pop(tasks);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(tasks);
		}

		@Override
		public String getPacketName()
		{
			return "sect_finish_task_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tasks = is.pop(SectFinishedTaskRes.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(tasks);
		}

		public SectFinishedTaskRes tasks;
	}

	// 帮派任务接取结果
	public static class sect_task_receive_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_receive_res() { }

		public sect_task_receive_res(int receiveTime)
		{
			this.receiveTime = receiveTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(receiveTime);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_receive_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(receiveTime);
		}

		public int receiveTime;
	}

	// 帮派任务取消结果
	public static class sect_task_cancel_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_cancel_res() { }

		public sect_task_cancel_res(int ok, int stCancelTime)
		{
			this.ok = ok;
			this.stCancelTime = stCancelTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			stCancelTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushInteger(stCancelTime);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_cancel_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			stCancelTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushInteger(stCancelTime);
		}

		public int ok;
		public int stCancelTime;
	}

	// 帮派任务完成结果
	public static class sect_task_finish_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_finish_res() { }

		public sect_task_finish_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_finish_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派任务共享结果
	public static class sect_task_issuance_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_issuance_res() { }

		public sect_task_issuance_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_issuance_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派任务重置
	public static class sect_task_reset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_reset_res() { }

		public sect_task_reset_res(List<SectTask> tasks)
		{
			this.tasks = tasks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tasks = is.popList(SectTask.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(tasks);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_reset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tasks = is.popList(SectTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(tasks);
		}

		public List<SectTask> tasks;
	}

	// 帮派任务完成奖励
	public static class sect_task_done_rewards_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_done_rewards_res() { }

		public sect_task_done_rewards_res(int ok, SectTaskReward taskRewards)
		{
			this.ok = ok;
			this.taskRewards = taskRewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( taskRewards == null )
				taskRewards = new SectTaskReward();
			is.pop(taskRewards);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(taskRewards);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_done_rewards_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			taskRewards = is.pop(SectTaskReward.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(taskRewards);
		}

		public int ok;
		public SectTaskReward taskRewards;
	}

	// 自创武功信息
	public static class diyskill_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_sync_res() { }

		public diyskill_sync_res(DBShareDiySkillData diySkill)
		{
			this.diySkill = diySkill;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( diySkill == null )
				diySkill = new DBShareDiySkillData();
			is.pop(diySkill);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(diySkill);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			diySkill = is.pop(DBShareDiySkillData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(diySkill);
		}

		public DBShareDiySkillData diySkill;
	}

	// 自创武功完成
	public static class diyskill_create_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_create_res() { }

		public diyskill_create_res(DBDIYSkillData diySkill)
		{
			this.diySkill = diySkill;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( diySkill == null )
				diySkill = new DBDIYSkillData();
			is.pop(diySkill);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(diySkill);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_create_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			diySkill = is.pop(DBDIYSkillData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(diySkill);
		}

		public DBDIYSkillData diySkill;
	}

	// 保存创建的自创武功
	public static class diyskill_save_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_save_res() { }

		public diyskill_save_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_save_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 遗忘
	public static class diyskill_discard_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_discard_res() { }

		public diyskill_discard_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_discard_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 装备自创技能
	public static class diyskill_selectuse_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_selectuse_res() { }

		public diyskill_selectuse_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_selectuse_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 卸下自创技能
	public static class diyskill_canceluse_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_canceluse_res() { }

		public diyskill_canceluse_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_canceluse_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 解锁槽
	public static class diyskill_unlock_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_unlock_res() { }

		public diyskill_unlock_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_unlock_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 购买学习次数
	public static class diyskill_buytimes_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_buytimes_res() { }

		public diyskill_buytimes_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_buytimes_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 自创武功分享
	public static class diyskill_share_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_share_res() { }

		public diyskill_share_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_share_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 自创武功取消分享
	public static class diyskill_cancelshare_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_cancelshare_res() { }

		public diyskill_cancelshare_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_cancelshare_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 自创武功借用
	public static class diyskill_borrow_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_borrow_res() { }

		public diyskill_borrow_res(int ok, DBDiySkill diyskill)
		{
			this.ok = ok;
			this.diyskill = diyskill;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( diyskill == null )
				diyskill = new DBDiySkill();
			is.pop(diyskill);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(diyskill);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_borrow_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			diyskill = is.pop(DBDiySkill.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(diyskill);
		}

		public int ok;
		public DBDiySkill diyskill;
	}

	// 自创武功炫耀
	public static class diyskill_flaunt_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_flaunt_res() { }

		public diyskill_flaunt_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_flaunt_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 自创武功领取共享奖励
	public static class diyskill_shareaward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_shareaward_res() { }

		public diyskill_shareaward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_shareaward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步是否推送帮派申请数量
	public static class sect_push_application_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_push_application_res() { }

		public sect_push_application_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_push_application_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 套装购买
	public static class suite_buy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public suite_buy_res() { }

		public suite_buy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "suite_buy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 买物品
	public static class store_buy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public store_buy_res() { }

		public store_buy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "store_buy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	public static class teleport_npc_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public teleport_npc_res() { }

		public teleport_npc_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "teleport_npc_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	public static class teleport_monster_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public teleport_monster_res() { }

		public teleport_monster_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "teleport_monster_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	public static class teleport_mineral_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public teleport_mineral_res() { }

		public teleport_mineral_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "teleport_mineral_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	public static class arena_attacked implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "arena_attacked";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步竞技场主界面信息
	public static class arena_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_sync_res() { }

		public arena_sync_res(ArenaStateInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ArenaStateInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "arena_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ArenaStateInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public ArenaStateInfo info;
	}

	// 设置方式阵容
	public static class arena_setpets_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_setpets_res() { }

		public arena_setpets_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "arena_setpets_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 排行榜
	public static class arena_ranks_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_ranks_res() { }

		public arena_ranks_res(List<RoleSocial> ranks)
		{
			this.ranks = ranks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ranks = is.popList(RoleSocial.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(ranks);
		}

		@Override
		public String getPacketName()
		{
			return "arena_ranks_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ranks = is.popList(RoleSocial.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(ranks);
		}

		public List<RoleSocial> ranks;
	}

	// 换一换
	public static class arena_refresh_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_refresh_res() { }

		public arena_refresh_res(Map<Integer, BattleEnemyOverview> enemies)
		{
			this.enemies = enemies;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			enemies = is.popIntegerTreeMap(BattleEnemyOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(enemies);
		}

		@Override
		public String getPacketName()
		{
			return "arena_refresh_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			enemies = is.popIntegerTreeMap(BattleEnemyOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(enemies);
		}

		public Map<Integer, BattleEnemyOverview> enemies;
	}

	// 获取竞技场防守阵容
	public static class arena_defencepets_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_defencepets_res() { }

		public arena_defencepets_res(List<PetOverview> pets, byte hideDefence)
		{
			this.pets = pets;
			this.hideDefence = hideDefence;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pets = is.popList(PetOverview.class);
			hideDefence = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(pets);
			os.pushByte(hideDefence);
		}

		@Override
		public String getPacketName()
		{
			return "arena_defencepets_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pets = is.popList(PetOverview.class);
			hideDefence = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(pets);
			os.pushByte(hideDefence);
		}

		public List<PetOverview> pets;
		public byte hideDefence;
	}

	// 重置挑战时间回应
	public static class arena_resetcool_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_resetcool_res() { }

		public arena_resetcool_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "arena_resetcool_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 购买次数回应
	public static class arena_buytimes_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_buytimes_res() { }

		public arena_buytimes_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "arena_buytimes_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 竞技场商城同步协议
	public static class arena_shopsync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_shopsync_res() { }

		public arena_shopsync_res(ShopInfo info, int currency)
		{
			this.info = info;
			this.currency = currency;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ShopInfo();
			is.pop(info);
			currency = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
			os.pushInteger(currency);
		}

		@Override
		public String getPacketName()
		{
			return "arena_shopsync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ShopInfo.class);
			currency = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
			os.pushInteger(currency);
		}

		public ShopInfo info;
		public int currency;
	}

	// 竞技场商城刷新协议
	public static class arena_shoprefresh_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_shoprefresh_res() { }

		public arena_shoprefresh_res(ShopInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ShopInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "arena_shoprefresh_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ShopInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public ShopInfo info;
	}

	// 竞技场商城买商品协议
	public static class arena_shopbuy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_shopbuy_res() { }

		public arena_shopbuy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "arena_shopbuy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知客户端竞技场副本开始
	public static class role_arenamap_start implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_arenamap_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 通知客户端竞技场副本结束
	public static class role_arenamap_end implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_arenamap_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步战斗结果
	public static class role_arena_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_arena_result() { }

		public role_arena_result(int win, int selfRank, int targetRank, RoleOverview defendingSide)
		{
			this.win = win;
			this.selfRank = selfRank;
			this.targetRank = targetRank;
			this.defendingSide = defendingSide;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			win = is.popInteger();
			selfRank = is.popInteger();
			targetRank = is.popInteger();
			if( defendingSide == null )
				defendingSide = new RoleOverview();
			is.pop(defendingSide);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(win);
			os.pushInteger(selfRank);
			os.pushInteger(targetRank);
			os.push(defendingSide);
		}

		@Override
		public String getPacketName()
		{
			return "role_arena_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			win = is.popInteger();
			selfRank = is.popInteger();
			targetRank = is.popInteger();
			defendingSide = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(win);
			os.pushInteger(selfRank);
			os.pushInteger(targetRank);
			os.push(defendingSide);
		}

		public int win;
		public int selfRank;
		public int targetRank;
		public RoleOverview defendingSide;
	}

	// 开始战斗回应
	public static class arena_startattack_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_startattack_res() { }

		public arena_startattack_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "arena_startattack_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 战报回应
	public static class arena_log_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_log_res() { }

		public arena_log_res(List<DBRoleArenaLog> logs)
		{
			this.logs = logs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			logs = is.popList(DBRoleArenaLog.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(logs);
		}

		@Override
		public String getPacketName()
		{
			return "arena_log_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			logs = is.popList(DBRoleArenaLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(logs);
		}

		public List<DBRoleArenaLog> logs;
	}

	// 同步积分奖励回应
	public static class arena_scoresync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_scoresync_res() { }

		public arena_scoresync_res(int score, List<Integer> takenScores)
		{
			this.score = score;
			this.takenScores = takenScores;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			score = is.popInteger();
			takenScores = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(score);
			os.pushIntegerList(takenScores);
		}

		@Override
		public String getPacketName()
		{
			return "arena_scoresync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			score = is.popInteger();
			takenScores = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(score);
			os.pushIntegerList(takenScores);
		}

		public int score;
		public List<Integer> takenScores;
	}

	// 领取竞技场积分奖励回应
	public static class arena_takescore_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_takescore_res() { }

		public arena_takescore_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "arena_takescore_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 防守阵容显隐
	public static class arena_hidedefence_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_hidedefence_res() { }

		public arena_hidedefence_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "arena_hidedefence_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 会武同步信息
	public static class superarena_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_sync_res() { }

		public superarena_sync_res(SuperArenaInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new SuperArenaInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(SuperArenaInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public SuperArenaInfo info;
	}

	// 会武设置出战佣兵
	public static class superarena_setpets_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_setpets_res() { }

		public superarena_setpets_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_setpets_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 单人匹配
	public static class superarena_singlejoin_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_singlejoin_res() { }

		public superarena_singlejoin_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_singlejoin_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 组队匹配
	public static class superarena_teamjoin_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_teamjoin_res() { }

		public superarena_teamjoin_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_teamjoin_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知其他成员开始匹配
	public static class superarena_startmatch implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "superarena_startmatch";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 匹配结果
	public static class superarena_join implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_join() { }

		public superarena_join(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_join";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 取消匹配
	public static class superarena_quit_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_quit_res() { }

		public superarena_quit_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_quit_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 4v4竞技场商城同步协议
	public static class superarena_shopsync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_shopsync_res() { }

		public superarena_shopsync_res(ShopInfo info, int currency)
		{
			this.info = info;
			this.currency = currency;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ShopInfo();
			is.pop(info);
			currency = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
			os.pushInteger(currency);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_shopsync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ShopInfo.class);
			currency = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
			os.pushInteger(currency);
		}

		public ShopInfo info;
		public int currency;
	}

	// 4v4竞技场商城刷新协议
	public static class superarena_shoprefresh_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_shoprefresh_res() { }

		public superarena_shoprefresh_res(ShopInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ShopInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_shoprefresh_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ShopInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public ShopInfo info;
	}

	// 4v4竞技场商城买商品协议
	public static class superarena_shopbuy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_shopbuy_res() { }

		public superarena_shopbuy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_shopbuy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知客户端4v4竞技场副本开始
	public static class role_superarenamap_start implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_superarenamap_start() { }

		public role_superarenamap_start(int arenaType)
		{
			this.arenaType = arenaType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			arenaType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(arenaType);
		}

		@Override
		public String getPacketName()
		{
			return "role_superarenamap_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			arenaType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(arenaType);
		}

		public int arenaType;
	}

	// 通知客户端4v4竞技场副本结束
	public static class role_superarenamap_end implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_superarenamap_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步战斗结果
	public static class role_superarena_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_superarena_result() { }

		public role_superarena_result(int win, SuperArenaBattleResult result)
		{
			this.win = win;
			this.result = result;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			win = is.popInteger();
			if( result == null )
				result = new SuperArenaBattleResult();
			is.pop(result);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(win);
			os.push(result);
		}

		@Override
		public String getPacketName()
		{
			return "role_superarena_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			win = is.popInteger();
			result = is.pop(SuperArenaBattleResult.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(win);
			os.push(result);
		}

		public int win;
		public SuperArenaBattleResult result;
	}

	// 组队创建竞技场房间
	public static class aroom_create_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_create_res() { }

		public aroom_create_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_create_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 房主邀请新人加入副本房间协议
	public static class aroom_invite_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_invite_res() { }

		public aroom_invite_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_invite_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 转发其他玩家进入房间的邀请
	public static class aroom_invite_forward implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_invite_forward() { }

		public aroom_invite_forward(int roleID, String roleName, int roomType, int roomID)
		{
			this.roleID = roleID;
			this.roleName = roleName;
			this.roomType = roomType;
			this.roomID = roomID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
			roomType = is.popInteger();
			roomID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(roomType);
			os.pushInteger(roomID);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_invite_forward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
			roomType = is.popInteger();
			roomID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(roomType);
			os.pushInteger(roomID);
		}

		public int roleID;
		public String roleName;
		public int roomType;
		public int roomID;
	}

	// 接收到其他玩家邀请入房间后玩家选择是否同意操作
	public static class aroom_invitedby_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_invitedby_res() { }

		public aroom_invitedby_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_invitedby_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 离开房间的响应(返回离开房间是否成功)
	public static class aroom_leave_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_leave_res() { }

		public aroom_leave_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_leave_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知邀请者前面的邀请被拒绝
	public static class aroom_invite_refuse implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_invite_refuse() { }

		public aroom_invite_refuse(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_invite_refuse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知邀请者被邀请的人正忙
	public static class aroom_invite_busy implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_invite_busy() { }

		public aroom_invite_busy(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_invite_busy";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 踢出房间成员请求协议
	public static class aroom_kick_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_kick_res() { }

		public aroom_kick_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_kick_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 会武房间更换房主响应(返回换房主是否成功)
	public static class aroom_change_leader_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_change_leader_res() { }

		public aroom_change_leader_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_change_leader_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 本房间信息查询响应协议
	public static class aroom_self_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_self_res() { }

		public aroom_self_res(List<RoleOverview> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_self_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roles);
		}

		public List<RoleOverview> roles;
	}

	// 房间附近的人响应协议
	public static class aroom_mapr_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_mapr_res() { }

		public aroom_mapr_res(List<RoleOverview> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_mapr_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roles);
		}

		public List<RoleOverview> roles;
	}

	// 通知新成员加入房间同步当前房间信息
	public static class aroom_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_sync() { }

		public aroom_sync(ARoom room)
		{
			this.room = room;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( room == null )
				room = new ARoom();
			is.pop(room);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(room);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			room = is.pop(ARoom.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(room);
		}

		public ARoom room;
	}

	// 通知其他成员员新成员加入房间
	public static class aroom_join implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_join() { }

		public aroom_join(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_join";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知其他成员有成员离开房间
	public static class aroom_leave implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_leave() { }

		public aroom_leave(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_leave";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知其他成员有成员被踢出房间
	public static class aroom_kick implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_kick() { }

		public aroom_kick(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_kick";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知成员换房主
	public static class aroom_change_leader implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_change_leader() { }

		public aroom_change_leader(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_change_leader";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知客户端队伍成员信息的变化后的更新值或客户端主动查询值
	public static class aroom_member_overview implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_member_overview() { }

		public aroom_member_overview(RoleOverview overview, int state)
		{
			this.overview = overview;
			this.state = state;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
			state = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
			os.pushInteger(state);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_member_overview";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			overview = is.pop(RoleOverview.class);
			state = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(overview);
			os.pushInteger(state);
		}

		public RoleOverview overview;
		public int state;
	}

	// 通知客户端房间成员的连接状态变化,state大于1是连接状态，为0是断线
	public static class aroom_member_connection implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_member_connection() { }

		public aroom_member_connection(int roleId, int state)
		{
			this.roleId = roleId;
			this.state = state;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(state);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_member_connection";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(state);
		}

		public int roleId;
		public int state;
	}

	// 会武周排行榜
	public static class superarena_weekrank_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_weekrank_res() { }

		public superarena_weekrank_res(List<RoleOverview> ranks)
		{
			this.ranks = ranks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ranks = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(ranks);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_weekrank_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ranks = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(ranks);
		}

		public List<RoleOverview> ranks;
	}

	// 会武日排行榜(type 1: 普通4v4)
	public static class superarena_dayrank_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_dayrank_res() { }

		public superarena_dayrank_res(List<RoleOverview> ranks)
		{
			this.ranks = ranks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ranks = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(ranks);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_dayrank_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ranks = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(ranks);
		}

		public List<RoleOverview> ranks;
	}

	// 正邪道场同步信息
	public static class bwarena_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_sync_res() { }

		public bwarena_sync_res(BWArenaInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new BWArenaInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(BWArenaInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public BWArenaInfo info;
	}

	// 正邪道场设置参战随从
	public static class bwarena_setpet_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_setpet_res() { }

		public bwarena_setpet_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_setpet_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 正邪道场刷新对手
	public static class bwarena_refresh_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_refresh_res() { }

		public bwarena_refresh_res(List<BWArenaArrayOverview> enemies)
		{
			this.enemies = enemies;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			enemies = is.popList(BWArenaArrayOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(enemies);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_refresh_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			enemies = is.popList(BWArenaArrayOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(enemies);
		}

		public List<BWArenaArrayOverview> enemies;
	}

	// 正邪道场购买次数
	public static class bwarena_buytimes_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_buytimes_res() { }

		public bwarena_buytimes_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_buytimes_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 正邪道场开始战斗
	public static class bwarena_startattack_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_startattack_res() { }

		public bwarena_startattack_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_startattack_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 正邪道场领取积分奖励
	public static class bwarena_takescore_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_takescore_res() { }

		public bwarena_takescore_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_takescore_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 正邪道场战报
	public static class bwarena_log_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_log_res() { }

		public bwarena_log_res(List<DBRoleArenaLog> logs)
		{
			this.logs = logs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			logs = is.popList(DBRoleArenaLog.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(logs);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_log_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			logs = is.popList(DBRoleArenaLog.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(logs);
		}

		public List<DBRoleArenaLog> logs;
	}

	// 正邪道场排行榜
	public static class bwarena_ranks_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_ranks_res() { }

		public bwarena_ranks_res(List<BWArenaRankRole> ranks)
		{
			this.ranks = ranks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ranks = is.popList(BWArenaRankRole.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(ranks);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_ranks_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ranks = is.popList(BWArenaRankRole.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(ranks);
		}

		public List<BWArenaRankRole> ranks;
	}

	// 通知客户端正邪道场副本开始
	public static class role_bwarenamap_start implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_bwarenamap_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 通知客户端正邪道场副本结束
	public static class role_bwarenamap_end implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_bwarenamap_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步正邪道场战斗结果
	public static class role_bwarena_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_bwarena_result() { }

		public role_bwarena_result(int addScore, int addExp)
		{
			this.addScore = addScore;
			this.addExp = addExp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			addScore = is.popInteger();
			addExp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(addScore);
			os.pushInteger(addExp);
		}

		@Override
		public String getPacketName()
		{
			return "role_bwarena_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			addScore = is.popInteger();
			addExp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(addScore);
			os.pushInteger(addExp);
		}

		public int addScore;
		public int addExp;
	}

	// 势力战界面同步信息
	public static class forcewar_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public forcewar_sync_res() { }

		public forcewar_sync_res(ForceWarLog log, int punishEndTime)
		{
			this.log = log;
			this.punishEndTime = punishEndTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( log == null )
				log = new ForceWarLog();
			is.pop(log);
			punishEndTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(log);
			os.pushInteger(punishEndTime);
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			log = is.pop(ForceWarLog.class);
			punishEndTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(log);
			os.pushInteger(punishEndTime);
		}

		public ForceWarLog log;
		public int punishEndTime;
	}

	// 势力战报名协议
	public static class forcewar_join_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public forcewar_join_res() { }

		public forcewar_join_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_join_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 势力战取消报名协议
	public static class forcewar_quit_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public forcewar_quit_res() { }

		public forcewar_quit_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_quit_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 势力战开始匹配
	public static class forcewar_startmatch implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_startmatch";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 势力战匹配结果
	public static class forcewar_match implements Stream.IStreamable, SStream.IStrPacket
	{

		public forcewar_match() { }

		public forcewar_match(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_match";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 势力战其他成员取消匹配
	public static class forcewar_other_quit implements Stream.IStreamable, SStream.IStrPacket
	{

		public forcewar_other_quit() { }

		public forcewar_other_quit(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_other_quit";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知客户端势力战开始
	public static class role_forcewarmap_start implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_forcewarmap_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 通知客户端势力战结束
	public static class role_forcewarmap_end implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_forcewarmap_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	public static class role_forcewar_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_forcewar_result() { }

		public role_forcewar_result(int gainFeat, int curWeekFeat, int winSide, int killedBoss, 
		                            int whiteScore, int blackScore, List<ForceWarOverview> whiteSide, List<ForceWarOverview> blackSide, 
		                            int rewardMapTimes)
		{
			this.gainFeat = gainFeat;
			this.curWeekFeat = curWeekFeat;
			this.winSide = winSide;
			this.killedBoss = killedBoss;
			this.whiteScore = whiteScore;
			this.blackScore = blackScore;
			this.whiteSide = whiteSide;
			this.blackSide = blackSide;
			this.rewardMapTimes = rewardMapTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gainFeat = is.popInteger();
			curWeekFeat = is.popInteger();
			winSide = is.popInteger();
			killedBoss = is.popInteger();
			whiteScore = is.popInteger();
			blackScore = is.popInteger();
			whiteSide = is.popList(ForceWarOverview.class);
			blackSide = is.popList(ForceWarOverview.class);
			rewardMapTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(gainFeat);
			os.pushInteger(curWeekFeat);
			os.pushInteger(winSide);
			os.pushInteger(killedBoss);
			os.pushInteger(whiteScore);
			os.pushInteger(blackScore);
			os.pushList(whiteSide);
			os.pushList(blackSide);
			os.pushInteger(rewardMapTimes);
		}

		@Override
		public String getPacketName()
		{
			return "role_forcewar_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			gainFeat = is.popInteger();
			curWeekFeat = is.popInteger();
			winSide = is.popInteger();
			killedBoss = is.popInteger();
			whiteScore = is.popInteger();
			blackScore = is.popInteger();
			whiteSide = is.popList(ForceWarOverview.class);
			blackSide = is.popList(ForceWarOverview.class);
			rewardMapTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(gainFeat);
			os.pushInteger(curWeekFeat);
			os.pushInteger(winSide);
			os.pushInteger(killedBoss);
			os.pushInteger(whiteScore);
			os.pushInteger(blackScore);
			os.pushList(whiteSide);
			os.pushList(blackSide);
			os.pushInteger(rewardMapTimes);
		}

		public int gainFeat;
		public int curWeekFeat;
		public int winSide;
		public int killedBoss;
		public int whiteScore;
		public int blackScore;
		public List<ForceWarOverview> whiteSide;
		public List<ForceWarOverview> blackSide;
		public int rewardMapTimes;
	}

	// 创建势力战房间
	public static class froom_create_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_create_res() { }

		public froom_create_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "froom_create_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 邀请新人加入势力战房间协议
	public static class froom_invite_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_invite_res() { }

		public froom_invite_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "froom_invite_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 转发其他玩家进入房间的邀请
	public static class froom_invite_forward implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_invite_forward() { }

		public froom_invite_forward(int roleID, String roleName, int roomID, int type)
		{
			this.roleID = roleID;
			this.roleName = roleName;
			this.roomID = roomID;
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
			roomID = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(roomID);
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "froom_invite_forward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
			roomID = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(roomID);
			os.pushInteger(type);
		}

		public int roleID;
		public String roleName;
		public int roomID;
		public int type;
	}

	// 接收到其他玩家邀请入房间后玩家选择是否同意操作
	public static class froom_invitedby_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_invitedby_res() { }

		public froom_invitedby_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "froom_invitedby_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 离开房间的响应(返回离开房间是否成功)
	public static class froom_leave_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_leave_res() { }

		public froom_leave_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "froom_leave_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知邀请者前面的邀请被拒绝
	public static class froom_invite_refuse implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_invite_refuse() { }

		public froom_invite_refuse(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "froom_invite_refuse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知邀请者被邀请的人正忙
	public static class froom_invite_busy implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_invite_busy() { }

		public froom_invite_busy(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "froom_invite_busy";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 踢出房间成员请求协议
	public static class froom_kick_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_kick_res() { }

		public froom_kick_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "froom_kick_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 房间更换房主响应
	public static class froom_change_leader_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_change_leader_res() { }

		public froom_change_leader_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "froom_change_leader_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同一地图地图附近没房间且符合条件的人
	public static class froom_mapr_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_mapr_res() { }

		public froom_mapr_res(List<RoleOverview> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "froom_mapr_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roles);
		}

		public List<RoleOverview> roles;
	}

	// 通知新成员加入房间同步房间信息
	public static class froom_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_sync() { }

		public froom_sync(FRoom room)
		{
			this.room = room;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( room == null )
				room = new FRoom();
			is.pop(room);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(room);
		}

		@Override
		public String getPacketName()
		{
			return "froom_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			room = is.pop(FRoom.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(room);
		}

		public FRoom room;
	}

	// 通知其他成员员新成员加入房间
	public static class froom_join implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_join() { }

		public froom_join(RoleOverview member)
		{
			this.member = member;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( member == null )
				member = new RoleOverview();
			is.pop(member);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(member);
		}

		@Override
		public String getPacketName()
		{
			return "froom_join";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			member = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(member);
		}

		public RoleOverview member;
	}

	// 通知其他成员有成员离开房间
	public static class froom_leave implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_leave() { }

		public froom_leave(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "froom_leave";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知其他成员有成员被踢出房间
	public static class froom_kick implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_kick() { }

		public froom_kick(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "froom_kick";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知成员换房主
	public static class froom_change_leader implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_change_leader() { }

		public froom_change_leader(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "froom_change_leader";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 查询势力战房间成员信息(froom_query_member的异步回应)
	public static class froom_member_overview implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_member_overview() { }

		public froom_member_overview(RoleOverview member, int state)
		{
			this.member = member;
			this.state = state;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( member == null )
				member = new RoleOverview();
			is.pop(member);
			state = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(member);
			os.pushInteger(state);
		}

		@Override
		public String getPacketName()
		{
			return "froom_member_overview";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			member = is.pop(RoleOverview.class);
			state = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(member);
			os.pushInteger(state);
		}

		public RoleOverview member;
		public int state;
	}

	// 查询势力战房间所有成员信息(froom_query_members的异步回应)
	public static class froom_members_overview implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_members_overview() { }

		public froom_members_overview(List<RoleOverview> members, Map<Integer, Integer> states)
		{
			this.members = members;
			this.states = states;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			members = is.popList(RoleOverview.class);
			states = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(members);
			os.pushIntegerIntegerMap(states);
		}

		@Override
		public String getPacketName()
		{
			return "froom_members_overview";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			members = is.popList(RoleOverview.class);
			states = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(members);
			os.pushIntegerIntegerMap(states);
		}

		public List<RoleOverview> members;
		public Map<Integer, Integer> states;
	}

	// 通知客户端房间成员的连接状态变化,state大于1是连接状态，为0是断线
	public static class froom_member_connection implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_member_connection() { }

		public froom_member_connection(int roleID, int state)
		{
			this.roleID = roleID;
			this.state = state;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(state);
		}

		@Override
		public String getPacketName()
		{
			return "froom_member_connection";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(state);
		}

		public int roleID;
		public int state;
	}

	// boss信息同步回应
	public static class bosses_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bosses_sync_res() { }

		public bosses_sync_res(int nextTransTime, Map<Integer, BossState> bosses)
		{
			this.nextTransTime = nextTransTime;
			this.bosses = bosses;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			nextTransTime = is.popInteger();
			bosses = is.popIntegerTreeMap(BossState.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(nextTransTime);
			os.pushIntegerMap(bosses);
		}

		@Override
		public String getPacketName()
		{
			return "bosses_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			nextTransTime = is.popInteger();
			bosses = is.popIntegerTreeMap(BossState.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(nextTransTime);
			os.pushIntegerMap(bosses);
		}

		public int nextTransTime;
		public Map<Integer, BossState> bosses;
	}

	public static class walktoboss_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public walktoboss_res() { }

		public walktoboss_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "walktoboss_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 直接传送到boss位置回应
	public static class transtoboss_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public transtoboss_res() { }

		public transtoboss_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "transtoboss_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 重置传送冷却时间
	public static class reset_transtime_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public reset_transtime_res() { }

		public reset_transtime_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "reset_transtime_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// boss奖励分配记录请求
	public static class boss_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public boss_reward_res() { }

		public boss_reward_res(BossRecord records)
		{
			this.records = records;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( records == null )
				records = new BossRecord();
			is.pop(records);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(records);
		}

		@Override
		public String getPacketName()
		{
			return "boss_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			records = is.pop(BossRecord.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(records);
		}

		public BossRecord records;
	}

	// 好友界面信息同步回应
	public static class friend_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_sync_res() { }

		public friend_sync_res(Map<Integer, FriendInfo> friends, int dayVitTakeTimes, int vitLvl, int vitExp, 
		                       String personalMsg, int charm)
		{
			this.friends = friends;
			this.dayVitTakeTimes = dayVitTakeTimes;
			this.vitLvl = vitLvl;
			this.vitExp = vitExp;
			this.personalMsg = personalMsg;
			this.charm = charm;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			friends = is.popIntegerTreeMap(FriendInfo.class);
			dayVitTakeTimes = is.popInteger();
			vitLvl = is.popInteger();
			vitExp = is.popInteger();
			personalMsg = is.popString();
			charm = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(friends);
			os.pushInteger(dayVitTakeTimes);
			os.pushInteger(vitLvl);
			os.pushInteger(vitExp);
			os.pushString(personalMsg);
			os.pushInteger(charm);
		}

		@Override
		public String getPacketName()
		{
			return "friend_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			friends = is.popIntegerTreeMap(FriendInfo.class);
			dayVitTakeTimes = is.popInteger();
			vitLvl = is.popInteger();
			vitExp = is.popInteger();
			personalMsg = is.popString();
			charm = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(friends);
			os.pushInteger(dayVitTakeTimes);
			os.pushInteger(vitLvl);
			os.pushInteger(vitExp);
			os.pushString(personalMsg);
			os.pushInteger(charm);
		}

		public Map<Integer, FriendInfo> friends;
		public int dayVitTakeTimes;
		public int vitLvl;
		public int vitExp;
		public String personalMsg;
		public int charm;
	}

	// 获取最新加我为好友的列表
	public static class friend_pluslist_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_pluslist_res() { }

		public friend_pluslist_res(List<RoleOverview> nears)
		{
			this.nears = nears;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			nears = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(nears);
		}

		@Override
		public String getPacketName()
		{
			return "friend_pluslist_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			nears = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(nears);
		}

		public List<RoleOverview> nears;
	}

	// 获取系统推荐的列表
	public static class friend_recommend_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_recommend_res() { }

		public friend_recommend_res(List<RoleOverview> recommends)
		{
			this.recommends = recommends;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			recommends = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(recommends);
		}

		@Override
		public String getPacketName()
		{
			return "friend_recommend_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			recommends = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(recommends);
		}

		public List<RoleOverview> recommends;
	}

	// 添加好友回应
	public static class friend_add_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_add_res() { }

		public friend_add_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "friend_add_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 好友搜索
	public static class friend_search_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_search_res() { }

		public friend_search_res(RoleOverview overview)
		{
			this.overview = overview;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( overview == null )
				overview = new RoleOverview();
			is.pop(overview);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(overview);
		}

		@Override
		public String getPacketName()
		{
			return "friend_search_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			overview = is.pop(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(overview);
		}

		public RoleOverview overview;
	}

	// 删除好友回应
	public static class friend_delete_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_delete_res() { }

		public friend_delete_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "friend_delete_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 好友送体力
	public static class friend_givevit_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_givevit_res() { }

		public friend_givevit_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "friend_givevit_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 好友一键送体力
	public static class friend_giveallvits_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_giveallvits_res() { }

		public friend_giveallvits_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "friend_giveallvits_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 一键好友接受体力
	public static class friend_receivevit_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_receivevit_res() { }

		public friend_receivevit_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "friend_receivevit_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同意添加好友
	public static class friend_agreeadd_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_agreeadd_res() { }

		public friend_agreeadd_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "friend_agreeadd_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知被加为好友的人
	public static class friend_add_push implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_add_push() { }

		public friend_add_push(int friendId, String friendName)
		{
			this.friendId = friendId;
			this.friendName = friendName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			friendId = is.popInteger();
			friendName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(friendId);
			os.pushString(friendName);
		}

		@Override
		public String getPacketName()
		{
			return "friend_add_push";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			friendId = is.popInteger();
			friendName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(friendId);
			os.pushString(friendName);
		}

		public int friendId;
		public String friendName;
	}

	// 玩家更新心情
	public static class friend_changemsg_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_changemsg_res() { }

		public friend_changemsg_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "friend_changemsg_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 玩家更改头像
	public static class friend_changehead_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_changehead_res() { }

		public friend_changehead_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "friend_changehead_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 获取好友宿敌
	public static class friend_enemy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_enemy_res() { }

		public friend_enemy_res(List<EnemyOverview> enemys)
		{
			this.enemys = enemys;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			enemys = is.popList(EnemyOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(enemys);
		}

		@Override
		public String getPacketName()
		{
			return "friend_enemy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			enemys = is.popList(EnemyOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(enemys);
		}

		public List<EnemyOverview> enemys;
	}

	// 删除好友宿敌
	public static class friend_removeenemy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_removeenemy_res() { }

		public friend_removeenemy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "friend_removeenemy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 设置好友关注度
	public static class friend_setfocus_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_setfocus_res() { }

		public friend_setfocus_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "friend_setfocus_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 送花
	public static class give_flower_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public give_flower_res() { }

		public give_flower_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "give_flower_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 获取赠送记录
	public static class get_flowerlog_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public get_flowerlog_res() { }

		public get_flowerlog_res(List<FlowerOverview> giveFlower, List<FlowerOverview> acceptFlower)
		{
			this.giveFlower = giveFlower;
			this.acceptFlower = acceptFlower;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			giveFlower = is.popList(FlowerOverview.class);
			acceptFlower = is.popList(FlowerOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(giveFlower);
			os.pushList(acceptFlower);
		}

		@Override
		public String getPacketName()
		{
			return "get_flowerlog_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			giveFlower = is.popList(FlowerOverview.class);
			acceptFlower = is.popList(FlowerOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(giveFlower);
			os.pushList(acceptFlower);
		}

		public List<FlowerOverview> giveFlower;
		public List<FlowerOverview> acceptFlower;
	}

	// 获取接收列表
	public static class get_acceptlist_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public get_acceptlist_res() { }

		public get_acceptlist_res(List<FlowerOverview> result)
		{
			this.result = result;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			result = is.popList(FlowerOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(result);
		}

		@Override
		public String getPacketName()
		{
			return "get_acceptlist_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			result = is.popList(FlowerOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(result);
		}

		public List<FlowerOverview> result;
	}

	// 拍卖行信息同步回应
	public static class auction_syncitems_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_syncitems_res() { }

		public auction_syncitems_res(List<DetailConsignItems> items, int lastPage)
		{
			this.items = items;
			this.lastPage = lastPage;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			items = is.popList(DetailConsignItems.class);
			lastPage = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(items);
			os.pushInteger(lastPage);
		}

		@Override
		public String getPacketName()
		{
			return "auction_syncitems_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			items = is.popList(DetailConsignItems.class);
			lastPage = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(items);
			os.pushInteger(lastPage);
		}

		public List<DetailConsignItems> items;
		public int lastPage;
	}

	// 同步自己寄售物品回应
	public static class auction_syncselfitems_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_syncselfitems_res() { }

		public auction_syncselfitems_res(Map<Integer, DBConsignItems> items, int cellSize, int expandTimes)
		{
			this.items = items;
			this.cellSize = cellSize;
			this.expandTimes = expandTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			items = is.popIntegerTreeMap(DBConsignItems.class);
			cellSize = is.popInteger();
			expandTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(items);
			os.pushInteger(cellSize);
			os.pushInteger(expandTimes);
		}

		@Override
		public String getPacketName()
		{
			return "auction_syncselfitems_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			items = is.popIntegerTreeMap(DBConsignItems.class);
			cellSize = is.popInteger();
			expandTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(items);
			os.pushInteger(cellSize);
			os.pushInteger(expandTimes);
		}

		public Map<Integer, DBConsignItems> items;
		public int cellSize;
		public int expandTimes;
	}

	// 上架道具物品回应
	public static class auction_putonitems_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_putonitems_res() { }

		public auction_putonitems_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "auction_putonitems_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 上架装备回应
	public static class auction_putonequip_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_putonequip_res() { }

		public auction_putonequip_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "auction_putonequip_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 物品下架回应
	public static class auction_putoffitems_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_putoffitems_res() { }

		public auction_putoffitems_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "auction_putoffitems_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 购买物品回应
	public static class auction_buyitems_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_buyitems_res() { }

		public auction_buyitems_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "auction_buyitems_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 拍卖行摊位扩展
	public static class auction_expand_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_expand_res() { }

		public auction_expand_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "auction_expand_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 交易记录
	public static class auction_tradelog_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_tradelog_res() { }

		public auction_tradelog_res(List<DBConsignItems> logs)
		{
			this.logs = logs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			logs = is.popList(DBConsignItems.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(logs);
		}

		@Override
		public String getPacketName()
		{
			return "auction_tradelog_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			logs = is.popList(DBConsignItems.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(logs);
		}

		public List<DBConsignItems> logs;
	}

	// 获取道具价格列表
	public static class auction_itemprices_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_itemprices_res() { }

		public auction_itemprices_res(List<DBConsignItems> items)
		{
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			items = is.popList(DBConsignItems.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(items);
		}

		@Override
		public String getPacketName()
		{
			return "auction_itemprices_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			items = is.popList(DBConsignItems.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(items);
		}

		public List<DBConsignItems> items;
	}

	// 同步江湖客栈界面信息
	public static class treasure_syncnpcs_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_syncnpcs_res() { }

		public treasure_syncnpcs_res(TreasureNPC npcInfo, Map<Integer, Integer> pieces)
		{
			this.npcInfo = npcInfo;
			this.pieces = pieces;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( npcInfo == null )
				npcInfo = new TreasureNPC();
			is.pop(npcInfo);
			pieces = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(npcInfo);
			os.pushIntegerIntegerMap(pieces);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_syncnpcs_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcInfo = is.pop(TreasureNPC.class);
			pieces = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(npcInfo);
			os.pushIntegerIntegerMap(pieces);
		}

		public TreasureNPC npcInfo;
		public Map<Integer, Integer> pieces;
	}

	// 刷新某一个NPC信息
	public static class treasure_refreshnpc_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_refreshnpc_res() { }

		public treasure_refreshnpc_res(NPCState info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new NPCState();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_refreshnpc_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(NPCState.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public NPCState info;
	}

	// 购买藏宝图碎片
	public static class treasure_buypieces_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_buypieces_res() { }

		public treasure_buypieces_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_buypieces_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 领取NPC礼包
	public static class treasure_npcreward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_npcreward_res() { }

		public treasure_npcreward_res(int ok, Map<Integer, Integer> rewards)
		{
			this.ok = ok;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			rewards = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushIntegerIntegerMap(rewards);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_npcreward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			rewards = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushIntegerIntegerMap(rewards);
		}

		public int ok;
		public Map<Integer, Integer> rewards;
	}

	// 同步藏宝图界面信息
	public static class treasure_syncmap_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_syncmap_res() { }

		public treasure_syncmap_res(TreasureMap mapInfo)
		{
			this.mapInfo = mapInfo;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( mapInfo == null )
				mapInfo = new TreasureMap();
			is.pop(mapInfo);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(mapInfo);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_syncmap_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapInfo = is.pop(TreasureMap.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(mapInfo);
		}

		public TreasureMap mapInfo;
	}

	// 合成地图
	public static class treasure_makemap_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_makemap_res() { }

		public treasure_makemap_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_makemap_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 总体探索
	public static class treasure_totalsearch_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_totalsearch_res() { }

		public treasure_totalsearch_res(MapState curMap)
		{
			this.curMap = curMap;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( curMap == null )
				curMap = new MapState();
			is.pop(curMap);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(curMap);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_totalsearch_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curMap = is.pop(MapState.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(curMap);
		}

		public MapState curMap;
	}

	// 探索情报点
	public static class treasure_search_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_search_res() { }

		public treasure_search_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_search_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 领取藏宝图奖励
	public static class treasure_mapreward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_mapreward_res() { }

		public treasure_mapreward_res(int ok, Map<Integer, Integer> rewards)
		{
			this.ok = ok;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			rewards = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushIntegerIntegerMap(rewards);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_mapreward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			rewards = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushIntegerIntegerMap(rewards);
		}

		public int ok;
		public Map<Integer, Integer> rewards;
	}

	// 放弃藏宝图
	public static class treasure_quitmap_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_quitmap_res() { }

		public treasure_quitmap_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_quitmap_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 藏品装裱
	public static class treasure_medalgrow_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_medalgrow_res() { }

		public treasure_medalgrow_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_medalgrow_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 驯服坐骑
	public static class horse_tame_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_tame_res() { }

		public horse_tame_res(HorseInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new HorseInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "horse_tame_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(HorseInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public HorseInfo info;
	}

	// 坐骑出征
	public static class horse_use_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_use_res() { }

		public horse_use_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_use_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 坐骑升星
	public static class horse_upstar_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_upstar_res() { }

		public horse_upstar_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_upstar_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 坐骑洗练
	public static class horse_enhance_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_enhance_res() { }

		public horse_enhance_res(List<Prop> attrs)
		{
			this.attrs = attrs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			attrs = is.popList(Prop.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(attrs);
		}

		@Override
		public String getPacketName()
		{
			return "horse_enhance_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			attrs = is.popList(Prop.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(attrs);
		}

		public List<Prop> attrs;
	}

	// 坐骑洗练替换属性
	public static class horse_enhancesave_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_enhancesave_res() { }

		public horse_enhancesave_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_enhancesave_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 更换幻化外形
	public static class horse_changeshow_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_changeshow_res() { }

		public horse_changeshow_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_changeshow_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 激活幻化外形
	public static class horse_activateshow_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_activateshow_res() { }

		public horse_activateshow_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_activateshow_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 激活骑术
	public static class horse_learnskill_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_learnskill_res() { }

		public horse_learnskill_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_learnskill_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步骑术等级
	public static class sync_horse_skillLevel_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_horse_skillLevel_res() { }

		public sync_horse_skillLevel_res(Map<Integer, Integer> data)
		{
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			data = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(data);
		}

		@Override
		public String getPacketName()
		{
			return "sync_horse_skillLevel_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			data = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(data);
		}

		public Map<Integer, Integer> data;
	}

	// 升级骑术等级
	public static class horse_skill_up_level_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_skill_up_level_res() { }

		public horse_skill_up_level_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_skill_up_level_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 设置骑术
	public static class horse_setskill_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_setskill_res() { }

		public horse_setskill_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_setskill_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 穿戴时装
	public static class fashion_upwear_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public fashion_upwear_res() { }

		public fashion_upwear_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "fashion_upwear_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 显示/隐藏
	public static class fashion_setshow_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public fashion_setshow_res() { }

		public fashion_setshow_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "fashion_setshow_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 装备的时装（登录时同步）
	public static class role_curfashions implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_curfashions() { }

		public role_curfashions(Set<Integer> allFashions, Map<Integer, Integer> curFashions, Map<Integer, Integer> showFashionTypes)
		{
			this.allFashions = allFashions;
			this.curFashions = curFashions;
			this.showFashionTypes = showFashionTypes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			allFashions = is.popIntegerTreeSet();
			curFashions = is.popIntegerIntegerTreeMap();
			showFashionTypes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(allFashions);
			os.pushIntegerIntegerMap(curFashions);
			os.pushIntegerIntegerMap(showFashionTypes);
		}

		@Override
		public String getPacketName()
		{
			return "role_curfashions";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			allFashions = is.popIntegerTreeSet();
			curFashions = is.popIntegerIntegerTreeMap();
			showFashionTypes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(allFashions);
			os.pushIntegerIntegerMap(curFashions);
			os.pushIntegerIntegerMap(showFashionTypes);
		}

		public Set<Integer> allFashions;
		public Map<Integer, Integer> curFashions;
		public Map<Integer, Integer> showFashionTypes;
	}

	// 龙印合成
	public static class seal_make_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public seal_make_res() { }

		public seal_make_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "seal_make_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 龙印升阶
	public static class seal_upgrade_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public seal_upgrade_res() { }

		public seal_upgrade_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "seal_upgrade_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 龙印洗练
	public static class seal_enhance_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public seal_enhance_res() { }

		public seal_enhance_res(Map<Integer, Integer> skills)
		{
			this.skills = skills;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skills = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(skills);
		}

		@Override
		public String getPacketName()
		{
			return "seal_enhance_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skills = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(skills);
		}

		public Map<Integer, Integer> skills;
	}

	// 龙印储存
	public static class seal_save_enhance_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public seal_save_enhance_res() { }

		public seal_save_enhance_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "seal_save_enhance_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步历练页签信息
	public static class expcoin_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public expcoin_sync_res() { }

		public expcoin_sync_res(int dayTakeTimes)
		{
			this.dayTakeTimes = dayTakeTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayTakeTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayTakeTimes);
		}

		@Override
		public String getPacketName()
		{
			return "expcoin_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			dayTakeTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(dayTakeTimes);
		}

		public int dayTakeTimes;
	}

	// 提取历练
	public static class expcoin_extract_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public expcoin_extract_res() { }

		public expcoin_extract_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "expcoin_extract_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步藏书页签信息
	public static class rarebook_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rarebook_sync_res() { }

		public rarebook_sync_res(Map<Integer, Integer> bag)
		{
			this.bag = bag;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bag = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(bag);
		}

		@Override
		public String getPacketName()
		{
			return "rarebook_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bag = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(bag);
		}

		public Map<Integer, Integer> bag;
	}

	// 藏书存入
	public static class rarebook_push_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rarebook_push_res() { }

		public rarebook_push_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "rarebook_push_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 藏书取出
	public static class rarebook_pop_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rarebook_pop_res() { }

		public rarebook_pop_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "rarebook_pop_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 藏书解锁
	public static class rarebook_unlock_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rarebook_unlock_res() { }

		public rarebook_unlock_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "rarebook_unlock_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 藏书升级
	public static class rarebook_lvlup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rarebook_lvlup_res() { }

		public rarebook_lvlup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "rarebook_lvlup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步参悟页签信息
	public static class grasp_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public grasp_sync_res() { }

		public grasp_sync_res(int ok, int dayFortune, int dayGraspTime, int lastGraspTime, 
		                      List<RoleOverview> members)
		{
			this.ok = ok;
			this.dayFortune = dayFortune;
			this.dayGraspTime = dayGraspTime;
			this.lastGraspTime = lastGraspTime;
			this.members = members;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			dayFortune = is.popInteger();
			dayGraspTime = is.popInteger();
			lastGraspTime = is.popInteger();
			members = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushInteger(dayFortune);
			os.pushInteger(dayGraspTime);
			os.pushInteger(lastGraspTime);
			os.pushList(members);
		}

		@Override
		public String getPacketName()
		{
			return "grasp_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			dayFortune = is.popInteger();
			dayGraspTime = is.popInteger();
			lastGraspTime = is.popInteger();
			members = is.popList(RoleOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushInteger(dayFortune);
			os.pushInteger(dayGraspTime);
			os.pushInteger(lastGraspTime);
			os.pushList(members);
		}

		public int ok;
		public int dayFortune;
		public int dayGraspTime;
		public int lastGraspTime;
		public List<RoleOverview> members;
	}

	public static class grasp_dayforture_refresh implements Stream.IStreamable, SStream.IStrPacket
	{

		public grasp_dayforture_refresh() { }

		public grasp_dayforture_refresh(int dayFortune)
		{
			this.dayFortune = dayFortune;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayFortune = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayFortune);
		}

		@Override
		public String getPacketName()
		{
			return "grasp_dayforture_refresh";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			dayFortune = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(dayFortune);
		}

		public int dayFortune;
	}

	// 参悟
	public static class grasp_impl_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public grasp_impl_res() { }

		public grasp_impl_res(int ok, int same)
		{
			this.ok = ok;
			this.same = same;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			same = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushInteger(same);
		}

		@Override
		public String getPacketName()
		{
			return "grasp_impl_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			same = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushInteger(same);
		}

		public int ok;
		public int same;
	}

	// 参悟CD时间重置
	public static class grasp_reset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public grasp_reset_res() { }

		public grasp_reset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "grasp_reset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 购买乾坤点
	public static class dmgtransfer_buypoint_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public dmgtransfer_buypoint_res() { }

		public dmgtransfer_buypoint_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "dmgtransfer_buypoint_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 投入乾坤点
	public static class dmgtransfer_putpoint_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public dmgtransfer_putpoint_res() { }

		public dmgtransfer_putpoint_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "dmgtransfer_putpoint_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 乾坤升级
	public static class dmgtransfer_lvlup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public dmgtransfer_lvlup_res() { }

		public dmgtransfer_lvlup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "dmgtransfer_lvlup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 重置
	public static class dmgtransfer_reset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public dmgtransfer_reset_res() { }

		public dmgtransfer_reset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "dmgtransfer_reset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步用户调研信息
	public static class usersurvey_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public usersurvey_sync_res() { }

		public usersurvey_sync_res(int seq, int reward)
		{
			this.seq = seq;
			this.reward = reward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
			reward = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
			os.pushInteger(reward);
		}

		@Override
		public String getPacketName()
		{
			return "usersurvey_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
			reward = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
			os.pushInteger(reward);
		}

		public int seq;
		public int reward;
	}

	// 用户调研提交答案
	public static class usersurvey_submit_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public usersurvey_submit_res() { }

		public usersurvey_submit_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "usersurvey_submit_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 用户调研结束领取奖励
	public static class usersurvey_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public usersurvey_reward_res() { }

		public usersurvey_reward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "usersurvey_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步登陆有礼信息
	public static class cblogingift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public cblogingift_sync_res() { }

		public cblogingift_sync_res(Set<Integer> gifts)
		{
			this.gifts = gifts;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gifts = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(gifts);
		}

		@Override
		public String getPacketName()
		{
			return "cblogingift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			gifts = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(gifts);
		}

		public Set<Integer> gifts;
	}

	// 登陆有礼领奖
	public static class cblogingift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public cblogingift_take_res() { }

		public cblogingift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "cblogingift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 升级送VIP、钻石
	public static class cblvlupgift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public cblvlupgift_sync_res() { }

		public cblvlupgift_sync_res(Set<Integer> gifts)
		{
			this.gifts = gifts;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gifts = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(gifts);
		}

		@Override
		public String getPacketName()
		{
			return "cblvlupgift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			gifts = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(gifts);
		}

		public Set<Integer> gifts;
	}

	// 升级送VIP、钻石(领奖)
	public static class cblvlupgift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public cblvlupgift_take_res() { }

		public cblvlupgift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "cblvlupgift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步完善资料拿大奖信息
	public static class userdata_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public userdata_sync_res() { }

		public userdata_sync_res(DBUserData data)
		{
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( data == null )
				data = new DBUserData();
			is.pop(data);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(data);
		}

		@Override
		public String getPacketName()
		{
			return "userdata_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			data = is.pop(DBUserData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(data);
		}

		public DBUserData data;
	}

	// 资料修改
	public static class userdata_modify_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public userdata_modify_res() { }

		public userdata_modify_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "userdata_modify_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 完善资料领奖
	public static class userdata_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public userdata_reward_res() { }

		public userdata_reward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "userdata_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步封测倒计时信息
	public static class cbcountdowngift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public cbcountdowngift_sync_res() { }

		public cbcountdowngift_sync_res(Set<Integer> gifts)
		{
			this.gifts = gifts;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gifts = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(gifts);
		}

		@Override
		public String getPacketName()
		{
			return "cbcountdowngift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			gifts = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(gifts);
		}

		public Set<Integer> gifts;
	}

	// 封测倒计时领奖
	public static class cbcountdowngift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public cbcountdowngift_take_res() { }

		public cbcountdowngift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "cbcountdowngift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步限时领奖信息
	public static class ontimegift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public ontimegift_sync_res() { }

		public ontimegift_sync_res(Set<Integer> gifts)
		{
			this.gifts = gifts;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gifts = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(gifts);
		}

		@Override
		public String getPacketName()
		{
			return "ontimegift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			gifts = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(gifts);
		}

		public Set<Integer> gifts;
	}

	// 限时领奖领取奖励
	public static class ontimegift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public ontimegift_take_res() { }

		public ontimegift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "ontimegift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步强化比拼信息
	public static class strengthengift_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public strengthengift_sync_res() { }

		public strengthengift_sync_res(Set<Integer> gifts)
		{
			this.gifts = gifts;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gifts = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(gifts);
		}

		@Override
		public String getPacketName()
		{
			return "strengthengift_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			gifts = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(gifts);
		}

		public Set<Integer> gifts;
	}

	// 限时强化比拼奖励
	public static class strengthengift_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public strengthengift_take_res() { }

		public strengthengift_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "strengthengift_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步官网调研信息
	public static class official_research_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public official_research_sync_res() { }

		public official_research_sync_res(byte gifts)
		{
			this.gifts = gifts;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gifts = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(gifts);
		}

		@Override
		public String getPacketName()
		{
			return "official_research_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			gifts = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushByte(gifts);
		}

		public byte gifts;
	}

	// 限时官网调研奖励
	public static class official_research_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public official_research_take_res() { }

		public official_research_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "official_research_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步角色信息临时vip
	public static class role_tempvip implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_tempvip() { }

		public role_tempvip(int tempVipLvl, int tempVipEndTime)
		{
			this.tempVipLvl = tempVipLvl;
			this.tempVipEndTime = tempVipEndTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tempVipLvl = is.popInteger();
			tempVipEndTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(tempVipLvl);
			os.pushInteger(tempVipEndTime);
		}

		@Override
		public String getPacketName()
		{
			return "role_tempvip";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tempVipLvl = is.popInteger();
			tempVipEndTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(tempVipLvl);
			os.pushInteger(tempVipEndTime);
		}

		public int tempVipLvl;
		public int tempVipEndTime;
	}

	// 设置当前的永久称号
	public static class permanenttitle_set_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public permanenttitle_set_res() { }

		public permanenttitle_set_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "permanenttitle_set_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 设置当前的时效称号
	public static class timedtitle_set_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public timedtitle_set_res() { }

		public timedtitle_set_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "timedtitle_set_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 解锁新的称号位回应
	public static class titleslot_unlock_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public titleslot_unlock_res() { }

		public titleslot_unlock_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "titleslot_unlock_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 接取支线任务
	public static class branch_task_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public branch_task_take_res() { }

		public branch_task_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "branch_task_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 支线任务放弃
	public static class branch_task_quit_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public branch_task_quit_res() { }

		public branch_task_quit_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "branch_task_quit_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 支线任务交付
	public static class branch_task_finish_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public branch_task_finish_res() { }

		public branch_task_finish_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "branch_task_finish_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步爬塔数据
	public static class sync_tower_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_tower_res() { }

		public sync_tower_res(DBClimbTower info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new DBClimbTower();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "sync_tower_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(DBClimbTower.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public DBClimbTower info;
	}

	// 同步战绩记录
	public static class tower_record_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_record_res() { }

		public tower_record_res(Map<Integer, DBClimbTowerRecordData> data)
		{
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			data = is.popIntegerTreeMap(DBClimbTowerRecordData.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(data);
		}

		@Override
		public String getPacketName()
		{
			return "tower_record_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			data = is.popIntegerTreeMap(DBClimbTowerRecordData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(data);
		}

		public Map<Integer, DBClimbTowerRecordData> data;
	}

	// 设置爬塔系统出战随从
	public static class tower_setpets_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_setpets_res() { }

		public tower_setpets_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "tower_setpets_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 开始战斗
	public static class tower_startfight_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_startfight_res() { }

		public tower_startfight_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "tower_startfight_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 进入爬塔场景同步
	public static class role_towermap_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_towermap_sync() { }

		public role_towermap_sync(int mapId, int killCount)
		{
			this.mapId = mapId;
			this.killCount = killCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			killCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(killCount);
		}

		@Override
		public String getPacketName()
		{
			return "role_towermap_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			killCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(killCount);
		}

		public int mapId;
		public int killCount;
	}

	// 购买挑战次数
	public static class tower_buytimes_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_buytimes_res() { }

		public tower_buytimes_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "tower_buytimes_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 爬塔副本扫荡
	public static class tower_sweep_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_sweep_res() { }

		public tower_sweep_res(MapSummary data)
		{
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( data == null )
				data = new MapSummary();
			is.pop(data);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(data);
		}

		@Override
		public String getPacketName()
		{
			return "tower_sweep_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			data = is.pop(MapSummary.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(data);
		}

		public MapSummary data;
	}

	// 同步声望数据
	public static class sync_towerfame_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_towerfame_res() { }

		public sync_towerfame_res(Map<Integer, DBClimbTowerFame> data)
		{
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			data = is.popIntegerTreeMap(DBClimbTowerFame.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(data);
		}

		@Override
		public String getPacketName()
		{
			return "sync_towerfame_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			data = is.popIntegerTreeMap(DBClimbTowerFame.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(data);
		}

		public Map<Integer, DBClimbTowerFame> data;
	}

	// 爬塔声望捐赠物品
	public static class tower_donate_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_donate_res() { }

		public tower_donate_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "tower_donate_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 爬塔领取声望奖励
	public static class take_towerfame_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public take_towerfame_res() { }

		public take_towerfame_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "take_towerfame_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 进入秘境
	public static class enter_secretmap_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public enter_secretmap_res() { }

		public enter_secretmap_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "enter_secretmap_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 领取秘境任务奖励
	public static class take_secretreward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public take_secretreward_res() { }

		public take_secretreward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "take_secretreward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派运镖同步
	public static class sect_deliver_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_sync_res() { }

		public sect_deliver_sync_res(int ok, int isProtect, int wishTimes, List<SectDeliverTaskInfo> data, 
		                             DBSectDeliverWishChange wishData)
		{
			this.ok = ok;
			this.isProtect = isProtect;
			this.wishTimes = wishTimes;
			this.data = data;
			this.wishData = wishData;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			isProtect = is.popInteger();
			wishTimes = is.popInteger();
			data = is.popList(SectDeliverTaskInfo.class);
			if( wishData == null )
				wishData = new DBSectDeliverWishChange();
			is.pop(wishData);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushInteger(isProtect);
			os.pushInteger(wishTimes);
			os.pushList(data);
			os.push(wishData);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			isProtect = is.popInteger();
			wishTimes = is.popInteger();
			data = is.popList(SectDeliverTaskInfo.class);
			wishData = is.pop(DBSectDeliverWishChange.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushInteger(isProtect);
			os.pushInteger(wishTimes);
			os.pushList(data);
			os.push(wishData);
		}

		public int ok;
		public int isProtect;
		public int wishTimes;
		public List<SectDeliverTaskInfo> data;
		public DBSectDeliverWishChange wishData;
	}

	// 帮派运镖刷新
	public static class sect_deliver_refresh_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_refresh_res() { }

		public sect_deliver_refresh_res(int ok, List<SectDeliverTaskInfo> data)
		{
			this.ok = ok;
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			data = is.popList(SectDeliverTaskInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(data);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_refresh_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			data = is.popList(SectDeliverTaskInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(data);
		}

		public int ok;
		public List<SectDeliverTaskInfo> data;
	}

	// 帮派运镖投保
	public static class sect_deliver_protect_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_protect_res() { }

		public sect_deliver_protect_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_protect_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派运镖开始运镖
	public static class sect_deliver_begin_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_begin_res() { }

		public sect_deliver_begin_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_begin_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派运镖求援
	public static class sect_deliver_search_help_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_search_help_res() { }

		public sect_deliver_search_help_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_search_help_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派运镖响应求援
	public static class sect_deliver_on_help_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_on_help_res() { }

		public sect_deliver_on_help_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_on_help_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派运镖取消运镖
	public static class sect_deliver_cancel_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_cancel_res() { }

		public sect_deliver_cancel_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_cancel_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派运镖完成
	public static class sect_deliver_finish_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_finish_res() { }

		public sect_deliver_finish_res(int ok, int rewardGold, int rewardExp, int timeBouns, 
		                               int robPercent, int expBouns, int goldBouns)
		{
			this.ok = ok;
			this.rewardGold = rewardGold;
			this.rewardExp = rewardExp;
			this.timeBouns = timeBouns;
			this.robPercent = robPercent;
			this.expBouns = expBouns;
			this.goldBouns = goldBouns;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			rewardGold = is.popInteger();
			rewardExp = is.popInteger();
			timeBouns = is.popInteger();
			robPercent = is.popInteger();
			expBouns = is.popInteger();
			goldBouns = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushInteger(rewardGold);
			os.pushInteger(rewardExp);
			os.pushInteger(timeBouns);
			os.pushInteger(robPercent);
			os.pushInteger(expBouns);
			os.pushInteger(goldBouns);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_finish_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			rewardGold = is.popInteger();
			rewardExp = is.popInteger();
			timeBouns = is.popInteger();
			robPercent = is.popInteger();
			expBouns = is.popInteger();
			goldBouns = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushInteger(rewardGold);
			os.pushInteger(rewardExp);
			os.pushInteger(timeBouns);
			os.pushInteger(robPercent);
			os.pushInteger(expBouns);
			os.pushInteger(goldBouns);
		}

		public int ok;
		public int rewardGold;
		public int rewardExp;
		public int timeBouns;
		public int robPercent;
		public int expBouns;
		public int goldBouns;
	}

	// 帮派祝福同步
	public static class sect_deliver_sync_wish_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_sync_wish_res() { }

		public sect_deliver_sync_wish_res(int ok, int wishTimes, DBSectDeliverWishChange data, List<DBDeliverWishListItem> rankList)
		{
			this.ok = ok;
			this.wishTimes = wishTimes;
			this.data = data;
			this.rankList = rankList;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			wishTimes = is.popInteger();
			if( data == null )
				data = new DBSectDeliverWishChange();
			is.pop(data);
			rankList = is.popList(DBDeliverWishListItem.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushInteger(wishTimes);
			os.push(data);
			os.pushList(rankList);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_sync_wish_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			wishTimes = is.popInteger();
			data = is.pop(DBSectDeliverWishChange.class);
			rankList = is.popList(DBDeliverWishListItem.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushInteger(wishTimes);
			os.push(data);
			os.pushList(rankList);
		}

		public int ok;
		public int wishTimes;
		public DBSectDeliverWishChange data;
		public List<DBDeliverWishListItem> rankList;
	}

	// 帮派祝福祝福
	public static class sect_deliver_add_wish_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_add_wish_res() { }

		public sect_deliver_add_wish_res(int ok, DBSectDeliverWishChange data)
		{
			this.ok = ok;
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( data == null )
				data = new DBSectDeliverWishChange();
			is.pop(data);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(data);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_add_wish_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			data = is.pop(DBSectDeliverWishChange.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(data);
		}

		public int ok;
		public DBSectDeliverWishChange data;
	}

	// 帮派祝福保存
	public static class sect_deliver_save_wish_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_save_wish_res() { }

		public sect_deliver_save_wish_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_save_wish_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派运镖求援推送消息
	public static class sect_deliver_help_push implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_help_push() { }

		public sect_deliver_help_push(int id, String name, MapLocation location, int line)
		{
			this.id = id;
			this.name = name;
			this.location = location;
			this.line = line;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			name = is.popString();
			if( location == null )
				location = new MapLocation();
			is.pop(location);
			line = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(name);
			os.push(location);
			os.pushInteger(line);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_help_push";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			name = is.popString();
			location = is.pop(MapLocation.class);
			line = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushString(name);
			os.push(location);
			os.pushInteger(line);
		}

		public int id;
		public String name;
		public MapLocation location;
		public int line;
	}

	// 劫镖任务接取
	public static class sect_rob_task_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_rob_task_take_res() { }

		public sect_rob_task_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_rob_task_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 劫镖任务放弃
	public static class sect_rob_task_cancel_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_rob_task_cancel_res() { }

		public sect_rob_task_cancel_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_rob_task_cancel_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步劫镖标记
	public static class sect_rob_flag implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_rob_flag() { }

		public sect_rob_flag(byte flag)
		{
			this.flag = flag;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			flag = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(flag);
		}

		@Override
		public String getPacketName()
		{
			return "sect_rob_flag";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			flag = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushByte(flag);
		}

		public byte flag;
	}

	// 完成劫镖发送奖励信息
	public static class sect_rob_finish implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_rob_finish() { }

		public sect_rob_finish(int rewardnum)
		{
			this.rewardnum = rewardnum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rewardnum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rewardnum);
		}

		@Override
		public String getPacketName()
		{
			return "sect_rob_finish";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rewardnum = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rewardnum);
		}

		public int rewardnum;
	}

	// 销毁自己的镖车
	public static class destory_own_car implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "destory_own_car";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派商城同步协议
	public static class sect_deliver_shopsync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_shopsync_res() { }

		public sect_deliver_shopsync_res(ShopInfo info, int currency)
		{
			this.info = info;
			this.currency = currency;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ShopInfo();
			is.pop(info);
			currency = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
			os.pushInteger(currency);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_shopsync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ShopInfo.class);
			currency = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
			os.pushInteger(currency);
		}

		public ShopInfo info;
		public int currency;
	}

	// 帮派商城刷新协议
	public static class sect_deliver_shoprefresh_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_shoprefresh_res() { }

		public sect_deliver_shoprefresh_res(ShopInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new ShopInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_shoprefresh_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(ShopInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public ShopInfo info;
	}

	// 帮派商城买商品协议
	public static class sect_deliver_shopbuy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_shopbuy_res() { }

		public sect_deliver_shopbuy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_shopbuy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步工坊回应
	public static class produce_workshopsync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_workshopsync_res() { }

		public produce_workshopsync_res(DBProduceData syncInfo, int fusionPoint)
		{
			this.syncInfo = syncInfo;
			this.fusionPoint = fusionPoint;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( syncInfo == null )
				syncInfo = new DBProduceData();
			is.pop(syncInfo);
			fusionPoint = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(syncInfo);
			os.pushInteger(fusionPoint);
		}

		@Override
		public String getPacketName()
		{
			return "produce_workshopsync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			syncInfo = is.pop(DBProduceData.class);
			fusionPoint = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(syncInfo);
			os.pushInteger(fusionPoint);
		}

		public DBProduceData syncInfo;
		public int fusionPoint;
	}

	// 使用卷轴获得新配方回应
	public static class produce_createnewrecipe_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_createnewrecipe_res() { }

		public produce_createnewrecipe_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "produce_createnewrecipe_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 制造请求回应
	public static class produce_produce_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_produce_res() { }

		public produce_produce_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "produce_produce_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 分解装备请求回应
	public static class produce_split_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_split_res() { }

		public produce_split_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "produce_split_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 炼化请求回应
	public static class produce_fusion_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_fusion_res() { }

		public produce_fusion_res(int ok, List<GameItem> produces)
		{
			this.ok = ok;
			this.produces = produces;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			produces = is.popList(GameItem.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(produces);
		}

		@Override
		public String getPacketName()
		{
			return "produce_fusion_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			produces = is.popList(GameItem.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(produces);
		}

		public int ok;
		public List<GameItem> produces;
	}

	// 分解能量购买回应
	public static class produce_splitspbuy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_splitspbuy_res() { }

		public produce_splitspbuy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "produce_splitspbuy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 背包道具合并
	public static class bag_merge_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_merge_res() { }

		public bag_merge_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "bag_merge_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 七日留存活动领取奖励
	public static class rmactivity_takereward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rmactivity_takereward_res() { }

		public rmactivity_takereward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "rmactivity_takereward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 玩家改名(ok -1:名字已存在)
	public static class role_rename_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_rename_res() { }

		public role_rename_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "role_rename_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 上马请求回应
	public static class horse_ride_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_ride_res() { }

		public horse_ride_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_ride_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 下马请求回应
	public static class horse_unride_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_unride_res() { }

		public horse_unride_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_unride_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 邀请骑乘响应协议
	public static class mulhorse_invite_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_invite_res() { }

		public mulhorse_invite_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_invite_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 转发其他玩家的骑乘邀请
	public static class mulhorse_invite_forward implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_invite_forward() { }

		public mulhorse_invite_forward(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_invite_forward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 接收到骑乘邀请后选择是否同意操作
	public static class mulhorse_invitehandle_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_invitehandle_res() { }

		public mulhorse_invitehandle_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_invitehandle_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知邀请者前面的邀请结果(result 0:拒绝，-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙，| -6:对方已在多人坐骑上，-9:超时)
	public static class mulhorse_invite_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_invite_result() { }

		public mulhorse_invite_result(int roleID, String roleName, int result)
		{
			this.roleID = roleID;
			this.roleName = roleName;
			this.result = result;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
			result = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(result);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_invite_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
			result = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(result);
		}

		public int roleID;
		public String roleName;
		public int result;
	}

	// 申请多人骑乘
	public static class mulhorse_apply_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_apply_res() { }

		public mulhorse_apply_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_apply_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 转发其他玩家的骑乘申请
	public static class mulhorse_apply_forward implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_apply_forward() { }

		public mulhorse_apply_forward(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_apply_forward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 接收到其他玩家骑乘申请后是否同意操作
	public static class mulhorse_applyhandle_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_applyhandle_res() { }

		public mulhorse_applyhandle_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_applyhandle_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知邀请者前面的邀请结果(result 0:拒绝，-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙|-4:对方坐骑已满，-8:对方已下马，-9:超时)
	public static class mulhorse_apply_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_apply_result() { }

		public mulhorse_apply_result(int roleID, String roleName, int result)
		{
			this.roleID = roleID;
			this.roleName = roleName;
			this.result = result;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
			result = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(result);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_apply_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
			result = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(result);
		}

		public int roleID;
		public String roleName;
		public int result;
	}

	// 离开多人骑乘协议
	public static class mulhorse_leave_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_leave_res() { }

		public mulhorse_leave_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_leave_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 剔除骑乘成员
	public static class mulhorse_kick_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_kick_res() { }

		public mulhorse_kick_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_kick_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知新成员加入多人骑乘
	public static class mulhorse_join implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_join() { }

		public mulhorse_join(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_join";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知有成员离开多人骑乘
	public static class mulhorse_leave implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_leave() { }

		public mulhorse_leave(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_leave";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知有成员被踢出多人骑乘
	public static class mulhorse_kick implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_kick() { }

		public mulhorse_kick(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_kick";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 相依相偎邀请
	public static class staywith_invite_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public staywith_invite_res() { }

		public staywith_invite_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "staywith_invite_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 转发其他玩家的相依相偎邀请
	public static class staywith_invite_forward implements Stream.IStreamable, SStream.IStrPacket
	{

		public staywith_invite_forward() { }

		public staywith_invite_forward(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "staywith_invite_forward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 接收到相依相偎邀请后选择是否同意操作
	public static class staywith_invitehandle_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public staywith_invitehandle_res() { }

		public staywith_invitehandle_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "staywith_invitehandle_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知邀请者前面的邀请结果(result 0:拒绝，-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙，-7:超时)
	public static class staywith_invite_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public staywith_invite_result() { }

		public staywith_invite_result(int roleID, String roleName, int result)
		{
			this.roleID = roleID;
			this.roleName = roleName;
			this.result = result;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
			result = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(result);
		}

		@Override
		public String getPacketName()
		{
			return "staywith_invite_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
			result = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
			os.pushInteger(result);
		}

		public int roleID;
		public String roleName;
		public int result;
	}

	// 通知新成员加入相依相偎
	public static class staywith_join implements Stream.IStreamable, SStream.IStrPacket
	{

		public staywith_join() { }

		public staywith_join(int roleID, String roleName)
		{
			this.roleID = roleID;
			this.roleName = roleName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		@Override
		public String getPacketName()
		{
			return "staywith_join";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roleName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushString(roleName);
		}

		public int roleID;
		public String roleName;
	}

	// 通知相依相偎解散
	public static class staywith_dissolve implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "staywith_dissolve";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 取消相依相偎请求
	public static class staywith_leave_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public staywith_leave_res() { }

		public staywith_leave_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "staywith_leave_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步留言板请求
	public static class sync_message_board_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_message_board_res() { }

		public sync_message_board_res(List<DBMessageBoard> msgs, byte hasNewMsg)
		{
			this.msgs = msgs;
			this.hasNewMsg = hasNewMsg;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			msgs = is.popList(DBMessageBoard.class);
			hasNewMsg = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(msgs);
			os.pushByte(hasNewMsg);
		}

		@Override
		public String getPacketName()
		{
			return "sync_message_board_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			msgs = is.popList(DBMessageBoard.class);
			hasNewMsg = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(msgs);
			os.pushByte(hasNewMsg);
		}

		public List<DBMessageBoard> msgs;
		public byte hasNewMsg;
	}

	// 添加留言请求
	public static class add_message_board_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public add_message_board_res() { }

		public add_message_board_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "add_message_board_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 评论留言请求
	public static class comment_message_board_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public comment_message_board_res() { }

		public comment_message_board_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "comment_message_board_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 修改文本请求
	public static class change_message_board_content_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public change_message_board_content_res() { }

		public change_message_board_content_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "change_message_board_content_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步日程表请求
	public static class schedule_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public schedule_sync_res() { }

		public schedule_sync_res(DBSchedule msgs)
		{
			this.msgs = msgs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( msgs == null )
				msgs = new DBSchedule();
			is.pop(msgs);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(msgs);
		}

		@Override
		public String getPacketName()
		{
			return "schedule_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			msgs = is.pop(DBSchedule.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(msgs);
		}

		public DBSchedule msgs;
	}

	// 领取日程表奖励
	public static class schedule_mapreward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public schedule_mapreward_res() { }

		public schedule_mapreward_res(int ok, Map<Integer, Integer> rewards)
		{
			this.ok = ok;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			rewards = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushIntegerIntegerMap(rewards);
		}

		@Override
		public String getPacketName()
		{
			return "schedule_mapreward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			rewards = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushIntegerIntegerMap(rewards);
		}

		public int ok;
		public Map<Integer, Integer> rewards;
	}

	// 同步日程表请求
	public static class role_schedule_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_schedule_info() { }

		public role_schedule_info(DBSchedule schedule)
		{
			this.schedule = schedule;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( schedule == null )
				schedule = new DBSchedule();
			is.pop(schedule);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(schedule);
		}

		@Override
		public String getPacketName()
		{
			return "role_schedule_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			schedule = is.pop(DBSchedule.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(schedule);
		}

		public DBSchedule schedule;
	}

	// 角色接触BOSS通知
	public static class role_touch_boss implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_touch_boss";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 保存引导关进度请求
	public static class save_guide_mapcopy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public save_guide_mapcopy_res() { }

		public save_guide_mapcopy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "save_guide_mapcopy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步引导关步骤
	public static class sync_guide_mapcopy_step implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_guide_mapcopy_step() { }

		public sync_guide_mapcopy_step(int step)
		{
			this.step = step;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			step = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(step);
		}

		@Override
		public String getPacketName()
		{
			return "sync_guide_mapcopy_step";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			step = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(step);
		}

		public int step;
	}

	// 帮派邀请请求
	public static class sect_invite_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_invite_res() { }

		public sect_invite_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_invite_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派邀请接受请求
	public static class sect_invite_response_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_invite_response_res() { }

		public sect_invite_response_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_invite_response_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派邀请推送
	public static class role_sect_invite implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sect_invite() { }

		public role_sect_invite(int inviteId, String inviteName, String sectName)
		{
			this.inviteId = inviteId;
			this.inviteName = inviteName;
			this.sectName = sectName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			inviteId = is.popInteger();
			inviteName = is.popString();
			sectName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(inviteId);
			os.pushString(inviteName);
			os.pushString(sectName);
		}

		@Override
		public String getPacketName()
		{
			return "role_sect_invite";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			inviteId = is.popInteger();
			inviteName = is.popString();
			sectName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(inviteId);
			os.pushString(inviteName);
			os.pushString(sectName);
		}

		public int inviteId;
		public String inviteName;
		public String sectName;
	}

	// 帮派邀请拒绝推送
	public static class role_refuse_sect_invite implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_refuse_sect_invite() { }

		public role_refuse_sect_invite(String beinviteName)
		{
			this.beinviteName = beinviteName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			beinviteName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(beinviteName);
		}

		@Override
		public String getPacketName()
		{
			return "role_refuse_sect_invite";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			beinviteName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(beinviteName);
		}

		public String beinviteName;
	}

	// 帮派邀请繁忙推送
	public static class sect_invite_busy implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_invite_busy() { }

		public sect_invite_busy(String beinviteName)
		{
			this.beinviteName = beinviteName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			beinviteName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(beinviteName);
		}

		@Override
		public String getPacketName()
		{
			return "sect_invite_busy";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			beinviteName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(beinviteName);
		}

		public String beinviteName;
	}

	// 同步内甲信息
	public static class role_armor_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_armor_info() { }

		public role_armor_info(DBArmor armor)
		{
			this.armor = armor;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( armor == null )
				armor = new DBArmor();
			is.pop(armor);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(armor);
		}

		@Override
		public String getPacketName()
		{
			return "role_armor_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			armor = is.pop(DBArmor.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(armor);
		}

		public DBArmor armor;
	}

	// 解锁内甲请求
	public static class unlock_armor_type_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public unlock_armor_type_res() { }

		public unlock_armor_type_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "unlock_armor_type_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 内甲升阶请求
	public static class armor_uprank_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public armor_uprank_res() { }

		public armor_uprank_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "armor_uprank_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 内甲升级天赋请求
	public static class armor_add_talent_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public armor_add_talent_res() { }

		public armor_add_talent_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "armor_add_talent_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 内甲选择请求
	public static class armor_change_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public armor_change_res() { }

		public armor_change_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "armor_change_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 内甲升级请求
	public static class armor_up_level_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public armor_up_level_res() { }

		public armor_up_level_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "armor_up_level_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 符文存入请求
	public static class rune_push_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rune_push_res() { }

		public rune_push_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "rune_push_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 符文提取请求
	public static class rune_pop_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rune_pop_res() { }

		public rune_pop_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "rune_pop_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 重置天赋点请求
	public static class reset_talent_point_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public reset_talent_point_res() { }

		public reset_talent_point_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "reset_talent_point_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 重置天赋点请求
	public static class solt_group_unlock_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public solt_group_unlock_res() { }

		public solt_group_unlock_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "solt_group_unlock_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 符文镶嵌请求
	public static class solt_push_rune_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public solt_push_rune_res() { }

		public solt_push_rune_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "solt_push_rune_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 符文之语镶嵌请求
	public static class lang_push_rune_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public lang_push_rune_res() { }

		public lang_push_rune_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "lang_push_rune_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 符文许愿请求
	public static class rune_wish_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public rune_wish_res() { }

		public rune_wish_res(int ok, List<DummyGoods> runes)
		{
			this.ok = ok;
			this.runes = runes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			runes = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushList(runes);
		}

		@Override
		public String getPacketName()
		{
			return "rune_wish_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			runes = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushList(runes);
		}

		public int ok;
		public List<DummyGoods> runes;
	}

	// 存入仓库请求
	public static class put_in_warehouse_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public put_in_warehouse_res() { }

		public put_in_warehouse_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "put_in_warehouse_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 取出物品请求
	public static class take_out_warehouse_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public take_out_warehouse_res() { }

		public take_out_warehouse_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "take_out_warehouse_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 扩展仓库请求
	public static class expand_warehouse_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public expand_warehouse_res() { }

		public expand_warehouse_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "expand_warehouse_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步角色私人仓库信息
	public static class sync_private_warehouse_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_private_warehouse_res() { }

		public sync_private_warehouse_res(DBItemCells warehouse)
		{
			this.warehouse = warehouse;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( warehouse == null )
				warehouse = new DBItemCells();
			is.pop(warehouse);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(warehouse);
		}

		@Override
		public String getPacketName()
		{
			return "sync_private_warehouse_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			warehouse = is.pop(DBItemCells.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(warehouse);
		}

		public DBItemCells warehouse;
	}

	// 同步角色公共仓库信息
	public static class sync_public_warehouse_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_public_warehouse_res() { }

		public sync_public_warehouse_res(DBItemCells warehouse)
		{
			this.warehouse = warehouse;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( warehouse == null )
				warehouse = new DBItemCells();
			is.pop(warehouse);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(warehouse);
		}

		@Override
		public String getPacketName()
		{
			return "sync_public_warehouse_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			warehouse = is.pop(DBItemCells.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(warehouse);
		}

		public DBItemCells warehouse;
	}

	// 求婚推送
	public static class propose_push implements Stream.IStreamable, SStream.IStrPacket
	{

		public propose_push() { }

		public propose_push(int grade)
		{
			this.grade = grade;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			grade = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(grade);
		}

		@Override
		public String getPacketName()
		{
			return "propose_push";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			grade = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(grade);
		}

		public int grade;
	}

	// 求婚请求
	public static class propose_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public propose_res() { }

		public propose_res(int ok, String errorName)
		{
			this.ok = ok;
			this.errorName = errorName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			errorName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushString(errorName);
		}

		@Override
		public String getPacketName()
		{
			return "propose_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			errorName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushString(errorName);
		}

		public int ok;
		public String errorName;
	}

	// 求婚响应请求
	public static class propose_response_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public propose_response_res() { }

		public propose_response_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "propose_response_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 求婚响应推送
	public static class role_propose_response implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_propose_response() { }

		public role_propose_response(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "role_propose_response";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步婚姻信息
	public static class marriage_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public marriage_sync_res() { }

		public marriage_sync_res(MarriageShareOverView marriage, int lastTransformTime)
		{
			this.marriage = marriage;
			this.lastTransformTime = lastTransformTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( marriage == null )
				marriage = new MarriageShareOverView();
			is.pop(marriage);
			lastTransformTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(marriage);
			os.pushInteger(lastTransformTime);
		}

		@Override
		public String getPacketName()
		{
			return "marriage_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			marriage = is.pop(MarriageShareOverView.class);
			lastTransformTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(marriage);
			os.pushInteger(lastTransformTime);
		}

		public MarriageShareOverView marriage;
		public int lastTransformTime;
	}

	// 登陆所需婚姻信息
	public static class login_marriage_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public login_marriage_info() { }

		public login_marriage_info(int marriageLevel, Map<Integer, MarriageSkillInfo> marriageSkill, int marriageTime, int marriageType, 
		                           int marriageStep, int marriageRoleId)
		{
			this.marriageLevel = marriageLevel;
			this.marriageSkill = marriageSkill;
			this.marriageTime = marriageTime;
			this.marriageType = marriageType;
			this.marriageStep = marriageStep;
			this.marriageRoleId = marriageRoleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			marriageLevel = is.popInteger();
			marriageSkill = is.popIntegerTreeMap(MarriageSkillInfo.class);
			marriageTime = is.popInteger();
			marriageType = is.popInteger();
			marriageStep = is.popInteger();
			marriageRoleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(marriageLevel);
			os.pushIntegerMap(marriageSkill);
			os.pushInteger(marriageTime);
			os.pushInteger(marriageType);
			os.pushInteger(marriageStep);
			os.pushInteger(marriageRoleId);
		}

		@Override
		public String getPacketName()
		{
			return "login_marriage_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			marriageLevel = is.popInteger();
			marriageSkill = is.popIntegerTreeMap(MarriageSkillInfo.class);
			marriageTime = is.popInteger();
			marriageType = is.popInteger();
			marriageStep = is.popInteger();
			marriageRoleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(marriageLevel);
			os.pushIntegerMap(marriageSkill);
			os.pushInteger(marriageTime);
			os.pushInteger(marriageType);
			os.pushInteger(marriageStep);
			os.pushInteger(marriageRoleId);
		}

		public int marriageLevel;
		public Map<Integer, MarriageSkillInfo> marriageSkill;
		public int marriageTime;
		public int marriageType;
		public int marriageStep;
		public int marriageRoleId;
	}

	// 离婚请求
	public static class divorce_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public divorce_res() { }

		public divorce_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "divorce_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 结婚技能升级请求
	public static class marriage_skill_levelup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public marriage_skill_levelup_res() { }

		public marriage_skill_levelup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "marriage_skill_levelup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 传送至配偶请求
	public static class transform_to_partner_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public transform_to_partner_res() { }

		public transform_to_partner_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "transform_to_partner_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 开始游街请求
	public static class marriage_start_parade_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public marriage_start_parade_res() { }

		public marriage_start_parade_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "marriage_start_parade_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 开始宴席请求
	public static class marriage_start_banquet_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public marriage_start_banquet_res() { }

		public marriage_start_banquet_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "marriage_start_banquet_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 物品交换请求
	public static class exchange_item_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public exchange_item_res() { }

		public exchange_item_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "exchange_item_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 物品交换请求
	public static class exchange_item_times implements Stream.IStreamable, SStream.IStrPacket
	{

		public exchange_item_times() { }

		public exchange_item_times(Map<Integer, Integer> times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(times);
		}

		@Override
		public String getPacketName()
		{
			return "exchange_item_times";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(times);
		}

		public Map<Integer, Integer> times;
	}

	// 姻缘系列任务开启
	public static class mrgseriestask_open_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mrgseriestask_open_res() { }

		public mrgseriestask_open_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mrgseriestask_open_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 姻缘系列任务接取
	public static class mrgseriestask_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mrgseriestask_take_res() { }

		public mrgseriestask_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mrgseriestask_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 姻缘系列任务领奖
	public static class mrgseriestask_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mrgseriestask_reward_res() { }

		public mrgseriestask_reward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mrgseriestask_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步姻缘系列任务开启状态
	public static class role_mrgseriestask_open implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mrgseriestask_open() { }

		public role_mrgseriestask_open(int open)
		{
			this.open = open;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
		}

		@Override
		public String getPacketName()
		{
			return "role_mrgseriestask_open";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			open = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(open);
		}

		public int open;
	}

	// 通知任务接取
	public static class role_mrgseriestask_take implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mrgseriestask_take() { }

		public role_mrgseriestask_take(int receiveTime)
		{
			this.receiveTime = receiveTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(receiveTime);
		}

		@Override
		public String getPacketName()
		{
			return "role_mrgseriestask_take";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(receiveTime);
		}

		public int receiveTime;
	}

	// 通知任务领奖
	public static class role_mrgseriestask_reward implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mrgseriestask_reward() { }

		public role_mrgseriestask_reward(int receiveTime)
		{
			this.receiveTime = receiveTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(receiveTime);
		}

		@Override
		public String getPacketName()
		{
			return "role_mrgseriestask_reward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(receiveTime);
		}

		public int receiveTime;
	}

	// 通知任务计数变化
	public static class role_mrgseriestask_update implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mrgseriestask_update() { }

		public role_mrgseriestask_update(int value)
		{
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(value);
		}

		@Override
		public String getPacketName()
		{
			return "role_mrgseriestask_update";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(value);
		}

		public int value;
	}

	// 姻缘环任务开启
	public static class mrglooptask_open_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mrglooptask_open_res() { }

		public mrglooptask_open_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mrglooptask_open_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 姻缘环任务接取
	public static class mrglooptask_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mrglooptask_take_res() { }

		public mrglooptask_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "mrglooptask_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 姻缘环任务领奖
	public static class mrglooptask_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public mrglooptask_reward_res() { }

		public mrglooptask_reward_res(int ok, int taskID)
		{
			this.ok = ok;
			this.taskID = taskID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			taskID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.pushInteger(taskID);
		}

		@Override
		public String getPacketName()
		{
			return "mrglooptask_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			taskID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.pushInteger(taskID);
		}

		public int ok;
		public int taskID;
	}

	// 同步姻缘环任务开启状态
	public static class role_mrglooptask_open implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mrglooptask_open() { }

		public role_mrglooptask_open(int open)
		{
			this.open = open;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			open = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(open);
		}

		@Override
		public String getPacketName()
		{
			return "role_mrglooptask_open";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			open = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(open);
		}

		public int open;
	}

	// 通知任务接取
	public static class role_mrglooptask_take implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mrglooptask_take() { }

		public role_mrglooptask_take(int receiveTime)
		{
			this.receiveTime = receiveTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(receiveTime);
		}

		@Override
		public String getPacketName()
		{
			return "role_mrglooptask_take";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(receiveTime);
		}

		public int receiveTime;
	}

	// 通知任务领奖
	public static class role_mrglooptask_reward implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mrglooptask_reward() { }

		public role_mrglooptask_reward(int nextTaskID, int receiveTime)
		{
			this.nextTaskID = nextTaskID;
			this.receiveTime = receiveTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			nextTaskID = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(nextTaskID);
			os.pushInteger(receiveTime);
		}

		@Override
		public String getPacketName()
		{
			return "role_mrglooptask_reward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			nextTaskID = is.popInteger();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(nextTaskID);
			os.pushInteger(receiveTime);
		}

		public int nextTaskID;
		public int receiveTime;
	}

	// 通知任务计数变化
	public static class role_mrglooptask_update implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mrglooptask_update() { }

		public role_mrglooptask_update(int value)
		{
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(value);
		}

		@Override
		public String getPacketName()
		{
			return "role_mrglooptask_update";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(value);
		}

		public int value;
	}

	// 同步姻缘任务
	public static class role_mrgtask implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mrgtask() { }

		public role_mrgtask(DBMarriageTask task)
		{
			this.task = task;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( task == null )
				task = new DBMarriageTask();
			is.pop(task);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(task);
		}

		@Override
		public String getPacketName()
		{
			return "role_mrgtask";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			task = is.pop(DBMarriageTask.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(task);
		}

		public DBMarriageTask task;
	}

	// 保存技能预设请求
	public static class save_skill_preset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public save_skill_preset_res() { }

		public save_skill_preset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "save_skill_preset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 保存技能预设请求
	public static class save_all_skill_preset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public save_all_skill_preset_res() { }

		public save_all_skill_preset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "save_all_skill_preset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 保存气功预设请求
	public static class save_spirits_preset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public save_spirits_preset_res() { }

		public save_spirits_preset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "save_spirits_preset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 删除气功预设请求
	public static class delete_skill_preset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public delete_skill_preset_res() { }

		public delete_skill_preset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "delete_skill_preset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 删除气功预设请求
	public static class delete_spirits_preset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public delete_spirits_preset_res() { }

		public delete_spirits_preset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "delete_spirits_preset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用技能预设请求
	public static class change_skill_preset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public change_skill_preset_res() { }

		public change_skill_preset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "change_skill_preset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 使用气功预设请求
	public static class change_spirits_preset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public change_spirits_preset_res() { }

		public change_spirits_preset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "change_spirits_preset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步技能预设请求
	public static class role_skill_preset implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_skill_preset() { }

		public role_skill_preset(List<DBSkillPreset> skillPreset, List<DBSpiritsPreset> spritsPreset)
		{
			this.skillPreset = skillPreset;
			this.spritsPreset = spritsPreset;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillPreset = is.popList(DBSkillPreset.class);
			spritsPreset = is.popList(DBSpiritsPreset.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(skillPreset);
			os.pushList(spritsPreset);
		}

		@Override
		public String getPacketName()
		{
			return "role_skill_preset";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillPreset = is.popList(DBSkillPreset.class);
			spritsPreset = is.popList(DBSpiritsPreset.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(skillPreset);
			os.pushList(spritsPreset);
		}

		public List<DBSkillPreset> skillPreset;
		public List<DBSpiritsPreset> spritsPreset;
	}

	// 帮派团队本开启请求
	public static class sect_group_map_open_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_group_map_open_res() { }

		public sect_group_map_open_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_group_map_open_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派团队本进入请求
	public static class sect_group_map_enter_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_group_map_enter_res() { }

		public sect_group_map_enter_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_group_map_enter_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 帮派团队本信息同步请求
	public static class sect_group_map_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_group_map_sync_res() { }

		public sect_group_map_sync_res(Map<Integer, DBSectGroupMapData> sectGroupMapInfo, List<Integer> sectMemberLevel)
		{
			this.sectGroupMapInfo = sectGroupMapInfo;
			this.sectMemberLevel = sectMemberLevel;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectGroupMapInfo = is.popIntegerTreeMap(DBSectGroupMapData.class);
			sectMemberLevel = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(sectGroupMapInfo);
			os.pushIntegerList(sectMemberLevel);
		}

		@Override
		public String getPacketName()
		{
			return "sect_group_map_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sectGroupMapInfo = is.popIntegerTreeMap(DBSectGroupMapData.class);
			sectMemberLevel = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(sectGroupMapInfo);
			os.pushIntegerList(sectMemberLevel);
		}

		public Map<Integer, DBSectGroupMapData> sectGroupMapInfo;
		public List<Integer> sectMemberLevel;
	}

	// 帮派团队本结束推送
	public static class sect_group_map_end implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_group_map_end() { }

		public sect_group_map_end(int mapId, int finishTime, int progress, int rank)
		{
			this.mapId = mapId;
			this.finishTime = finishTime;
			this.progress = progress;
			this.rank = rank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			finishTime = is.popInteger();
			progress = is.popInteger();
			rank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(finishTime);
			os.pushInteger(progress);
			os.pushInteger(rank);
		}

		@Override
		public String getPacketName()
		{
			return "sect_group_map_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			finishTime = is.popInteger();
			progress = is.popInteger();
			rank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(finishTime);
			os.pushInteger(progress);
			os.pushInteger(rank);
		}

		public int mapId;
		public int finishTime;
		public int progress;
		public int rank;
	}

	// 神兵技能升级请求
	public static class weapon_skill_level_up_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_skill_level_up_res() { }

		public weapon_skill_level_up_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_skill_level_up_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 神兵天赋升级请求
	public static class weapon_talent_level_up_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_talent_level_up_res() { }

		public weapon_talent_level_up_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_talent_level_up_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 神兵天赋点购买请求
	public static class weapon_talent_point_buy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_talent_point_buy_res() { }

		public weapon_talent_point_buy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_talent_point_buy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 神兵天赋点重置请求
	public static class weapon_talent_point_reset_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_talent_point_reset_res() { }

		public weapon_talent_point_reset_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_talent_point_reset_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 发送礼物请求
	public static class send_gift_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public send_gift_res() { }

		public send_gift_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "send_gift_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 打开地图同步旗帜信息
	public static class sync_big_map_flag_info_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_big_map_flag_info_res() { }

		public sync_big_map_flag_info_res(Map<Integer, MapFlagInfo> flags)
		{
			this.flags = flags;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			flags = is.popIntegerTreeMap(MapFlagInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(flags);
		}

		@Override
		public String getPacketName()
		{
			return "sync_big_map_flag_info_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			flags = is.popIntegerTreeMap(MapFlagInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(flags);
		}

		public Map<Integer, MapFlagInfo> flags;
	}

	// 同步地图旗帜信息
	public static class map_flag_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public map_flag_info() { }

		public map_flag_info(MapFlagSectOverView sect)
		{
			this.sect = sect;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( sect == null )
				sect = new MapFlagSectOverView();
			is.pop(sect);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(sect);
		}

		@Override
		public String getPacketName()
		{
			return "map_flag_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sect = is.pop(MapFlagSectOverView.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(sect);
		}

		public MapFlagSectOverView sect;
	}

	// 地图旗帜信息变更
	public static class map_flag_sect_change implements Stream.IStreamable, SStream.IStrPacket
	{

		public map_flag_sect_change() { }

		public map_flag_sect_change(MapFlagSectOverView sect)
		{
			this.sect = sect;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( sect == null )
				sect = new MapFlagSectOverView();
			is.pop(sect);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(sect);
		}

		@Override
		public String getPacketName()
		{
			return "map_flag_sect_change";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sect = is.pop(MapFlagSectOverView.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(sect);
		}

		public MapFlagSectOverView sect;
	}

	// 同步角色道具添加属性
	public static class role_item_props implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_item_props() { }

		public role_item_props(Map<Integer, Integer> itemProps)
		{
			this.itemProps = itemProps;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemProps = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(itemProps);
		}

		@Override
		public String getPacketName()
		{
			return "role_item_props";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemProps = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(itemProps);
		}

		public Map<Integer, Integer> itemProps;
	}

	// 同步角色限制使用物品历史使用次数
	public static class role_life_use implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_life_use() { }

		public role_life_use(Map<Integer, Integer> lifeUse)
		{
			this.lifeUse = lifeUse;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lifeUse = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(lifeUse);
		}

		@Override
		public String getPacketName()
		{
			return "role_life_use";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			lifeUse = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(lifeUse);
		}

		public Map<Integer, Integer> lifeUse;
	}

	// 随从技能升级请求
	public static class pet_skill_level_up_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_skill_level_up_res() { }

		public pet_skill_level_up_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "pet_skill_level_up_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步特权卡配置请求
	public static class sync_special_card_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_special_card_res() { }

		public sync_special_card_res(int id, PayLevelInfo info)
		{
			this.id = id;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( info == null )
				info = new PayLevelInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "sync_special_card_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			info = is.pop(PayLevelInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(info);
		}

		public int id;
		public PayLevelInfo info;
	}

	// 领取特权卡奖励请求
	public static class take_special_card_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public take_special_card_reward_res() { }

		public take_special_card_reward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "take_special_card_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步每日体力奖励请求
	public static class sync_daily_vit_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_daily_vit_reward_res() { }

		public sync_daily_vit_reward_res(Set<Integer> reward)
		{
			this.reward = reward;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(reward);
		}

		@Override
		public String getPacketName()
		{
			return "sync_daily_vit_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			reward = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(reward);
		}

		public Set<Integer> reward;
	}

	// 领取每日体力奖励请求
	public static class take_daily_vit_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public take_daily_vit_reward_res() { }

		public take_daily_vit_reward_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "take_daily_vit_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 神兵熟练度冒字使用
	public static class role_weapon_master implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_weapon_master() { }

		public role_weapon_master(int master)
		{
			this.master = master;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			master = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(master);
		}

		@Override
		public String getPacketName()
		{
			return "role_weapon_master";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			master = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(master);
		}

		public int master;
	}

	// 同步角色活动本当前进度
	public static class role_activity_map_cur_process implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_activity_map_cur_process() { }

		public role_activity_map_cur_process(int process)
		{
			this.process = process;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			process = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(process);
		}

		@Override
		public String getPacketName()
		{
			return "role_activity_map_cur_process";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			process = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(process);
		}

		public int process;
	}

	// 同步角色名望等级
	public static class role_fame_level implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_fame_level() { }

		public role_fame_level(int fameLevel)
		{
			this.fameLevel = fameLevel;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fameLevel = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(fameLevel);
		}

		@Override
		public String getPacketName()
		{
			return "role_fame_level";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			fameLevel = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(fameLevel);
		}

		public int fameLevel;
	}

	// 开启洞察请求
	public static class try_open_insight_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public try_open_insight_res() { }

		public try_open_insight_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "try_open_insight_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 开启寻仇请求
	public static class try_open_revenge_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public try_open_revenge_res() { }

		public try_open_revenge_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "try_open_revenge_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步洞察请求
	public static class try_sync_insight_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public try_sync_insight_res() { }

		public try_sync_insight_res(DBInsightData data)
		{
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( data == null )
				data = new DBInsightData();
			is.pop(data);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(data);
		}

		@Override
		public String getPacketName()
		{
			return "try_sync_insight_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			data = is.pop(DBInsightData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(data);
		}

		public DBInsightData data;
	}

	// 同步寻仇请求
	public static class try_sync_revenge_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public try_sync_revenge_res() { }

		public try_sync_revenge_res(DBRevengeData data)
		{
			this.data = data;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( data == null )
				data = new DBRevengeData();
			is.pop(data);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(data);
		}

		@Override
		public String getPacketName()
		{
			return "try_sync_revenge_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			data = is.pop(DBRevengeData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(data);
		}

		public DBRevengeData data;
	}

	// 传送至洞察目标请求
	public static class try_transform_insight_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public try_transform_insight_res() { }

		public try_transform_insight_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "try_transform_insight_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 传送至寻仇目标请求
	public static class try_transform_revenge_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public try_transform_revenge_res() { }

		public try_transform_revenge_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "try_transform_revenge_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 传家宝擦拭请求
	public static class heirloom_wipe_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public heirloom_wipe_res() { }

		public heirloom_wipe_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "heirloom_wipe_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 传家宝取出请求
	public static class heirloom_takeout_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public heirloom_takeout_res() { }

		public heirloom_takeout_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "heirloom_takeout_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步传家宝信息
	public static class role_heirloom_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_heirloom_info() { }

		public role_heirloom_info(DBHeirloom heirloom)
		{
			this.heirloom = heirloom;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( heirloom == null )
				heirloom = new DBHeirloom();
			is.pop(heirloom);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(heirloom);
		}

		@Override
		public String getPacketName()
		{
			return "role_heirloom_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			heirloom = is.pop(DBHeirloom.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(heirloom);
		}

		public DBHeirloom heirloom;
	}

	// 购买离线精灵修炼点请求
	public static class buy_offline_func_point_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public buy_offline_func_point_res() { }

		public buy_offline_func_point_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "buy_offline_func_point_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 离线精灵同步协议
	public static class role_offline_wizard implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_offline_wizard() { }

		public role_offline_wizard(DBOfflineWizard offlineWizard)
		{
			this.offlineWizard = offlineWizard;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( offlineWizard == null )
				offlineWizard = new DBOfflineWizard();
			is.pop(offlineWizard);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(offlineWizard);
		}

		@Override
		public String getPacketName()
		{
			return "role_offline_wizard";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			offlineWizard = is.pop(DBOfflineWizard.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(offlineWizard);
		}

		public DBOfflineWizard offlineWizard;
	}

	// 设置帮派QQ群请求
	public static class set_sect_qqgroup_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public set_sect_qqgroup_res() { }

		public set_sect_qqgroup_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "set_sect_qqgroup_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 设置角色等级经验
	public static class role_level_exp implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_level_exp() { }

		public role_level_exp(int level, long exp)
		{
			this.level = level;
			this.exp = exp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
			exp = is.popLong();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
			os.pushLong(exp);
		}

		@Override
		public String getPacketName()
		{
			return "role_level_exp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			level = is.popInteger();
			exp = is.popLong();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(level);
			os.pushLong(exp);
		}

		public int level;
		public long exp;
	}

	// 设置传家宝外观显示请求
	public static class set_heirloom_display_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public set_heirloom_display_res() { }

		public set_heirloom_display_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "set_heirloom_display_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 武勋商城同步协议
	public static class feat_gambleshopsync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public feat_gambleshopsync_res() { }

		public feat_gambleshopsync_res(GambleShopInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new GambleShopInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "feat_gambleshopsync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(GambleShopInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public GambleShopInfo info;
	}

	// 武勋商城刷新协议
	public static class feat_gambleshoprefresh_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public feat_gambleshoprefresh_res() { }

		public feat_gambleshoprefresh_res(GambleShopInfo info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new GambleShopInfo();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "feat_gambleshoprefresh_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(GambleShopInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public GambleShopInfo info;
	}

	// 武勋商城买商品协议
	public static class feat_gambleshopbuy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public feat_gambleshopbuy_res() { }

		public feat_gambleshopbuy_res(List<DummyGoods> ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(ok);
		}

		@Override
		public String getPacketName()
		{
			return "feat_gambleshopbuy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(ok);
		}

		public List<DummyGoods> ok;
	}

	// 添加结婚预约协议
	public static class add_marriage_bespeak_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public add_marriage_bespeak_res() { }

		public add_marriage_bespeak_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "add_marriage_bespeak_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步结婚预约协议
	public static class sync_marriage_bespeak_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_marriage_bespeak_res() { }

		public sync_marriage_bespeak_res(List<DBMarriageBespeak> bespeaks)
		{
			this.bespeaks = bespeaks;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bespeaks = is.popList(DBMarriageBespeak.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(bespeaks);
		}

		@Override
		public String getPacketName()
		{
			return "sync_marriage_bespeak_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bespeaks = is.popList(DBMarriageBespeak.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(bespeaks);
		}

		public List<DBMarriageBespeak> bespeaks;
	}

	// 登陆同步自己的结婚预定时间
	public static class role_marriage_bespeak_time implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_marriage_bespeak_time() { }

		public role_marriage_bespeak_time(int timeIndex)
		{
			this.timeIndex = timeIndex;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			timeIndex = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(timeIndex);
		}

		@Override
		public String getPacketName()
		{
			return "role_marriage_bespeak_time";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			timeIndex = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(timeIndex);
		}

		public int timeIndex;
	}

	// 有角色在当前地图结婚
	public static class role_marriage_here implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_marriage_here() { }

		public role_marriage_here(int grade, int mapId, int line)
		{
			this.grade = grade;
			this.mapId = mapId;
			this.line = line;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			grade = is.popInteger();
			mapId = is.popInteger();
			line = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(grade);
			os.pushInteger(mapId);
			os.pushInteger(line);
		}

		@Override
		public String getPacketName()
		{
			return "role_marriage_here";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			grade = is.popInteger();
			mapId = is.popInteger();
			line = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(grade);
			os.pushInteger(mapId);
			os.pushInteger(line);
		}

		public int grade;
		public int mapId;
		public int line;
	}

	// 同步角色结婚对象名称
	public static class role_marriage_partner_name implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_marriage_partner_name() { }

		public role_marriage_partner_name(String name)
		{
			this.name = name;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			name = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(name);
		}

		@Override
		public String getPacketName()
		{
			return "role_marriage_partner_name";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			name = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(name);
		}

		public String name;
	}

	// 角色调研红点
	public static class role_survey_notice implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_survey_notice() { }

		public role_survey_notice(int canOperate)
		{
			this.canOperate = canOperate;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			canOperate = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(canOperate);
		}

		@Override
		public String getPacketName()
		{
			return "role_survey_notice";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			canOperate = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(canOperate);
		}

		public int canOperate;
	}

	// 基础物品快速购买协议
	public static class base_dummygoods_quick_buy_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public base_dummygoods_quick_buy_res() { }

		public base_dummygoods_quick_buy_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "base_dummygoods_quick_buy_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 结婚步骤同步
	public static class role_marriage_step implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_marriage_step() { }

		public role_marriage_step(int step)
		{
			this.step = step;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			step = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(step);
		}

		@Override
		public String getPacketName()
		{
			return "role_marriage_step";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			step = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(step);
		}

		public int step;
	}

	// 结婚步骤同步
	public static class sect_history_broadcast implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_history_broadcast() { }

		public sect_history_broadcast(DBSectHistory historyDetial)
		{
			this.historyDetial = historyDetial;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( historyDetial == null )
				historyDetial = new DBSectHistory();
			is.pop(historyDetial);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(historyDetial);
		}

		@Override
		public String getPacketName()
		{
			return "sect_history_broadcast";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			historyDetial = is.pop(DBSectHistory.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(historyDetial);
		}

		public DBSectHistory historyDetial;
	}

	// 活动补做协议
	public static class activity_last_quick_done_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public activity_last_quick_done_res() { }

		public activity_last_quick_done_res(int ok, MapRewards rewards)
		{
			this.ok = ok;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( rewards == null )
				rewards = new MapRewards();
			is.pop(rewards);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(rewards);
		}

		@Override
		public String getPacketName()
		{
			return "activity_last_quick_done_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			rewards = is.pop(MapRewards.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(rewards);
		}

		public int ok;
		public MapRewards rewards;
	}

	// 登陆同步补做信息
	public static class role_activity_last implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_activity_last() { }

		public role_activity_last(DBActivityLastData info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new DBActivityLastData();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "role_activity_last";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(DBActivityLastData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public DBActivityLastData info;
	}

	// 打开太玄碑文同步信息(index: 当前第几个碑文)
	public static class stele_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public stele_sync_res() { }

		public stele_sync_res(int type, List<Integer> remainTimes, DBRoleStele info)
		{
			this.type = type;
			this.remainTimes = remainTimes;
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			remainTimes = is.popIntegerList();
			if( info == null )
				info = new DBRoleStele();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushIntegerList(remainTimes);
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "stele_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			remainTimes = is.popIntegerList();
			info = is.pop(DBRoleStele.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushIntegerList(remainTimes);
			os.push(info);
		}

		public int type;
		public List<Integer> remainTimes;
		public DBRoleStele info;
	}

	// 参加活动
	public static class stele_join_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public stele_join_res() { }

		public stele_join_res(int receiveTime)
		{
			this.receiveTime = receiveTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(receiveTime);
		}

		@Override
		public String getPacketName()
		{
			return "stele_join_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			receiveTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(receiveTime);
		}

		public int receiveTime;
	}

	// 排行榜同步
	public static class stele_rank_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public stele_rank_res() { }

		public stele_rank_res(List<RankRole> ranks, int selfRank)
		{
			this.ranks = ranks;
			this.selfRank = selfRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ranks = is.popList(RankRole.class);
			selfRank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(ranks);
			os.pushInteger(selfRank);
		}

		@Override
		public String getPacketName()
		{
			return "stele_rank_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ranks = is.popList(RankRole.class);
			selfRank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(ranks);
			os.pushInteger(selfRank);
		}

		public List<RankRole> ranks;
		public int selfRank;
	}

	// 传送到太玄碑文
	public static class stele_teleport_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public stele_teleport_res() { }

		public stele_teleport_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "stele_teleport_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 登录时同步太玄碑文
	public static class role_stele implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_stele() { }

		public role_stele(int type, DBRoleStele info, byte canMineral)
		{
			this.type = type;
			this.info = info;
			this.canMineral = canMineral;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			if( info == null )
				info = new DBRoleStele();
			is.pop(info);
			canMineral = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.push(info);
			os.pushByte(canMineral);
		}

		@Override
		public String getPacketName()
		{
			return "role_stele";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			info = is.pop(DBRoleStele.class);
			canMineral = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.push(info);
			os.pushByte(canMineral);
		}

		public int type;
		public DBRoleStele info;
		public byte canMineral;
	}

	// 更新太玄碑文拓片数量
	public static class role_stele_card implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_stele_card() { }

		public role_stele_card(int card)
		{
			this.card = card;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			card = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(card);
		}

		@Override
		public String getPacketName()
		{
			return "role_stele_card";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			card = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(card);
		}

		public int card;
	}

	// 添加黑名单
	public static class blacklist_add_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public blacklist_add_res() { }

		public blacklist_add_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "blacklist_add_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 删除黑名单
	public static class blacklist_del_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public blacklist_del_res() { }

		public blacklist_del_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "blacklist_del_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步黑名单
	public static class blacklist_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public blacklist_sync_res() { }

		public blacklist_sync_res(Map<Integer, RoleOverview> overviews, Map<Integer, Integer> addTimes)
		{
			this.overviews = overviews;
			this.addTimes = addTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			overviews = is.popIntegerTreeMap(RoleOverview.class);
			addTimes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(overviews);
			os.pushIntegerIntegerMap(addTimes);
		}

		@Override
		public String getPacketName()
		{
			return "blacklist_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			overviews = is.popIntegerTreeMap(RoleOverview.class);
			addTimes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(overviews);
			os.pushIntegerIntegerMap(addTimes);
		}

		public Map<Integer, RoleOverview> overviews;
		public Map<Integer, Integer> addTimes;
	}

	// 登陆同步黑名单
	public static class role_blacklist implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_blacklist() { }

		public role_blacklist(Set<Integer> blacklist)
		{
			this.blacklist = blacklist;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			blacklist = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(blacklist);
		}

		@Override
		public String getPacketName()
		{
			return "role_blacklist";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			blacklist = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(blacklist);
		}

		public Set<Integer> blacklist;
	}

	// 同步伏魔洞信息
	public static class demonhole_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public demonhole_sync_res() { }

		public demonhole_sync_res(int curFloor, int dayEnterTimes)
		{
			this.curFloor = curFloor;
			this.dayEnterTimes = dayEnterTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curFloor = is.popInteger();
			dayEnterTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curFloor);
			os.pushInteger(dayEnterTimes);
		}

		@Override
		public String getPacketName()
		{
			return "demonhole_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curFloor = is.popInteger();
			dayEnterTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(curFloor);
			os.pushInteger(dayEnterTimes);
		}

		public int curFloor;
		public int dayEnterTimes;
	}

	// 参加伏魔洞
	public static class demonhole_join_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public demonhole_join_res() { }

		public demonhole_join_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "demonhole_join_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 进入下一层或上一层
	public static class demonhole_changefloor_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public demonhole_changefloor_res() { }

		public demonhole_changefloor_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "demonhole_changefloor_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 战况界面
	public static class demonhole_battle_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public demonhole_battle_res() { }

		public demonhole_battle_res(List<RoleDemonHole> curFloor, List<RoleDemonHole> total, int addExp)
		{
			this.curFloor = curFloor;
			this.total = total;
			this.addExp = addExp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curFloor = is.popList(RoleDemonHole.class);
			total = is.popList(RoleDemonHole.class);
			addExp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(curFloor);
			os.pushList(total);
			os.pushInteger(addExp);
		}

		@Override
		public String getPacketName()
		{
			return "demonhole_battle_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curFloor = is.popList(RoleDemonHole.class);
			total = is.popList(RoleDemonHole.class);
			addExp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(curFloor);
			os.pushList(total);
			os.pushInteger(addExp);
		}

		public List<RoleDemonHole> curFloor;
		public List<RoleDemonHole> total;
		public int addExp;
	}

	// 通知客户端伏魔洞开始
	public static class role_demonhole_start implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_demonhole_start() { }

		public role_demonhole_start(int firstEnter)
		{
			this.firstEnter = firstEnter;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			firstEnter = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(firstEnter);
		}

		@Override
		public String getPacketName()
		{
			return "role_demonhole_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			firstEnter = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(firstEnter);
		}

		public int firstEnter;
	}

	// 通知客户端伏魔洞结束
	public static class role_demonhole_end implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_demonhole_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	public static class role_demonholemap_sync implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_demonholemap_sync() { }

		public role_demonholemap_sync(int curFloor, int grade, int startTime)
		{
			this.curFloor = curFloor;
			this.grade = grade;
			this.startTime = startTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curFloor = is.popInteger();
			grade = is.popInteger();
			startTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curFloor);
			os.pushInteger(grade);
			os.pushInteger(startTime);
		}

		@Override
		public String getPacketName()
		{
			return "role_demonholemap_sync";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curFloor = is.popInteger();
			grade = is.popInteger();
			startTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(curFloor);
			os.pushInteger(grade);
			os.pushInteger(startTime);
		}

		public int curFloor;
		public int grade;
		public int startTime;
	}

	// 伏魔洞战报界面
	public static class role_demonhole_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_demonhole_result() { }

		public role_demonhole_result(List<RoleDemonHole> curFloor, List<RoleDemonHole> total, int addExp)
		{
			this.curFloor = curFloor;
			this.total = total;
			this.addExp = addExp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curFloor = is.popList(RoleDemonHole.class);
			total = is.popList(RoleDemonHole.class);
			addExp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(curFloor);
			os.pushList(total);
			os.pushInteger(addExp);
		}

		@Override
		public String getPacketName()
		{
			return "role_demonhole_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curFloor = is.popList(RoleDemonHole.class);
			total = is.popList(RoleDemonHole.class);
			addExp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(curFloor);
			os.pushList(total);
			os.pushInteger(addExp);
		}

		public List<RoleDemonHole> curFloor;
		public List<RoleDemonHole> total;
		public int addExp;
	}

	// 开始进入正义之心副本请求
	public static class justicemap_start_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public justicemap_start_res() { }

		public justicemap_start_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "justicemap_start_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 登陆同步正义之心副本进入次数
	public static class justicemap_day_enter_time implements Stream.IStreamable, SStream.IStrPacket
	{

		public justicemap_day_enter_time() { }

		public justicemap_day_enter_time(int dayJusticeEnterTimes)
		{
			this.dayJusticeEnterTimes = dayJusticeEnterTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayJusticeEnterTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayJusticeEnterTimes);
		}

		@Override
		public String getPacketName()
		{
			return "justicemap_day_enter_time";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			dayJusticeEnterTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(dayJusticeEnterTimes);
		}

		public int dayJusticeEnterTimes;
	}

	// 打开江湖告急同步信息
	public static class emergency_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public emergency_sync_res() { }

		public emergency_sync_res(Map<Integer, EmergencyInfo> infos)
		{
			this.infos = infos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			infos = is.popIntegerTreeMap(EmergencyInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(infos);
		}

		@Override
		public String getPacketName()
		{
			return "emergency_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			infos = is.popIntegerTreeMap(EmergencyInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(infos);
		}

		public Map<Integer, EmergencyInfo> infos;
	}

	// 进入江湖告急副本
	public static class emergency_enter_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public emergency_enter_res() { }

		public emergency_enter_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "emergency_enter_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 排行榜同步
	public static class emergency_rank_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public emergency_rank_res() { }

		public emergency_rank_res(List<RankRole> ranks, int selfRank)
		{
			this.ranks = ranks;
			this.selfRank = selfRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ranks = is.popList(RankRole.class);
			selfRank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(ranks);
			os.pushInteger(selfRank);
		}

		@Override
		public String getPacketName()
		{
			return "emergency_rank_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ranks = is.popList(RankRole.class);
			selfRank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(ranks);
			os.pushInteger(selfRank);
		}

		public List<RankRole> ranks;
		public int selfRank;
	}

	// 同步当前声望
	public static class sync_prestige_num implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_prestige_num() { }

		public sync_prestige_num(int prestige)
		{
			this.prestige = prestige;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			prestige = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(prestige);
		}

		@Override
		public String getPacketName()
		{
			return "sync_prestige_num";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			prestige = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(prestige);
		}

		public int prestige;
	}

	// 江湖告急副本关闭推送
	public static class role_emergency_map_end implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_emergency_map_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 幸运星同步
	public static class lucklystar_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public lucklystar_sync_res() { }

		public lucklystar_sync_res(DBLucklyStar info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new DBLucklyStar();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "lucklystar_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(DBLucklyStar.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public DBLucklyStar info;
	}

	// 幸运星赠送
	public static class lucklystar_gift_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public lucklystar_gift_res() { }

		public lucklystar_gift_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "lucklystar_gift_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 幸运星推送
	public static class lucklystar_push implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "lucklystar_push";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 收到幸运星推送
	public static class recv_lucnlystar_by_role implements Stream.IStreamable, SStream.IStrPacket
	{

		public recv_lucnlystar_by_role() { }

		public recv_lucnlystar_by_role(String name)
		{
			this.name = name;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			name = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(name);
		}

		@Override
		public String getPacketName()
		{
			return "recv_lucnlystar_by_role";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			name = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(name);
		}

		public String name;
	}

	// 开始挑战
	public static class fightnpc_start_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public fightnpc_start_res() { }

		public fightnpc_start_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "fightnpc_start_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 领取奖励
	public static class fightnpc_reward_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public fightnpc_reward_res() { }

		public fightnpc_reward_res(int coolTime)
		{
			this.coolTime = coolTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			coolTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(coolTime);
		}

		@Override
		public String getPacketName()
		{
			return "fightnpc_reward_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			coolTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(coolTime);
		}

		public int coolTime;
	}

	// 登录时同步约战NPC信息
	public static class role_fightnpc implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_fightnpc() { }

		public role_fightnpc(DBFightNpc info)
		{
			this.info = info;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( info == null )
				info = new DBFightNpc();
			is.pop(info);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(info);
		}

		@Override
		public String getPacketName()
		{
			return "role_fightnpc";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			info = is.pop(DBFightNpc.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(info);
		}

		public DBFightNpc info;
	}

	// 副本开始
	public static class role_fightnpcmap_start implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_fightnpcmap_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 副本结束
	public static class role_fightnpcmap_end implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_fightnpcmap_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 副本结果
	public static class role_fightnpcmap_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_fightnpcmap_result() { }

		public role_fightnpcmap_result(int curIndex, int win)
		{
			this.curIndex = curIndex;
			this.win = win;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curIndex = is.popInteger();
			win = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curIndex);
			os.pushInteger(win);
		}

		@Override
		public String getPacketName()
		{
			return "role_fightnpcmap_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curIndex = is.popInteger();
			win = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(curIndex);
			os.pushInteger(win);
		}

		public int curIndex;
		public int win;
	}

	// 分包奖励领取同步协议
	public static class packetreward_sync_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public packetreward_sync_res() { }

		public packetreward_sync_res(int curIndex)
		{
			this.curIndex = curIndex;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curIndex = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curIndex);
		}

		@Override
		public String getPacketName()
		{
			return "packetreward_sync_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curIndex = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(curIndex);
		}

		public int curIndex;
	}

	// 分包奖励领取协议
	public static class packetreward_take_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public packetreward_take_res() { }

		public packetreward_take_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "packetreward_take_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 坐骑解锁洗练属性
	public static class horse_enhance_prop_unlock_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_enhance_prop_unlock_res() { }

		public horse_enhance_prop_unlock_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "horse_enhance_prop_unlock_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步当前休闲宠物
	public static class role_cur_wizard_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_cur_wizard_pet() { }

		public role_cur_wizard_pet(int petId)
		{
			this.petId = petId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
		}

		@Override
		public String getPacketName()
		{
			return "role_cur_wizard_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
		}

		public int petId;
	}

	// 购买休闲宠物时间
	public static class buy_wizard_pet_time_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public buy_wizard_pet_time_res() { }

		public buy_wizard_pet_time_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "buy_wizard_pet_time_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 设置当前休闲宠物
	public static class set_cur_wizard_pet_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public set_cur_wizard_pet_res() { }

		public set_cur_wizard_pet_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "set_cur_wizard_pet_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步当前已解锁头像
	public static class sync_item_unlock_head_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_item_unlock_head_res() { }

		public sync_item_unlock_head_res(Set<Integer> unlockHeads)
		{
			this.unlockHeads = unlockHeads;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			unlockHeads = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(unlockHeads);
		}

		@Override
		public String getPacketName()
		{
			return "sync_item_unlock_head_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			unlockHeads = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(unlockHeads);
		}

		public Set<Integer> unlockHeads;
	}

	// 宠物，神兵评价
	public static class socialmsg_send_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public socialmsg_send_res() { }

		public socialmsg_send_res(int commonId)
		{
			this.commonId = commonId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			commonId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(commonId);
		}

		@Override
		public String getPacketName()
		{
			return "socialmsg_send_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			commonId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(commonId);
		}

		public int commonId;
	}

	// 点赞
	public static class socialmsg_like_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public socialmsg_like_res() { }

		public socialmsg_like_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "socialmsg_like_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 鄙视
	public static class socialmsg_dislike_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public socialmsg_dislike_res() { }

		public socialmsg_dislike_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "socialmsg_dislike_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	public static class socialmsg_pageinfo_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public socialmsg_pageinfo_res() { }

		public socialmsg_pageinfo_res(List<SocialComment> comments)
		{
			this.comments = comments;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			comments = is.popList(SocialComment.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(comments);
		}

		@Override
		public String getPacketName()
		{
			return "socialmsg_pageinfo_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			comments = is.popList(SocialComment.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(comments);
		}

		public List<SocialComment> comments;
	}

	// npc传送功能
	public static class npc_transfrom_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public npc_transfrom_res() { }

		public npc_transfrom_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "npc_transfrom_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 物品解锁头像
	public static class unlock_head_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public unlock_head_res() { }

		public unlock_head_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "unlock_head_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 开始挑战
	public static class towerdefence_start_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public towerdefence_start_res() { }

		public towerdefence_start_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "towerdefence_start_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 手动翻牌抽奖回应
	public static class towerdefence_selectcard_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public towerdefence_selectcard_res() { }

		public towerdefence_selectcard_res(DummyGoods item)
		{
			this.item = item;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( item == null )
				item = new DummyGoods();
			is.pop(item);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(item);
		}

		@Override
		public String getPacketName()
		{
			return "towerdefence_selectcard_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			item = is.pop(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(item);
		}

		public DummyGoods item;
	}

	// 自动翻牌抽奖
	public static class role_towerdefence_autocard implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_towerdefence_autocard() { }

		public role_towerdefence_autocard(DummyGoods item)
		{
			this.item = item;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( item == null )
				item = new DummyGoods();
			is.pop(item);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(item);
		}

		@Override
		public String getPacketName()
		{
			return "role_towerdefence_autocard";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			item = is.pop(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(item);
		}

		public DummyGoods item;
	}

	// 副本开始
	public static class role_towerdefence_start implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_towerdefence_start() { }

		public role_towerdefence_start(int mapID)
		{
			this.mapID = mapID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapID);
		}

		@Override
		public String getPacketName()
		{
			return "role_towerdefence_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapID);
		}

		public int mapID;
	}

	// 副本结束
	public static class role_towerdefence_end implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_towerdefence_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 副本结果
	public static class role_towerdefence_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_towerdefence_result() { }

		public role_towerdefence_result(int score, int count, int useTime, MapRewards rewards)
		{
			this.score = score;
			this.count = count;
			this.useTime = useTime;
			this.rewards = rewards;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			score = is.popInteger();
			count = is.popInteger();
			useTime = is.popInteger();
			if( rewards == null )
				rewards = new MapRewards();
			is.pop(rewards);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(score);
			os.pushInteger(count);
			os.pushInteger(useTime);
			os.push(rewards);
		}

		@Override
		public String getPacketName()
		{
			return "role_towerdefence_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			score = is.popInteger();
			count = is.popInteger();
			useTime = is.popInteger();
			rewards = is.pop(MapRewards.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(score);
			os.pushInteger(count);
			os.pushInteger(useTime);
			os.push(rewards);
		}

		public int score;
		public int count;
		public int useTime;
		public MapRewards rewards;
	}

	// 同步守护副本信息
	public static class role_towerdefence_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_towerdefence_info() { }

		public role_towerdefence_info(int score, int count)
		{
			this.score = score;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			score = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(score);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "role_towerdefence_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			score = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(score);
			os.pushInteger(count);
		}

		public int score;
		public int count;
	}

	// 开始NPC副本
	public static class start_npc_map_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public start_npc_map_res() { }

		public start_npc_map_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "start_npc_map_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 同步NPC副本次数
	public static class role_day_npc_map_times implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_day_npc_map_times() { }

		public role_day_npc_map_times(Map<Integer, Integer> times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(times);
		}

		@Override
		public String getPacketName()
		{
			return "role_day_npc_map_times";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(times);
		}

		public Map<Integer, Integer> times;
	}

	// 参与NPC祈福
	public static class join_npc_pray_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public join_npc_pray_res() { }

		public join_npc_pray_res(int ok, DummyGoods drop)
		{
			this.ok = ok;
			this.drop = drop;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
			if( drop == null )
				drop = new DummyGoods();
			is.pop(drop);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
			os.push(drop);
		}

		@Override
		public String getPacketName()
		{
			return "join_npc_pray_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
			drop = is.pop(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
			os.push(drop);
		}

		public int ok;
		public DummyGoods drop;
	}

	// 同步NPC祈福次数
	public static class role_day_npc_pray_times implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_day_npc_pray_times() { }

		public role_day_npc_pray_times(Map<Integer, Integer> times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(times);
		}

		@Override
		public String getPacketName()
		{
			return "role_day_npc_pray_times";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(times);
		}

		public Map<Integer, Integer> times;
	}

	// 解锁私人仓库
	public static class unlock_private_warehouse_res implements Stream.IStreamable, SStream.IStrPacket
	{

		public unlock_private_warehouse_res() { }

		public unlock_private_warehouse_res(int ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ok);
		}

		@Override
		public String getPacketName()
		{
			return "unlock_private_warehouse_res";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ok);
		}

		public int ok;
	}

	// 通知客户端显示map服务器属性，用于调试
	public static class role_show_props implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_show_props() { }

		public role_show_props(Map<Integer, Integer> props)
		{
			this.props = props;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			props = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(props);
		}

		@Override
		public String getPacketName()
		{
			return "role_show_props";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			props = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(props);
		}

		public Map<Integer, Integer> props;
	}

	// 开始进入地图
	public static class role_map_welcome_start implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_map_welcome_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 进入地图成功，对应role_enter_map的异步响应
	public static class role_map_welcome implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_map_welcome() { }

		public role_map_welcome(int curHP, int curSP, int isDead, int fightSP, 
		                        Map<Integer, CBuff> buffs, int attackMode, int pkNameGrade, int pkState, 
		                        Map<Integer, FightPet> pets, PetHost petHost, TimeTick timeTick)
		{
			this.curHP = curHP;
			this.curSP = curSP;
			this.isDead = isDead;
			this.fightSP = fightSP;
			this.buffs = buffs;
			this.attackMode = attackMode;
			this.pkNameGrade = pkNameGrade;
			this.pkState = pkState;
			this.pets = pets;
			this.petHost = petHost;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curHP = is.popInteger();
			curSP = is.popInteger();
			isDead = is.popInteger();
			fightSP = is.popInteger();
			buffs = is.popIntegerTreeMap(CBuff.class);
			attackMode = is.popInteger();
			pkNameGrade = is.popInteger();
			pkState = is.popInteger();
			pets = is.popIntegerTreeMap(FightPet.class);
			if( petHost == null )
				petHost = new PetHost();
			is.pop(petHost);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curHP);
			os.pushInteger(curSP);
			os.pushInteger(isDead);
			os.pushInteger(fightSP);
			os.pushIntegerMap(buffs);
			os.pushInteger(attackMode);
			os.pushInteger(pkNameGrade);
			os.pushInteger(pkState);
			os.pushIntegerMap(pets);
			os.push(petHost);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_map_welcome";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curHP = is.popInteger();
			curSP = is.popInteger();
			isDead = is.popInteger();
			fightSP = is.popInteger();
			buffs = is.popIntegerTreeMap(CBuff.class);
			attackMode = is.popInteger();
			pkNameGrade = is.popInteger();
			pkState = is.popInteger();
			pets = is.popIntegerTreeMap(FightPet.class);
			petHost = is.pop(PetHost.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(curHP);
			os.pushInteger(curSP);
			os.pushInteger(isDead);
			os.pushInteger(fightSP);
			os.pushIntegerMap(buffs);
			os.pushInteger(attackMode);
			os.pushInteger(pkNameGrade);
			os.pushInteger(pkState);
			os.pushIntegerMap(pets);
			os.push(petHost);
			os.push(timeTick);
		}

		public int curHP;
		public int curSP;
		public int isDead;
		public int fightSP;
		public Map<Integer, CBuff> buffs;
		public int attackMode;
		public int pkNameGrade;
		public int pkState;
		public Map<Integer, FightPet> pets;
		public PetHost petHost;
		public TimeTick timeTick;
	}

	// 进地图同步玩家技能CD(key: skillID, value: 剩余多少ms结束)
	public static class role_skills_cooldown implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_skills_cooldown() { }

		public role_skills_cooldown(Map<Integer, Integer> cds)
		{
			this.cds = cds;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cds = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(cds);
		}

		@Override
		public String getPacketName()
		{
			return "role_skills_cooldown";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cds = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(cds);
		}

		public Map<Integer, Integer> cds;
	}

	// 进地图同步玩家在第几个出生点
	public static class role_spawn_point implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_spawn_point() { }

		public role_spawn_point(int index)
		{
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "role_spawn_point";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(index);
		}

		public int index;
	}

	// map同步神兵变身剩余时间
	public static class role_weaponlefttime implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_weaponlefttime() { }

		public role_weaponlefttime(int leftTime)
		{
			this.leftTime = leftTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			leftTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(leftTime);
		}

		@Override
		public String getPacketName()
		{
			return "role_weaponlefttime";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			leftTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(leftTime);
		}

		public int leftTime;
	}

	// map同步当前的骑乘的坐骑
	public static class role_curridehorse implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_curridehorse() { }

		public role_curridehorse(int hid)
		{
			this.hid = hid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hid);
		}

		@Override
		public String getPacketName()
		{
			return "role_curridehorse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(hid);
		}

		public int hid;
	}

	// map同步任务变身状态
	public static class role_taskalter implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_taskalter() { }

		public role_taskalter(DBAlterState alter)
		{
			this.alter = alter;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( alter == null )
				alter = new DBAlterState();
			is.pop(alter);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(alter);
		}

		@Override
		public String getPacketName()
		{
			return "role_taskalter";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			alter = is.pop(DBAlterState.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(alter);
		}

		public DBAlterState alter;
	}

	// 进入身世副本同步变身的佣兵ID
	public static class role_petalter implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_petalter() { }

		public role_petalter(int pid)
		{
			this.pid = pid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pid);
		}

		@Override
		public String getPacketName()
		{
			return "role_petalter";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pid);
		}

		public int pid;
	}

	// 进入地图同步内甲信息
	public static class role_armor implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_armor() { }

		public role_armor(int armorVal, int freeze, int weak)
		{
			this.armorVal = armorVal;
			this.freeze = freeze;
			this.weak = weak;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			armorVal = is.popInteger();
			freeze = is.popInteger();
			weak = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(armorVal);
			os.pushInteger(freeze);
			os.pushInteger(weak);
		}

		@Override
		public String getPacketName()
		{
			return "role_armor";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			armorVal = is.popInteger();
			freeze = is.popInteger();
			weak = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(armorVal);
			os.pushInteger(freeze);
			os.pushInteger(weak);
		}

		public int armorVal;
		public int freeze;
		public int weak;
	}

	public static class role_escortcar implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_escortcar() { }

		public role_escortcar(EnterEscortCar car)
		{
			this.car = car;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( car == null )
				car = new EnterEscortCar();
			is.pop(car);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(car);
		}

		@Override
		public String getPacketName()
		{
			return "role_escortcar";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			car = is.pop(EnterEscortCar.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(car);
		}

		public EnterEscortCar car;
	}

	// 新郎、新娘进入map通知结婚游街信息
	public static class role_weddingcar implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_weddingcar() { }

		public role_weddingcar(EnterWeddingCar car)
		{
			this.car = car;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( car == null )
				car = new EnterWeddingCar();
			is.pop(car);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(car);
		}

		@Override
		public String getPacketName()
		{
			return "role_weddingcar";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			car = is.pop(EnterWeddingCar.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(car);
		}

		public EnterWeddingCar car;
	}

	// 通知新郎、新娘销毁镖车
	public static class role_weddingcar_destory implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_weddingcar_destory";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	public static class role_update_timetick implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_update_timetick() { }

		public role_update_timetick(TimeTick timeTick)
		{
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_update_timetick";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(timeTick);
		}

		public TimeTick timeTick;
	}

	// 计算延迟(客户端发起client_ping_start的服务器异步回应)
	public static class client_ping_end implements Stream.IStreamable, SStream.IStrPacket
	{

		public client_ping_end() { }

		public client_ping_end(TimeTick sendTimeTick, TimeTick recvTimeTick)
		{
			this.sendTimeTick = sendTimeTick;
			this.recvTimeTick = recvTimeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( sendTimeTick == null )
				sendTimeTick = new TimeTick();
			is.pop(sendTimeTick);
			if( recvTimeTick == null )
				recvTimeTick = new TimeTick();
			is.pop(recvTimeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(sendTimeTick);
			os.push(recvTimeTick);
		}

		@Override
		public String getPacketName()
		{
			return "client_ping_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sendTimeTick = is.pop(TimeTick.class);
			recvTimeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(sendTimeTick);
			os.push(recvTimeTick);
		}

		public TimeTick sendTimeTick;
		public TimeTick recvTimeTick;
	}

	// 玩家鬼魂状态
	public static class role_ghost implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_ghost";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 周围玩家穿时装
	public static class nearby_upwear_fashion implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_upwear_fashion() { }

		public nearby_upwear_fashion(int roleID, int type, int fashionID)
		{
			this.roleID = roleID;
			this.type = type;
			this.fashionID = fashionID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			type = is.popInteger();
			fashionID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(type);
			os.pushInteger(fashionID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_upwear_fashion";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			type = is.popInteger();
			fashionID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(type);
			os.pushInteger(fashionID);
		}

		public int roleID;
		public int type;
		public int fashionID;
	}

	// 周围玩家时装是否显示
	public static class nearby_set_fashionshow implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_set_fashionshow() { }

		public nearby_set_fashionshow(int roleID, int type, int isShow)
		{
			this.roleID = roleID;
			this.type = type;
			this.isShow = isShow;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			type = is.popInteger();
			isShow = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(type);
			os.pushInteger(isShow);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_set_fashionshow";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			type = is.popInteger();
			isShow = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(type);
			os.pushInteger(isShow);
		}

		public int roleID;
		public int type;
		public int isShow;
	}

	// 周围玩家设置当前称号(titleType 0:永久 大于0:时效  titleID 小于0: 卸载称号)
	public static class nearby_role_updatetitle implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_updatetitle() { }

		public nearby_role_updatetitle(int roleID, List<DBTitleSlot> titles)
		{
			this.roleID = roleID;
			this.titles = titles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			titles = is.popList(DBTitleSlot.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushList(titles);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_updatetitle";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			titles = is.popList(DBTitleSlot.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushList(titles);
		}

		public int roleID;
		public List<DBTitleSlot> titles;
	}

	// 周围玩家变身状态（任务变身）
	public static class nearby_role_alterstate implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_alterstate() { }

		public nearby_role_alterstate(int roleID, int alterID)
		{
			this.roleID = roleID;
			this.alterID = alterID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			alterID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(alterID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_alterstate";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			alterID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(alterID);
		}

		public int roleID;
		public int alterID;
	}

	// 周围玩家更换当前骑乘的坐骑
	public static class nearby_ride_horse implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_ride_horse() { }

		public nearby_ride_horse(int rid, int horseShowID)
		{
			this.rid = rid;
			this.horseShowID = horseShowID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			horseShowID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(horseShowID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_ride_horse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			horseShowID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(horseShowID);
		}

		public int rid;
		public int horseShowID;
	}

	// 周围玩家下马
	public static class nearby_unride_horse implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_unride_horse() { }

		public nearby_unride_horse(int rid)
		{
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_unride_horse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
		}

		public int rid;
	}

	// 附近玩家技能伤害结束（清除disattack状态）
	public static class nearby_role_endskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_endskill() { }

		public nearby_role_endskill(int rid, int skillID, TimeTick timeTick)
		{
			this.rid = rid;
			this.skillID = skillID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			skillID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_endskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			skillID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		public int rid;
		public int skillID;
		public TimeTick timeTick;
	}

	// 附近玩家技能结束（清除attack状态）
	public static class nearby_role_finishattack implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_finishattack() { }

		public nearby_role_finishattack(int rid, int skillID, TimeTick timeTick)
		{
			this.rid = rid;
			this.skillID = skillID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			skillID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_finishattack";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			skillID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		public int rid;
		public int skillID;
		public TimeTick timeTick;
	}

	// 附近佣兵技能伤害结束（清除disattack状态）
	public static class nearby_pet_endskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_endskill() { }

		public nearby_pet_endskill(int pid, int ownerID, int skillID, TimeTick timeTick)
		{
			this.pid = pid;
			this.ownerID = ownerID;
			this.skillID = skillID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pid = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pid);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_endskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pid = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pid);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		public int pid;
		public int ownerID;
		public int skillID;
		public TimeTick timeTick;
	}

	// 附近佣兵技能结束（清除attack状态）
	public static class nearby_pet_finishattack implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_finishattack() { }

		public nearby_pet_finishattack(int pid, int ownerID, int skillID, TimeTick timeTick)
		{
			this.pid = pid;
			this.ownerID = ownerID;
			this.skillID = skillID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pid = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pid);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_finishattack";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pid = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pid);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		public int pid;
		public int ownerID;
		public int skillID;
		public TimeTick timeTick;
	}

	// 附近怪物技能伤害结束（清除disattack状态）
	public static class nearby_monster_endskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_endskill() { }

		public nearby_monster_endskill(int mid, int skillID, TimeTick timeTick)
		{
			this.mid = mid;
			this.skillID = skillID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mid = is.popInteger();
			skillID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_endskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mid = is.popInteger();
			skillID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		public int mid;
		public int skillID;
		public TimeTick timeTick;
	}

	// 附近怪物技能结束（清除attack状态）
	public static class nearby_monster_finishattack implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_finishattack() { }

		public nearby_monster_finishattack(int mid, int skillID, TimeTick timeTick)
		{
			this.mid = mid;
			this.skillID = skillID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mid = is.popInteger();
			skillID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_finishattack";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mid = is.popInteger();
			skillID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		public int mid;
		public int skillID;
		public TimeTick timeTick;
	}

	// 附近残影技能伤害结束（清除disattack状态）
	public static class nearby_blur_endskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_endskill() { }

		public nearby_blur_endskill(int bid, int skillID, TimeTick timeTick)
		{
			this.bid = bid;
			this.skillID = skillID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bid = is.popInteger();
			skillID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_endskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bid = is.popInteger();
			skillID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		public int bid;
		public int skillID;
		public TimeTick timeTick;
	}

	// 附近残影技能结束（清除attack状态）
	public static class nearby_blur_finishattack implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_finishattack() { }

		public nearby_blur_finishattack(int bid, int skillID, TimeTick timeTick)
		{
			this.bid = bid;
			this.skillID = skillID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bid = is.popInteger();
			skillID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_finishattack";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bid = is.popInteger();
			skillID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		public int bid;
		public int skillID;
		public TimeTick timeTick;
	}

	// 附近法阵能伤害结束（清除disattack状态）
	public static class nearby_skillentity_endskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_skillentity_endskill() { }

		public nearby_skillentity_endskill(int sid, int skillID, TimeTick timeTick)
		{
			this.sid = sid;
			this.skillID = skillID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sid = is.popInteger();
			skillID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_skillentity_endskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sid = is.popInteger();
			skillID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(sid);
			os.pushInteger(skillID);
			os.push(timeTick);
		}

		public int sid;
		public int skillID;
		public TimeTick timeTick;
	}

	// 附近玩家技能被打断
	public static class nearby_role_breakskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_breakskill() { }

		public nearby_role_breakskill(int rid)
		{
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_breakskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
		}

		public int rid;
	}

	// 附近佣兵技能被打断
	public static class nearby_pet_breakskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_breakskill() { }

		public nearby_pet_breakskill(int rid, int pid)
		{
			this.rid = rid;
			this.pid = pid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			pid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(pid);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_breakskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			pid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(pid);
		}

		public int rid;
		public int pid;
	}

	// 附近怪物技能被打断
	public static class nearby_monster_breakskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_breakskill() { }

		public nearby_monster_breakskill(int mid)
		{
			this.mid = mid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mid);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_breakskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mid);
		}

		public int mid;
	}

	// 附近残影技能被打断
	public static class nearby_blur_breakskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_breakskill() { }

		public nearby_blur_breakskill(int bid)
		{
			this.bid = bid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bid);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_breakskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bid);
		}

		public int bid;
	}

	// 附近玩家攻击目标改变（单体技能时使用）
	public static class nearby_role_change_target implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_change_target() { }

		public nearby_role_change_target(int rid, int targetID, int targetType, int targetOwnerID, 
		                                 TimeTick timeTick)
		{
			this.rid = rid;
			this.targetID = targetID;
			this.targetType = targetType;
			this.targetOwnerID = targetOwnerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			targetOwnerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(targetOwnerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_change_target";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			targetOwnerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(targetOwnerID);
			os.push(timeTick);
		}

		public int rid;
		public int targetID;
		public int targetType;
		public int targetOwnerID;
		public TimeTick timeTick;
	}

	// 附近玩家改变朝向（单体技能时使用）
	public static class nearby_role_change_rotation implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_change_rotation() { }

		public nearby_role_change_rotation(int rid, Vector3F rotation, TimeTick timeTick)
		{
			this.rid = rid;
			this.rotation = rotation;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.push(rotation);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_change_rotation";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			rotation = is.pop(Vector3F.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.push(rotation);
			os.push(timeTick);
		}

		public int rid;
		public Vector3F rotation;
		public TimeTick timeTick;
	}

	// 玩家位置矫正(服务器矫正客户端)
	public static class role_adjust_pos implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_adjust_pos() { }

		public role_adjust_pos(Vector3 pos)
		{
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(pos);
		}

		@Override
		public String getPacketName()
		{
			return "role_adjust_pos";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(pos);
		}

		public Vector3 pos;
	}

	// 佣兵位置矫正(服务器矫正客户端)
	public static class pet_adjust_pos implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_adjust_pos() { }

		public pet_adjust_pos(int cfgid, Vector3 pos)
		{
			this.cfgid = cfgid;
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cfgid = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cfgid);
			os.push(pos);
		}

		@Override
		public String getPacketName()
		{
			return "pet_adjust_pos";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cfgid = is.popInteger();
			pos = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cfgid);
			os.push(pos);
		}

		public int cfgid;
		public Vector3 pos;
	}

	// 怪物位置矫正
	public static class monster_adjust_pos implements Stream.IStreamable, SStream.IStrPacket
	{

		public monster_adjust_pos() { }

		public monster_adjust_pos(int mid, Vector3 pos)
		{
			this.mid = mid;
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mid = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mid);
			os.push(pos);
		}

		@Override
		public String getPacketName()
		{
			return "monster_adjust_pos";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mid = is.popInteger();
			pos = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mid);
			os.push(pos);
		}

		public int mid;
		public Vector3 pos;
	}

	// 周围玩家进入视野(请求详细信息)
	public static class nearby_enter_roles implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_roles() { }

		public nearby_enter_roles(List<EnterDetail> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popList(EnterDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_roles";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popList(EnterDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roles);
		}

		public List<EnterDetail> roles;
	}

	// 周围佣兵进入视野(请求详细信息)
	public static class nearby_enter_pets implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_pets() { }

		public nearby_enter_pets(List<EnterPet> pets)
		{
			this.pets = pets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pets = is.popList(EnterPet.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(pets);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_pets";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pets = is.popList(EnterPet.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(pets);
		}

		public List<EnterPet> pets;
	}

	// 周围陷阱进入视野(请求详细信息)
	public static class nearby_enter_traps implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_traps() { }

		public nearby_enter_traps(List<EnterBase> traps)
		{
			this.traps = traps;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			traps = is.popList(EnterBase.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(traps);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_traps";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			traps = is.popList(EnterBase.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(traps);
		}

		public List<EnterBase> traps;
	}

	// 周围镖车进入视野
	public static class nearby_enter_escortcars implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_escortcars() { }

		public nearby_enter_escortcars(List<EnterEscortCar> cars)
		{
			this.cars = cars;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cars = is.popList(EnterEscortCar.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(cars);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_escortcars";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cars = is.popList(EnterEscortCar.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(cars);
		}

		public List<EnterEscortCar> cars;
	}

	// 周围怪物进入视野
	public static class nearby_enter_monsters implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_monsters() { }

		public nearby_enter_monsters(List<EnterMonster> monsters)
		{
			this.monsters = monsters;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			monsters = is.popList(EnterMonster.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(monsters);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_monsters";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			monsters = is.popList(EnterMonster.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(monsters);
		}

		public List<EnterMonster> monsters;
	}

	// 周围残影进入视野
	public static class nearby_enter_blurs implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_blurs() { }

		public nearby_enter_blurs(List<EnterDetail> blurs)
		{
			this.blurs = blurs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			blurs = is.popList(EnterDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(blurs);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_blurs";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			blurs = is.popList(EnterDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(blurs);
		}

		public List<EnterDetail> blurs;
	}

	// 周围法阵进入视野
	public static class nearby_enter_skillentitys implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_skillentitys() { }

		public nearby_enter_skillentitys(List<EnterSkillEntity> skillentitys)
		{
			this.skillentitys = skillentitys;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillentitys = is.popList(EnterSkillEntity.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(skillentitys);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_skillentitys";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillentitys = is.popList(EnterSkillEntity.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(skillentitys);
		}

		public List<EnterSkillEntity> skillentitys;
	}

	// 周围NPC进入视野
	public static class nearby_enter_npcs implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_npcs() { }

		public nearby_enter_npcs(List<EnterBase> npcs)
		{
			this.npcs = npcs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcs = is.popList(EnterBase.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(npcs);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_npcs";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcs = is.popList(EnterBase.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(npcs);
		}

		public List<EnterBase> npcs;
	}

	// 周围婚车进入视野
	public static class nearby_enter_weddingcars implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_weddingcars() { }

		public nearby_enter_weddingcars(List<EnterWeddingCar> cars)
		{
			this.cars = cars;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cars = is.popList(EnterWeddingCar.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(cars);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_weddingcars";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cars = is.popList(EnterWeddingCar.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(cars);
		}

		public List<EnterWeddingCar> cars;
	}

	// 周围矿点进入视野
	public static class nearby_enter_minerals implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_minerals() { }

		public nearby_enter_minerals(List<EnterMineral> minerals)
		{
			this.minerals = minerals;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			minerals = is.popList(EnterMineral.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(minerals);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_minerals";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			minerals = is.popList(EnterMineral.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(minerals);
		}

		public List<EnterMineral> minerals;
	}

	// 周围传送点进入视野
	public static class nearby_enter_waypoints implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_waypoints() { }

		public nearby_enter_waypoints(List<EnterBase> waypoints)
		{
			this.waypoints = waypoints;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			waypoints = is.popList(EnterBase.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(waypoints);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_waypoints";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			waypoints = is.popList(EnterBase.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(waypoints);
		}

		public List<EnterBase> waypoints;
	}

	// 周围场景BUFF进入视野
	public static class nearby_enter_mapbuffs implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_mapbuffs() { }

		public nearby_enter_mapbuffs(List<EnterBase> mapbuffs)
		{
			this.mapbuffs = mapbuffs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapbuffs = is.popList(EnterBase.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(mapbuffs);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_mapbuffs";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapbuffs = is.popList(EnterBase.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(mapbuffs);
		}

		public List<EnterBase> mapbuffs;
	}

	// 周围玩家进入视野
	public static class nearby_enter_role implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_role() { }

		public nearby_enter_role(int id, Vector3 position, Vector3F rotation, int curHP, 
		                         int maxHP)
		{
			this.id = id;
			this.position = position;
			this.rotation = rotation;
			this.curHP = curHP;
			this.maxHP = maxHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			curHP = is.popInteger();
			maxHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(position);
			os.push(rotation);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_role";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			position = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			curHP = is.popInteger();
			maxHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(position);
			os.push(rotation);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
		}

		public int id;
		public Vector3 position;
		public Vector3F rotation;
		public int curHP;
		public int maxHP;
	}

	// 周围佣兵进入视野
	public static class nearby_enter_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_pet() { }

		public nearby_enter_pet(int roleID, int cfgid, Vector3 position, Vector3F rotation, 
		                        int curHP, int maxHP)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.position = position;
			this.rotation = rotation;
			this.curHP = curHP;
			this.maxHP = maxHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			curHP = is.popInteger();
			maxHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.push(position);
			os.push(rotation);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			position = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			curHP = is.popInteger();
			maxHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.push(position);
			os.push(rotation);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
		}

		public int roleID;
		public int cfgid;
		public Vector3 position;
		public Vector3F rotation;
		public int curHP;
		public int maxHP;
	}

	// 周围有怪物出生
	public static class nearby_spawn_monster implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_spawn_monster() { }

		public nearby_spawn_monster(EnterMonster monster)
		{
			this.monster = monster;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( monster == null )
				monster = new EnterMonster();
			is.pop(monster);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(monster);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_spawn_monster";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			monster = is.pop(EnterMonster.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(monster);
		}

		public EnterMonster monster;
	}

	// 周围怪物进入视野
	public static class nearby_enter_monster implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_monster() { }

		public nearby_enter_monster(int id, int configID, Vector3 position, int curHP, 
		                            int maxHP)
		{
			this.id = id;
			this.configID = configID;
			this.position = position;
			this.curHP = curHP;
			this.maxHP = maxHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			configID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			curHP = is.popInteger();
			maxHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(configID);
			os.push(position);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_monster";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			configID = is.popInteger();
			position = is.pop(Vector3.class);
			curHP = is.popInteger();
			maxHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(configID);
			os.push(position);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
		}

		public int id;
		public int configID;
		public Vector3 position;
		public int curHP;
		public int maxHP;
	}

	// 周围陷阱进入视野
	public static class nearby_enter_trap implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_trap() { }

		public nearby_enter_trap(int id, Vector3 position)
		{
			this.id = id;
			this.position = position;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(position);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_trap";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(position);
		}

		public int id;
		public Vector3 position;
	}

	// 周围NPC进入视野
	public static class nearby_enter_npc implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_npc() { }

		public nearby_enter_npc(int id, int configID, Vector3 position, Vector3F rotation)
		{
			this.id = id;
			this.configID = configID;
			this.position = position;
			this.rotation = rotation;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			configID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(configID);
			os.push(position);
			os.push(rotation);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_npc";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			configID = is.popInteger();
			position = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(configID);
			os.push(position);
			os.push(rotation);
		}

		public int id;
		public int configID;
		public Vector3 position;
		public Vector3F rotation;
	}

	// 周围矿点进入视野
	public static class nearby_enter_mineral implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_mineral() { }

		public nearby_enter_mineral(int id, int configID, Vector3 position, Vector3F rotation)
		{
			this.id = id;
			this.configID = configID;
			this.position = position;
			this.rotation = rotation;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			configID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(configID);
			os.push(position);
			os.push(rotation);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_mineral";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			configID = is.popInteger();
			position = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(configID);
			os.push(position);
			os.push(rotation);
		}

		public int id;
		public int configID;
		public Vector3 position;
		public Vector3F rotation;
	}

	// 周围传送点进入视野
	public static class nearby_enter_waypoint implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_waypoint() { }

		public nearby_enter_waypoint(int id, Vector3 position)
		{
			this.id = id;
			this.position = position;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(position);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_waypoint";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(position);
		}

		public int id;
		public Vector3 position;
	}

	// 周围场景BUFF进入视野
	public static class nearby_enter_mapbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_mapbuff() { }

		public nearby_enter_mapbuff(int id, int configID, Vector3 position)
		{
			this.id = id;
			this.configID = configID;
			this.position = position;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			configID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(configID);
			os.push(position);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_mapbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			configID = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(configID);
			os.push(position);
		}

		public int id;
		public int configID;
		public Vector3 position;
	}

	// 周围法阵进入视野
	public static class nearby_enter_skillentity implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_skillentity() { }

		public nearby_enter_skillentity(int ownerID, int id, int skillID, int modelID, 
		                                Vector3 position)
		{
			this.ownerID = ownerID;
			this.id = id;
			this.skillID = skillID;
			this.modelID = modelID;
			this.position = position;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ownerID = is.popInteger();
			id = is.popInteger();
			skillID = is.popInteger();
			modelID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ownerID);
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.pushInteger(modelID);
			os.push(position);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_skillentity";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ownerID = is.popInteger();
			id = is.popInteger();
			skillID = is.popInteger();
			modelID = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ownerID);
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.pushInteger(modelID);
			os.push(position);
		}

		public int ownerID;
		public int id;
		public int skillID;
		public int modelID;
		public Vector3 position;
	}

	// 周围残影进入视野
	public static class nearby_enter_blur implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_enter_blur() { }

		public nearby_enter_blur(int id, int ownerID, int configID, int curHP, 
		                         int maxHP, Vector3 position)
		{
			this.id = id;
			this.ownerID = ownerID;
			this.configID = configID;
			this.curHP = curHP;
			this.maxHP = maxHP;
			this.position = position;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			ownerID = is.popInteger();
			configID = is.popInteger();
			curHP = is.popInteger();
			maxHP = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(ownerID);
			os.pushInteger(configID);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
			os.push(position);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_enter_blur";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			ownerID = is.popInteger();
			configID = is.popInteger();
			curHP = is.popInteger();
			maxHP = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(ownerID);
			os.pushInteger(configID);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
			os.push(position);
		}

		public int id;
		public int ownerID;
		public int configID;
		public int curHP;
		public int maxHP;
		public Vector3 position;
	}

	// 周围玩家离开视野
	public static class nearby_leave_roles implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_roles() { }

		public nearby_leave_roles(List<Integer> roles, int destory)
		{
			this.roles = roles;
			this.destory = destory;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popIntegerList();
			destory = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(roles);
			os.pushInteger(destory);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_roles";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popIntegerList();
			destory = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(roles);
			os.pushInteger(destory);
		}

		public List<Integer> roles;
		public int destory;
	}

	// 周围怪物离开视野
	public static class nearby_leave_monsters implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_monsters() { }

		public nearby_leave_monsters(List<Integer> monsters)
		{
			this.monsters = monsters;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			monsters = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(monsters);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_monsters";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			monsters = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(monsters);
		}

		public List<Integer> monsters;
	}

	// 周围陷阱离开视野
	public static class nearby_leave_traps implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_traps() { }

		public nearby_leave_traps(List<Integer> traps)
		{
			this.traps = traps;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			traps = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(traps);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_traps";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			traps = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(traps);
		}

		public List<Integer> traps;
	}

	// 周围佣兵离开视野
	public static class nearby_leave_pets implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_pets() { }

		public nearby_leave_pets(List<PetBase> pets, int destory)
		{
			this.pets = pets;
			this.destory = destory;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pets = is.popList(PetBase.class);
			destory = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(pets);
			os.pushInteger(destory);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_pets";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pets = is.popList(PetBase.class);
			destory = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(pets);
			os.pushInteger(destory);
		}

		public List<PetBase> pets;
		public int destory;
	}

	// 周围镖车离开视野
	public static class nearby_leave_escortcars implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_escortcars() { }

		public nearby_leave_escortcars(List<Integer> cars)
		{
			this.cars = cars;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cars = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(cars);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_escortcars";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cars = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(cars);
		}

		public List<Integer> cars;
	}

	// 周围NPC离开视野
	public static class nearby_leave_npcs implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_npcs() { }

		public nearby_leave_npcs(List<Integer> npcs)
		{
			this.npcs = npcs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcs = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(npcs);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_npcs";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcs = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(npcs);
		}

		public List<Integer> npcs;
	}

	// 周围婚车离开视野
	public static class nearby_leave_weddingcars implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_weddingcars() { }

		public nearby_leave_weddingcars(List<Integer> cars)
		{
			this.cars = cars;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cars = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(cars);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_weddingcars";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cars = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(cars);
		}

		public List<Integer> cars;
	}

	// 周围矿点离开视野
	public static class nearby_leave_minerals implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_minerals() { }

		public nearby_leave_minerals(List<Integer> minerals)
		{
			this.minerals = minerals;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			minerals = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(minerals);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_minerals";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			minerals = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(minerals);
		}

		public List<Integer> minerals;
	}

	// 周围传送点离开视野
	public static class nearby_leave_waypoints implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_waypoints() { }

		public nearby_leave_waypoints(List<Integer> waypoints)
		{
			this.waypoints = waypoints;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			waypoints = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(waypoints);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_waypoints";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			waypoints = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(waypoints);
		}

		public List<Integer> waypoints;
	}

	// 周围场景BUFF离开视野
	public static class nearby_leave_mapbuffs implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_mapbuffs() { }

		public nearby_leave_mapbuffs(List<Integer> mapbuffs)
		{
			this.mapbuffs = mapbuffs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapbuffs = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(mapbuffs);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_mapbuffs";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapbuffs = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(mapbuffs);
		}

		public List<Integer> mapbuffs;
	}

	// 周围法阵离开视野
	public static class nearby_leave_skillentitys implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_skillentitys() { }

		public nearby_leave_skillentitys(List<Integer> skillentitys)
		{
			this.skillentitys = skillentitys;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillentitys = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(skillentitys);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_skillentitys";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillentitys = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(skillentitys);
		}

		public List<Integer> skillentitys;
	}

	// 周围残影离开视野
	public static class nearby_leave_blurs implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_blurs() { }

		public nearby_leave_blurs(List<Integer> blurs)
		{
			this.blurs = blurs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			blurs = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(blurs);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_blurs";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			blurs = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(blurs);
		}

		public List<Integer> blurs;
	}

	// 周围玩家离开视野
	public static class nearby_leave_role implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_role() { }

		public nearby_leave_role(int id, int destory)
		{
			this.id = id;
			this.destory = destory;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			destory = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(destory);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_role";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			destory = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(destory);
		}

		public int id;
		public int destory;
	}

	// 周围怪物离开视野
	public static class nearby_leave_monster implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_monster() { }

		public nearby_leave_monster(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_monster";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 周围陷阱离开视野
	public static class nearby_leave_trap implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_trap() { }

		public nearby_leave_trap(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_trap";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 周围佣兵离开视野
	public static class nearby_leave_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_pet() { }

		public nearby_leave_pet(int roleID, int cfgid, int destory)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.destory = destory;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			destory = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(destory);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			destory = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(destory);
		}

		public int roleID;
		public int cfgid;
		public int destory;
	}

	// 周围NPC离开视野
	public static class nearby_leave_npc implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_npc() { }

		public nearby_leave_npc(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_npc";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 周围矿点离开视野
	public static class nearby_leave_mineral implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_mineral() { }

		public nearby_leave_mineral(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_mineral";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 周围传送点离开视野
	public static class nearby_leave_waypoint implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_waypoint() { }

		public nearby_leave_waypoint(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_waypoint";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 周围场景BUFF离开视野
	public static class nearby_leave_mapbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_mapbuff() { }

		public nearby_leave_mapbuff(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_mapbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 周围法阵离开视野
	public static class nearby_leave_skillentity implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_skillentity() { }

		public nearby_leave_skillentity(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_skillentity";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 周围残影离开视野
	public static class nearby_leave_blur implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_leave_blur() { }

		public nearby_leave_blur(int id, int destory)
		{
			this.id = id;
			this.destory = destory;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			destory = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(destory);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_leave_blur";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			destory = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(destory);
		}

		public int id;
		public int destory;
	}

	// 周围玩家重置位置
	public static class nearby_role_resetposition implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_resetposition() { }

		public nearby_role_resetposition(int id, Vector3 pos)
		{
			this.id = id;
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_resetposition";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
		}

		public int id;
		public Vector3 pos;
	}

	// 周围玩家更新位置
	public static class nearby_role_updateposition implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_updateposition() { }

		public nearby_role_updateposition(int id, Vector3 pos, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_updateposition";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public TimeTick timeTick;
	}

	// 周围玩家移动
	public static class nearby_move_role implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_move_role() { }

		public nearby_move_role(int id, Vector3 pos, int speed, Vector3F rotation, 
		                        Vector3 target, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.speed = speed;
			this.rotation = rotation;
			this.target = target;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			speed = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( target == null )
				target = new Vector3();
			is.pop(target);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(target);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_move_role";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			speed = is.popInteger();
			rotation = is.pop(Vector3F.class);
			target = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(target);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public int speed;
		public Vector3F rotation;
		public Vector3 target;
		public TimeTick timeTick;
	}

	// 周围佣兵重置位置
	public static class nearby_pet_resetposition implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_resetposition() { }

		public nearby_pet_resetposition(int rid, int pid, Vector3 pos)
		{
			this.rid = rid;
			this.pid = pid;
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			pid = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(pid);
			os.push(pos);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_resetposition";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			pid = is.popInteger();
			pos = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(pid);
			os.push(pos);
		}

		public int rid;
		public int pid;
		public Vector3 pos;
	}

	// 周围佣兵更新位置
	public static class nearby_pet_updateposition implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_updateposition() { }

		public nearby_pet_updateposition(int rid, int pid, Vector3 pos, TimeTick timeTick)
		{
			this.rid = rid;
			this.pid = pid;
			this.pos = pos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			pid = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(pid);
			os.push(pos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_updateposition";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			pid = is.popInteger();
			pos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(pid);
			os.push(pos);
			os.push(timeTick);
		}

		public int rid;
		public int pid;
		public Vector3 pos;
		public TimeTick timeTick;
	}

	// 周围佣兵移动
	public static class nearby_move_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_move_pet() { }

		public nearby_move_pet(int roleID, int cfgid, Vector3 pos, int speed, 
		                       Vector3F rotation, TimeTick timeTick)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.pos = pos;
			this.speed = speed;
			this.rotation = rotation;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			speed = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_move_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			pos = is.pop(Vector3.class);
			speed = is.popInteger();
			rotation = is.pop(Vector3F.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		public int roleID;
		public int cfgid;
		public Vector3 pos;
		public int speed;
		public Vector3F rotation;
		public TimeTick timeTick;
	}

	// 周围镖车移动
	public static class nearby_move_escortcar implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_move_escortcar() { }

		public nearby_move_escortcar(int id, Vector3 pos, int speed, Vector3F rotation, 
		                             Vector3 target, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.speed = speed;
			this.rotation = rotation;
			this.target = target;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			speed = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( target == null )
				target = new Vector3();
			is.pop(target);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(target);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_move_escortcar";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			speed = is.popInteger();
			rotation = is.pop(Vector3F.class);
			target = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(target);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public int speed;
		public Vector3F rotation;
		public Vector3 target;
		public TimeTick timeTick;
	}

	// 周围怪物移动
	public static class nearby_move_monster implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_move_monster() { }

		public nearby_move_monster(int id, Vector3 pos, int speed, Vector3F rotation, 
		                           Vector3 target, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.speed = speed;
			this.rotation = rotation;
			this.target = target;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			speed = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( target == null )
				target = new Vector3();
			is.pop(target);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(target);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_move_monster";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			speed = is.popInteger();
			rotation = is.pop(Vector3F.class);
			target = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(target);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public int speed;
		public Vector3F rotation;
		public Vector3 target;
		public TimeTick timeTick;
	}

	// 周围残影移动
	public static class nearby_move_blur implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_move_blur() { }

		public nearby_move_blur(int id, Vector3 pos, int speed, Vector3F rotation, 
		                        Vector3 target, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.speed = speed;
			this.rotation = rotation;
			this.target = target;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			speed = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( target == null )
				target = new Vector3();
			is.pop(target);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(target);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_move_blur";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			speed = is.popInteger();
			rotation = is.pop(Vector3F.class);
			target = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(target);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public int speed;
		public Vector3F rotation;
		public Vector3 target;
		public TimeTick timeTick;
	}

	// 周围法阵移动
	public static class nearby_move_skillentity implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_move_skillentity() { }

		public nearby_move_skillentity(int id, Vector3 pos, int speed, Vector3F rotation, 
		                               TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.speed = speed;
			this.rotation = rotation;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			speed = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_move_skillentity";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			speed = is.popInteger();
			rotation = is.pop(Vector3F.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public int speed;
		public Vector3F rotation;
		public TimeTick timeTick;
	}

	// 周围婚车移动
	public static class nearby_move_weddingcar implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_move_weddingcar() { }

		public nearby_move_weddingcar(int id, Vector3 pos, int speed, Vector3F rotation, 
		                              TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.speed = speed;
			this.rotation = rotation;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			speed = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_move_weddingcar";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			speed = is.popInteger();
			rotation = is.pop(Vector3F.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public int speed;
		public Vector3F rotation;
		public TimeTick timeTick;
	}

	// 周围玩家停止移动
	public static class nearby_stopmove_role implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_stopmove_role() { }

		public nearby_stopmove_role(int id, Vector3 pos, int speed, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.speed = speed;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			speed = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_stopmove_role";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			speed = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.pushInteger(speed);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public int speed;
		public TimeTick timeTick;
	}

	// 周围佣兵停止移动
	public static class nearby_stopmove_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_stopmove_pet() { }

		public nearby_stopmove_pet(int roleID, int cfgid, Vector3 pos, int speed, 
		                           TimeTick timeTick)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.pos = pos;
			this.speed = speed;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			speed = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.push(pos);
			os.pushInteger(speed);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_stopmove_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			pos = is.pop(Vector3.class);
			speed = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.push(pos);
			os.pushInteger(speed);
			os.push(timeTick);
		}

		public int roleID;
		public int cfgid;
		public Vector3 pos;
		public int speed;
		public TimeTick timeTick;
	}

	// 周围怪物停止移动
	public static class nearby_stopmove_monster implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_stopmove_monster() { }

		public nearby_stopmove_monster(int id, Vector3 pos, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_stopmove_monster";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public TimeTick timeTick;
	}

	// 周围镖车停止移动
	public static class nearby_stopmove_escortcar implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_stopmove_escortcar() { }

		public nearby_stopmove_escortcar(int id, Vector3 pos, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_stopmove_escortcar";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public TimeTick timeTick;
	}

	// 周围残影停止移动
	public static class nearby_stopmove_blur implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_stopmove_blur() { }

		public nearby_stopmove_blur(int id, Vector3 pos, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_stopmove_blur";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public TimeTick timeTick;
	}

	// 周围法阵停止移动
	public static class nearby_stopmove_skillentity implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_stopmove_skillentity() { }

		public nearby_stopmove_skillentity(int id, Vector3 pos, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_stopmove_skillentity";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public TimeTick timeTick;
	}

	// 周围婚车停止移动
	public static class nearby_stopmove_weddingcar implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_stopmove_weddingcar() { }

		public nearby_stopmove_weddingcar(int id, Vector3 pos, TimeTick timeTick)
		{
			this.id = id;
			this.pos = pos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_stopmove_weddingcar";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			pos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(pos);
			os.push(timeTick);
		}

		public int id;
		public Vector3 pos;
		public TimeTick timeTick;
	}

	// 周围玩家使用后续技能
	public static class nearby_role_usefollowskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_usefollowskill() { }

		public nearby_role_usefollowskill(int id, int skillID, int seq, TimeTick timeTick)
		{
			this.id = id;
			this.skillID = skillID;
			this.seq = seq;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			skillID = is.popInteger();
			seq = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.pushInteger(seq);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_usefollowskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			skillID = is.popInteger();
			seq = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.pushInteger(seq);
			os.push(timeTick);
		}

		public int id;
		public int skillID;
		public int seq;
		public TimeTick timeTick;
	}

	public static class nearby_role_socialaction implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_socialaction() { }

		public nearby_role_socialaction(int rid, int actionID)
		{
			this.rid = rid;
			this.actionID = actionID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			actionID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(actionID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_socialaction";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			actionID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(actionID);
		}

		public int rid;
		public int actionID;
	}

	// 周围玩家使用技能
	public static class nearby_role_useskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_useskill() { }

		public nearby_role_useskill(int id, int skillID, Vector3 pos, Vector3F rotation, 
		                            int targetID, int targetType, int ownerID, TimeTick timeTick)
		{
			this.id = id;
			this.skillID = skillID;
			this.pos = pos;
			this.rotation = rotation;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			skillID = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_useskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			skillID = is.popInteger();
			pos = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int id;
		public int skillID;
		public Vector3 pos;
		public Vector3F rotation;
		public int targetID;
		public int targetType;
		public int ownerID;
		public TimeTick timeTick;
	}

	// 周围玩家使用自创技能
	public static class nearby_role_usediyskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_usediyskill() { }

		public nearby_role_usediyskill(int id, int skillID, int actionID, Vector3 pos, 
		                               Vector3F rotation, int targetID, int targetType, int ownerID, 
		                               TimeTick timeTick)
		{
			this.id = id;
			this.skillID = skillID;
			this.actionID = actionID;
			this.pos = pos;
			this.rotation = rotation;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			skillID = is.popInteger();
			actionID = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.pushInteger(actionID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_usediyskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			skillID = is.popInteger();
			actionID = is.popInteger();
			pos = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.pushInteger(actionID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int id;
		public int skillID;
		public int actionID;
		public Vector3 pos;
		public Vector3F rotation;
		public int targetID;
		public int targetType;
		public int ownerID;
		public TimeTick timeTick;
	}

	// 周围佣兵使用技能
	public static class nearby_pet_useskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_useskill() { }

		public nearby_pet_useskill(int roleID, int cfgid, int skillID, Vector3 pos, 
		                           Vector3F rotation, int targetID, int targetType, int ownerID, 
		                           TimeTick timeTick)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.skillID = skillID;
			this.pos = pos;
			this.rotation = rotation;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			skillID = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_useskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			skillID = is.popInteger();
			pos = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int roleID;
		public int cfgid;
		public int skillID;
		public Vector3 pos;
		public Vector3F rotation;
		public int targetID;
		public int targetType;
		public int ownerID;
		public TimeTick timeTick;
	}

	// 周围怪物使用技能
	public static class nearby_monster_useskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_useskill() { }

		public nearby_monster_useskill(int id, int skillID, int targetID, int targetType, 
		                               int ownerID, Vector3 pos, Vector3F rotation, TimeTick timeTick)
		{
			this.id = id;
			this.skillID = skillID;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.pos = pos;
			this.rotation = rotation;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(pos);
			os.push(rotation);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_useskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			pos = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(pos);
			os.push(rotation);
			os.push(timeTick);
		}

		public int id;
		public int skillID;
		public int targetID;
		public int targetType;
		public int ownerID;
		public Vector3 pos;
		public Vector3F rotation;
		public TimeTick timeTick;
	}

	// 周围陷阱使用技能
	public static class nearby_trap_useskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_trap_useskill() { }

		public nearby_trap_useskill(int trapID, int skillID)
		{
			this.trapID = trapID;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			trapID = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(trapID);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_trap_useskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			trapID = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(trapID);
			os.pushInteger(skillID);
		}

		public int trapID;
		public int skillID;
	}

	// 周围残影使用技能
	public static class nearby_blur_useskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_useskill() { }

		public nearby_blur_useskill(int bid, int skillID, int targetID, int targetType, 
		                            int ownerID, Vector3 pos, Vector3F rotation, TimeTick timeTick)
		{
			this.bid = bid;
			this.skillID = skillID;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.pos = pos;
			this.rotation = rotation;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bid = is.popInteger();
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bid);
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(pos);
			os.push(rotation);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_useskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bid = is.popInteger();
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			pos = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bid);
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(pos);
			os.push(rotation);
			os.push(timeTick);
		}

		public int bid;
		public int skillID;
		public int targetID;
		public int targetType;
		public int ownerID;
		public Vector3 pos;
		public Vector3F rotation;
		public TimeTick timeTick;
	}

	// 周围玩家使用子技能
	public static class nearby_role_usechildskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_usechildskill() { }

		public nearby_role_usechildskill(int rid, int mainSkill, int skillID)
		{
			this.rid = rid;
			this.mainSkill = mainSkill;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			mainSkill = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(mainSkill);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_usechildskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			mainSkill = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(mainSkill);
			os.pushInteger(skillID);
		}

		public int rid;
		public int mainSkill;
		public int skillID;
	}

	// 周围佣兵使用子技能
	public static class nearby_pet_usechildskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_usechildskill() { }

		public nearby_pet_usechildskill(int rid, int pid, int mainSkill, int skillID)
		{
			this.rid = rid;
			this.pid = pid;
			this.mainSkill = mainSkill;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			pid = is.popInteger();
			mainSkill = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(pid);
			os.pushInteger(mainSkill);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_usechildskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			pid = is.popInteger();
			mainSkill = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(pid);
			os.pushInteger(mainSkill);
			os.pushInteger(skillID);
		}

		public int rid;
		public int pid;
		public int mainSkill;
		public int skillID;
	}

	// 周围怪物使用子技能
	public static class nearby_monster_usechildskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_usechildskill() { }

		public nearby_monster_usechildskill(int mid, int mainSkill, int skillID)
		{
			this.mid = mid;
			this.mainSkill = mainSkill;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mid = is.popInteger();
			mainSkill = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mid);
			os.pushInteger(mainSkill);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_usechildskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mid = is.popInteger();
			mainSkill = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mid);
			os.pushInteger(mainSkill);
			os.pushInteger(skillID);
		}

		public int mid;
		public int mainSkill;
		public int skillID;
	}

	// 周围残影使用子技能
	public static class nearby_blur_usechildskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_usechildskill() { }

		public nearby_blur_usechildskill(int bid, int mainSkill, int skillID)
		{
			this.bid = bid;
			this.mainSkill = mainSkill;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bid = is.popInteger();
			mainSkill = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bid);
			os.pushInteger(mainSkill);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_usechildskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bid = is.popInteger();
			mainSkill = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bid);
			os.pushInteger(mainSkill);
			os.pushInteger(skillID);
		}

		public int bid;
		public int mainSkill;
		public int skillID;
	}

	// 周围法阵使用子技能
	public static class nearby_skillentity_usechildskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_skillentity_usechildskill() { }

		public nearby_skillentity_usechildskill(int sid, int mainSkill, int skillID)
		{
			this.sid = sid;
			this.mainSkill = mainSkill;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sid = is.popInteger();
			mainSkill = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sid);
			os.pushInteger(mainSkill);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_skillentity_usechildskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sid = is.popInteger();
			mainSkill = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(sid);
			os.pushInteger(mainSkill);
			os.pushInteger(skillID);
		}

		public int sid;
		public int mainSkill;
		public int skillID;
	}

	// 周围玩家使用触发技能
	public static class nearby_role_usetrigskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_usetrigskill() { }

		public nearby_role_usetrigskill(int id, int skillID)
		{
			this.id = id;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_usetrigskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(skillID);
		}

		public int id;
		public int skillID;
	}

	// 周围佣兵使用触发技能
	public static class nearby_pet_usetrigskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_usetrigskill() { }

		public nearby_pet_usetrigskill(int roleID, int cfgid, int skillID)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_usetrigskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
		}

		public int roleID;
		public int cfgid;
		public int skillID;
	}

	// 周围怪物使用触发技能
	public static class nearby_monster_usetrigskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_usetrigskill() { }

		public nearby_monster_usetrigskill(int id, int skillID)
		{
			this.id = id;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_usetrigskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(skillID);
		}

		public int id;
		public int skillID;
	}

	// 周围残影使用触发技能技能
	public static class nearby_blur_usetrigskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_usetrigskill() { }

		public nearby_blur_usetrigskill(int bid, int skillID)
		{
			this.bid = bid;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bid = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bid);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_usetrigskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bid = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bid);
			os.pushInteger(skillID);
		}

		public int bid;
		public int skillID;
	}

	// 4v4竞技场广播首杀
	public static class nearby_first_blood implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_first_blood() { }

		public nearby_first_blood(RoleKill killer, RoleKill deader, List<RoleKill> assist)
		{
			this.killer = killer;
			this.deader = deader;
			this.assist = assist;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( killer == null )
				killer = new RoleKill();
			is.pop(killer);
			if( deader == null )
				deader = new RoleKill();
			is.pop(deader);
			assist = is.popList(RoleKill.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(killer);
			os.push(deader);
			os.pushList(assist);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_first_blood";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			killer = is.pop(RoleKill.class);
			deader = is.pop(RoleKill.class);
			assist = is.popList(RoleKill.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(killer);
			os.push(deader);
			os.pushList(assist);
		}

		public RoleKill killer;
		public RoleKill deader;
		public List<RoleKill> assist;
	}

	// 4v4竞技场广播击杀玩家
	public static class nearby_role_kill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_kill() { }

		public nearby_role_kill(RoleKill killer, RoleKill deader, List<RoleKill> assist)
		{
			this.killer = killer;
			this.deader = deader;
			this.assist = assist;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( killer == null )
				killer = new RoleKill();
			is.pop(killer);
			if( deader == null )
				deader = new RoleKill();
			is.pop(deader);
			assist = is.popList(RoleKill.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(killer);
			os.push(deader);
			os.pushList(assist);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_kill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			killer = is.pop(RoleKill.class);
			deader = is.pop(RoleKill.class);
			assist = is.popList(RoleKill.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(killer);
			os.push(deader);
			os.pushList(assist);
		}

		public RoleKill killer;
		public RoleKill deader;
		public List<RoleKill> assist;
	}

	public static class nearby_processdamage_end implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_processdamage_end() { }

		public nearby_processdamage_end(int attackerID, int attackerType, int ownerID, int skillID, 
		                                int curEventTime, TimeTick timeTick)
		{
			this.attackerID = attackerID;
			this.attackerType = attackerType;
			this.ownerID = ownerID;
			this.skillID = skillID;
			this.curEventTime = curEventTime;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_processdamage_end";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.push(timeTick);
		}

		public int attackerID;
		public int attackerType;
		public int ownerID;
		public int skillID;
		public int curEventTime;
		public TimeTick timeTick;
	}

	// 周围玩家受到伤害
	public static class nearby_role_ondamage implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_ondamage() { }

		public nearby_role_ondamage(int id, int attackerID, int attackerType, int ownerID, 
		                            int skillID, int curEventTime, int curHP, int dodge, 
		                            int deflect, int crit, int suckBlood, int behead, 
		                            int remit, ArmorDamage armor, TimeTick timeTick)
		{
			this.id = id;
			this.attackerID = attackerID;
			this.attackerType = attackerType;
			this.ownerID = ownerID;
			this.skillID = skillID;
			this.curEventTime = curEventTime;
			this.curHP = curHP;
			this.dodge = dodge;
			this.deflect = deflect;
			this.crit = crit;
			this.suckBlood = suckBlood;
			this.behead = behead;
			this.remit = remit;
			this.armor = armor;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			curHP = is.popInteger();
			dodge = is.popInteger();
			deflect = is.popInteger();
			crit = is.popInteger();
			suckBlood = is.popInteger();
			behead = is.popInteger();
			remit = is.popInteger();
			if( armor == null )
				armor = new ArmorDamage();
			is.pop(armor);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.pushInteger(curHP);
			os.pushInteger(dodge);
			os.pushInteger(deflect);
			os.pushInteger(crit);
			os.pushInteger(suckBlood);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(armor);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_ondamage";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			curHP = is.popInteger();
			dodge = is.popInteger();
			deflect = is.popInteger();
			crit = is.popInteger();
			suckBlood = is.popInteger();
			behead = is.popInteger();
			remit = is.popInteger();
			armor = is.pop(ArmorDamage.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.pushInteger(curHP);
			os.pushInteger(dodge);
			os.pushInteger(deflect);
			os.pushInteger(crit);
			os.pushInteger(suckBlood);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(armor);
			os.push(timeTick);
		}

		public int id;
		public int attackerID;
		public int attackerType;
		public int ownerID;
		public int skillID;
		public int curEventTime;
		public int curHP;
		public int dodge;
		public int deflect;
		public int crit;
		public int suckBlood;
		public int behead;
		public int remit;
		public ArmorDamage armor;
		public TimeTick timeTick;
	}

	// 周围佣兵受到伤害
	public static class nearby_pet_ondamage implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_ondamage() { }

		public nearby_pet_ondamage(int roleID, int cfgid, int attackerID, int attackerType, 
		                           int ownerID, int skillID, int curEventTime, int curHP, 
		                           int dodge, int deflect, int crit, int suckBlood, 
		                           int behead, int remit, TimeTick timeTick)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.attackerID = attackerID;
			this.attackerType = attackerType;
			this.ownerID = ownerID;
			this.skillID = skillID;
			this.curEventTime = curEventTime;
			this.curHP = curHP;
			this.dodge = dodge;
			this.deflect = deflect;
			this.crit = crit;
			this.suckBlood = suckBlood;
			this.behead = behead;
			this.remit = remit;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			curHP = is.popInteger();
			dodge = is.popInteger();
			deflect = is.popInteger();
			crit = is.popInteger();
			suckBlood = is.popInteger();
			behead = is.popInteger();
			remit = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.pushInteger(curHP);
			os.pushInteger(dodge);
			os.pushInteger(deflect);
			os.pushInteger(crit);
			os.pushInteger(suckBlood);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_ondamage";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			curHP = is.popInteger();
			dodge = is.popInteger();
			deflect = is.popInteger();
			crit = is.popInteger();
			suckBlood = is.popInteger();
			behead = is.popInteger();
			remit = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.pushInteger(curHP);
			os.pushInteger(dodge);
			os.pushInteger(deflect);
			os.pushInteger(crit);
			os.pushInteger(suckBlood);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(timeTick);
		}

		public int roleID;
		public int cfgid;
		public int attackerID;
		public int attackerType;
		public int ownerID;
		public int skillID;
		public int curEventTime;
		public int curHP;
		public int dodge;
		public int deflect;
		public int crit;
		public int suckBlood;
		public int behead;
		public int remit;
		public TimeTick timeTick;
	}

	// 周围镖车受到伤害
	public static class nearby_escortcar_ondamage implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_escortcar_ondamage() { }

		public nearby_escortcar_ondamage(int id, int attackerID, int attackerType, int ownerID, 
		                                 int skillID, int curEventTime, int curHP, int dodge, 
		                                 int deflect, int crit, int suckBlood, int behead, 
		                                 int remit, TimeTick timeTick)
		{
			this.id = id;
			this.attackerID = attackerID;
			this.attackerType = attackerType;
			this.ownerID = ownerID;
			this.skillID = skillID;
			this.curEventTime = curEventTime;
			this.curHP = curHP;
			this.dodge = dodge;
			this.deflect = deflect;
			this.crit = crit;
			this.suckBlood = suckBlood;
			this.behead = behead;
			this.remit = remit;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			curHP = is.popInteger();
			dodge = is.popInteger();
			deflect = is.popInteger();
			crit = is.popInteger();
			suckBlood = is.popInteger();
			behead = is.popInteger();
			remit = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.pushInteger(curHP);
			os.pushInteger(dodge);
			os.pushInteger(deflect);
			os.pushInteger(crit);
			os.pushInteger(suckBlood);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_escortcar_ondamage";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			curHP = is.popInteger();
			dodge = is.popInteger();
			deflect = is.popInteger();
			crit = is.popInteger();
			suckBlood = is.popInteger();
			behead = is.popInteger();
			remit = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.pushInteger(curHP);
			os.pushInteger(dodge);
			os.pushInteger(deflect);
			os.pushInteger(crit);
			os.pushInteger(suckBlood);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(timeTick);
		}

		public int id;
		public int attackerID;
		public int attackerType;
		public int ownerID;
		public int skillID;
		public int curEventTime;
		public int curHP;
		public int dodge;
		public int deflect;
		public int crit;
		public int suckBlood;
		public int behead;
		public int remit;
		public TimeTick timeTick;
	}

	// 周围怪物受到伤害
	public static class nearby_monster_ondamage implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_ondamage() { }

		public nearby_monster_ondamage(int id, int attackerID, int attackerType, int ownerID, 
		                               int skillID, int curEventTime, int curHP, int dodge, 
		                               int deflect, int crit, int suckBlood, int behead, 
		                               int remit, ArmorDamage armor, TimeTick timeTick)
		{
			this.id = id;
			this.attackerID = attackerID;
			this.attackerType = attackerType;
			this.ownerID = ownerID;
			this.skillID = skillID;
			this.curEventTime = curEventTime;
			this.curHP = curHP;
			this.dodge = dodge;
			this.deflect = deflect;
			this.crit = crit;
			this.suckBlood = suckBlood;
			this.behead = behead;
			this.remit = remit;
			this.armor = armor;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			curHP = is.popInteger();
			dodge = is.popInteger();
			deflect = is.popInteger();
			crit = is.popInteger();
			suckBlood = is.popInteger();
			behead = is.popInteger();
			remit = is.popInteger();
			if( armor == null )
				armor = new ArmorDamage();
			is.pop(armor);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.pushInteger(curHP);
			os.pushInteger(dodge);
			os.pushInteger(deflect);
			os.pushInteger(crit);
			os.pushInteger(suckBlood);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(armor);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_ondamage";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			curHP = is.popInteger();
			dodge = is.popInteger();
			deflect = is.popInteger();
			crit = is.popInteger();
			suckBlood = is.popInteger();
			behead = is.popInteger();
			remit = is.popInteger();
			armor = is.pop(ArmorDamage.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.pushInteger(curHP);
			os.pushInteger(dodge);
			os.pushInteger(deflect);
			os.pushInteger(crit);
			os.pushInteger(suckBlood);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(armor);
			os.push(timeTick);
		}

		public int id;
		public int attackerID;
		public int attackerType;
		public int ownerID;
		public int skillID;
		public int curEventTime;
		public int curHP;
		public int dodge;
		public int deflect;
		public int crit;
		public int suckBlood;
		public int behead;
		public int remit;
		public ArmorDamage armor;
		public TimeTick timeTick;
	}

	// 周围残影受到伤害
	public static class nearby_blur_ondamage implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_ondamage() { }

		public nearby_blur_ondamage(int id, int attackerID, int attackerType, int ownerID, 
		                            int skillID, int curEventTime, int curHP, int dodge, 
		                            int deflect, int crit, int suckBlood, int behead, 
		                            int remit, TimeTick timeTick)
		{
			this.id = id;
			this.attackerID = attackerID;
			this.attackerType = attackerType;
			this.ownerID = ownerID;
			this.skillID = skillID;
			this.curEventTime = curEventTime;
			this.curHP = curHP;
			this.dodge = dodge;
			this.deflect = deflect;
			this.crit = crit;
			this.suckBlood = suckBlood;
			this.behead = behead;
			this.remit = remit;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			curHP = is.popInteger();
			dodge = is.popInteger();
			deflect = is.popInteger();
			crit = is.popInteger();
			suckBlood = is.popInteger();
			behead = is.popInteger();
			remit = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.pushInteger(curHP);
			os.pushInteger(dodge);
			os.pushInteger(deflect);
			os.pushInteger(crit);
			os.pushInteger(suckBlood);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_ondamage";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			attackerID = is.popInteger();
			attackerType = is.popInteger();
			ownerID = is.popInteger();
			skillID = is.popInteger();
			curEventTime = is.popInteger();
			curHP = is.popInteger();
			dodge = is.popInteger();
			deflect = is.popInteger();
			crit = is.popInteger();
			suckBlood = is.popInteger();
			behead = is.popInteger();
			remit = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(attackerID);
			os.pushInteger(attackerType);
			os.pushInteger(ownerID);
			os.pushInteger(skillID);
			os.pushInteger(curEventTime);
			os.pushInteger(curHP);
			os.pushInteger(dodge);
			os.pushInteger(deflect);
			os.pushInteger(crit);
			os.pushInteger(suckBlood);
			os.pushInteger(behead);
			os.pushInteger(remit);
			os.push(timeTick);
		}

		public int id;
		public int attackerID;
		public int attackerType;
		public int ownerID;
		public int skillID;
		public int curEventTime;
		public int curHP;
		public int dodge;
		public int deflect;
		public int crit;
		public int suckBlood;
		public int behead;
		public int remit;
		public TimeTick timeTick;
	}

	// 周围玩家添加BUFF(remainTime： 剩余毫秒)
	public static class nearby_role_addbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_addbuff() { }

		public nearby_role_addbuff(int id, int buffID, int realmLvl, int remainTime, 
		                           TimeTick timeTick)
		{
			this.id = id;
			this.buffID = buffID;
			this.realmLvl = realmLvl;
			this.remainTime = remainTime;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			realmLvl = is.popInteger();
			remainTime = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.pushInteger(realmLvl);
			os.pushInteger(remainTime);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_addbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			buffID = is.popInteger();
			realmLvl = is.popInteger();
			remainTime = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.pushInteger(realmLvl);
			os.pushInteger(remainTime);
			os.push(timeTick);
		}

		public int id;
		public int buffID;
		public int realmLvl;
		public int remainTime;
		public TimeTick timeTick;
	}

	// 周围怪物添加BUFF(remainTime： 剩余毫秒)
	public static class nearby_monster_addbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_addbuff() { }

		public nearby_monster_addbuff(int id, int buffID, int realmLvl, int remainTime, 
		                              TimeTick timeTick)
		{
			this.id = id;
			this.buffID = buffID;
			this.realmLvl = realmLvl;
			this.remainTime = remainTime;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			realmLvl = is.popInteger();
			remainTime = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.pushInteger(realmLvl);
			os.pushInteger(remainTime);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_addbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			buffID = is.popInteger();
			realmLvl = is.popInteger();
			remainTime = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.pushInteger(realmLvl);
			os.pushInteger(remainTime);
			os.push(timeTick);
		}

		public int id;
		public int buffID;
		public int realmLvl;
		public int remainTime;
		public TimeTick timeTick;
	}

	// 周围佣兵添加BUFF(remainTime： 剩余毫秒)
	public static class nearby_pet_addbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_addbuff() { }

		public nearby_pet_addbuff(int roleID, int cfgid, int buffID, int realmLvl, 
		                          int remainTime, TimeTick timeTick)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.buffID = buffID;
			this.realmLvl = realmLvl;
			this.remainTime = remainTime;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			buffID = is.popInteger();
			realmLvl = is.popInteger();
			remainTime = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(buffID);
			os.pushInteger(realmLvl);
			os.pushInteger(remainTime);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_addbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			buffID = is.popInteger();
			realmLvl = is.popInteger();
			remainTime = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(buffID);
			os.pushInteger(realmLvl);
			os.pushInteger(remainTime);
			os.push(timeTick);
		}

		public int roleID;
		public int cfgid;
		public int buffID;
		public int realmLvl;
		public int remainTime;
		public TimeTick timeTick;
	}

	// 周围镖车添加BUFF
	public static class nearby_escortcar_addbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_escortcar_addbuff() { }

		public nearby_escortcar_addbuff(int id, int buffID, TimeTick timeTick)
		{
			this.id = id;
			this.buffID = buffID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_escortcar_addbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			buffID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		public int id;
		public int buffID;
		public TimeTick timeTick;
	}

	// 周围残影添加BUFF(remainTime： 剩余毫秒)
	public static class nearby_blur_addbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_addbuff() { }

		public nearby_blur_addbuff(int id, int buffID, int realmLvl, int remainTime, 
		                           TimeTick timeTick)
		{
			this.id = id;
			this.buffID = buffID;
			this.realmLvl = realmLvl;
			this.remainTime = remainTime;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			realmLvl = is.popInteger();
			remainTime = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.pushInteger(realmLvl);
			os.pushInteger(remainTime);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_addbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			buffID = is.popInteger();
			realmLvl = is.popInteger();
			remainTime = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.pushInteger(realmLvl);
			os.pushInteger(remainTime);
			os.push(timeTick);
		}

		public int id;
		public int buffID;
		public int realmLvl;
		public int remainTime;
		public TimeTick timeTick;
	}

	// 周围玩家去除BUFF
	public static class nearby_role_removebuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_removebuff() { }

		public nearby_role_removebuff(int id, int buffID, TimeTick timeTick)
		{
			this.id = id;
			this.buffID = buffID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_removebuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			buffID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		public int id;
		public int buffID;
		public TimeTick timeTick;
	}

	// 周围怪物去除BUFF
	public static class nearby_monster_removebuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_removebuff() { }

		public nearby_monster_removebuff(int id, int buffID, TimeTick timeTick)
		{
			this.id = id;
			this.buffID = buffID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_removebuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			buffID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		public int id;
		public int buffID;
		public TimeTick timeTick;
	}

	// 周围镖车去除BUFF
	public static class nearby_escortcar_removebuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_escortcar_removebuff() { }

		public nearby_escortcar_removebuff(int id, int buffID, TimeTick timeTick)
		{
			this.id = id;
			this.buffID = buffID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_escortcar_removebuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			buffID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		public int id;
		public int buffID;
		public TimeTick timeTick;
	}

	// 周围佣兵去除BUFF
	public static class nearby_pet_removebuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_removebuff() { }

		public nearby_pet_removebuff(int roleID, int cfgid, int buffID, TimeTick timeTick)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.buffID = buffID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			buffID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_removebuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			buffID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		public int roleID;
		public int cfgid;
		public int buffID;
		public TimeTick timeTick;
	}

	// 周围残影去除BUFF
	public static class nearby_blur_removebuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_removebuff() { }

		public nearby_blur_removebuff(int id, int buffID, TimeTick timeTick)
		{
			this.id = id;
			this.buffID = buffID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_removebuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			buffID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		public int id;
		public int buffID;
		public TimeTick timeTick;
	}

	// 周围玩家驱散BUFF
	public static class nearby_role_dispelbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_dispelbuff() { }

		public nearby_role_dispelbuff(int id, int buffID, TimeTick timeTick)
		{
			this.id = id;
			this.buffID = buffID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_dispelbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			buffID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		public int id;
		public int buffID;
		public TimeTick timeTick;
	}

	// 周围怪物驱散BUFF
	public static class nearby_monster_dispelbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_dispelbuff() { }

		public nearby_monster_dispelbuff(int id, int buffID, TimeTick timeTick)
		{
			this.id = id;
			this.buffID = buffID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			buffID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_dispelbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			buffID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		public int id;
		public int buffID;
		public TimeTick timeTick;
	}

	// 周围佣兵驱散BUFF
	public static class nearby_pet_dispelbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_dispelbuff() { }

		public nearby_pet_dispelbuff(int roleID, int cfgid, int buffID, TimeTick timeTick)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.buffID = buffID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			buffID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_dispelbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			buffID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(buffID);
			os.push(timeTick);
		}

		public int roleID;
		public int cfgid;
		public int buffID;
		public TimeTick timeTick;
	}

	// 周围玩家吸吸收伤害
	public static class nearby_role_reduce implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_reduce() { }

		public nearby_role_reduce(int id, int value)
		{
			this.id = id;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_reduce";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(value);
		}

		public int id;
		public int value;
	}

	// 周围佣兵吸吸收伤害
	public static class nearby_pet_reduce implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_reduce() { }

		public nearby_pet_reduce(int roleID, int cfgid, int value)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(value);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_reduce";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(value);
		}

		public int roleID;
		public int cfgid;
		public int value;
	}

	// 周围怪物吸吸收伤害
	public static class nearby_monster_reduce implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_reduce() { }

		public nearby_monster_reduce(int id, int value)
		{
			this.id = id;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(value);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_reduce";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(value);
		}

		public int id;
		public int value;
	}

	// 周围玩家受到BUFF伤害
	public static class nearby_role_buffdamage implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_buffdamage() { }

		public nearby_role_buffdamage(int id, int curHP, int attackerType, TimeTick timeTick)
		{
			this.id = id;
			this.curHP = curHP;
			this.attackerType = attackerType;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curHP = is.popInteger();
			attackerType = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curHP);
			os.pushInteger(attackerType);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_buffdamage";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			curHP = is.popInteger();
			attackerType = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(curHP);
			os.pushInteger(attackerType);
			os.push(timeTick);
		}

		public int id;
		public int curHP;
		public int attackerType;
		public TimeTick timeTick;
	}

	// 周围怪物受到BUFF伤害
	public static class nearby_monster_buffdamage implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_buffdamage() { }

		public nearby_monster_buffdamage(int id, int curHP, int attackerType, TimeTick timeTick)
		{
			this.id = id;
			this.curHP = curHP;
			this.attackerType = attackerType;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curHP = is.popInteger();
			attackerType = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curHP);
			os.pushInteger(attackerType);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_buffdamage";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			curHP = is.popInteger();
			attackerType = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(curHP);
			os.pushInteger(attackerType);
			os.push(timeTick);
		}

		public int id;
		public int curHP;
		public int attackerType;
		public TimeTick timeTick;
	}

	// 周围镖车受到BUFF伤害
	public static class nearby_escortcar_buffdamage implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_escortcar_buffdamage() { }

		public nearby_escortcar_buffdamage(int id, int curHP, int attackerType, TimeTick timeTick)
		{
			this.id = id;
			this.curHP = curHP;
			this.attackerType = attackerType;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curHP = is.popInteger();
			attackerType = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curHP);
			os.pushInteger(attackerType);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_escortcar_buffdamage";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			curHP = is.popInteger();
			attackerType = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(curHP);
			os.pushInteger(attackerType);
			os.push(timeTick);
		}

		public int id;
		public int curHP;
		public int attackerType;
		public TimeTick timeTick;
	}

	// 周围佣兵受到BUFF伤害
	public static class nearby_pet_buffdamage implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_buffdamage() { }

		public nearby_pet_buffdamage(int roleID, int cfgID, int curHP, int attackerType, 
		                             TimeTick timeTick)
		{
			this.roleID = roleID;
			this.cfgID = cfgID;
			this.curHP = curHP;
			this.attackerType = attackerType;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgID = is.popInteger();
			curHP = is.popInteger();
			attackerType = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgID);
			os.pushInteger(curHP);
			os.pushInteger(attackerType);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_buffdamage";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgID = is.popInteger();
			curHP = is.popInteger();
			attackerType = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgID);
			os.pushInteger(curHP);
			os.pushInteger(attackerType);
			os.push(timeTick);
		}

		public int roleID;
		public int cfgID;
		public int curHP;
		public int attackerType;
		public TimeTick timeTick;
	}

	// 周围残影受到BUFF伤害
	public static class nearby_blur_buffdamage implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_buffdamage() { }

		public nearby_blur_buffdamage(int id, int curHP, int attackerType, TimeTick timeTick)
		{
			this.id = id;
			this.curHP = curHP;
			this.attackerType = attackerType;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curHP = is.popInteger();
			attackerType = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curHP);
			os.pushInteger(attackerType);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_buffdamage";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			curHP = is.popInteger();
			attackerType = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(curHP);
			os.pushInteger(attackerType);
			os.push(timeTick);
		}

		public int id;
		public int curHP;
		public int attackerType;
		public TimeTick timeTick;
	}

	// 周围玩家同步血量
	public static class nearby_role_updatehp implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_updatehp() { }

		public nearby_role_updatehp(int id, int curHP)
		{
			this.id = id;
			this.curHP = curHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curHP);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_updatehp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(curHP);
		}

		public int id;
		public int curHP;
	}

	// 周围怪物同步血量
	public static class nearby_monster_updatehp implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_updatehp() { }

		public nearby_monster_updatehp(int id, int curHP)
		{
			this.id = id;
			this.curHP = curHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curHP);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_updatehp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(curHP);
		}

		public int id;
		public int curHP;
	}

	// 周围佣兵同步血量
	public static class nearby_pet_updatehp implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_updatehp() { }

		public nearby_pet_updatehp(int roleID, int cfgid, int curHP)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.curHP = curHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(curHP);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_updatehp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(curHP);
		}

		public int roleID;
		public int cfgid;
		public int curHP;
	}

	// 周围残影同步血量
	public static class nearby_blur_updatehp implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_updatehp() { }

		public nearby_blur_updatehp(int id, int curHP)
		{
			this.id = id;
			this.curHP = curHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curHP);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_updatehp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(curHP);
		}

		public int id;
		public int curHP;
	}

	// 周围镖车同步血量(包括镖车主人)
	public static class nearby_escortcar_updatehp implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_escortcar_updatehp() { }

		public nearby_escortcar_updatehp(int id, int curHP)
		{
			this.id = id;
			this.curHP = curHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curHP);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_escortcar_updatehp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(curHP);
		}

		public int id;
		public int curHP;
	}

	// 周围镖车社交信息
	public static class nearby_escortcar_updatesocial implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_escortcar_updatesocial() { }

		public nearby_escortcar_updatesocial(int id, int teamID, int sectID)
		{
			this.id = id;
			this.teamID = teamID;
			this.sectID = sectID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			teamID = is.popInteger();
			sectID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(teamID);
			os.pushInteger(sectID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_escortcar_updatesocial";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			teamID = is.popInteger();
			sectID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(teamID);
			os.pushInteger(sectID);
		}

		public int id;
		public int teamID;
		public int sectID;
	}

	// 周围镖车同步状态（1:正常  0:破损）
	public static class nearby_escortcar_updatestate implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_escortcar_updatestate() { }

		public nearby_escortcar_updatestate(int id, int state)
		{
			this.id = id;
			this.state = state;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(state);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_escortcar_updatestate";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(state);
		}

		public int id;
		public int state;
	}

	// 周围镖车被劫镖
	public static class nearby_escortcar_robbed implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_escortcar_robbed() { }

		public nearby_escortcar_robbed(int carID, RoleInfo owner, List<RoleInfo> robs)
		{
			this.carID = carID;
			this.owner = owner;
			this.robs = robs;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			carID = is.popInteger();
			if( owner == null )
				owner = new RoleInfo();
			is.pop(owner);
			robs = is.popList(RoleInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(carID);
			os.push(owner);
			os.pushList(robs);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_escortcar_robbed";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			carID = is.popInteger();
			owner = is.pop(RoleInfo.class);
			robs = is.popList(RoleInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(carID);
			os.push(owner);
			os.pushList(robs);
		}

		public int carID;
		public RoleInfo owner;
		public List<RoleInfo> robs;
	}

	// 周围玩家死亡
	public static class nearby_role_dead implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_dead() { }

		public nearby_role_dead(int id, int killerID)
		{
			this.id = id;
			this.killerID = killerID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			killerID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(killerID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_dead";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			killerID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(killerID);
		}

		public int id;
		public int killerID;
	}

	// 周围佣兵死亡
	public static class nearby_pet_dead implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_dead() { }

		public nearby_pet_dead(int roleID, int cfgid, int killerID)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.killerID = killerID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			killerID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(killerID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_dead";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			killerID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(killerID);
		}

		public int roleID;
		public int cfgid;
		public int killerID;
	}

	// 周围怪物死亡
	public static class nearby_monster_dead implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_dead() { }

		public nearby_monster_dead(int id, int killerID)
		{
			this.id = id;
			this.killerID = killerID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			killerID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(killerID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_dead";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			killerID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(killerID);
		}

		public int id;
		public int killerID;
	}

	// 周围残影死亡
	public static class nearby_blur_dead implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_dead() { }

		public nearby_blur_dead(int id, int killerID)
		{
			this.id = id;
			this.killerID = killerID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			killerID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(killerID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_dead";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			killerID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(killerID);
		}

		public int id;
		public int killerID;
	}

	// 周围玩家开始冲锋
	public static class nearby_role_rushstart implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_rushstart() { }

		public nearby_role_rushstart(int id, int skillID, Vector3 endPos, TimeTick timeTick)
		{
			this.id = id;
			this.skillID = skillID;
			this.endPos = endPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			skillID = is.popInteger();
			if( endPos == null )
				endPos = new Vector3();
			is.pop(endPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_rushstart";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			skillID = is.popInteger();
			endPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		public int id;
		public int skillID;
		public Vector3 endPos;
		public TimeTick timeTick;
	}

	// 周围佣兵开始冲锋
	public static class nearby_pet_rushstart implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_rushstart() { }

		public nearby_pet_rushstart(int roleID, int cfgid, int skillID, Vector3 endPos, 
		                            TimeTick timeTick)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.skillID = skillID;
			this.endPos = endPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			skillID = is.popInteger();
			if( endPos == null )
				endPos = new Vector3();
			is.pop(endPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_rushstart";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			skillID = is.popInteger();
			endPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		public int roleID;
		public int cfgid;
		public int skillID;
		public Vector3 endPos;
		public TimeTick timeTick;
	}

	// 周围怪物开始冲锋
	public static class nearby_monster_rushstart implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_rushstart() { }

		public nearby_monster_rushstart(int id, int skillID, Vector3 endPos, TimeTick timeTick)
		{
			this.id = id;
			this.skillID = skillID;
			this.endPos = endPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			skillID = is.popInteger();
			if( endPos == null )
				endPos = new Vector3();
			is.pop(endPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_rushstart";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			skillID = is.popInteger();
			endPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		public int id;
		public int skillID;
		public Vector3 endPos;
		public TimeTick timeTick;
	}

	// 周围怪物冲锋结束
	public static class nearby_monster_rushend implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_monster_rushend() { }

		public nearby_monster_rushend(int id, Vector3 targetPos, TimeTick timeTick)
		{
			this.id = id;
			this.targetPos = targetPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( targetPos == null )
				targetPos = new Vector3();
			is.pop(targetPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(targetPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_monster_rushend";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			targetPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(targetPos);
			os.push(timeTick);
		}

		public int id;
		public Vector3 targetPos;
		public TimeTick timeTick;
	}

	// 周围残影开始冲锋
	public static class nearby_blur_rushstart implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_rushstart() { }

		public nearby_blur_rushstart(int id, int skillID, Vector3 endPos, TimeTick timeTick)
		{
			this.id = id;
			this.skillID = skillID;
			this.endPos = endPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			skillID = is.popInteger();
			if( endPos == null )
				endPos = new Vector3();
			is.pop(endPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_rushstart";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			skillID = is.popInteger();
			endPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		public int id;
		public int skillID;
		public Vector3 endPos;
		public TimeTick timeTick;
	}

	// 周围残影冲锋结束
	public static class nearby_blur_rushend implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_blur_rushend() { }

		public nearby_blur_rushend(int id, Vector3 targetPos, TimeTick timeTick)
		{
			this.id = id;
			this.targetPos = targetPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( targetPos == null )
				targetPos = new Vector3();
			is.pop(targetPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(targetPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_blur_rushend";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			targetPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(targetPos);
			os.push(timeTick);
		}

		public int id;
		public Vector3 targetPos;
		public TimeTick timeTick;
	}

	// 周围玩家升级
	public static class nearby_role_lvlup implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_lvlup() { }

		public nearby_role_lvlup(int id, int newLvl)
		{
			this.id = id;
			this.newLvl = newLvl;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			newLvl = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(newLvl);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_lvlup";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			newLvl = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(newLvl);
		}

		public int id;
		public int newLvl;
	}

	// 周围玩家部位更新
	public static class nearby_role_updatepart implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_updatepart() { }

		public nearby_role_updatepart(int id, EquipPart equipPart)
		{
			this.id = id;
			this.equipPart = equipPart;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			if( equipPart == null )
				equipPart = new EquipPart();
			is.pop(equipPart);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.push(equipPart);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_updatepart";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			equipPart = is.pop(EquipPart.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.push(equipPart);
		}

		public int id;
		public EquipPart equipPart;
	}

	// 周围玩家同步最大血量
	public static class nearby_role_updatemaxhp implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_updatemaxhp() { }

		public nearby_role_updatemaxhp(int id, int newMaxHp)
		{
			this.id = id;
			this.newMaxHp = newMaxHp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			newMaxHp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(newMaxHp);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_updatemaxhp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			newMaxHp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(newMaxHp);
		}

		public int id;
		public int newMaxHp;
	}

	// 更新周围玩家是否是运镖行为
	public static class nearby_role_carbehavior implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_carbehavior() { }

		public nearby_role_carbehavior(int id, int carOwner, int carRobber)
		{
			this.id = id;
			this.carOwner = carOwner;
			this.carRobber = carRobber;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			carOwner = is.popInteger();
			carRobber = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(carOwner);
			os.pushInteger(carRobber);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_carbehavior";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			carOwner = is.popInteger();
			carRobber = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(carOwner);
			os.pushInteger(carRobber);
		}

		public int id;
		public int carOwner;
		public int carRobber;
	}

	// 周围佣兵同步最大血量
	public static class nearby_pet_updatemaxhp implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_updatemaxhp() { }

		public nearby_pet_updatemaxhp(int roleID, int cfgid, int newMaxHp)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.newMaxHp = newMaxHp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			newMaxHp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(newMaxHp);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_updatemaxhp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			newMaxHp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.pushInteger(newMaxHp);
		}

		public int roleID;
		public int cfgid;
		public int newMaxHp;
	}

	// 周围镖车同步最大血量(包括镖车主人)
	public static class nearby_escortcar_updatemaxhp implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_escortcar_updatemaxhp() { }

		public nearby_escortcar_updatemaxhp(int id, int newMaxHp)
		{
			this.id = id;
			this.newMaxHp = newMaxHp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			newMaxHp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(newMaxHp);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_escortcar_updatemaxhp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			newMaxHp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(newMaxHp);
		}

		public int id;
		public int newMaxHp;
	}

	// 周围单位复活
	public static class nearby_role_revive implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_revive() { }

		public nearby_role_revive(int id, int curHP, Vector3 position)
		{
			this.id = id;
			this.curHP = curHP;
			this.position = position;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curHP = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curHP);
			os.push(position);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_revive";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			curHP = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(curHP);
			os.push(position);
		}

		public int id;
		public int curHP;
		public Vector3 position;
	}

	// 周围佣兵复活
	public static class nearby_pet_revive implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_pet_revive() { }

		public nearby_pet_revive(int roleID, int cfgID, Vector3 position)
		{
			this.roleID = roleID;
			this.cfgID = cfgID;
			this.position = position;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgID);
			os.push(position);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_pet_revive";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgID = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgID);
			os.push(position);
		}

		public int roleID;
		public int cfgID;
		public Vector3 position;
	}

	// 周围陷阱改变状态
	public static class nearby_trap_changestate implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_trap_changestate() { }

		public nearby_trap_changestate(int trapID, int curState)
		{
			this.trapID = trapID;
			this.curState = curState;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			trapID = is.popInteger();
			curState = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(trapID);
			os.pushInteger(curState);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_trap_changestate";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			trapID = is.popInteger();
			curState = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(trapID);
			os.pushInteger(curState);
		}

		public int trapID;
		public int curState;
	}

	// 周围玩家更换装备
	public static class nearby_role_updateequip implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_updateequip() { }

		public nearby_role_updateequip(int roleID, int wid, int eid)
		{
			this.roleID = roleID;
			this.wid = wid;
			this.eid = eid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			wid = is.popInteger();
			eid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(wid);
			os.pushInteger(eid);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_updateequip";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			wid = is.popInteger();
			eid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(wid);
			os.pushInteger(eid);
		}

		public int roleID;
		public int wid;
		public int eid;
	}

	// 周围玩家脱装备
	public static class nearby_role_removeequip implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_removeequip() { }

		public nearby_role_removeequip(int roleID, int wid)
		{
			this.roleID = roleID;
			this.wid = wid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			wid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(wid);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_removeequip";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			wid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(wid);
		}

		public int roleID;
		public int wid;
	}

	// 周围玩家激活神兵
	public static class nearby_role_motivateweapon implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_motivateweapon() { }

		public nearby_role_motivateweapon(int roleID, int weaponID, int form, TimeTick timeTick)
		{
			this.roleID = roleID;
			this.weaponID = weaponID;
			this.form = form;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			weaponID = is.popInteger();
			form = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(weaponID);
			os.pushInteger(form);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_motivateweapon";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			weaponID = is.popInteger();
			form = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(weaponID);
			os.pushInteger(form);
			os.push(timeTick);
		}

		public int roleID;
		public int weaponID;
		public int form;
		public TimeTick timeTick;
	}

	// 周围玩家激活神兵结束
	public static class nearby_role_motivateend implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_motivateend() { }

		public nearby_role_motivateend(int roleID, TimeTick timeTick)
		{
			this.roleID = roleID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_motivateend";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.push(timeTick);
		}

		public int roleID;
		public TimeTick timeTick;
	}

	// 周围玩家开始采矿
	public static class nearby_role_mineralstart implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_mineralstart() { }

		public nearby_role_mineralstart(int roleID, int mineralID)
		{
			this.roleID = roleID;
			this.mineralID = mineralID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			mineralID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(mineralID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_mineralstart";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			mineralID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(mineralID);
		}

		public int roleID;
		public int mineralID;
	}

	// 周围玩家采矿结束
	public static class nearby_role_mineralend implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_mineralend() { }

		public nearby_role_mineralend(int success, int roleID)
		{
			this.success = success;
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			success = is.popInteger();
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(success);
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_mineralend";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			success = is.popInteger();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(success);
			os.pushInteger(roleID);
		}

		public int success;
		public int roleID;
	}

	// 周围矿状态更新(state 0:损坏 1::正常)
	public static class nearby_mineral_updatestate implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_mineral_updatestate() { }

		public nearby_mineral_updatestate(int id, int state)
		{
			this.id = id;
			this.state = state;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(state);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_mineral_updatestate";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(state);
		}

		public int id;
		public int state;
	}

	// 周围玩家采矿打断
	public static class nearby_role_mineralbreak implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_mineralbreak() { }

		public nearby_role_mineralbreak(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_mineralbreak";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 同步玩家击退结束位置
	public static class nearby_shiftend_role implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_shiftend_role() { }

		public nearby_shiftend_role(int skillID, int rid, Vector3 endPos, TimeTick timeTick)
		{
			this.skillID = skillID;
			this.rid = rid;
			this.endPos = endPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			rid = is.popInteger();
			if( endPos == null )
				endPos = new Vector3();
			is.pop(endPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.pushInteger(rid);
			os.push(endPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_shiftend_role";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			rid = is.popInteger();
			endPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.pushInteger(rid);
			os.push(endPos);
			os.push(timeTick);
		}

		public int skillID;
		public int rid;
		public Vector3 endPos;
		public TimeTick timeTick;
	}

	// 同步佣兵击退结束位置
	public static class nearby_shiftend_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_shiftend_pet() { }

		public nearby_shiftend_pet(int skillID, int rid, int pid, Vector3 endPos, 
		                           TimeTick timeTick)
		{
			this.skillID = skillID;
			this.rid = rid;
			this.pid = pid;
			this.endPos = endPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			rid = is.popInteger();
			pid = is.popInteger();
			if( endPos == null )
				endPos = new Vector3();
			is.pop(endPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.pushInteger(rid);
			os.pushInteger(pid);
			os.push(endPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_shiftend_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			rid = is.popInteger();
			pid = is.popInteger();
			endPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.pushInteger(rid);
			os.pushInteger(pid);
			os.push(endPos);
			os.push(timeTick);
		}

		public int skillID;
		public int rid;
		public int pid;
		public Vector3 endPos;
		public TimeTick timeTick;
	}

	// 同步怪物击退结束位置
	public static class nearby_shiftend_monster implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_shiftend_monster() { }

		public nearby_shiftend_monster(int skillID, int mid, Vector3 endPos, TimeTick timeTick)
		{
			this.skillID = skillID;
			this.mid = mid;
			this.endPos = endPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			mid = is.popInteger();
			if( endPos == null )
				endPos = new Vector3();
			is.pop(endPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.pushInteger(mid);
			os.push(endPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_shiftend_monster";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			mid = is.popInteger();
			endPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.pushInteger(mid);
			os.push(endPos);
			os.push(timeTick);
		}

		public int skillID;
		public int mid;
		public Vector3 endPos;
		public TimeTick timeTick;
	}

	// 同步残影击退结束位置
	public static class nearby_shiftend_blur implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_shiftend_blur() { }

		public nearby_shiftend_blur(int skillID, int bid, Vector3 endPos, TimeTick timeTick)
		{
			this.skillID = skillID;
			this.bid = bid;
			this.endPos = endPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			bid = is.popInteger();
			if( endPos == null )
				endPos = new Vector3();
			is.pop(endPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.pushInteger(bid);
			os.push(endPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_shiftend_blur";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			bid = is.popInteger();
			endPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.pushInteger(bid);
			os.push(endPos);
			os.push(timeTick);
		}

		public int skillID;
		public int bid;
		public Vector3 endPos;
		public TimeTick timeTick;
	}

	// 周围玩家添加嘲讽状态
	public static class nearby_addataunt_role implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_addataunt_role() { }

		public nearby_addataunt_role(int trid, int id, int type, int ownerID, 
		                             TimeTick timeTick)
		{
			this.trid = trid;
			this.id = id;
			this.type = type;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			trid = is.popInteger();
			id = is.popInteger();
			type = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(trid);
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_addataunt_role";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			trid = is.popInteger();
			id = is.popInteger();
			type = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(trid);
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int trid;
		public int id;
		public int type;
		public int ownerID;
		public TimeTick timeTick;
	}

	// 周围佣兵添加嘲讽状态
	public static class nearby_addataunt_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_addataunt_pet() { }

		public nearby_addataunt_pet(int tpid, int townerID, int id, int type, 
		                            int ownerID, TimeTick timeTick)
		{
			this.tpid = tpid;
			this.townerID = townerID;
			this.id = id;
			this.type = type;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tpid = is.popInteger();
			townerID = is.popInteger();
			id = is.popInteger();
			type = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(tpid);
			os.pushInteger(townerID);
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_addataunt_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tpid = is.popInteger();
			townerID = is.popInteger();
			id = is.popInteger();
			type = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(tpid);
			os.pushInteger(townerID);
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int tpid;
		public int townerID;
		public int id;
		public int type;
		public int ownerID;
		public TimeTick timeTick;
	}

	// 周围怪物添加嘲讽状态
	public static class nearby_addataunt_monster implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_addataunt_monster() { }

		public nearby_addataunt_monster(int tmid, int id, int type, int ownerID, 
		                                TimeTick timeTick)
		{
			this.tmid = tmid;
			this.id = id;
			this.type = type;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tmid = is.popInteger();
			id = is.popInteger();
			type = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(tmid);
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_addataunt_monster";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tmid = is.popInteger();
			id = is.popInteger();
			type = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(tmid);
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int tmid;
		public int id;
		public int type;
		public int ownerID;
		public TimeTick timeTick;
	}

	// 周围残影添加嘲讽状态
	public static class nearby_addataunt_blur implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_addataunt_blur() { }

		public nearby_addataunt_blur(int tbid, int id, int type, int ownerID, 
		                             TimeTick timeTick)
		{
			this.tbid = tbid;
			this.id = id;
			this.type = type;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tbid = is.popInteger();
			id = is.popInteger();
			type = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(tbid);
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_addataunt_blur";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tbid = is.popInteger();
			id = is.popInteger();
			type = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(tbid);
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int tbid;
		public int id;
		public int type;
		public int ownerID;
		public TimeTick timeTick;
	}

	// 周围怪物添加硬直状态
	public static class nearby_addspa_monster implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_addspa_monster() { }

		public nearby_addspa_monster(int tmid, TimeTick timeTick)
		{
			this.tmid = tmid;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tmid = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(tmid);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_addspa_monster";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tmid = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(tmid);
			os.push(timeTick);
		}

		public int tmid;
		public TimeTick timeTick;
	}

	// 更新周围玩家帮派信息
	public static class nearby_update_sectbrief implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_update_sectbrief() { }

		public nearby_update_sectbrief(int rid, SectBrief sectBrief)
		{
			this.rid = rid;
			this.sectBrief = sectBrief;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			if( sectBrief == null )
				sectBrief = new SectBrief();
			is.pop(sectBrief);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.push(sectBrief);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_update_sectbrief";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			sectBrief = is.pop(SectBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.push(sectBrief);
		}

		public int rid;
		public SectBrief sectBrief;
	}

	// 周围玩家添加状态
	public static class nearby_role_addstate implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_addstate() { }

		public nearby_role_addstate(int rid, int sid, TimeTick timeTick)
		{
			this.rid = rid;
			this.sid = sid;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			sid = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(sid);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_addstate";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			sid = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(sid);
			os.push(timeTick);
		}

		public int rid;
		public int sid;
		public TimeTick timeTick;
	}

	// 周围玩家去除状态
	public static class nearby_role_removestate implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_removestate() { }

		public nearby_role_removestate(int rid, int sid, TimeTick timeTick)
		{
			this.rid = rid;
			this.sid = sid;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			sid = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(sid);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_removestate";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			sid = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(sid);
			os.push(timeTick);
		}

		public int rid;
		public int sid;
		public TimeTick timeTick;
	}

	// 玩家自身添加状态
	public static class role_addstate implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_addstate() { }

		public role_addstate(int sid, TimeTick timeTick)
		{
			this.sid = sid;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sid = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sid);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_addstate";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sid = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(sid);
			os.push(timeTick);
		}

		public int sid;
		public TimeTick timeTick;
	}

	// 玩家自身去除状态
	public static class role_removestate implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_removestate() { }

		public role_removestate(int sid, TimeTick timeTick)
		{
			this.sid = sid;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sid = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sid);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_removestate";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sid = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(sid);
			os.push(timeTick);
		}

		public int sid;
		public TimeTick timeTick;
	}

	// 佣兵自身添加状态
	public static class pet_addstate implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_addstate() { }

		public pet_addstate(int pid, int sid, TimeTick timeTick)
		{
			this.pid = pid;
			this.sid = sid;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pid = is.popInteger();
			sid = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pid);
			os.pushInteger(sid);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "pet_addstate";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pid = is.popInteger();
			sid = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pid);
			os.pushInteger(sid);
			os.push(timeTick);
		}

		public int pid;
		public int sid;
		public TimeTick timeTick;
	}

	// 佣兵自身去除状态
	public static class pet_removestate implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_removestate() { }

		public pet_removestate(int pid, int sid, TimeTick timeTick)
		{
			this.pid = pid;
			this.sid = sid;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pid = is.popInteger();
			sid = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pid);
			os.pushInteger(sid);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "pet_removestate";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pid = is.popInteger();
			sid = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pid);
			os.pushInteger(sid);
			os.push(timeTick);
		}

		public int pid;
		public int sid;
		public TimeTick timeTick;
	}

	// 通知玩家复活
	public static class role_revive implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_revive() { }

		public role_revive(int curHP, Vector3 pos)
		{
			this.curHP = curHP;
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curHP = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curHP);
			os.push(pos);
		}

		@Override
		public String getPacketName()
		{
			return "role_revive";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curHP = is.popInteger();
			pos = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(curHP);
			os.push(pos);
		}

		public int curHP;
		public Vector3 pos;
	}

	// 佣兵召唤协议
	public static class role_summon_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_summon_pet() { }

		public role_summon_pet(int petId, int curHP, int curSP, Location location, 
		                       int seq, int isDead)
		{
			this.petId = petId;
			this.curHP = curHP;
			this.curSP = curSP;
			this.location = location;
			this.seq = seq;
			this.isDead = isDead;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			curHP = is.popInteger();
			curSP = is.popInteger();
			if( location == null )
				location = new Location();
			is.pop(location);
			seq = is.popInteger();
			isDead = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(curHP);
			os.pushInteger(curSP);
			os.push(location);
			os.pushInteger(seq);
			os.pushInteger(isDead);
		}

		@Override
		public String getPacketName()
		{
			return "role_summon_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			curHP = is.popInteger();
			curSP = is.popInteger();
			location = is.pop(Location.class);
			seq = is.popInteger();
			isDead = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(curHP);
			os.pushInteger(curSP);
			os.push(location);
			os.pushInteger(seq);
			os.pushInteger(isDead);
		}

		public int petId;
		public int curHP;
		public int curSP;
		public Location location;
		public int seq;
		public int isDead;
	}

	// 佣兵解散协议
	public static class role_unsummon_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_unsummon_pet() { }

		public role_unsummon_pet(int petId)
		{
			this.petId = petId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
		}

		@Override
		public String getPacketName()
		{
			return "role_unsummon_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
		}

		public int petId;
	}

	// 佣兵复活协议(map回应)
	public static class role_revive_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_revive_pet() { }

		public role_revive_pet(int pet, Location location)
		{
			this.pet = pet;
			this.location = location;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pet = is.popInteger();
			if( location == null )
				location = new Location();
			is.pop(location);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pet);
			os.push(location);
		}

		@Override
		public String getPacketName()
		{
			return "role_revive_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pet = is.popInteger();
			location = is.pop(Location.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pet);
			os.push(location);
		}

		public int pet;
		public Location location;
	}

	// 佣兵位置重置
	public static class pet_reset_position implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_reset_position() { }

		public pet_reset_position(int pid, Vector3 position)
		{
			this.pid = pid;
			this.position = position;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pid = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pid);
			os.push(position);
		}

		@Override
		public String getPacketName()
		{
			return "pet_reset_position";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pid = is.popInteger();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pid);
			os.push(position);
		}

		public int pid;
		public Vector3 position;
	}

	// 周围召唤出一个佣兵
	public static class nearby_call_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_call_pet() { }

		public nearby_call_pet(int roleID, int cfgid, Vector3 position, Vector3F rotation, 
		                       int curHP, int maxHP)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
			this.position = position;
			this.rotation = rotation;
			this.curHP = curHP;
			this.maxHP = maxHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			curHP = is.popInteger();
			maxHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.push(position);
			os.push(rotation);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_call_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
			position = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			curHP = is.popInteger();
			maxHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
			os.push(position);
			os.push(rotation);
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
		}

		public int roleID;
		public int cfgid;
		public Vector3 position;
		public Vector3F rotation;
		public int curHP;
		public int maxHP;
	}

	// 解散一个佣兵
	public static class nearby_dissolve_pet implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_dissolve_pet() { }

		public nearby_dissolve_pet(int roleID, int cfgid)
		{
			this.roleID = roleID;
			this.cfgid = cfgid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			cfgid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_dissolve_pet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			cfgid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(cfgid);
		}

		public int roleID;
		public int cfgid;
	}

	// 同步玩家耐久度
	public static class role_sync_durability implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sync_durability() { }

		public role_sync_durability(int wid, int durability)
		{
			this.wid = wid;
			this.durability = durability;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			wid = is.popInteger();
			durability = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(wid);
			os.pushInteger(durability);
		}

		@Override
		public String getPacketName()
		{
			return "role_sync_durability";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			wid = is.popInteger();
			durability = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(wid);
			os.pushInteger(durability);
		}

		public int wid;
		public int durability;
	}

	// 同步玩家能量
	public static class role_sync_sp implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sync_sp() { }

		public role_sync_sp(int sp)
		{
			this.sp = sp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sp);
		}

		@Override
		public String getPacketName()
		{
			return "role_sync_sp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(sp);
		}

		public int sp;
	}

	// 同步玩家buff增减战斗能量
	public static class role_sync_bufffightSP implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sync_bufffightSP() { }

		public role_sync_bufffightSP(int fightSP)
		{
			this.fightSP = fightSP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fightSP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(fightSP);
		}

		@Override
		public String getPacketName()
		{
			return "role_sync_bufffightSP";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			fightSP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(fightSP);
		}

		public int fightSP;
	}

	// 同步玩家战斗能量
	public static class role_sync_fightSP implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sync_fightSP() { }

		public role_sync_fightSP(int fightSP)
		{
			this.fightSP = fightSP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fightSP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(fightSP);
		}

		@Override
		public String getPacketName()
		{
			return "role_sync_fightSP";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			fightSP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(fightSP);
		}

		public int fightSP;
	}

	// 同步佣兵能量
	public static class pet_sync_sp implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_sync_sp() { }

		public pet_sync_sp(int cfgID, int sp)
		{
			this.cfgID = cfgID;
			this.sp = sp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cfgID = is.popInteger();
			sp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cfgID);
			os.pushInteger(sp);
		}

		@Override
		public String getPacketName()
		{
			return "pet_sync_sp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cfgID = is.popInteger();
			sp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cfgID);
			os.pushInteger(sp);
		}

		public int cfgID;
		public int sp;
	}

	// 激活神兵回应(motivate_weapon的异步回应)
	public static class motivate_state implements Stream.IStreamable, SStream.IStrPacket
	{

		public motivate_state() { }

		public motivate_state(int success, TimeTick timeTick)
		{
			this.success = success;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			success = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(success);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "motivate_state";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			success = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(success);
			os.push(timeTick);
		}

		public int success;
		public TimeTick timeTick;
	}

	// 查询周围玩家回应(query_roles_detail的异步回应)
	public static class roles_detail implements Stream.IStreamable, SStream.IStrPacket
	{

		public roles_detail() { }

		public roles_detail(List<RoleQueryDetail> roledetails)
		{
			this.roledetails = roledetails;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roledetails = is.popList(RoleQueryDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(roledetails);
		}

		@Override
		public String getPacketName()
		{
			return "roles_detail";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roledetails = is.popList(RoleQueryDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(roledetails);
		}

		public List<RoleQueryDetail> roledetails;
	}

	// 查询周围陷阱回应(query_traps_detail的异步回应)
	public static class traps_detail implements Stream.IStreamable, SStream.IStrPacket
	{

		public traps_detail() { }

		public traps_detail(List<TrapDetail> trapdetails)
		{
			this.trapdetails = trapdetails;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			trapdetails = is.popList(TrapDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(trapdetails);
		}

		@Override
		public String getPacketName()
		{
			return "traps_detail";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			trapdetails = is.popList(TrapDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(trapdetails);
		}

		public List<TrapDetail> trapdetails;
	}

	// 查询周围佣兵信息回应(query_pets_detail的异步回应)
	public static class pets_detail implements Stream.IStreamable, SStream.IStrPacket
	{

		public pets_detail() { }

		public pets_detail(List<PetDetail> petdetails)
		{
			this.petdetails = petdetails;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petdetails = is.popList(PetDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(petdetails);
		}

		@Override
		public String getPacketName()
		{
			return "pets_detail";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petdetails = is.popList(PetDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(petdetails);
		}

		public List<PetDetail> petdetails;
	}

	// 删除掉落
	public static class drop_delete implements Stream.IStreamable, SStream.IStrPacket
	{

		public drop_delete() { }

		public drop_delete(int dropID)
		{
			this.dropID = dropID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dropID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dropID);
		}

		@Override
		public String getPacketName()
		{
			return "drop_delete";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			dropID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(dropID);
		}

		public int dropID;
	}

	// 拾取掉落成功(role_pickup_drops的异步回应)
	public static class role_pickup_add implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_pickup_add() { }

		public role_pickup_add(Set<Integer> drops)
		{
			this.drops = drops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			drops = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(drops);
		}

		@Override
		public String getPacketName()
		{
			return "role_pickup_add";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			drops = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(drops);
		}

		public Set<Integer> drops;
	}

	// 掉落
	public static class role_sync_drops implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sync_drops() { }

		public role_sync_drops(Vector3 position, List<DropInfo> drops)
		{
			this.position = position;
			this.drops = drops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( position == null )
				position = new Vector3();
			is.pop(position);
			drops = is.popList(DropInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(position);
			os.pushList(drops);
		}

		@Override
		public String getPacketName()
		{
			return "role_sync_drops";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			position = is.pop(Vector3.class);
			drops = is.popList(DropInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(position);
			os.pushList(drops);
		}

		public Vector3 position;
		public List<DropInfo> drops;
	}

	// 进地图同步所以掉落
	public static class role_sync_alldrops implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_sync_alldrops() { }

		public role_sync_alldrops(List<DropDetail> drops)
		{
			this.drops = drops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			drops = is.popList(DropDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(drops);
		}

		@Override
		public String getPacketName()
		{
			return "role_sync_alldrops";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			drops = is.popList(DropDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(drops);
		}

		public List<DropDetail> drops;
	}

	// 拾取场景BUFF回应(role_pickup_mapbuff的异步回应)
	public static class role_mapbuff_add implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mapbuff_add() { }

		public role_mapbuff_add(int success, int mapBuffID)
		{
			this.success = success;
			this.mapBuffID = mapBuffID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			success = is.popInteger();
			mapBuffID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(success);
			os.pushInteger(mapBuffID);
		}

		@Override
		public String getPacketName()
		{
			return "role_mapbuff_add";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			success = is.popInteger();
			mapBuffID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(success);
			os.pushInteger(mapBuffID);
		}

		public int success;
		public int mapBuffID;
	}

	// 掉落场景BUFF
	public static class drop_mapbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public drop_mapbuff() { }

		public drop_mapbuff(BriefInfo mapbuff)
		{
			this.mapbuff = mapbuff;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( mapbuff == null )
				mapbuff = new BriefInfo();
			is.pop(mapbuff);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(mapbuff);
		}

		@Override
		public String getPacketName()
		{
			return "drop_mapbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapbuff = is.pop(BriefInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(mapbuff);
		}

		public BriefInfo mapbuff;
	}

	// 同步单机副本进度
	public static class privatemap_sync_progress implements Stream.IStreamable, SStream.IStrPacket
	{

		public privatemap_sync_progress() { }

		public privatemap_sync_progress(MapProgress mapprogress)
		{
			this.mapprogress = mapprogress;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( mapprogress == null )
				mapprogress = new MapProgress();
			is.pop(mapprogress);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(mapprogress);
		}

		@Override
		public String getPacketName()
		{
			return "privatemap_sync_progress";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapprogress = is.pop(MapProgress.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(mapprogress);
		}

		public MapProgress mapprogress;
	}

	// 同步会武竞技场信息
	public static class superarena_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_info() { }

		public superarena_info(Map<Integer, Integer> teamMembers, Map<Integer, SuperArenaEnemy> enemies)
		{
			this.teamMembers = teamMembers;
			this.enemies = enemies;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			teamMembers = is.popIntegerIntegerTreeMap();
			enemies = is.popIntegerTreeMap(SuperArenaEnemy.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(teamMembers);
			os.pushIntegerMap(enemies);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			teamMembers = is.popIntegerIntegerTreeMap();
			enemies = is.popIntegerTreeMap(SuperArenaEnemy.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(teamMembers);
			os.pushIntegerMap(enemies);
		}

		public Map<Integer, Integer> teamMembers;
		public Map<Integer, SuperArenaEnemy> enemies;
	}

	// 更新组队副本当前刷怪区域ID
	public static class update_curspawnarea implements Stream.IStreamable, SStream.IStrPacket
	{

		public update_curspawnarea() { }

		public update_curspawnarea(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "update_curspawnarea";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 玩家自己触发技能（服务器触发）
	public static class role_trig_skill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_trig_skill() { }

		public role_trig_skill(int skillID, int targetID, int targetType, int ownerID)
		{
			this.skillID = skillID;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
		}

		@Override
		public String getPacketName()
		{
			return "role_trig_skill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
		}

		public int skillID;
		public int targetID;
		public int targetType;
		public int ownerID;
	}

	// 佣兵自己触发技能（服务器触发）
	public static class pet_trig_skill implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_trig_skill() { }

		public pet_trig_skill(int pid, int skillID, int targetID, int targetType, 
		                      int ownerID)
		{
			this.pid = pid;
			this.skillID = skillID;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pid = is.popInteger();
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pid);
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
		}

		@Override
		public String getPacketName()
		{
			return "pet_trig_skill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pid = is.popInteger();
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pid);
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
		}

		public int pid;
		public int skillID;
		public int targetID;
		public int targetType;
		public int ownerID;
	}

	// 更新PK值
	public static class role_update_pkvalue implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_update_pkvalue() { }

		public role_update_pkvalue(int pkValue)
		{
			this.pkValue = pkValue;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pkValue = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pkValue);
		}

		@Override
		public String getPacketName()
		{
			return "role_update_pkvalue";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pkValue = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pkValue);
		}

		public int pkValue;
	}

	// 周围玩家同步PK状态
	public static class nearby_update_pkinfo implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_update_pkinfo() { }

		public nearby_update_pkinfo(int roleID, int grade, int pkState)
		{
			this.roleID = roleID;
			this.grade = grade;
			this.pkState = pkState;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			grade = is.popInteger();
			pkState = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(grade);
			os.pushInteger(pkState);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_update_pkinfo";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			grade = is.popInteger();
			pkState = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(grade);
			os.pushInteger(pkState);
		}

		public int roleID;
		public int grade;
		public int pkState;
	}

	// 冷却玩家某个技能（使技能不能使用）
	public static class role_reset_skill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_reset_skill() { }

		public role_reset_skill(int skillID)
		{
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "role_reset_skill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
		}

		public int skillID;
	}

	// 冷却佣兵某个技能（使技能不能使用）
	public static class pet_reset_skill implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_reset_skill() { }

		public pet_reset_skill(int pid, int skillID)
		{
			this.pid = pid;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pid = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pid);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "pet_reset_skill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pid = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pid);
			os.pushInteger(skillID);
		}

		public int pid;
		public int skillID;
	}

	// 快速冷却玩家某个技能（减少CD时间）
	public static class role_quickcool_skill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_quickcool_skill() { }

		public role_quickcool_skill(int skillID, int time)
		{
			this.skillID = skillID;
			this.time = time;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			time = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.pushInteger(time);
		}

		@Override
		public String getPacketName()
		{
			return "role_quickcool_skill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			time = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.pushInteger(time);
		}

		public int skillID;
		public int time;
	}

	// 快速冷却佣兵某个技能（减少CD时间）
	public static class pet_quickcool_skill implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_quickcool_skill() { }

		public pet_quickcool_skill(int pid, int skillID, int time)
		{
			this.pid = pid;
			this.skillID = skillID;
			this.time = time;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pid = is.popInteger();
			skillID = is.popInteger();
			time = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pid);
			os.pushInteger(skillID);
			os.pushInteger(time);
		}

		@Override
		public String getPacketName()
		{
			return "pet_quickcool_skill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pid = is.popInteger();
			skillID = is.popInteger();
			time = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pid);
			os.pushInteger(skillID);
			os.pushInteger(time);
		}

		public int pid;
		public int skillID;
		public int time;
	}

	// 势力战自己积分更新
	public static class role_forcewar_score implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_forcewar_score() { }

		public role_forcewar_score(int score)
		{
			this.score = score;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			score = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(score);
		}

		@Override
		public String getPacketName()
		{
			return "role_forcewar_score";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			score = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(score);
		}

		public int score;
	}

	// 查询势力战队友位置信息(query_forcewar_members_pos的回应)
	public static class forcewar_members_position implements Stream.IStreamable, SStream.IStrPacket
	{

		public forcewar_members_position() { }

		public forcewar_members_position(Map<Integer, Vector3> members)
		{
			this.members = members;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			members = is.popIntegerTreeMap(Vector3.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(members);
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_members_position";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			members = is.popIntegerTreeMap(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(members);
		}

		public Map<Integer, Vector3> members;
	}

	// 势力战雕像、水晶（进地图时同步的）
	public static class role_forcewar_statues implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_forcewar_statues() { }

		public role_forcewar_statues(List<EnterDetail> statues, int totalNormalStatue, int totalBigStatue)
		{
			this.statues = statues;
			this.totalNormalStatue = totalNormalStatue;
			this.totalBigStatue = totalBigStatue;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			statues = is.popList(EnterDetail.class);
			totalNormalStatue = is.popInteger();
			totalBigStatue = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(statues);
			os.pushInteger(totalNormalStatue);
			os.pushInteger(totalBigStatue);
		}

		@Override
		public String getPacketName()
		{
			return "role_forcewar_statues";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			statues = is.popList(EnterDetail.class);
			totalNormalStatue = is.popInteger();
			totalBigStatue = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(statues);
			os.pushInteger(totalNormalStatue);
			os.pushInteger(totalBigStatue);
		}

		public List<EnterDetail> statues;
		public int totalNormalStatue;
		public int totalBigStatue;
	}

	// 势力战战报查询回应(query_forcewar_result的回应)
	public static class roles_forcewaroverview implements Stream.IStreamable, SStream.IStrPacket
	{

		public roles_forcewaroverview() { }

		public roles_forcewaroverview(List<ForceWarOverview> white, List<ForceWarOverview> black)
		{
			this.white = white;
			this.black = black;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			white = is.popList(ForceWarOverview.class);
			black = is.popList(ForceWarOverview.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(white);
			os.pushList(black);
		}

		@Override
		public String getPacketName()
		{
			return "roles_forcewaroverview";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			white = is.popList(ForceWarOverview.class);
			black = is.popList(ForceWarOverview.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(white);
			os.pushList(black);
		}

		public List<ForceWarOverview> white;
		public List<ForceWarOverview> black;
	}

	// 击杀加分
	public static class role_forcewar_kill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_forcewar_kill() { }

		public role_forcewar_kill(int addScore)
		{
			this.addScore = addScore;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			addScore = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(addScore);
		}

		@Override
		public String getPacketName()
		{
			return "role_forcewar_kill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			addScore = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(addScore);
		}

		public int addScore;
	}

	// 助攻加分
	public static class role_forcewar_assist implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_forcewar_assist() { }

		public role_forcewar_assist(int addScore)
		{
			this.addScore = addScore;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			addScore = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(addScore);
		}

		@Override
		public String getPacketName()
		{
			return "role_forcewar_assist";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			addScore = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(addScore);
		}

		public int addScore;
	}

	public static class nearby_forcewar_statues implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_forcewar_statues() { }

		public nearby_forcewar_statues(int id, int curHP)
		{
			this.id = id;
			this.curHP = curHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(curHP);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_forcewar_statues";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			curHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(curHP);
		}

		public int id;
		public int curHP;
	}

	// 势力战阵营积分更新
	public static class nearby_forcewar_campscore implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_forcewar_campscore() { }

		public nearby_forcewar_campscore(int whiteScore, int blackScore)
		{
			this.whiteScore = whiteScore;
			this.blackScore = blackScore;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			whiteScore = is.popInteger();
			blackScore = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(whiteScore);
			os.pushInteger(blackScore);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_forcewar_campscore";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			whiteScore = is.popInteger();
			blackScore = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(whiteScore);
			os.pushInteger(blackScore);
		}

		public int whiteScore;
		public int blackScore;
	}

	// 势力战首杀
	public static class forcewar_first_blood implements Stream.IStreamable, SStream.IStrPacket
	{

		public forcewar_first_blood() { }

		public forcewar_first_blood(String killer, String deader)
		{
			this.killer = killer;
			this.deader = deader;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			killer = is.popString();
			deader = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(killer);
			os.pushString(deader);
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_first_blood";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			killer = is.popString();
			deader = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(killer);
			os.pushString(deader);
		}

		public String killer;
		public String deader;
	}

	// 势力战连杀、或者终结连杀
	public static class nearby_forcewar_kill implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_forcewar_kill() { }

		public nearby_forcewar_kill(String killer, int killerKills, String deader, int deaderKills)
		{
			this.killer = killer;
			this.killerKills = killerKills;
			this.deader = deader;
			this.deaderKills = deaderKills;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			killer = is.popString();
			killerKills = is.popInteger();
			deader = is.popString();
			deaderKills = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(killer);
			os.pushInteger(killerKills);
			os.pushString(deader);
			os.pushInteger(deaderKills);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_forcewar_kill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			killer = is.popString();
			killerKills = is.popInteger();
			deader = is.popString();
			deaderKills = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(killer);
			os.pushInteger(killerKills);
			os.pushString(deader);
			os.pushInteger(deaderKills);
		}

		public String killer;
		public int killerKills;
		public String deader;
		public int deaderKills;
	}

	// 周围玩家改名
	public static class nearby_role_rename implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_rename() { }

		public nearby_role_rename(int rid, String newName)
		{
			this.rid = rid;
			this.newName = newName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			newName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushString(newName);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_rename";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			newName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushString(newName);
		}

		public int rid;
		public String newName;
	}

	// 同步多人坐骑信息
	public static class role_mulhorse implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mulhorse() { }

		public role_mulhorse(RoleDetail leader, Map<Integer, RoleDetail> members, Vector3 position, Vector3F rotation)
		{
			this.leader = leader;
			this.members = members;
			this.position = position;
			this.rotation = rotation;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( leader == null )
				leader = new RoleDetail();
			is.pop(leader);
			members = is.popIntegerTreeMap(RoleDetail.class);
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(leader);
			os.pushIntegerMap(members);
			os.push(position);
			os.push(rotation);
		}

		@Override
		public String getPacketName()
		{
			return "role_mulhorse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			leader = is.pop(RoleDetail.class);
			members = is.popIntegerTreeMap(RoleDetail.class);
			position = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(leader);
			os.pushIntegerMap(members);
			os.push(position);
			os.push(rotation);
		}

		public RoleDetail leader;
		public Map<Integer, RoleDetail> members;
		public Vector3 position;
		public Vector3F rotation;
	}

	// 离开多人坐骑
	public static class role_leave_mulhorse implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_leave_mulhorse() { }

		public role_leave_mulhorse(Vector3 position)
		{
			this.position = position;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( position == null )
				position = new Vector3();
			is.pop(position);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(position);
		}

		@Override
		public String getPacketName()
		{
			return "role_leave_mulhorse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			position = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(position);
		}

		public Vector3 position;
	}

	// 通知成员多人坐骑变化
	public static class role_update_mulhorse implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_update_mulhorse() { }

		public role_update_mulhorse(int index, RoleDetail member)
		{
			this.index = index;
			this.member = member;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
			if( member == null )
				member = new RoleDetail();
			is.pop(member);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
			os.push(member);
		}

		@Override
		public String getPacketName()
		{
			return "role_update_mulhorse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			index = is.popInteger();
			member = is.pop(RoleDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(index);
			os.push(member);
		}

		public int index;
		public RoleDetail member;
	}

	// 广播周围玩家多人坐骑变化
	public static class nearby_update_mulhorse implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_update_mulhorse() { }

		public nearby_update_mulhorse(int leaderID, int index, RoleDetail member)
		{
			this.leaderID = leaderID;
			this.index = index;
			this.member = member;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			leaderID = is.popInteger();
			index = is.popInteger();
			if( member == null )
				member = new RoleDetail();
			is.pop(member);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(leaderID);
			os.pushInteger(index);
			os.push(member);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_update_mulhorse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			leaderID = is.popInteger();
			index = is.popInteger();
			member = is.pop(RoleDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(leaderID);
			os.pushInteger(index);
			os.push(member);
		}

		public int leaderID;
		public int index;
		public RoleDetail member;
	}

	// 相依相偎
	public static class role_staywith implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_staywith() { }

		public role_staywith(RoleDetail leader, RoleDetail member, Vector3 position, Vector3F rotation)
		{
			this.leader = leader;
			this.member = member;
			this.position = position;
			this.rotation = rotation;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( leader == null )
				leader = new RoleDetail();
			is.pop(leader);
			if( member == null )
				member = new RoleDetail();
			is.pop(member);
			if( position == null )
				position = new Vector3();
			is.pop(position);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(leader);
			os.push(member);
			os.push(position);
			os.push(rotation);
		}

		@Override
		public String getPacketName()
		{
			return "role_staywith";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			leader = is.pop(RoleDetail.class);
			member = is.pop(RoleDetail.class);
			position = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(leader);
			os.push(member);
			os.push(position);
			os.push(rotation);
		}

		public RoleDetail leader;
		public RoleDetail member;
		public Vector3 position;
		public Vector3F rotation;
	}

	// 解散相依相偎
	public static class role_dissolve_staywith implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_dissolve_staywith";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 广播周围玩家相依相偎
	public static class nearby_role_staywith implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_staywith() { }

		public nearby_role_staywith(int rid, RoleDetail leader, RoleDetail member)
		{
			this.rid = rid;
			this.leader = leader;
			this.member = member;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			if( leader == null )
				leader = new RoleDetail();
			is.pop(leader);
			if( member == null )
				member = new RoleDetail();
			is.pop(member);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.push(leader);
			os.push(member);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_staywith";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			leader = is.pop(RoleDetail.class);
			member = is.pop(RoleDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.push(leader);
			os.push(member);
		}

		public int rid;
		public RoleDetail leader;
		public RoleDetail member;
	}

	// 广播周围玩家解散相依相偎
	public static class nearby_dissolve_staywith implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_dissolve_staywith() { }

		public nearby_dissolve_staywith(int rid)
		{
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_dissolve_staywith";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
		}

		public int rid;
	}

	// 同步世界boss伤害排行
	public static class boss_damage_rank implements Stream.IStreamable, SStream.IStrPacket
	{

		public boss_damage_rank() { }

		public boss_damage_rank(int bossID, List<DamageInfo> rank)
		{
			this.bossID = bossID;
			this.rank = rank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bossID = is.popInteger();
			rank = is.popList(DamageInfo.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bossID);
			os.pushList(rank);
		}

		@Override
		public String getPacketName()
		{
			return "boss_damage_rank";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bossID = is.popInteger();
			rank = is.popList(DamageInfo.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bossID);
			os.pushList(rank);
		}

		public int bossID;
		public List<DamageInfo> rank;
	}

	// 关闭世界boss伤害界面
	public static class boss_damage_close implements Stream.IStreamable, SStream.IStrPacket
	{

		public boss_damage_close() { }

		public boss_damage_close(int bossID)
		{
			this.bossID = bossID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bossID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bossID);
		}

		@Override
		public String getPacketName()
		{
			return "boss_damage_close";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bossID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bossID);
		}

		public int bossID;
	}

	// 周围玩家内甲变化广播
	public static class nearby_role_updatearmor implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_updatearmor() { }

		public nearby_role_updatearmor(int rid, ArmorBrief armor)
		{
			this.rid = rid;
			this.armor = armor;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			if( armor == null )
				armor = new ArmorBrief();
			is.pop(armor);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.push(armor);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_updatearmor";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			armor = is.pop(ArmorBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.push(armor);
		}

		public int rid;
		public ArmorBrief armor;
	}

	// 玩家内甲冻结状态更新
	public static class role_armorfreeze_update implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_armorfreeze_update() { }

		public role_armorfreeze_update(int freeze)
		{
			this.freeze = freeze;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			freeze = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(freeze);
		}

		@Override
		public String getPacketName()
		{
			return "role_armorfreeze_update";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			freeze = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(freeze);
		}

		public int freeze;
	}

	// 玩家内甲值变化
	public static class role_armorval_update implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_armorval_update() { }

		public role_armorval_update(int armorVal)
		{
			this.armorVal = armorVal;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			armorVal = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(armorVal);
		}

		@Override
		public String getPacketName()
		{
			return "role_armorval_update";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			armorVal = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(armorVal);
		}

		public int armorVal;
	}

	// 玩家内甲虚弱状态更新
	public static class role_armorweak_update implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_armorweak_update() { }

		public role_armorweak_update(int weak)
		{
			this.weak = weak;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weak = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weak);
		}

		@Override
		public String getPacketName()
		{
			return "role_armorweak_update";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weak = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weak);
		}

		public int weak;
	}

	// 广播周围玩家内甲虚弱状态更新
	public static class nearby_role_armorweak implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_armorweak() { }

		public nearby_role_armorweak(int rid, int weak)
		{
			this.rid = rid;
			this.weak = weak;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			weak = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(weak);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_armorweak";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			weak = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(weak);
		}

		public int rid;
		public int weak;
	}

	// 2v2竞技场每一小场结果（0：负  1：胜 2：平）
	public static class superarena_race_result implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_race_result() { }

		public superarena_race_result(int result)
		{
			this.result = result;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			result = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(result);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_race_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			result = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(result);
		}

		public int result;
	}

	// 进入地图同步当前比分
	public static class superarena_race_results implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_race_results() { }

		public superarena_race_results(List<Integer> results)
		{
			this.results = results;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			results = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(results);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_race_results";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			results = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(results);
		}

		public List<Integer> results;
	}

	// 战况同步
	public static class sect_group_map_sync_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_group_map_sync_info() { }

		public sect_group_map_sync_info(Map<Integer, Integer> killNum, Map<Integer, RoleDamageDetail> damageRank)
		{
			this.killNum = killNum;
			this.damageRank = damageRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			killNum = is.popIntegerIntegerTreeMap();
			damageRank = is.popIntegerTreeMap(RoleDamageDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(killNum);
			os.pushIntegerMap(damageRank);
		}

		@Override
		public String getPacketName()
		{
			return "sect_group_map_sync_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			killNum = is.popIntegerIntegerTreeMap();
			damageRank = is.popIntegerTreeMap(RoleDamageDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(killNum);
			os.pushIntegerMap(damageRank);
		}

		public Map<Integer, Integer> killNum;
		public Map<Integer, RoleDamageDetail> damageRank;
	}

	// 进入帮派本同步
	public static class enter_sect_group_map implements Stream.IStreamable, SStream.IStrPacket
	{

		public enter_sect_group_map() { }

		public enter_sect_group_map(int mapId, Map<Integer, Integer> killNum, Map<Integer, RoleDamageDetail> damageRank)
		{
			this.mapId = mapId;
			this.killNum = killNum;
			this.damageRank = damageRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			killNum = is.popIntegerIntegerTreeMap();
			damageRank = is.popIntegerTreeMap(RoleDamageDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushIntegerIntegerMap(killNum);
			os.pushIntegerMap(damageRank);
		}

		@Override
		public String getPacketName()
		{
			return "enter_sect_group_map";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			killNum = is.popIntegerIntegerTreeMap();
			damageRank = is.popIntegerTreeMap(RoleDamageDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushIntegerIntegerMap(killNum);
			os.pushIntegerMap(damageRank);
		}

		public int mapId;
		public Map<Integer, Integer> killNum;
		public Map<Integer, RoleDamageDetail> damageRank;
	}

	// 双倍掉落冒字
	public static class role_double_drop implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_double_drop";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 世界boss冒泡
	public static class world_boss_pop implements Stream.IStreamable, SStream.IStrPacket
	{

		public world_boss_pop() { }

		public world_boss_pop(int monsterID, int bossID, int index)
		{
			this.monsterID = monsterID;
			this.bossID = bossID;
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			monsterID = is.popInteger();
			bossID = is.popInteger();
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(monsterID);
			os.pushInteger(bossID);
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "world_boss_pop";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			monsterID = is.popInteger();
			bossID = is.popInteger();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(monsterID);
			os.pushInteger(bossID);
			os.pushInteger(index);
		}

		public int monsterID;
		public int bossID;
		public int index;
	}

	public static class entity_nearby implements Stream.IStreamable, SStream.IStrPacket
	{

		public entity_nearby() { }

		public entity_nearby(int id, int type, int near)
		{
			this.id = id;
			this.type = type;
			this.near = near;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
			near = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(near);
		}

		@Override
		public String getPacketName()
		{
			return "entity_nearby";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			type = is.popInteger();
			near = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(type);
			os.pushInteger(near);
		}

		public int id;
		public int type;
		public int near;
	}

	// 周围玩家传家宝更新
	public static class nearby_role_updateheirloom implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_updateheirloom() { }

		public nearby_role_updateheirloom(int rid, HeirloomBrief heirloom)
		{
			this.rid = rid;
			this.heirloom = heirloom;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			if( heirloom == null )
				heirloom = new HeirloomBrief();
			is.pop(heirloom);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.push(heirloom);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_updateheirloom";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			heirloom = is.pop(HeirloomBrief.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.push(heirloom);
		}

		public int rid;
		public HeirloomBrief heirloom;
	}

	// 周围玩家休闲宠物更新
	public static class nearby_role_updatewizardpet implements Stream.IStreamable, SStream.IStrPacket
	{

		public nearby_role_updatewizardpet() { }

		public nearby_role_updatewizardpet(int rid, int petId)
		{
			this.rid = rid;
			this.petId = petId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			petId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(petId);
		}

		@Override
		public String getPacketName()
		{
			return "nearby_role_updatewizardpet";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			petId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(petId);
		}

		public int rid;
		public int petId;
	}

	// 角色伤害排行
	public static class map_copy_damage_rank implements Stream.IStreamable, SStream.IStrPacket
	{

		public map_copy_damage_rank() { }

		public map_copy_damage_rank(Map<Integer, AttackDamageDetail> damageRank)
		{
			this.damageRank = damageRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			damageRank = is.popIntegerTreeMap(AttackDamageDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(damageRank);
		}

		@Override
		public String getPacketName()
		{
			return "map_copy_damage_rank";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			damageRank = is.popIntegerTreeMap(AttackDamageDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(damageRank);
		}

		public Map<Integer, AttackDamageDetail> damageRank;
	}

	public static class receive_towerdefence_alarm implements Stream.IStreamable, SStream.IStrPacket
	{

		public receive_towerdefence_alarm() { }

		public receive_towerdefence_alarm(int rid, String name, int type)
		{
			this.rid = rid;
			this.name = name;
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			name = is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushString(name);
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "receive_towerdefence_alarm";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			name = is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushString(name);
			os.pushInteger(type);
		}

		public int rid;
		public String name;
		public int type;
	}

	public static class towerdefence_npc_pop implements Stream.IStreamable, SStream.IStrPacket
	{

		public towerdefence_npc_pop() { }

		public towerdefence_npc_pop(int mid, int percent)
		{
			this.mid = mid;
			this.percent = percent;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mid = is.popInteger();
			percent = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mid);
			os.pushInteger(percent);
		}

		@Override
		public String getPacketName()
		{
			return "towerdefence_npc_pop";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mid = is.popInteger();
			percent = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mid);
			os.pushInteger(percent);
		}

		public int mid;
		public int percent;
	}

	public static class towerdefence_spawn_monsters implements Stream.IStreamable, SStream.IStrPacket
	{

		public towerdefence_spawn_monsters() { }

		public towerdefence_spawn_monsters(int count)
		{
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "towerdefence_spawn_monsters";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(count);
		}

		public int count;
	}

	public static class towerdefence_npc_info implements Stream.IStreamable, SStream.IStrPacket
	{

		public towerdefence_npc_info() { }

		public towerdefence_npc_info(int curHP, int maxHP)
		{
			this.curHP = curHP;
			this.maxHP = maxHP;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			curHP = is.popInteger();
			maxHP = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
		}

		@Override
		public String getPacketName()
		{
			return "towerdefence_npc_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			curHP = is.popInteger();
			maxHP = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(curHP);
			os.pushInteger(maxHP);
		}

		public int curHP;
		public int maxHP;
	}

	// 守护副本npc死亡
	public static class towerdefence_npc_dead implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "towerdefence_npc_dead";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	public static class sync_role_forcetype implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_role_forcetype() { }

		public sync_role_forcetype(int forceType)
		{
			this.forceType = forceType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			forceType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(forceType);
		}

		@Override
		public String getPacketName()
		{
			return "sync_role_forcetype";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			forceType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(forceType);
		}

		public int forceType;
	}

	public static class sync_role_mapskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_role_mapskill() { }

		public sync_role_mapskill(MapSkillData skillInfo)
		{
			this.skillInfo = skillInfo;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( skillInfo == null )
				skillInfo = new MapSkillData();
			is.pop(skillInfo);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(skillInfo);
		}

		@Override
		public String getPacketName()
		{
			return "sync_role_mapskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillInfo = is.pop(MapSkillData.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(skillInfo);
		}

		public MapSkillData skillInfo;
	}

	public static class role_usemapskill_ok implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_usemapskill_ok() { }

		public role_usemapskill_ok(int skillId)
		{
			this.skillId = skillId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
		}

		@Override
		public String getPacketName()
		{
			return "role_usemapskill_ok";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillId);
		}

		public int skillId;
	}

	// ping with stamp
	public static class client_ping implements Stream.IStreamable, SStream.IStrPacket
	{

		public client_ping() { }

		public client_ping(int stamp)
		{
			this.stamp = stamp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			stamp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(stamp);
		}

		@Override
		public String getPacketName()
		{
			return "client_ping";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			stamp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(stamp);
		}

		public int stamp;
	}

	// keep alive
	public static class keep_alive implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "keep_alive";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 登录协议
	public static class user_login_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public user_login_req() { }

		public user_login_req(int gsId, String openId, String channel, UserLoginInfo loginInfo, 
		                      int roleId, CreateRoleParam createParam)
		{
			this.gsId = gsId;
			this.openId = openId;
			this.channel = channel;
			this.loginInfo = loginInfo;
			this.roleId = roleId;
			this.createParam = createParam;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gsId = is.popInteger();
			openId = is.popString();
			channel = is.popString();
			if( loginInfo == null )
				loginInfo = new UserLoginInfo();
			is.pop(loginInfo);
			roleId = is.popInteger();
			if( createParam == null )
				createParam = new CreateRoleParam();
			is.pop(createParam);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(gsId);
			os.pushString(openId);
			os.pushString(channel);
			os.push(loginInfo);
			os.pushInteger(roleId);
			os.push(createParam);
		}

		@Override
		public String getPacketName()
		{
			return "user_login_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			gsId = is.popInteger();
			openId = is.popString();
			channel = is.popString();
			loginInfo = is.pop(UserLoginInfo.class);
			roleId = is.popInteger();
			createParam = is.pop(CreateRoleParam.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(gsId);
			os.pushString(openId);
			os.pushString(channel);
			os.push(loginInfo);
			os.pushInteger(roleId);
			os.push(createParam);
		}

		public int gsId;
		public String openId;
		public String channel;
		public UserLoginInfo loginInfo;
		public int roleId;
		public CreateRoleParam createParam;
	}

	// 客户端通知服务器要退出到选人界面
	public static class role_logout_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_logout_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 客户端查询排队位置
	public static class query_loginqueue_pos implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "query_loginqueue_pos";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 客户端查询排队位置
	public static class cancel_loginqueue implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "cancel_loginqueue";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 客户端从堵塞状态恢复协议
	public static class role_sync_map implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_sync_map";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 发送聊天消息请求
	public static class msg_send_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public msg_send_req() { }

		public msg_send_req(int type, int id, String msg, String gsName)
		{
			this.type = type;
			this.id = id;
			this.msg = msg;
			this.gsName = gsName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			id = is.popInteger();
			msg = is.popString();
			gsName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(id);
			os.pushString(msg);
			os.pushString(gsName);
		}

		@Override
		public String getPacketName()
		{
			return "msg_send_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			id = is.popInteger();
			msg = is.popString();
			gsName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(id);
			os.pushString(msg);
			os.pushString(gsName);
		}

		public int type;
		public int id;
		public String msg;
		public String gsName;
	}

	// 拜师申请
	public static class master_apply_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_apply_req() { }

		public master_apply_req(int targetRoleID)
		{
			this.targetRoleID = targetRoleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(targetRoleID);
		}

		@Override
		public String getPacketName()
		{
			return "master_apply_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(targetRoleID);
		}

		public int targetRoleID;
	}

	// 当面收徒申请
	public static class master_offer_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_offer_req() { }

		public master_offer_req(int targetRoleID)
		{
			this.targetRoleID = targetRoleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(targetRoleID);
		}

		@Override
		public String getPacketName()
		{
			return "master_offer_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(targetRoleID);
		}

		public int targetRoleID;
	}

	// 接受当面收徒申请
	public static class master_accept_offer_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_accept_offer_req() { }

		public master_accept_offer_req(int targetRoleID)
		{
			this.targetRoleID = targetRoleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(targetRoleID);
		}

		@Override
		public String getPacketName()
		{
			return "master_accept_offer_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(targetRoleID);
		}

		public int targetRoleID;
	}

	// 接受拜师申请
	public static class master_accept_apply_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_accept_apply_req() { }

		public master_accept_apply_req(int targetRoleID, boolean accept)
		{
			this.targetRoleID = targetRoleID;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			targetRoleID = is.popInteger();
			accept = is.popBoolean();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(targetRoleID);
			os.pushBoolean(accept);
		}

		@Override
		public String getPacketName()
		{
			return "master_accept_apply_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			targetRoleID = is.popInteger();
			accept = is.popBoolean();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(targetRoleID);
			os.pushBoolean(accept);
		}

		public int targetRoleID;
		public boolean accept;
	}

	// 叛师
	public static class master_betray_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "master_betray_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 出师
	public static class master_graduate_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "master_graduate_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同意出师申请
	public static class master_agree_graduate_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_agree_graduate_req() { }

		public master_agree_graduate_req(int targetRoleID, boolean agree)
		{
			this.targetRoleID = targetRoleID;
			this.agree = agree;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			targetRoleID = is.popInteger();
			agree = is.popBoolean();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(targetRoleID);
			os.pushBoolean(agree);
		}

		@Override
		public String getPacketName()
		{
			return "master_agree_graduate_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			targetRoleID = is.popInteger();
			agree = is.popBoolean();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(targetRoleID);
			os.pushBoolean(agree);
		}

		public int targetRoleID;
		public boolean agree;
	}

	// 开除
	public static class master_dismiss_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_dismiss_req() { }

		public master_dismiss_req(int targetRoleID)
		{
			this.targetRoleID = targetRoleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(targetRoleID);
		}

		@Override
		public String getPacketName()
		{
			return "master_dismiss_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			targetRoleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(targetRoleID);
		}

		public int targetRoleID;
	}

	// 查询自己的收徒宣言
	public static class master_get_announce_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "master_get_announce_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 设置自己的收徒宣言
	public static class master_set_announce_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_set_announce_req() { }

		public master_set_announce_req(String content)
		{
			this.content = content;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			content = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(content);
		}

		@Override
		public String getPacketName()
		{
			return "master_set_announce_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			content = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(content);
		}

		public String content;
	}

	// 删除自己的收徒宣言
	public static class master_del_announce_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "master_del_announce_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 请求基本信息
	public static class master_info_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "master_info_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 查看个人消息
	public static class master_msg_list_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "master_msg_list_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 删除叛师消息
	public static class master_remove_betray_msg_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_remove_betray_msg_req() { }

		public master_remove_betray_msg_req(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "master_remove_betray_msg_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 请求师父列表
	public static class master_list_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_list_req() { }

		public master_list_req(int lastStartIndex)
		{
			this.lastStartIndex = lastStartIndex;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			lastStartIndex = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(lastStartIndex);
		}

		@Override
		public String getPacketName()
		{
			return "master_list_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			lastStartIndex = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(lastStartIndex);
		}

		public int lastStartIndex;
	}

	// 查看活跃
	public static class master_list_apprentice_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "master_list_apprentice_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 请求任务进度
	public static class master_tasks_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "master_tasks_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 师徒商城同步协议
	public static class master_shopsync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "master_shopsync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 师徒商城刷新协议
	public static class master_shoprefresh_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_shoprefresh_req() { }

		public master_shoprefresh_req(int times, int isSecondType)
		{
			this.times = times;
			this.isSecondType = isSecondType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
			isSecondType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
			os.pushInteger(isSecondType);
		}

		@Override
		public String getPacketName()
		{
			return "master_shoprefresh_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
			isSecondType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
			os.pushInteger(isSecondType);
		}

		public int times;
		public int isSecondType;
	}

	// 师徒商城买商品协议
	public static class master_shopbuy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public master_shopbuy_req() { }

		public master_shopbuy_req(int seq)
		{
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "master_shopbuy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
		}

		public int seq;
	}

	// 客户端通知服务器已经load好地图资源准备好进入地图的协议
	public static class role_enter_map implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_enter_map";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 进入大地图传送点
	public static class waypoint_enter_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public waypoint_enter_req() { }

		public waypoint_enter_req(int wid, int line)
		{
			this.wid = wid;
			this.line = line;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			wid = is.popInteger();
			line = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(wid);
			os.pushInteger(line);
		}

		@Override
		public String getPacketName()
		{
			return "waypoint_enter_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			wid = is.popInteger();
			line = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(wid);
			os.pushInteger(line);
		}

		public int wid;
		public int line;
	}

	// 脱离卡死点
	public static class wrongpos_leave_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "wrongpos_leave_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步世界地图分线状态
	public static class worldline_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "worldline_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 切换当前地图分线(line: 从1开始)
	public static class worldline_change_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public worldline_change_req() { }

		public worldline_change_req(int line)
		{
			this.line = line;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			line = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(line);
		}

		@Override
		public String getPacketName()
		{
			return "worldline_change_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			line = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(line);
		}

		public int line;
	}

	// 查询玩家信息
	public static class query_rolebrief_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_rolebrief_req() { }

		public query_rolebrief_req(int rid)
		{
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "query_rolebrief_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
		}

		public int rid;
	}

	// 查询机器人信息响应
	public static class query_robot_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_robot_req() { }

		public query_robot_req(int rid, int rank)
		{
			this.rid = rid;
			this.rank = rank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			rank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(rank);
		}

		@Override
		public String getPacketName()
		{
			return "query_robot_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			rank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(rank);
		}

		public int rid;
		public int rank;
	}

	// 获取玩家的特性信息
	public static class query_rolefeature_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_rolefeature_req() { }

		public query_rolefeature_req(int rid)
		{
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "query_rolefeature_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
		}

		public int rid;
	}

	// 获取玩家所有已获得的佣兵信息
	public static class query_petoverviews_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_petoverviews_req() { }

		public query_petoverviews_req(int rid)
		{
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "query_petoverviews_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
		}

		public int rid;
	}

	// 获取玩家所有已获得的神兵信息
	public static class query_weaponoverviews_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_weaponoverviews_req() { }

		public query_weaponoverviews_req(int rid)
		{
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "query_weaponoverviews_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
		}

		public int rid;
	}

	// 原地复活
	public static class role_revive_insitu_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_revive_insitu_req() { }

		public role_revive_insitu_req(int useStone)
		{
			this.useStone = useStone;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			useStone = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(useStone);
		}

		@Override
		public String getPacketName()
		{
			return "role_revive_insitu_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			useStone = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(useStone);
		}

		public int useStone;
	}

	// 其他方式复活复活点复活
	public static class role_revive_other_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_revive_other_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 安全点复活
	public static class role_revive_safe_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_revive_safe_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 转职
	public static class role_transform_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_transform_req() { }

		public role_transform_req(byte tlvl, byte bwType)
		{
			this.tlvl = tlvl;
			this.bwType = bwType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			tlvl = is.popByte();
			bwType = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(tlvl);
			os.pushByte(bwType);
		}

		@Override
		public String getPacketName()
		{
			return "role_transform_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			tlvl = is.popByte();
			bwType = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushByte(tlvl);
			os.pushByte(bwType);
		}

		public byte tlvl;
		public byte bwType;
	}

	// 签到同步
	public static class checkin_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "checkin_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 签到領獎
	public static class checkin_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "checkin_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 商城同步
	public static class mall_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mall_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 商城购买
	public static class mall_buy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mall_buy_req() { }

		public mall_buy_req(int effectiveTime, int id, int gid, int count, 
		                    int free, int price)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.gid = gid;
			this.count = count;
			this.free = free;
			this.price = price;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			gid = is.popInteger();
			count = is.popInteger();
			free = is.popInteger();
			price = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(gid);
			os.pushInteger(count);
			os.pushInteger(free);
			os.pushInteger(price);
		}

		@Override
		public String getPacketName()
		{
			return "mall_buy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			gid = is.popInteger();
			count = is.popInteger();
			free = is.popInteger();
			price = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(gid);
			os.pushInteger(count);
			os.pushInteger(free);
			os.pushInteger(price);
		}

		public int effectiveTime;
		public int id;
		public int gid;
		public int count;
		public int free;
		public int price;
	}

	// 福利同步
	public static class benefit_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "benefit_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 充值相关活动同步
	public static class payactivity_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "payactivity_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步首次充值送礼活动信息
	public static class firstpaygift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public firstpaygift_sync_req() { }

		public firstpaygift_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "firstpaygift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取首次充值送礼活动奖励
	public static class firstpaygift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public firstpaygift_take_req() { }

		public firstpaygift_take_req(int effectiveTime, int id)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "firstpaygift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		public int effectiveTime;
		public int id;
	}

	// 同步首次充值送礼活动信息
	public static class dailypaygift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public dailypaygift_sync_req() { }

		public dailypaygift_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "dailypaygift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取首次充值送礼活动奖励
	public static class dailypaygift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public dailypaygift_take_req() { }

		public dailypaygift_take_req(int effectiveTime, int id)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "dailypaygift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		public int effectiveTime;
		public int id;
	}

	// 同步持续充值送礼活动信息
	public static class lastpaygift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public lastpaygift_sync_req() { }

		public lastpaygift_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "lastpaygift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取持续充值送礼活动奖励
	public static class lastpaygift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public lastpaygift_take_req() { }

		public lastpaygift_take_req(int effectiveTime, int id, int seq)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "lastpaygift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(seq);
		}

		public int effectiveTime;
		public int id;
		public int seq;
	}

	// 同步活动挑战活动信息
	public static class activitychallengegift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public activitychallengegift_sync_req() { }

		public activitychallengegift_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "activitychallengegift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取活动挑战活动奖励
	public static class activitychallengegift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public activitychallengegift_take_req() { }

		public activitychallengegift_take_req(int effectiveTime, int id, int activityId, int times)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.activityId = activityId;
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			activityId = is.popInteger();
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(activityId);
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "activitychallengegift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			activityId = is.popInteger();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(activityId);
			os.pushInteger(times);
		}

		public int effectiveTime;
		public int id;
		public int activityId;
		public int times;
	}

	// 同步升级特惠活动信息
	public static class upgradepurchase_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public upgradepurchase_sync_req() { }

		public upgradepurchase_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "upgradepurchase_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 购买升级特惠活动奖励
	public static class upgradepurchase_buy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public upgradepurchase_buy_req() { }

		public upgradepurchase_buy_req(int effectiveTime, int id)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "upgradepurchase_buy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		public int effectiveTime;
		public int id;
	}

	// 同步充值送礼活动信息
	public static class paygift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public paygift_sync_req() { }

		public paygift_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "paygift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取充值送礼活动奖励
	public static class paygift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public paygift_take_req() { }

		public paygift_take_req(int effectiveTime, int id, int payLevel)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.payLevel = payLevel;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			payLevel = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(payLevel);
		}

		@Override
		public String getPacketName()
		{
			return "paygift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			payLevel = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(payLevel);
		}

		public int effectiveTime;
		public int id;
		public int payLevel;
	}

	// 同步消费送礼活动信息
	public static class consumegift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public consumegift_sync_req() { }

		public consumegift_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "consumegift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取消费送礼活动奖励
	public static class consumegift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public consumegift_take_req() { }

		public consumegift_take_req(int effectiveTime, int id, int consumeLevel)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.consumeLevel = consumeLevel;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			consumeLevel = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(consumeLevel);
		}

		@Override
		public String getPacketName()
		{
			return "consumegift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			consumeLevel = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(consumeLevel);
		}

		public int effectiveTime;
		public int id;
		public int consumeLevel;
	}

	// 同步冲级送礼活动信息
	public static class upgradegift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public upgradegift_sync_req() { }

		public upgradegift_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "upgradegift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取冲级送礼活动奖励
	public static class upgradegift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public upgradegift_take_req() { }

		public upgradegift_take_req(int effectiveTime, int id, int level)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "upgradegift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(level);
		}

		public int effectiveTime;
		public int id;
		public int level;
	}

	// 同步投资基金活动信息
	public static class investmentfund_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public investmentfund_sync_req() { }

		public investmentfund_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "investmentfund_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 买投资基金
	public static class investmentfund_buy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public investmentfund_buy_req() { }

		public investmentfund_buy_req(int effectiveTime, int id)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "investmentfund_buy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		public int effectiveTime;
		public int id;
	}

	// 领取投资基金活动奖励
	public static class investmentfund_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public investmentfund_take_req() { }

		public investmentfund_take_req(int effectiveTime, int id, int day)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.day = day;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			day = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(day);
		}

		@Override
		public String getPacketName()
		{
			return "investmentfund_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			day = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(day);
		}

		public int effectiveTime;
		public int id;
		public int day;
	}

	// 同步成长基金活动信息
	public static class growthfund_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public growthfund_sync_req() { }

		public growthfund_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "growthfund_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 买成长基金
	public static class growthfund_buy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public growthfund_buy_req() { }

		public growthfund_buy_req(int effectiveTime, int id)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "growthfund_buy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		public int effectiveTime;
		public int id;
	}

	// 领取成长基金活动奖励
	public static class growthfund_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public growthfund_take_req() { }

		public growthfund_take_req(int effectiveTime, int id, int level)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "growthfund_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(level);
		}

		public int effectiveTime;
		public int id;
		public int level;
	}

	// 同步双倍掉落副本活动信息
	public static class doubledrop_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public doubledrop_sync_req() { }

		public doubledrop_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "doubledrop_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 同步额外掉落副本活动信息
	public static class extradrop_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public extradrop_sync_req() { }

		public extradrop_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "extradrop_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 同步兑换礼品活动信息
	public static class exchangegift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public exchangegift_sync_req() { }

		public exchangegift_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "exchangegift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取兑换礼品
	public static class exchangegift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public exchangegift_take_req() { }

		public exchangegift_take_req(int effectiveTime, int id, int seq)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "exchangegift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(seq);
		}

		public int effectiveTime;
		public int id;
		public int seq;
	}

	// 同步累积登录送礼活动信息
	public static class logingift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public logingift_sync_req() { }

		public logingift_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "logingift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取累积登录送礼活动奖励
	public static class logingift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public logingift_take_req() { }

		public logingift_take_req(int effectiveTime, int id, int day)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.day = day;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			day = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(day);
		}

		@Override
		public String getPacketName()
		{
			return "logingift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			day = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(day);
		}

		public int effectiveTime;
		public int id;
		public int day;
	}

	// 同步礼包兑换活动信息
	public static class giftpackage_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public giftpackage_sync_req() { }

		public giftpackage_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "giftpackage_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 兑换礼包
	public static class giftpackage_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public giftpackage_take_req() { }

		public giftpackage_take_req(int effectiveTime, int id, String key)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.key = key;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			key = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushString(key);
		}

		@Override
		public String getPacketName()
		{
			return "giftpackage_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			key = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushString(key);
		}

		public int effectiveTime;
		public int id;
		public String key;
	}

	// 公测返现查询
	public static class pbtcashback_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pbtcashback_sync_req() { }

		public pbtcashback_sync_req(int bid)
		{
			this.bid = bid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bid);
		}

		@Override
		public String getPacketName()
		{
			return "pbtcashback_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bid);
		}

		public int bid;
	}

	// 公测返现兑换
	public static class pbtcashback_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pbtcashback_take_req() { }

		public pbtcashback_take_req(int bid)
		{
			this.bid = bid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bid);
		}

		@Override
		public String getPacketName()
		{
			return "pbtcashback_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bid);
		}

		public int bid;
	}

	// 充值排行活动同步
	public static class payrank_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "payrank_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 团购活动同步
	public static class groupbuy_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "groupbuy_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 购买团购商品
	public static class groupbuy_buy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public groupbuy_buy_req() { }

		public groupbuy_buy_req(int effectiveTime, int id, int gid, int count)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.gid = gid;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			gid = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(gid);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "groupbuy_buy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			gid = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(gid);
			os.pushInteger(count);
		}

		public int effectiveTime;
		public int id;
		public int gid;
		public int count;
	}

	// 限时抢购活动同步
	public static class flashsale_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "flashsale_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 限时抢购活动购买请求
	public static class flashsale_buy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public flashsale_buy_req() { }

		public flashsale_buy_req(int effectiveTime, int id, int goodid)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.goodid = goodid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			goodid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(goodid);
		}

		@Override
		public String getPacketName()
		{
			return "flashsale_buy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			goodid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(goodid);
		}

		public int effectiveTime;
		public int id;
		public int goodid;
	}

	// 转盘同步请求
	public static class luckyroll_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "luckyroll_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 转盘同步请求
	public static class luckyroll_play_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public luckyroll_play_req() { }

		public luckyroll_play_req(int effectiveTime, int id)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "luckyroll_play_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		public int effectiveTime;
		public int id;
	}

	// 直购礼包活动信息
	public static class directpurchase_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public directpurchase_sync_req() { }

		public directpurchase_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "directpurchase_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取直购礼包活动奖励
	public static class directpurchase_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public directpurchase_take_req() { }

		public directpurchase_take_req(int effectiveTime, int id, int payLevel)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
			this.payLevel = payLevel;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
			payLevel = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(payLevel);
		}

		@Override
		public String getPacketName()
		{
			return "directpurchase_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
			payLevel = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
			os.pushInteger(payLevel);
		}

		public int effectiveTime;
		public int id;
		public int payLevel;
	}

	// 老虎机活动信息
	public static class onearmbandit_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public onearmbandit_sync_req() { }

		public onearmbandit_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "onearmbandit_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 领取老虎机活动奖励
	public static class onearmbandit_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public onearmbandit_take_req() { }

		public onearmbandit_take_req(int effectiveTime, int id)
		{
			this.effectiveTime = effectiveTime;
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "onearmbandit_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			effectiveTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(effectiveTime);
			os.pushInteger(id);
		}

		public int effectiveTime;
		public int id;
	}

	// 广告同步协议
	public static class adver_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public adver_sync_req() { }

		public adver_sync_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "adver_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 主动离开副本请求
	public static class mapcopy_leave_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mapcopy_leave_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 开始进入标准副本请求
	public static class normalmap_start_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public normalmap_start_req() { }

		public normalmap_start_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "normalmap_start_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 开始进入活动副本请求
	public static class activitymap_start_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public activitymap_start_req() { }

		public activitymap_start_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "activitymap_start_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 翻牌抽奖
	public static class commonmap_selectcard_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public commonmap_selectcard_req() { }

		public commonmap_selectcard_req(int cardNo)
		{
			this.cardNo = cardNo;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cardNo = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cardNo);
		}

		@Override
		public String getPacketName()
		{
			return "commonmap_selectcard_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cardNo = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cardNo);
		}

		public int cardNo;
	}

	// 购买进入标准副本次数的请求
	public static class normalmap_buytimes_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public normalmap_buytimes_req() { }

		public normalmap_buytimes_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "normalmap_buytimes_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 购买进入活动副本次数的请求
	public static class activitymap_buytimes_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public activitymap_buytimes_req() { }

		public activitymap_buytimes_req(int groupId)
		{
			this.groupId = groupId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
		}

		@Override
		public String getPacketName()
		{
			return "activitymap_buytimes_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			groupId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(groupId);
		}

		public int groupId;
	}

	// 副本扫荡
	public static class privatemap_sweep_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public privatemap_sweep_req() { }

		public privatemap_sweep_req(int mapId, int times, int extraCard)
		{
			this.mapId = mapId;
			this.times = times;
			this.extraCard = extraCard;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			times = is.popInteger();
			extraCard = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(times);
			os.pushInteger(extraCard);
		}

		@Override
		public String getPacketName()
		{
			return "privatemap_sweep_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			times = is.popInteger();
			extraCard = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(times);
			os.pushInteger(extraCard);
		}

		public int mapId;
		public int times;
		public int extraCard;
	}

	// 活动副本扫荡
	public static class activity_sweep_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public activity_sweep_req() { }

		public activity_sweep_req(int mapId, int times, int extraCard)
		{
			this.mapId = mapId;
			this.times = times;
			this.extraCard = extraCard;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			times = is.popInteger();
			extraCard = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(times);
			os.pushInteger(extraCard);
		}

		@Override
		public String getPacketName()
		{
			return "activity_sweep_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			times = is.popInteger();
			extraCard = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(times);
			os.pushInteger(extraCard);
		}

		public int mapId;
		public int times;
		public int extraCard;
	}

	// 同步系统邮件
	public static class mail_syncsys_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_syncsys_req() { }

		public mail_syncsys_req(int pageNO)
		{
			this.pageNO = pageNO;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pageNO = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pageNO);
		}

		@Override
		public String getPacketName()
		{
			return "mail_syncsys_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pageNO = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pageNO);
		}

		public int pageNO;
	}

	// 同步临时邮件
	public static class mail_synctmp_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_synctmp_req() { }

		public mail_synctmp_req(int pageNO)
		{
			this.pageNO = pageNO;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pageNO = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pageNO);
		}

		@Override
		public String getPacketName()
		{
			return "mail_synctmp_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pageNO = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pageNO);
		}

		public int pageNO;
	}

	// 读邮件
	public static class mail_read_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_read_req() { }

		public mail_read_req(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_read_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 读系统邮件
	public static class mail_readsys_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_readsys_req() { }

		public mail_readsys_req(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_readsys_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 读临时邮件
	public static class mail_readtmp_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_readtmp_req() { }

		public mail_readtmp_req(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_readtmp_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 取邮件附件
	public static class mail_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_take_req() { }

		public mail_take_req(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 取系统邮件附件
	public static class mail_takesys_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_takesys_req() { }

		public mail_takesys_req(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_takesys_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 取临时邮件附件
	public static class mail_taketmp_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_taketmp_req() { }

		public mail_taketmp_req(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_taketmp_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 邮件删除
	public static class mail_del_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_del_req() { }

		public mail_del_req(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_del_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 系统邮件删除
	public static class mail_delsys_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_delsys_req() { }

		public mail_delsys_req(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_delsys_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 临时邮件删除
	public static class mail_deltmp_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mail_deltmp_req() { }

		public mail_deltmp_req(int mailId)
		{
			this.mailId = mailId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mailId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mailId);
		}

		@Override
		public String getPacketName()
		{
			return "mail_deltmp_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mailId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mailId);
		}

		public int mailId;
	}

	// 取全部系统邮件附件
	public static class mail_takeallsys_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mail_takeallsys_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 取全部系统邮件附件
	public static class mail_takealltmp_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mail_takealltmp_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// rollnotice_detail的异步响应
	public static class rollnotice_query implements Stream.IStreamable, SStream.IStrPacket
	{

		public rollnotice_query() { }

		public rollnotice_query(int noticeId)
		{
			this.noticeId = noticeId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			noticeId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(noticeId);
		}

		@Override
		public String getPacketName()
		{
			return "rollnotice_query";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			noticeId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(noticeId);
		}

		public int noticeId;
	}

	// 同步排行榜
	public static class rank_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "rank_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步帮派排行榜
	public static class sectrank_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sectrank_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 获取排行榜列表
	public static class rank_get_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public rank_get_req() { }

		public rank_get_req(int id, int createTime, int index, int length)
		{
			this.id = id;
			this.createTime = createTime;
			this.index = index;
			this.length = length;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			createTime = is.popInteger();
			index = is.popInteger();
			length = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(createTime);
			os.pushInteger(index);
			os.pushInteger(length);
		}

		@Override
		public String getPacketName()
		{
			return "rank_get_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			createTime = is.popInteger();
			index = is.popInteger();
			length = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(createTime);
			os.pushInteger(index);
			os.pushInteger(length);
		}

		public int id;
		public int createTime;
		public int index;
		public int length;
	}

	// 获取帮派排行榜列表
	public static class sectrank_get_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectrank_get_req() { }

		public sectrank_get_req(int id, int createTime, int index, int length)
		{
			this.id = id;
			this.createTime = createTime;
			this.index = index;
			this.length = length;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			createTime = is.popInteger();
			index = is.popInteger();
			length = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(createTime);
			os.pushInteger(index);
			os.pushInteger(length);
		}

		@Override
		public String getPacketName()
		{
			return "sectrank_get_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			createTime = is.popInteger();
			index = is.popInteger();
			length = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(createTime);
			os.pushInteger(index);
			os.pushInteger(length);
		}

		public int id;
		public int createTime;
		public int index;
		public int length;
	}

	// 获取自己排名(不在榜上返回0)
	public static class rank_self_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public rank_self_req() { }

		public rank_self_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "rank_self_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 获取自己帮派排名(不在榜上返回0)
	public static class sectrank_self_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectrank_self_req() { }

		public sectrank_self_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "sectrank_self_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 买金币
	public static class buy_coin_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public buy_coin_req() { }

		public buy_coin_req(int times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "buy_coin_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
		}

		public int times;
	}

	// 买体力
	public static class buy_vit_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "buy_vit_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步充值信息
	public static class pay_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "pay_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 神模式充值
	public static class pay_asgod_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pay_asgod_req() { }

		public pay_asgod_req(int level)
		{
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "pay_asgod_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(level);
		}

		public int level;
	}

	// 领取vip礼包的请求信息
	public static class vip_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public vip_take_req() { }

		public vip_take_req(int level)
		{
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "vip_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(level);
		}

		public int level;
	}

	// 背包扩展
	public static class bag_expand_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_expand_req() { }

		public bag_expand_req(int times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "bag_expand_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
		}

		public int times;
	}

	// 出售背包里的装备
	public static class bag_sellequip_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_sellequip_req() { }

		public bag_sellequip_req(int id, String guid)
		{
			this.id = id;
			this.guid = guid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			guid = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(guid);
		}

		@Override
		public String getPacketName()
		{
			return "bag_sellequip_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			guid = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushString(guid);
		}

		public int id;
		public String guid;
	}

	// 出售背包里的道具物品
	public static class bag_sellitem_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_sellitem_req() { }

		public bag_sellitem_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_sellitem_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 出售背包里的宝石
	public static class bag_sellgem_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_sellgem_req() { }

		public bag_sellgem_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_sellgem_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 出售背包里的心法书
	public static class bag_sellbook_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_sellbook_req() { }

		public bag_sellbook_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_sellbook_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 批量出售背包里的装备
	public static class bag_batchsellequips_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_batchsellequips_req() { }

		public bag_batchsellequips_req(Map<Integer, KinEquips> equips)
		{
			this.equips = equips;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			equips = is.popIntegerTreeMap(KinEquips.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(equips);
		}

		@Override
		public String getPacketName()
		{
			return "bag_batchsellequips_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			equips = is.popIntegerTreeMap(KinEquips.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(equips);
		}

		public Map<Integer, KinEquips> equips;
	}

	// 批量出售背包里的道具物品
	public static class bag_batchsellitems_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_batchsellitems_req() { }

		public bag_batchsellitems_req(List<DummyGoods> items)
		{
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(items);
		}

		@Override
		public String getPacketName()
		{
			return "bag_batchsellitems_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			items = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(items);
		}

		public List<DummyGoods> items;
	}

	// 批量出售背包里的宝石物品
	public static class bag_batchsellgems_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_batchsellgems_req() { }

		public bag_batchsellgems_req(List<DummyGoods> gems)
		{
			this.gems = gems;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			gems = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(gems);
		}

		@Override
		public String getPacketName()
		{
			return "bag_batchsellgems_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			gems = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(gems);
		}

		public List<DummyGoods> gems;
	}

	// 批量出售背包里的心法书物品
	public static class bag_batchsellbooks_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_batchsellbooks_req() { }

		public bag_batchsellbooks_req(List<DummyGoods> books)
		{
			this.books = books;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			books = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(books);
		}

		@Override
		public String getPacketName()
		{
			return "bag_batchsellbooks_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			books = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(books);
		}

		public List<DummyGoods> books;
	}

	// 使用道具礼包
	public static class bag_useitemgift_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemgift_req() { }

		public bag_useitemgift_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemgift_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用道具金币包
	public static class bag_useitemcoin_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemcoin_req() { }

		public bag_useitemcoin_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemcoin_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用道具钻石包
	public static class bag_useitemdiamond_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemdiamond_req() { }

		public bag_useitemdiamond_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemdiamond_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用道具经验丹
	public static class bag_useitemexp_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemexp_req() { }

		public bag_useitemexp_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemexp_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用道具普通回复hp
	public static class bag_useitemhp_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemhp_req() { }

		public bag_useitemhp_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemhp_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用道具vip普通回复hp
	public static class bag_useitemhppool_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemhppool_req() { }

		public bag_useitemhppool_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemhppool_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用道具宝箱
	public static class bag_useitemchest_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemchest_req() { }

		public bag_useitemchest_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemchest_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用道具装备能量丹
	public static class bag_useitemequipenergy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemequipenergy_req() { }

		public bag_useitemequipenergy_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemequipenergy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用道具宝石能量丹
	public static class bag_useitemgemenergy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemgemenergy_req() { }

		public bag_useitemgemenergy_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemgemenergy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用道具心法悟性丹
	public static class bag_useiteminspiration_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useiteminspiration_req() { }

		public bag_useiteminspiration_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useiteminspiration_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用道具体力丹
	public static class bag_useitemvit_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemvit_req() { }

		public bag_useitemvit_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemvit_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用时装道具
	public static class bag_useitemfashion_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemfashion_req() { }

		public bag_useitemfashion_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemfashion_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 使用历练瓶(满)道具
	public static class bag_useitemexpcoinpool_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemexpcoinpool_req() { }

		public bag_useitemexpcoinpool_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemexpcoinpool_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用月卡道具
	public static class bag_usemonthlycard_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_usemonthlycard_req() { }

		public bag_usemonthlycard_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "bag_usemonthlycard_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 使用VIP体验卡道具
	public static class bag_usevipcard_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_usevipcard_req() { }

		public bag_usevipcard_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "bag_usevipcard_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 使用增加武勋道具
	public static class bag_useitemfeat_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemfeat_req() { }

		public bag_useitemfeat_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemfeat_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 使用技能道具
	public static class bag_useitemskill_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemskill_req() { }

		public bag_useitemskill_req(int itemId, Vector3 pos, Vector3F rotation, int targetID, 
		                            int targetType, int ownerID, TimeTick timeTick)
		{
			this.itemId = itemId;
			this.pos = pos;
			this.rotation = rotation;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemskill_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
			pos = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int itemId;
		public Vector3 pos;
		public Vector3F rotation;
		public int targetID;
		public int targetType;
		public int ownerID;
		public TimeTick timeTick;
	}

	// 使用信件道具
	public static class bag_useitemletter_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemletter_req() { }

		public bag_useitemletter_req(int itemId)
		{
			this.itemId = itemId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemletter_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
		}

		public int itemId;
	}

	// 使用善恶值道具
	public static class bag_useitemevil_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemevil_req() { }

		public bag_useitemevil_req(int itemId, int count)
		{
			this.itemId = itemId;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemevil_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
			os.pushInteger(count);
		}

		public int itemId;
		public int count;
	}

	// 合成碎片
	public static class bag_piececompose_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_piececompose_req() { }

		public bag_piececompose_req(int composeId)
		{
			this.composeId = composeId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			composeId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(composeId);
		}

		@Override
		public String getPacketName()
		{
			return "bag_piececompose_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			composeId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(composeId);
		}

		public int composeId;
	}

	// 使用能力强化道具
	public static class bag_useitempropstrength_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitempropstrength_req() { }

		public bag_useitempropstrength_req(int itemId, int count)
		{
			this.itemId = itemId;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitempropstrength_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
			os.pushInteger(count);
		}

		public int itemId;
		public int count;
	}

	// 使用离线精灵修炼点添加道具
	public static class bag_useitemofflinefuncpoint_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemofflinefuncpoint_req() { }

		public bag_useitemofflinefuncpoint_req(int itemId, int count)
		{
			this.itemId = itemId;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemofflinefuncpoint_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
			os.pushInteger(count);
		}

		public int itemId;
		public int count;
	}

	// 使用称号道具
	public static class bag_useitemtitle_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemtitle_req() { }

		public bag_useitemtitle_req(int itemId)
		{
			this.itemId = itemId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemtitle_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
		}

		public int itemId;
	}

	// 使用绝技道具
	public static class bag_useitemuskill_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemuskill_req() { }

		public bag_useitemuskill_req(int itemId)
		{
			this.itemId = itemId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemuskill_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
		}

		public int itemId;
	}

	// 使用头像激活道具
	public static class bag_useitemhead_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_useitemhead_req() { }

		public bag_useitemhead_req(int itemId)
		{
			this.itemId = itemId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
		}

		@Override
		public String getPacketName()
		{
			return "bag_useitemhead_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
		}

		public int itemId;
	}

	// 穿装备
	public static class equip_upwear_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_upwear_req() { }

		public equip_upwear_req(int id, String guid, int pos)
		{
			this.id = id;
			this.guid = guid;
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			guid = is.popString();
			pos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(guid);
			os.pushInteger(pos);
		}

		@Override
		public String getPacketName()
		{
			return "equip_upwear_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			guid = is.popString();
			pos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushString(guid);
			os.pushInteger(pos);
		}

		public int id;
		public String guid;
		public int pos;
	}

	// 脱装备
	public static class equip_downwear_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_downwear_req() { }

		public equip_downwear_req(String guid, int pos)
		{
			this.guid = guid;
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			guid = is.popString();
			pos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(guid);
			os.pushInteger(pos);
		}

		@Override
		public String getPacketName()
		{
			return "equip_downwear_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			guid = is.popString();
			pos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(guid);
			os.pushInteger(pos);
		}

		public String guid;
		public int pos;
	}

	// 装备强化
	public static class equip_levelup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_levelup_req() { }

		public equip_levelup_req(int pos, int level)
		{
			this.pos = pos;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pos = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pos);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "equip_levelup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pos);
			os.pushInteger(level);
		}

		public int pos;
		public int level;
	}

	// 批量装备强化
	public static class equip_batchlevelup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_batchlevelup_req() { }

		public equip_batchlevelup_req(Map<Integer, Integer> posLevels)
		{
			this.posLevels = posLevels;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			posLevels = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(posLevels);
		}

		@Override
		public String getPacketName()
		{
			return "equip_batchlevelup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			posLevels = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(posLevels);
		}

		public Map<Integer, Integer> posLevels;
	}

	// 装备升星
	public static class equip_starup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_starup_req() { }

		public equip_starup_req(int pos, int level)
		{
			this.pos = pos;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pos = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pos);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "equip_starup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pos);
			os.pushInteger(level);
		}

		public int pos;
		public int level;
	}

	// 水晶装备修复
	public static class equip_repair_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_repair_req() { }

		public equip_repair_req(int pos)
		{
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pos);
		}

		@Override
		public String getPacketName()
		{
			return "equip_repair_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pos);
		}

		public int pos;
	}

	// 自动穿装备
	public static class equip_autoupwear_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_autoupwear_req() { }

		public equip_autoupwear_req(Map<Integer, KinEquips> equips)
		{
			this.equips = equips;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			equips = is.popIntegerTreeMap(KinEquips.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerMap(equips);
		}

		@Override
		public String getPacketName()
		{
			return "equip_autoupwear_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			equips = is.popIntegerTreeMap(KinEquips.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerMap(equips);
		}

		public Map<Integer, KinEquips> equips;
	}

	// 装备部位宝石升级
	public static class gem_levelup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public gem_levelup_req() { }

		public gem_levelup_req(int pos, int seq, int toId)
		{
			this.pos = pos;
			this.seq = seq;
			this.toId = toId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pos = is.popInteger();
			seq = is.popInteger();
			toId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pos);
			os.pushInteger(seq);
			os.pushInteger(toId);
		}

		@Override
		public String getPacketName()
		{
			return "gem_levelup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.popInteger();
			seq = is.popInteger();
			toId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pos);
			os.pushInteger(seq);
			os.pushInteger(toId);
		}

		public int pos;
		public int seq;
		public int toId;
	}

	// 装备部位宝石镶嵌
	public static class gem_inlay_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public gem_inlay_req() { }

		public gem_inlay_req(int pos, int seq, int gemId)
		{
			this.pos = pos;
			this.seq = seq;
			this.gemId = gemId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pos = is.popInteger();
			seq = is.popInteger();
			gemId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pos);
			os.pushInteger(seq);
			os.pushInteger(gemId);
		}

		@Override
		public String getPacketName()
		{
			return "gem_inlay_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.popInteger();
			seq = is.popInteger();
			gemId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pos);
			os.pushInteger(seq);
			os.pushInteger(gemId);
		}

		public int pos;
		public int seq;
		public int gemId;
	}

	// 装备部位宝石升级
	public static class gem_unlay_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public gem_unlay_req() { }

		public gem_unlay_req(int pos, int seq, int gemId)
		{
			this.pos = pos;
			this.seq = seq;
			this.gemId = gemId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pos = is.popInteger();
			seq = is.popInteger();
			gemId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pos);
			os.pushInteger(seq);
			os.pushInteger(gemId);
		}

		@Override
		public String getPacketName()
		{
			return "gem_unlay_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.popInteger();
			seq = is.popInteger();
			gemId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pos);
			os.pushInteger(seq);
			os.pushInteger(gemId);
		}

		public int pos;
		public int seq;
		public int gemId;
	}

	// 装备精炼
	public static class equip_refine_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public equip_refine_req() { }

		public equip_refine_req(int id, String guid, int pos, int costItem)
		{
			this.id = id;
			this.guid = guid;
			this.pos = pos;
			this.costItem = costItem;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			guid = is.popString();
			pos = is.popInteger();
			costItem = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(guid);
			os.pushInteger(pos);
			os.pushInteger(costItem);
		}

		@Override
		public String getPacketName()
		{
			return "equip_refine_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			guid = is.popString();
			pos = is.popInteger();
			costItem = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushString(guid);
			os.pushInteger(pos);
			os.pushInteger(costItem);
		}

		public int id;
		public String guid;
		public int pos;
		public int costItem;
	}

	// 同步打造界面信息打造
	public static class legend_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "legend_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 打造传世装备
	public static class legend_make_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public legend_make_req() { }

		public legend_make_req(int id, String guid, int costItem)
		{
			this.id = id;
			this.guid = guid;
			this.costItem = costItem;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			guid = is.popString();
			costItem = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(guid);
			os.pushInteger(costItem);
		}

		@Override
		public String getPacketName()
		{
			return "legend_make_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			guid = is.popString();
			costItem = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushString(guid);
			os.pushInteger(costItem);
		}

		public int id;
		public String guid;
		public int costItem;
	}

	// 放弃传世装备属性
	public static class legend_quit_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "legend_quit_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 保存传世装备属性
	public static class legend_save_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "legend_save_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 选择技能上战
	public static class skill_select_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public skill_select_req() { }

		public skill_select_req(int slotId, int skillId)
		{
			this.slotId = slotId;
			this.skillId = skillId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			slotId = is.popInteger();
			skillId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(slotId);
			os.pushInteger(skillId);
		}

		@Override
		public String getPacketName()
		{
			return "skill_select_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			slotId = is.popInteger();
			skillId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(slotId);
			os.pushInteger(skillId);
		}

		public int slotId;
		public int skillId;
	}

	// 技能升级
	public static class skill_levelup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public skill_levelup_req() { }

		public skill_levelup_req(int skillId, int level)
		{
			this.skillId = skillId;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "skill_levelup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillId = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillId);
			os.pushInteger(level);
		}

		public int skillId;
		public int level;
	}

	// 技能升界
	public static class skill_enhance_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public skill_enhance_req() { }

		public skill_enhance_req(int skillId, int level)
		{
			this.skillId = skillId;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "skill_enhance_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillId = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillId);
			os.pushInteger(level);
		}

		public int skillId;
		public int level;
	}

	// 技能解锁
	public static class skill_unlock_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public skill_unlock_req() { }

		public skill_unlock_req(int skillId)
		{
			this.skillId = skillId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
		}

		@Override
		public String getPacketName()
		{
			return "skill_unlock_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillId);
		}

		public int skillId;
	}

	// 装备绝技
	public static class uniqueskill_set_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public uniqueskill_set_req() { }

		public uniqueskill_set_req(int skillID)
		{
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "uniqueskill_set_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
		}

		public int skillID;
	}

	// 心法学习
	public static class spirit_learn_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public spirit_learn_req() { }

		public spirit_learn_req(int spiritId)
		{
			this.spiritId = spiritId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spiritId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spiritId);
		}

		@Override
		public String getPacketName()
		{
			return "spirit_learn_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			spiritId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(spiritId);
		}

		public int spiritId;
	}

	// 心法研读
	public static class spirit_levelup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public spirit_levelup_req() { }

		public spirit_levelup_req(int spiritId, int level)
		{
			this.spiritId = spiritId;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spiritId = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spiritId);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "spirit_levelup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			spiritId = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(spiritId);
			os.pushInteger(level);
		}

		public int spiritId;
		public int level;
	}

	// 心法装备
	public static class spirit_install_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public spirit_install_req() { }

		public spirit_install_req(int spiritId)
		{
			this.spiritId = spiritId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spiritId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spiritId);
		}

		@Override
		public String getPacketName()
		{
			return "spirit_install_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			spiritId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(spiritId);
		}

		public int spiritId;
	}

	// 心法卸载
	public static class spirit_uninstall_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public spirit_uninstall_req() { }

		public spirit_uninstall_req(int spiritId)
		{
			this.spiritId = spiritId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spiritId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spiritId);
		}

		@Override
		public String getPacketName()
		{
			return "spirit_uninstall_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			spiritId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(spiritId);
		}

		public int spiritId;
	}

	// 合成神兵
	public static class weapon_make_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_make_req() { }

		public weapon_make_req(int weaponId)
		{
			this.weaponId = weaponId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponId);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_make_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponId);
		}

		public int weaponId;
	}

	// 神兵升级
	public static class weapon_levelup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_levelup_req() { }

		public weapon_levelup_req(int weaponId, Map<Integer, Integer> items)
		{
			this.weaponId = weaponId;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponId = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponId);
			os.pushIntegerIntegerMap(items);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_levelup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponId = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponId);
			os.pushIntegerIntegerMap(items);
		}

		public int weaponId;
		public Map<Integer, Integer> items;
	}

	// 神兵买等级
	public static class weapon_buylevel_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_buylevel_req() { }

		public weapon_buylevel_req(int weaponId, int level)
		{
			this.weaponId = weaponId;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponId = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponId);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_buylevel_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponId = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponId);
			os.pushInteger(level);
		}

		public int weaponId;
		public int level;
	}

	// 神兵升星
	public static class weapon_starup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_starup_req() { }

		public weapon_starup_req(int weaponId, int star, int itemCount, int altCount)
		{
			this.weaponId = weaponId;
			this.star = star;
			this.itemCount = itemCount;
			this.altCount = altCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponId = is.popInteger();
			star = is.popInteger();
			itemCount = is.popInteger();
			altCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponId);
			os.pushInteger(star);
			os.pushInteger(itemCount);
			os.pushInteger(altCount);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_starup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponId = is.popInteger();
			star = is.popInteger();
			itemCount = is.popInteger();
			altCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponId);
			os.pushInteger(star);
			os.pushInteger(itemCount);
			os.pushInteger(altCount);
		}

		public int weaponId;
		public int star;
		public int itemCount;
		public int altCount;
	}

	// 选择使用神兵
	public static class weapon_select_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_select_req() { }

		public weapon_select_req(int weaponId)
		{
			this.weaponId = weaponId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponId);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_select_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponId);
		}

		public int weaponId;
	}

	// 打开神兵界面同步信息
	public static class weapon_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "weapon_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 神兵特技激活
	public static class weapon_uskill_open_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_uskill_open_req() { }

		public weapon_uskill_open_req(int weaponID)
		{
			this.weaponID = weaponID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponID);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_uskill_open_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponID);
		}

		public int weaponID;
	}

	// 设置神兵形态
	public static class weapon_setform_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_setform_req() { }

		public weapon_setform_req(int weaponID, int form)
		{
			this.weaponID = weaponID;
			this.form = form;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponID = is.popInteger();
			form = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponID);
			os.pushInteger(form);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_setform_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponID = is.popInteger();
			form = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponID);
			os.pushInteger(form);
		}

		public int weaponID;
		public int form;
	}

	// 进入神兵副本请求
	public static class weaponmap_start_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "weaponmap_start_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 打开佣兵界面,同步信息
	public static class pet_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "pet_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 生成佣兵
	public static class pet_make_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_make_req() { }

		public pet_make_req(int petId)
		{
			this.petId = petId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
		}

		@Override
		public String getPacketName()
		{
			return "pet_make_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
		}

		public int petId;
	}

	// 佣兵转职
	public static class pet_transform_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_transform_req() { }

		public pet_transform_req(int petId, int tlvl)
		{
			this.petId = petId;
			this.tlvl = tlvl;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			tlvl = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(tlvl);
		}

		@Override
		public String getPacketName()
		{
			return "pet_transform_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			tlvl = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(tlvl);
		}

		public int petId;
		public int tlvl;
	}

	// 佣兵升级
	public static class pet_levelup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_levelup_req() { }

		public pet_levelup_req(int petId, Map<Integer, Integer> items)
		{
			this.petId = petId;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushIntegerIntegerMap(items);
		}

		@Override
		public String getPacketName()
		{
			return "pet_levelup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushIntegerIntegerMap(items);
		}

		public int petId;
		public Map<Integer, Integer> items;
	}

	// 佣兵买等级
	public static class pet_buylevel_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_buylevel_req() { }

		public pet_buylevel_req(int petId, int level)
		{
			this.petId = petId;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "pet_buylevel_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(level);
		}

		public int petId;
		public int level;
	}

	// 佣兵升星
	public static class pet_starup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_starup_req() { }

		public pet_starup_req(int petId, int star, int itemCount, int altCount)
		{
			this.petId = petId;
			this.star = star;
			this.itemCount = itemCount;
			this.altCount = altCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			star = is.popInteger();
			itemCount = is.popInteger();
			altCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(star);
			os.pushInteger(itemCount);
			os.pushInteger(altCount);
		}

		@Override
		public String getPacketName()
		{
			return "pet_starup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			star = is.popInteger();
			itemCount = is.popInteger();
			altCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(star);
			os.pushInteger(itemCount);
			os.pushInteger(altCount);
		}

		public int petId;
		public int star;
		public int itemCount;
		public int altCount;
	}

	// 佣兵突破等级提升
	public static class pet_breakskillvlup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_breakskillvlup_req() { }

		public pet_breakskillvlup_req(int petId, int skillId, int level, int itemCount, 
		                              int altCount)
		{
			this.petId = petId;
			this.skillId = skillId;
			this.level = level;
			this.itemCount = itemCount;
			this.altCount = altCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			skillId = is.popInteger();
			level = is.popInteger();
			itemCount = is.popInteger();
			altCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(skillId);
			os.pushInteger(level);
			os.pushInteger(itemCount);
			os.pushInteger(altCount);
		}

		@Override
		public String getPacketName()
		{
			return "pet_breakskillvlup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			skillId = is.popInteger();
			level = is.popInteger();
			itemCount = is.popInteger();
			altCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(skillId);
			os.pushInteger(level);
			os.pushInteger(itemCount);
			os.pushInteger(altCount);
		}

		public int petId;
		public int skillId;
		public int level;
		public int itemCount;
		public int altCount;
	}

	// 世界地图佣兵设置,petId为0是不设置世界地图佣兵
	public static class pet_worldmapset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_worldmapset_req() { }

		public pet_worldmapset_req(int petId)
		{
			this.petId = petId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
		}

		@Override
		public String getPacketName()
		{
			return "pet_worldmapset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
		}

		public int petId;
	}

	// 单人副本佣兵设置,petsId为空table是不设置地图佣兵
	public static class pet_privatemapset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_privatemapset_req() { }

		public pet_privatemapset_req(Set<Integer> petsId)
		{
			this.petsId = petsId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petsId = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(petsId);
		}

		@Override
		public String getPacketName()
		{
			return "pet_privatemapset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petsId = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(petsId);
		}

		public Set<Integer> petsId;
	}

	// 帮派副本佣兵设置,petsId为空table是不设置地图佣兵
	public static class pet_sectmapset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_sectmapset_req() { }

		public pet_sectmapset_req(Set<Integer> petsId)
		{
			this.petsId = petsId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petsId = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(petsId);
		}

		@Override
		public String getPacketName()
		{
			return "pet_sectmapset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petsId = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(petsId);
		}

		public Set<Integer> petsId;
	}

	// 活动副本佣兵设置,petsId为空table是不设置地图佣兵
	public static class pet_activitymapset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_activitymapset_req() { }

		public pet_activitymapset_req(Set<Integer> petsId)
		{
			this.petsId = petsId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petsId = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(petsId);
		}

		@Override
		public String getPacketName()
		{
			return "pet_activitymapset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petsId = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(petsId);
		}

		public Set<Integer> petsId;
	}

	// 进入身世副本协议
	public static class lifetaskmap_start_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public lifetaskmap_start_req() { }

		public lifetaskmap_start_req(int mapId, int petId)
		{
			this.mapId = mapId;
			this.petId = petId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			petId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(petId);
		}

		@Override
		public String getPacketName()
		{
			return "lifetaskmap_start_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			petId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(petId);
		}

		public int mapId;
		public int petId;
	}

	// 武库心法升级(第一次相当于解锁心法)
	public static class petspirit_lvlup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public petspirit_lvlup_req() { }

		public petspirit_lvlup_req(int spiritID)
		{
			this.spiritID = spiritID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spiritID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spiritID);
		}

		@Override
		public String getPacketName()
		{
			return "petspirit_lvlup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			spiritID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(spiritID);
		}

		public int spiritID;
	}

	// 随从心法修习(第一次默认保存)
	public static class petspirit_learn_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public petspirit_learn_req() { }

		public petspirit_learn_req(int petID, int spiritID, int index)
		{
			this.petID = petID;
			this.spiritID = spiritID;
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petID = is.popInteger();
			spiritID = is.popInteger();
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petID);
			os.pushInteger(spiritID);
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "petspirit_learn_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petID = is.popInteger();
			spiritID = is.popInteger();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petID);
			os.pushInteger(spiritID);
			os.pushInteger(index);
		}

		public int petID;
		public int spiritID;
		public int index;
	}

	// 随从心法替换
	public static class petspirit_replace_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public petspirit_replace_req() { }

		public petspirit_replace_req(int petID, int index)
		{
			this.petID = petID;
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petID = is.popInteger();
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petID);
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "petspirit_replace_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petID = is.popInteger();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petID);
			os.pushInteger(index);
		}

		public int petID;
		public int index;
	}

	// 日常任务同步任务列表协议
	public static class dtask_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "dtask_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 日常任务获取任务奖励协议
	public static class dtask_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public dtask_take_req() { }

		public dtask_take_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "dtask_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 挑战任务同步任务列表协议
	public static class chtask_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "chtask_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 挑战任务获取任务奖励协议
	public static class chtask_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public chtask_take_req() { }

		public chtask_take_req(int type, int seq)
		{
			this.type = type;
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "chtask_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(seq);
		}

		public int type;
		public int seq;
	}

	// 名望同步协议
	public static class fame_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public fame_sync_req() { }

		public fame_sync_req(int level)
		{
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "fame_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(level);
		}

		public int level;
	}

	// 名望晋级协议
	public static class fame_upgrade_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public fame_upgrade_req() { }

		public fame_upgrade_req(int level)
		{
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "fame_upgrade_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(level);
		}

		public int level;
	}

	// 名望获取名望奖励协议
	public static class fame_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public fame_take_req() { }

		public fame_take_req(int level)
		{
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "fame_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(level);
		}

		public int level;
	}

	// 每日在线奖励同步在线奖励协议
	public static class onlinegift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "onlinegift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 每日在线奖励获取奖励协议
	public static class onlinegift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public onlinegift_take_req() { }

		public onlinegift_take_req(int minute)
		{
			this.minute = minute;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			minute = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(minute);
		}

		@Override
		public String getPacketName()
		{
			return "onlinegift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			minute = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(minute);
		}

		public int minute;
	}

	// 离线经验奖励领取协议
	public static class offlineexp_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public offlineexp_take_req() { }

		public offlineexp_take_req(int accTime, int doubleExp)
		{
			this.accTime = accTime;
			this.doubleExp = doubleExp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			accTime = is.popInteger();
			doubleExp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(accTime);
			os.pushInteger(doubleExp);
		}

		@Override
		public String getPacketName()
		{
			return "offlineexp_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			accTime = is.popInteger();
			doubleExp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(accTime);
			os.pushInteger(doubleExp);
		}

		public int accTime;
		public int doubleExp;
	}

	// 全服答题活动同步协议
	public static class quizgift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "quizgift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 全服答题活动查询排行榜
	public static class quizgift_qrank_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public quizgift_qrank_req() { }

		public quizgift_qrank_req(int startTime)
		{
			this.startTime = startTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			startTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(startTime);
		}

		@Override
		public String getPacketName()
		{
			return "quizgift_qrank_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			startTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(startTime);
		}

		public int startTime;
	}

	// 全服答题活动答题协议
	public static class quizgift_answer_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public quizgift_answer_req() { }

		public quizgift_answer_req(int startTime, int seq, int answer, int useBoubleBonus)
		{
			this.startTime = startTime;
			this.seq = seq;
			this.answer = answer;
			this.useBoubleBonus = useBoubleBonus;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			startTime = is.popInteger();
			seq = is.popInteger();
			answer = is.popInteger();
			useBoubleBonus = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(startTime);
			os.pushInteger(seq);
			os.pushInteger(answer);
			os.pushInteger(useBoubleBonus);
		}

		@Override
		public String getPacketName()
		{
			return "quizgift_answer_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			startTime = is.popInteger();
			seq = is.popInteger();
			answer = is.popInteger();
			useBoubleBonus = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(startTime);
			os.pushInteger(seq);
			os.pushInteger(answer);
			os.pushInteger(useBoubleBonus);
		}

		public int startTime;
		public int seq;
		public int answer;
		public int useBoubleBonus;
	}

	// 同步幸运转盘信息
	public static class sync_luckywheel_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_luckywheel_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 幸运转盘抽奖
	public static class luckywheel_ondraw_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "luckywheel_ondraw_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 购买幸运转盘抽奖次数
	public static class luckywheel_buydrawtimes_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public luckywheel_buydrawtimes_req() { }

		public luckywheel_buydrawtimes_req(int times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "luckywheel_buydrawtimes_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
		}

		public int times;
	}

	// 燃放烟花
	public static class play_firework_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public play_firework_req() { }

		public play_firework_req(int fireworkID)
		{
			this.fireworkID = fireworkID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fireworkID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(fireworkID);
		}

		@Override
		public String getPacketName()
		{
			return "play_firework_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			fireworkID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(fireworkID);
		}

		public int fireworkID;
	}

	// 抢红包请求协议
	public static class redenvelope_snatch_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public redenvelope_snatch_req() { }

		public redenvelope_snatch_req(int startTime, int id)
		{
			this.startTime = startTime;
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			startTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(startTime);
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "redenvelope_snatch_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			startTime = is.popInteger();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(startTime);
			os.pushInteger(id);
		}

		public int startTime;
		public int id;
	}

	// 接取主线任务
	public static class mtask_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mtask_take_req() { }

		public mtask_take_req(int taskId)
		{
			this.taskId = taskId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskId);
		}

		@Override
		public String getPacketName()
		{
			return "mtask_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskId);
		}

		public int taskId;
	}

	// 放弃主线任务
	public static class mtask_quit_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mtask_quit_req() { }

		public mtask_quit_req(int taskId)
		{
			this.taskId = taskId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskId);
		}

		@Override
		public String getPacketName()
		{
			return "mtask_quit_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskId);
		}

		public int taskId;
	}

	// 主线任务领取奖励
	public static class mtask_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mtask_reward_req() { }

		public mtask_reward_req(int taskId)
		{
			this.taskId = taskId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskId);
		}

		@Override
		public String getPacketName()
		{
			return "mtask_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskId);
		}

		public int taskId;
	}

	// 神兵任务领取奖励
	public static class wtask_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public wtask_reward_req() { }

		public wtask_reward_req(int taskId)
		{
			this.taskId = taskId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskId);
		}

		@Override
		public String getPacketName()
		{
			return "wtask_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskId);
		}

		public int taskId;
	}

	// 佣兵任务领取奖励
	public static class ptask_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public ptask_reward_req() { }

		public ptask_reward_req(int petId, int taskId, int isdiamond)
		{
			this.petId = petId;
			this.taskId = taskId;
			this.isdiamond = isdiamond;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			taskId = is.popInteger();
			isdiamond = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(taskId);
			os.pushInteger(isdiamond);
		}

		@Override
		public String getPacketName()
		{
			return "ptask_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			taskId = is.popInteger();
			isdiamond = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(taskId);
			os.pushInteger(isdiamond);
		}

		public int petId;
		public int taskId;
		public int isdiamond;
	}

	// 接取佣兵身世任务
	public static class petlifetask_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public petlifetask_take_req() { }

		public petlifetask_take_req(int petId, int taskId)
		{
			this.petId = petId;
			this.taskId = taskId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			taskId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(taskId);
		}

		@Override
		public String getPacketName()
		{
			return "petlifetask_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			taskId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(taskId);
		}

		public int petId;
		public int taskId;
	}

	// 佣兵身世任务领取奖励
	public static class petlifetask_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public petlifetask_reward_req() { }

		public petlifetask_reward_req(int petId, int taskId)
		{
			this.petId = petId;
			this.taskId = taskId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			taskId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(taskId);
		}

		@Override
		public String getPacketName()
		{
			return "petlifetask_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			taskId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(taskId);
		}

		public int petId;
		public int taskId;
	}

	// 任务定点使用道具
	public static class task_useitem_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_useitem_req() { }

		public task_useitem_req(int taskCat, int ItemId)
		{
			this.taskCat = taskCat;
			this.ItemId = ItemId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskCat = is.popInteger();
			ItemId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskCat);
			os.pushInteger(ItemId);
		}

		@Override
		public String getPacketName()
		{
			return "task_useitem_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskCat = is.popInteger();
			ItemId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskCat);
			os.pushInteger(ItemId);
		}

		public int taskCat;
		public int ItemId;
	}

	// 任务提交道具
	public static class task_submititem_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_submititem_req() { }

		public task_submititem_req(int taskCat, int petId, int ItemId, int ItemCount)
		{
			this.taskCat = taskCat;
			this.petId = petId;
			this.ItemId = ItemId;
			this.ItemCount = ItemCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskCat = is.popInteger();
			petId = is.popInteger();
			ItemId = is.popInteger();
			ItemCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskCat);
			os.pushInteger(petId);
			os.pushInteger(ItemId);
			os.pushInteger(ItemCount);
		}

		@Override
		public String getPacketName()
		{
			return "task_submititem_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskCat = is.popInteger();
			petId = is.popInteger();
			ItemId = is.popInteger();
			ItemCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskCat);
			os.pushInteger(petId);
			os.pushInteger(ItemId);
			os.pushInteger(ItemCount);
		}

		public int taskCat;
		public int petId;
		public int ItemId;
		public int ItemCount;
	}

	// 随从任务提交道具
	public static class pettask_submititem_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pettask_submititem_req() { }

		public pettask_submititem_req(int petId, int ItemId, int ItemCount)
		{
			this.petId = petId;
			this.ItemId = ItemId;
			this.ItemCount = ItemCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			ItemId = is.popInteger();
			ItemCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(ItemId);
			os.pushInteger(ItemCount);
		}

		@Override
		public String getPacketName()
		{
			return "pettask_submititem_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			ItemId = is.popInteger();
			ItemCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(ItemId);
			os.pushInteger(ItemCount);
		}

		public int petId;
		public int ItemId;
		public int ItemCount;
	}

	// 随从身世任务提交道具
	public static class petlifetask_submititem_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public petlifetask_submititem_req() { }

		public petlifetask_submititem_req(int petId, int ItemId, int ItemCount)
		{
			this.petId = petId;
			this.ItemId = ItemId;
			this.ItemCount = ItemCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			ItemId = is.popInteger();
			ItemCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(ItemId);
			os.pushInteger(ItemCount);
		}

		@Override
		public String getPacketName()
		{
			return "petlifetask_submititem_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			ItemId = is.popInteger();
			ItemCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(ItemId);
			os.pushInteger(ItemCount);
		}

		public int petId;
		public int ItemId;
		public int ItemCount;
	}

	// 任务npc对话
	public static class task_dialog_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_dialog_req() { }

		public task_dialog_req(int npcId, int dialogId)
		{
			this.npcId = npcId;
			this.dialogId = dialogId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcId = is.popInteger();
			dialogId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(npcId);
			os.pushInteger(dialogId);
		}

		@Override
		public String getPacketName()
		{
			return "task_dialog_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcId = is.popInteger();
			dialogId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(npcId);
			os.pushInteger(dialogId);
		}

		public int npcId;
		public int dialogId;
	}

	// 任务护送NPC
	public static class task_conveynpc_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_conveynpc_req() { }

		public task_conveynpc_req(int npcId)
		{
			this.npcId = npcId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(npcId);
		}

		@Override
		public String getPacketName()
		{
			return "task_conveynpc_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(npcId);
		}

		public int npcId;
	}

	// 任务护送物件
	public static class task_conveyitem_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "task_conveyitem_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 任务文字答题
	public static class task_answer_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_answer_req() { }

		public task_answer_req(int questionId, int answer)
		{
			this.questionId = questionId;
			this.answer = answer;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			questionId = is.popInteger();
			answer = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(questionId);
			os.pushInteger(answer);
		}

		@Override
		public String getPacketName()
		{
			return "task_answer_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			questionId = is.popInteger();
			answer = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(questionId);
			os.pushInteger(answer);
		}

		public int questionId;
		public int answer;
	}

	// 随机答题
	public static class task_randquestion_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public task_randquestion_req() { }

		public task_randquestion_req(int taskCat)
		{
			this.taskCat = taskCat;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskCat = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskCat);
		}

		@Override
		public String getPacketName()
		{
			return "task_randquestion_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskCat = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskCat);
		}

		public int taskCat;
	}

	// 佣兵复活请求协议
	public static class pet_revive_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_revive_req() { }

		public pet_revive_req(int petId, int useStone)
		{
			this.petId = petId;
			this.useStone = useStone;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			useStone = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(useStone);
		}

		@Override
		public String getPacketName()
		{
			return "pet_revive_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			useStone = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(useStone);
		}

		public int petId;
		public int useStone;
	}

	// 请求挖矿的响应协议
	public static class role_mine_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_mine_req() { }

		public role_mine_req(int mineId, int mineInstance)
		{
			this.mineId = mineId;
			this.mineInstance = mineInstance;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mineId = is.popInteger();
			mineInstance = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mineId);
			os.pushInteger(mineInstance);
		}

		@Override
		public String getPacketName()
		{
			return "role_mine_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mineId = is.popInteger();
			mineInstance = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mineId);
			os.pushInteger(mineInstance);
		}

		public int mineId;
		public int mineInstance;
	}

	// 设置攻击模式请求
	public static class set_attackmode_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public set_attackmode_req() { }

		public set_attackmode_req(byte mode)
		{
			this.mode = mode;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mode = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(mode);
		}

		@Override
		public String getPacketName()
		{
			return "set_attackmode_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mode = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushByte(mode);
		}

		public byte mode;
	}

	// 查询队伍成员信息,异步查询
	public static class team_query_member implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_query_member() { }

		public team_query_member(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "team_query_member";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 邀请其他玩家组队协议
	public static class team_invite_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_invite_req() { }

		public team_invite_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "team_invite_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 接收到其他玩家组队邀请后玩家选择是否同意操作(-2是在指引状态 -1是忙，0是拒绝，1是同意)
	public static class team_invitedby_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_invitedby_req() { }

		public team_invitedby_req(int roleId, int accept)
		{
			this.roleId = roleId;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(accept);
		}

		@Override
		public String getPacketName()
		{
			return "team_invitedby_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(accept);
		}

		public int roleId;
		public int accept;
	}

	// 向其队长申请组队协议
	public static class team_apply_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_apply_req() { }

		public team_apply_req(int teamId)
		{
			this.teamId = teamId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			teamId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(teamId);
		}

		@Override
		public String getPacketName()
		{
			return "team_apply_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			teamId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(teamId);
		}

		public int teamId;
	}

	// 接收到其他玩家组队申请后队长是否同意操作(0是拒绝，1是同意)
	public static class team_appliedby_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_appliedby_req() { }

		public team_appliedby_req(int roleId, int accept)
		{
			this.roleId = roleId;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(accept);
		}

		@Override
		public String getPacketName()
		{
			return "team_appliedby_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(accept);
		}

		public int roleId;
		public int accept;
	}

	// 离开队伍请求协议
	public static class team_leave_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "team_leave_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 踢出队伍成员请求协议
	public static class team_kick_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_kick_req() { }

		public team_kick_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "team_kick_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 解散队伍请求协议
	public static class team_dissolve_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "team_dissolve_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 队伍切换队长请求协议
	public static class team_change_leader_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_change_leader_req() { }

		public team_change_leader_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "team_change_leader_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 查询玩家的队伍信息
	public static class team_role_query_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public team_role_query_req() { }

		public team_role_query_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "team_role_query_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 本队伍信息查询
	public static class team_self_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "team_self_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 附近的队伍请求协议
	public static class team_mapt_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "team_mapt_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 附近的人请求协议
	public static class team_mapr_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "team_mapr_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 副本房间创建协议
	public static class mroom_create_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_create_req() { }

		public mroom_create_req(int mapId, int type)
		{
			this.mapId = mapId;
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_create_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(type);
		}

		public int mapId;
		public int type;
	}

	// 新成员点击加入副本房间协议
	public static class mroom_enter_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_enter_req() { }

		public mroom_enter_req(int mapId, int roomId, int roomType)
		{
			this.mapId = mapId;
			this.roomId = roomId;
			this.roomType = roomType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			roomId = is.popInteger();
			roomType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(roomId);
			os.pushInteger(roomType);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_enter_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			roomId = is.popInteger();
			roomType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(roomId);
			os.pushInteger(roomType);
		}

		public int mapId;
		public int roomId;
		public int roomType;
	}

	// 新成员快速加入副本房间协议
	public static class mroom_qenter_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_qenter_req() { }

		public mroom_qenter_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_qenter_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 队长邀请新人加入副本房间协议
	public static class mroom_invite_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_invite_req() { }

		public mroom_invite_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_invite_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 接收到其他玩家邀请入房间后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
	public static class mroom_invitedby_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_invitedby_req() { }

		public mroom_invitedby_req(int roleId, int mapId, int roomId, int accept, 
		                           int type)
		{
			this.roleId = roleId;
			this.mapId = mapId;
			this.roomId = roomId;
			this.accept = accept;
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			mapId = is.popInteger();
			roomId = is.popInteger();
			accept = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(mapId);
			os.pushInteger(roomId);
			os.pushInteger(accept);
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_invitedby_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			mapId = is.popInteger();
			roomId = is.popInteger();
			accept = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(mapId);
			os.pushInteger(roomId);
			os.pushInteger(accept);
			os.pushInteger(type);
		}

		public int roleId;
		public int mapId;
		public int roomId;
		public int accept;
		public int type;
	}

	// 离开房间请求协议
	public static class mroom_leave_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mroom_leave_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 踢出房间成员请求协议
	public static class mroom_kick_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_kick_req() { }

		public mroom_kick_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_kick_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 副本房间更换房主请求协议
	public static class mroom_change_leader_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_change_leader_req() { }

		public mroom_change_leader_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_change_leader_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 房间信息查询
	public static class mroom_self_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mroom_self_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 地图附近的人
	public static class mroom_mapr_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mroom_mapr_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 房间列表查询响应协议
	public static class mroom_query_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mroom_query_req() { }

		public mroom_query_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "mroom_query_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 打开帮派界面同步帮派信息请求协议
	public static class sect_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 创建帮派请求协议
	public static class sect_create_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_create_req() { }

		public sect_create_req(String name, short icon, int useStone)
		{
			this.name = name;
			this.icon = icon;
			this.useStone = useStone;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			name = is.popString();
			icon = is.popShort();
			useStone = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(name);
			os.pushShort(icon);
			os.pushInteger(useStone);
		}

		@Override
		public String getPacketName()
		{
			return "sect_create_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			name = is.popString();
			icon = is.popShort();
			useStone = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(name);
			os.pushShort(icon);
			os.pushInteger(useStone);
		}

		public String name;
		public short icon;
		public int useStone;
	}

	// 批量查询帮派是否被申请协议
	public static class sect_queryapplied_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_queryapplied_req() { }

		public sect_queryapplied_req(List<Integer> sects)
		{
			this.sects = sects;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sects = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(sects);
		}

		@Override
		public String getPacketName()
		{
			return "sect_queryapplied_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sects = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(sects);
		}

		public List<Integer> sects;
	}

	// 刷新帮派列表请求协议
	public static class sect_list_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_list_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 批量查询帮派信息请求协议
	public static class sect_query_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_query_req() { }

		public sect_query_req(List<Integer> sects)
		{
			this.sects = sects;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sects = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(sects);
		}

		@Override
		public String getPacketName()
		{
			return "sect_query_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sects = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(sects);
		}

		public List<Integer> sects;
	}

	// 搜索帮派信息请求协议
	public static class sect_searchbyid_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_searchbyid_req() { }

		public sect_searchbyid_req(int sectId)
		{
			this.sectId = sectId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sectId);
		}

		@Override
		public String getPacketName()
		{
			return "sect_searchbyid_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sectId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(sectId);
		}

		public int sectId;
	}

	// 搜索帮派信息请求协议
	public static class sect_searchbyname_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_searchbyname_req() { }

		public sect_searchbyname_req(String sectName)
		{
			this.sectName = sectName;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectName = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(sectName);
		}

		@Override
		public String getPacketName()
		{
			return "sect_searchbyname_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sectName = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(sectName);
		}

		public String sectName;
	}

	// 申请加入帮派协议
	public static class sect_apply_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_apply_req() { }

		public sect_apply_req(int sectId)
		{
			this.sectId = sectId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sectId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sectId);
		}

		@Override
		public String getPacketName()
		{
			return "sect_apply_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sectId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(sectId);
		}

		public int sectId;
	}

	// 快速申请加入帮派请求协议
	public static class sect_qapply_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_qapply_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 查询帮派成员请求协议
	public static class sect_members_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_members_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派申请列表协议
	public static class sect_applications_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_applications_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派历史事件请求协议
	public static class sect_history_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_history_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派管理同意或拒绝申请入帮请求协议  accept 1:同意， 2:拒绝
	public static class sect_appliedby_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_appliedby_req() { }

		public sect_appliedby_req(int roleId, int accept)
		{
			this.roleId = roleId;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(accept);
		}

		@Override
		public String getPacketName()
		{
			return "sect_appliedby_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(accept);
		}

		public int roleId;
		public int accept;
	}

	// 帮派管理同意或拒绝全部申请入帮请求协议  accept 1:同意， 2:拒绝
	public static class sect_appliedbyall_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_appliedbyall_req() { }

		public sect_appliedbyall_req(int accept)
		{
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			accept = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(accept);
		}

		@Override
		public String getPacketName()
		{
			return "sect_appliedbyall_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			accept = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(accept);
		}

		public int accept;
	}

	// 帮派管理任命请求协议,position为 1为帮主，2位副帮主，3为长老, 4成员
	public static class sect_appoint_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_appoint_req() { }

		public sect_appoint_req(int roleId, int position)
		{
			this.roleId = roleId;
			this.position = position;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			position = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(position);
		}

		@Override
		public String getPacketName()
		{
			return "sect_appoint_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			position = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(position);
		}

		public int roleId;
		public int position;
	}

	// 帮派管理踢出协议
	public static class sect_kick_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_kick_req() { }

		public sect_kick_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "sect_kick_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 离开帮派协议
	public static class sect_leave_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_leave_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 解散帮派协议
	public static class sect_disband_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_disband_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 修改帮派宗旨协议
	public static class sect_changecreed_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_changecreed_req() { }

		public sect_changecreed_req(String creed)
		{
			this.creed = creed;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			creed = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(creed);
		}

		@Override
		public String getPacketName()
		{
			return "sect_changecreed_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			creed = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(creed);
		}

		public String creed;
	}

	// 修改帮派名字协议
	public static class sect_changename_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_changename_req() { }

		public sect_changename_req(String name)
		{
			this.name = name;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			name = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(name);
		}

		@Override
		public String getPacketName()
		{
			return "sect_changename_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			name = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(name);
		}

		public String name;
	}

	// 修改帮派图标协议
	public static class sect_changeicon_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_changeicon_req() { }

		public sect_changeicon_req(short icon, short frame)
		{
			this.icon = icon;
			this.frame = frame;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			icon = is.popShort();
			frame = is.popShort();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushShort(icon);
			os.pushShort(frame);
		}

		@Override
		public String getPacketName()
		{
			return "sect_changeicon_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			icon = is.popShort();
			frame = is.popShort();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushShort(icon);
			os.pushShort(frame);
		}

		public short icon;
		public short frame;
	}

	// 修改帮派申请加入等级需求协议
	public static class sect_joinlvl_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_joinlvl_req() { }

		public sect_joinlvl_req(int level)
		{
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "sect_joinlvl_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(level);
		}

		public int level;
	}

	// 帮派发送邮件协议
	public static class sect_sendemail_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_sendemail_req() { }

		public sect_sendemail_req(String content)
		{
			this.content = content;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			content = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(content);
		}

		@Override
		public String getPacketName()
		{
			return "sect_sendemail_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			content = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(content);
		}

		public String content;
	}

	// 帮派升级协议
	public static class sect_upgrade_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_upgrade_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派加速升级冷却协议
	public static class sect_accelerate_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_accelerate_req() { }

		public sect_accelerate_req(int accTime)
		{
			this.accTime = accTime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			accTime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(accTime);
		}

		@Override
		public String getPacketName()
		{
			return "sect_accelerate_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			accTime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(accTime);
		}

		public int accTime;
	}

	// 帮派技能查询协议
	public static class sect_aurasync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_aurasync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派光环捐献道具增加经验点协议
	public static class sect_auraexpadd_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_auraexpadd_req() { }

		public sect_auraexpadd_req(int auraId, int itemId, int itemCount)
		{
			this.auraId = auraId;
			this.itemId = itemId;
			this.itemCount = itemCount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			auraId = is.popInteger();
			itemId = is.popInteger();
			itemCount = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(auraId);
			os.pushInteger(itemId);
			os.pushInteger(itemCount);
		}

		@Override
		public String getPacketName()
		{
			return "sect_auraexpadd_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			auraId = is.popInteger();
			itemId = is.popInteger();
			itemCount = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(auraId);
			os.pushInteger(itemId);
			os.pushInteger(itemCount);
		}

		public int auraId;
		public int itemId;
		public int itemCount;
	}

	// 帮派膜拜协议
	public static class sect_worship_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_worship_req() { }

		public sect_worship_req(int roleId, int type)
		{
			this.roleId = roleId;
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "sect_worship_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(type);
		}

		public int roleId;
		public int type;
	}

	// 帮派同步膜拜奖励协议
	public static class sect_syncworshipreward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_syncworshipreward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派领取膜拜奖励协议
	public static class sect_takeworshipreward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_takeworshipreward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派开启宴席协议
	public static class sect_openbanquet_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_openbanquet_req() { }

		public sect_openbanquet_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "sect_openbanquet_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 帮派宴席列表协议
	public static class sect_listbanquet_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_listbanquet_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派帮派宴席协议
	public static class sect_joinbanquet_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_joinbanquet_req() { }

		public sect_joinbanquet_req(int bid)
		{
			this.bid = bid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bid);
		}

		@Override
		public String getPacketName()
		{
			return "sect_joinbanquet_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bid);
		}

		public int bid;
	}

	// 帮派商城同步协议
	public static class sect_shopsync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_shopsync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派商城刷新协议
	public static class sect_shoprefresh_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_shoprefresh_req() { }

		public sect_shoprefresh_req(int times, int isSecondType)
		{
			this.times = times;
			this.isSecondType = isSecondType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
			isSecondType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
			os.pushInteger(isSecondType);
		}

		@Override
		public String getPacketName()
		{
			return "sect_shoprefresh_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
			isSecondType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
			os.pushInteger(isSecondType);
		}

		public int times;
		public int isSecondType;
	}

	// 帮派商城买商品协议
	public static class sect_shopbuy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_shopbuy_req() { }

		public sect_shopbuy_req(int seq)
		{
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "sect_shopbuy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
		}

		public int seq;
	}

	// 进入帮派副本挑战协议
	public static class sectmap_start_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_start_req() { }

		public sectmap_start_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_start_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 帮派副本完成过的状态协议
	public static class sectmap_status_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_status_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 查询帮派副本进度协议
	public static class sectmap_query_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_query_req() { }

		public sectmap_query_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_query_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 帮派开启或重置副本协议
	public static class sectmap_open_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_open_req() { }

		public sectmap_open_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_open_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 所有帮派副本奖励已分配日志记录
	public static class sectmap_rewards_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_rewards_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 当前帮派副本申请奖励协议
	public static class sectmap_apply_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_apply_req() { }

		public sectmap_apply_req(int mapId, int rewardId)
		{
			this.mapId = mapId;
			this.rewardId = rewardId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			rewardId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(rewardId);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_apply_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			rewardId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(rewardId);
		}

		public int mapId;
		public int rewardId;
	}

	// 当前帮派副本奖励分配信息
	public static class sectmap_allocation_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_allocation_req() { }

		public sectmap_allocation_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_allocation_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 当前帮派副本伤害输出信息
	public static class sectmap_damage_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_damage_req() { }

		public sectmap_damage_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_damage_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 帮派副本同步进度协议
	public static class sectmap_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sectmap_sync_req() { }

		public sectmap_sync_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "sectmap_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 帮派个人任务详细信息
	public static class sect_task_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派共享任务详细信息
	public static class sect_share_task_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_share_task_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派完成的个人任务详细信息
	public static class sect_finish_task_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_finish_task_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派任务接取
	public static class sect_task_receive_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_receive_req() { }

		public sect_task_receive_req(int ownerId, int sid)
		{
			this.ownerId = ownerId;
			this.sid = sid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ownerId = is.popInteger();
			sid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ownerId);
			os.pushInteger(sid);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_receive_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ownerId = is.popInteger();
			sid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ownerId);
			os.pushInteger(sid);
		}

		public int ownerId;
		public int sid;
	}

	// 帮派任务取消
	public static class sect_task_cancel_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_cancel_req() { }

		public sect_task_cancel_req(int ownerId, int sid)
		{
			this.ownerId = ownerId;
			this.sid = sid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ownerId = is.popInteger();
			sid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ownerId);
			os.pushInteger(sid);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_cancel_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ownerId = is.popInteger();
			sid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ownerId);
			os.pushInteger(sid);
		}

		public int ownerId;
		public int sid;
	}

	// 帮派任务完成
	public static class sect_task_finish_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_finish_req() { }

		public sect_task_finish_req(int ownerId, int sid)
		{
			this.ownerId = ownerId;
			this.sid = sid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ownerId = is.popInteger();
			sid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ownerId);
			os.pushInteger(sid);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_finish_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ownerId = is.popInteger();
			sid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ownerId);
			os.pushInteger(sid);
		}

		public int ownerId;
		public int sid;
	}

	// 帮派任务共享
	public static class sect_task_issuance_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_task_issuance_req() { }

		public sect_task_issuance_req(int sid)
		{
			this.sid = sid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sid);
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_issuance_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(sid);
		}

		public int sid;
	}

	// 帮派任务重置
	public static class sect_task_reset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_reset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派任务完成奖励
	public static class sect_task_done_rewards_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_task_done_rewards_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 自创武功信息
	public static class diyskill_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 自创武功
	public static class diyskill_create_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_create_req() { }

		public diyskill_create_req(Map<Integer, Integer> params, Set<Integer> trends)
		{
			this.params = params;
			this.trends = trends;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			params = is.popIntegerIntegerTreeMap();
			trends = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(params);
			os.pushIntegerSet(trends);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_create_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			params = is.popIntegerIntegerTreeMap();
			trends = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(params);
			os.pushIntegerSet(trends);
		}

		public Map<Integer, Integer> params;
		public Set<Integer> trends;
	}

	// 保存创建的自创武功
	public static class diyskill_save_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_save_req() { }

		public diyskill_save_req(int iconId, String name)
		{
			this.iconId = iconId;
			this.name = name;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			iconId = is.popInteger();
			name = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(iconId);
			os.pushString(name);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_save_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			iconId = is.popInteger();
			name = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(iconId);
			os.pushString(name);
		}

		public int iconId;
		public String name;
	}

	// 遗忘
	public static class diyskill_discard_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_discard_req() { }

		public diyskill_discard_req(int skillPos)
		{
			this.skillPos = skillPos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillPos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillPos);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_discard_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillPos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillPos);
		}

		public int skillPos;
	}

	// 装备自创技能
	public static class diyskill_selectuse_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_selectuse_req() { }

		public diyskill_selectuse_req(int skillPos)
		{
			this.skillPos = skillPos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillPos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillPos);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_selectuse_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillPos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillPos);
		}

		public int skillPos;
	}

	// 卸下自创技能
	public static class diyskill_canceluse_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_canceluse_req() { }

		public diyskill_canceluse_req(int skillPos)
		{
			this.skillPos = skillPos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillPos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillPos);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_canceluse_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillPos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillPos);
		}

		public int skillPos;
	}

	// 解锁槽
	public static class diyskill_unlock_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_unlock_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 购买学习次数
	public static class diyskill_buytimes_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_buytimes_req() { }

		public diyskill_buytimes_req(int times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_buytimes_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
		}

		public int times;
	}

	// 自创武功分享
	public static class diyskill_share_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_share_req() { }

		public diyskill_share_req(int skillPos)
		{
			this.skillPos = skillPos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillPos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillPos);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_share_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillPos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillPos);
		}

		public int skillPos;
	}

	// 自创武功取消分享
	public static class diyskill_cancelshare_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_cancelshare_req() { }

		public diyskill_cancelshare_req(int skillPos)
		{
			this.skillPos = skillPos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillPos = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillPos);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_cancelshare_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillPos = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillPos);
		}

		public int skillPos;
	}

	// 自创武功借用
	public static class diyskill_borrow_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_borrow_req() { }

		public diyskill_borrow_req(int roleId, int skillId)
		{
			this.roleId = roleId;
			this.skillId = skillId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			skillId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.pushInteger(skillId);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_borrow_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			skillId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.pushInteger(skillId);
		}

		public int roleId;
		public int skillId;
	}

	// 自创武功炫耀
	public static class diyskill_flaunt_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public diyskill_flaunt_req() { }

		public diyskill_flaunt_req(int channel, int skillPos, List<Integer> icons)
		{
			this.channel = channel;
			this.skillPos = skillPos;
			this.icons = icons;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			channel = is.popInteger();
			skillPos = is.popInteger();
			icons = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(channel);
			os.pushInteger(skillPos);
			os.pushIntegerList(icons);
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_flaunt_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			channel = is.popInteger();
			skillPos = is.popInteger();
			icons = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(channel);
			os.pushInteger(skillPos);
			os.pushIntegerList(icons);
		}

		public int channel;
		public int skillPos;
		public List<Integer> icons;
	}

	// 自创武功领取共享奖励
	public static class diyskill_shareaward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "diyskill_shareaward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步随从是否自动使用血池
	public static class sync_pet_can_use_pool implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_pet_can_use_pool() { }

		public sync_pet_can_use_pool(byte canUsePool)
		{
			this.canUsePool = canUsePool;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			canUsePool = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(canUsePool);
		}

		@Override
		public String getPacketName()
		{
			return "sync_pet_can_use_pool";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			canUsePool = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushByte(canUsePool);
		}

		public byte canUsePool;
	}

	// 同步是否推送帮派申请数量
	public static class sect_push_application_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_push_application_req() { }

		public sect_push_application_req(byte ok)
		{
			this.ok = ok;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ok = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(ok);
		}

		@Override
		public String getPacketName()
		{
			return "sect_push_application_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ok = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushByte(ok);
		}

		public byte ok;
	}

	// 套装购买
	public static class suite_buy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public suite_buy_req() { }

		public suite_buy_req(int suiteId)
		{
			this.suiteId = suiteId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			suiteId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(suiteId);
		}

		@Override
		public String getPacketName()
		{
			return "suite_buy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			suiteId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(suiteId);
		}

		public int suiteId;
	}

	// 买物品
	public static class store_buy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public store_buy_req() { }

		public store_buy_req(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "store_buy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	public static class teleport_npc_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public teleport_npc_req() { }

		public teleport_npc_req(int npcId, int mapId)
		{
			this.npcId = npcId;
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcId = is.popInteger();
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(npcId);
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "teleport_npc_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcId = is.popInteger();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(npcId);
			os.pushInteger(mapId);
		}

		public int npcId;
		public int mapId;
	}

	public static class teleport_monster_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public teleport_monster_req() { }

		public teleport_monster_req(int spawnPointId, int mapId)
		{
			this.spawnPointId = spawnPointId;
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spawnPointId = is.popInteger();
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spawnPointId);
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "teleport_monster_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			spawnPointId = is.popInteger();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(spawnPointId);
			os.pushInteger(mapId);
		}

		public int spawnPointId;
		public int mapId;
	}

	public static class teleport_mineral_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public teleport_mineral_req() { }

		public teleport_mineral_req(int mineralPointId, int mapId)
		{
			this.mineralPointId = mineralPointId;
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mineralPointId = is.popInteger();
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mineralPointId);
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "teleport_mineral_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mineralPointId = is.popInteger();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mineralPointId);
			os.pushInteger(mapId);
		}

		public int mineralPointId;
		public int mapId;
	}

	// 竞技场同步信息
	public static class arena_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "arena_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 竞技场防守阵容
	public static class arena_setpets_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_setpets_req() { }

		public arena_setpets_req(List<Integer> pets)
		{
			this.pets = pets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pets = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(pets);
		}

		@Override
		public String getPacketName()
		{
			return "arena_setpets_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pets = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(pets);
		}

		public List<Integer> pets;
	}

	// 竞技场排行榜
	public static class arena_ranks_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "arena_ranks_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 换一换
	public static class arena_refresh_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "arena_refresh_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 获取竞技场防守阵容
	public static class arena_defencepets_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_defencepets_req() { }

		public arena_defencepets_req(int rid, int rank)
		{
			this.rid = rid;
			this.rank = rank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			rank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(rank);
		}

		@Override
		public String getPacketName()
		{
			return "arena_defencepets_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			rank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(rank);
		}

		public int rid;
		public int rank;
	}

	// 重置
	public static class arena_resetcool_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "arena_resetcool_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 购买次数
	public static class arena_buytimes_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_buytimes_req() { }

		public arena_buytimes_req(int times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "arena_buytimes_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
		}

		public int times;
	}

	// 竞技场商城同步协议
	public static class arena_shopsync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "arena_shopsync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 竞技场商城刷新协议
	public static class arena_shoprefresh_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_shoprefresh_req() { }

		public arena_shoprefresh_req(int times, int isSecondType)
		{
			this.times = times;
			this.isSecondType = isSecondType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
			isSecondType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
			os.pushInteger(isSecondType);
		}

		@Override
		public String getPacketName()
		{
			return "arena_shoprefresh_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
			isSecondType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
			os.pushInteger(isSecondType);
		}

		public int times;
		public int isSecondType;
	}

	// 竞技场商城买商品协议
	public static class arena_shopbuy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_shopbuy_req() { }

		public arena_shopbuy_req(int seq)
		{
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "arena_shopbuy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
		}

		public int seq;
	}

	// 开始战斗
	public static class arena_startattack_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_startattack_req() { }

		public arena_startattack_req(int selfRank, List<Integer> selfPets, int targetRoleId, int targetRank)
		{
			this.selfRank = selfRank;
			this.selfPets = selfPets;
			this.targetRoleId = targetRoleId;
			this.targetRank = targetRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			selfRank = is.popInteger();
			selfPets = is.popIntegerList();
			targetRoleId = is.popInteger();
			targetRank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(selfRank);
			os.pushIntegerList(selfPets);
			os.pushInteger(targetRoleId);
			os.pushInteger(targetRank);
		}

		@Override
		public String getPacketName()
		{
			return "arena_startattack_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			selfRank = is.popInteger();
			selfPets = is.popIntegerList();
			targetRoleId = is.popInteger();
			targetRank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(selfRank);
			os.pushIntegerList(selfPets);
			os.pushInteger(targetRoleId);
			os.pushInteger(targetRank);
		}

		public int selfRank;
		public List<Integer> selfPets;
		public int targetRoleId;
		public int targetRank;
	}

	// 战报
	public static class arena_log_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "arena_log_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 积分奖励
	public static class arena_scoresync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "arena_scoresync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 领取积分奖励
	public static class arena_takescore_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_takescore_req() { }

		public arena_takescore_req(int score)
		{
			this.score = score;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			score = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(score);
		}

		@Override
		public String getPacketName()
		{
			return "arena_takescore_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			score = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(score);
		}

		public int score;
	}

	// 防守阵容显隐
	public static class arena_hidedefence_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public arena_hidedefence_req() { }

		public arena_hidedefence_req(byte hide)
		{
			this.hide = hide;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hide = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(hide);
		}

		@Override
		public String getPacketName()
		{
			return "arena_hidedefence_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hide = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushByte(hide);
		}

		public byte hide;
	}

	// 会武同步信息
	public static class superarena_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "superarena_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 会武设置出战佣兵
	public static class superarena_setpets_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_setpets_req() { }

		public superarena_setpets_req(Set<Integer> pets)
		{
			this.pets = pets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(pets);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_setpets_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(pets);
		}

		public Set<Integer> pets;
	}

	// 单人匹配
	public static class superarena_singlejoin_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_singlejoin_req() { }

		public superarena_singlejoin_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_singlejoin_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 组队匹配
	public static class superarena_teamjoin_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_teamjoin_req() { }

		public superarena_teamjoin_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_teamjoin_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 取消匹配
	public static class superarena_quit_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "superarena_quit_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 4v4竞技场商城同步协议
	public static class superarena_shopsync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "superarena_shopsync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 4v4竞技场商城刷新协议
	public static class superarena_shoprefresh_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_shoprefresh_req() { }

		public superarena_shoprefresh_req(int times, int isSecondType)
		{
			this.times = times;
			this.isSecondType = isSecondType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
			isSecondType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
			os.pushInteger(isSecondType);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_shoprefresh_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
			isSecondType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
			os.pushInteger(isSecondType);
		}

		public int times;
		public int isSecondType;
	}

	// 4v4竞技场商城买商品协议
	public static class superarena_shopbuy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_shopbuy_req() { }

		public superarena_shopbuy_req(int seq)
		{
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_shopbuy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
		}

		public int seq;
	}

	// 组队创建竞技场房间
	public static class aroom_create_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_create_req() { }

		public aroom_create_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_create_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 邀请新人加入副本房间协议
	public static class aroom_invite_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_invite_req() { }

		public aroom_invite_req(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_invite_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 接收到其他玩家邀请入房间后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
	public static class aroom_invitedby_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_invitedby_req() { }

		public aroom_invitedby_req(int roleID, int roomID, int accept)
		{
			this.roleID = roleID;
			this.roomID = roomID;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roomID = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(roomID);
			os.pushInteger(accept);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_invitedby_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roomID = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(roomID);
			os.pushInteger(accept);
		}

		public int roleID;
		public int roomID;
		public int accept;
	}

	// 离开房间请求协议
	public static class aroom_leave_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "aroom_leave_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 踢出房间成员请求协议
	public static class aroom_kick_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_kick_req() { }

		public aroom_kick_req(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_kick_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 会武房间更换房主请求协议
	public static class aroom_change_leader_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_change_leader_req() { }

		public aroom_change_leader_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_change_leader_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 房间信息查询
	public static class aroom_self_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "aroom_self_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 查询会武房间成员信息,异步查询
	public static class aroom_query_member implements Stream.IStreamable, SStream.IStrPacket
	{

		public aroom_query_member() { }

		public aroom_query_member(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "aroom_query_member";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 地图附近没房间且等级段一致的人
	public static class aroom_mapr_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "aroom_mapr_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 会武周排行榜
	public static class superarena_weekrank_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "superarena_weekrank_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 会武日排行榜(type 1: 普通4v4)
	public static class superarena_dayrank_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public superarena_dayrank_req() { }

		public superarena_dayrank_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "superarena_dayrank_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 正邪道场同步信息
	public static class bwarena_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 正邪道场设置参战随从
	public static class bwarena_setpet_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_setpet_req() { }

		public bwarena_setpet_req(Set<Integer> pets)
		{
			this.pets = pets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(pets);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_setpet_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(pets);
		}

		public Set<Integer> pets;
	}

	// 正邪道场刷新对手
	public static class bwarena_refresh_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_refresh_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 正邪道场购买次数
	public static class bwarena_buytimes_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_buytimes_req() { }

		public bwarena_buytimes_req(int times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_buytimes_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
		}

		public int times;
	}

	// 正邪道场开始战斗
	public static class bwarena_startattack_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_startattack_req() { }

		public bwarena_startattack_req(int targetID)
		{
			this.targetID = targetID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			targetID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(targetID);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_startattack_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			targetID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(targetID);
		}

		public int targetID;
	}

	// 正邪道场领取积分奖励
	public static class bwarena_takescore_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_takescore_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 正邪道场战报
	public static class bwarena_log_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_log_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 正邪道场排行榜
	public static class bwarena_ranks_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bwarena_ranks_req() { }

		public bwarena_ranks_req(int bwtype, int index, int len)
		{
			this.bwtype = bwtype;
			this.index = index;
			this.len = len;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bwtype = is.popInteger();
			index = is.popInteger();
			len = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bwtype);
			os.pushInteger(index);
			os.pushInteger(len);
		}

		@Override
		public String getPacketName()
		{
			return "bwarena_ranks_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bwtype = is.popInteger();
			index = is.popInteger();
			len = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bwtype);
			os.pushInteger(index);
			os.pushInteger(len);
		}

		public int bwtype;
		public int index;
		public int len;
	}

	// 势力战界面同步信息
	public static class forcewar_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 势力战报名协议
	public static class forcewar_join_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public forcewar_join_req() { }

		public forcewar_join_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_join_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 势力战取消报名协议
	public static class forcewar_quit_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "forcewar_quit_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 创建势力战房间
	public static class froom_create_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_create_req() { }

		public froom_create_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "froom_create_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 邀请新人加入势力战房间协议
	public static class froom_invite_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_invite_req() { }

		public froom_invite_req(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "froom_invite_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 接收到其他玩家邀请入房间后玩家选择是否同意操作(-1是忙，0是拒绝，1是同意)
	public static class froom_invitedby_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_invitedby_req() { }

		public froom_invitedby_req(int roleID, int roomID, int accept)
		{
			this.roleID = roleID;
			this.roomID = roomID;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			roomID = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(roomID);
			os.pushInteger(accept);
		}

		@Override
		public String getPacketName()
		{
			return "froom_invitedby_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			roomID = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(roomID);
			os.pushInteger(accept);
		}

		public int roleID;
		public int roomID;
		public int accept;
	}

	// 离开房间请求协议
	public static class froom_leave_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "froom_leave_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 踢出房间成员请求协议
	public static class froom_kick_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_kick_req() { }

		public froom_kick_req(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "froom_kick_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 势力战房间更换房主请求协议
	public static class froom_change_leader_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_change_leader_req() { }

		public froom_change_leader_req(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "froom_change_leader_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 查询势力战房间成员信息,异步查询
	public static class froom_query_member implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_query_member() { }

		public froom_query_member(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "froom_query_member";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 查询势力战房间所有成员信息,异步查询
	public static class froom_query_members implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "froom_query_members";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同一地图地图附近没房间且符合条件的人
	public static class froom_mapr_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public froom_mapr_req() { }

		public froom_mapr_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "froom_mapr_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// boss信息同步请求
	public static class bosses_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "bosses_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 前往boss位置请求
	public static class walktoboss_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public walktoboss_req() { }

		public walktoboss_req(int bossID)
		{
			this.bossID = bossID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bossID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bossID);
		}

		@Override
		public String getPacketName()
		{
			return "walktoboss_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bossID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bossID);
		}

		public int bossID;
	}

	// 直接传送到boss位置请求
	public static class transtoboss_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public transtoboss_req() { }

		public transtoboss_req(int bossID, int seq)
		{
			this.bossID = bossID;
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bossID = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bossID);
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "transtoboss_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bossID = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bossID);
			os.pushInteger(seq);
		}

		public int bossID;
		public int seq;
	}

	public static class reset_transtime_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "reset_transtime_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// boss奖励分配记录请求(last 1:上次, 0:本次)
	public static class boss_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public boss_reward_req() { }

		public boss_reward_req(int bossID, int last)
		{
			this.bossID = bossID;
			this.last = last;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bossID = is.popInteger();
			last = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bossID);
			os.pushInteger(last);
		}

		@Override
		public String getPacketName()
		{
			return "boss_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bossID = is.popInteger();
			last = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bossID);
			os.pushInteger(last);
		}

		public int bossID;
		public int last;
	}

	// 好友界面信息同步请求
	public static class friend_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "friend_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 获取最新加我为好友的列表
	public static class friend_pluslist_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "friend_pluslist_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 获取系统推荐的列表
	public static class friend_recommend_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "friend_recommend_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 添加好友回应
	public static class friend_add_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_add_req() { }

		public friend_add_req(int friendId)
		{
			this.friendId = friendId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			friendId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(friendId);
		}

		@Override
		public String getPacketName()
		{
			return "friend_add_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			friendId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(friendId);
		}

		public int friendId;
	}

	// 好友搜索
	public static class friend_search_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_search_req() { }

		public friend_search_req(String name)
		{
			this.name = name;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			name = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(name);
		}

		@Override
		public String getPacketName()
		{
			return "friend_search_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			name = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(name);
		}

		public String name;
	}

	// 删除好友回应
	public static class friend_delete_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_delete_req() { }

		public friend_delete_req(int friendId)
		{
			this.friendId = friendId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			friendId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(friendId);
		}

		@Override
		public String getPacketName()
		{
			return "friend_delete_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			friendId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(friendId);
		}

		public int friendId;
	}

	// 好友送体力
	public static class friend_givevit_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_givevit_req() { }

		public friend_givevit_req(int friendId)
		{
			this.friendId = friendId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			friendId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(friendId);
		}

		@Override
		public String getPacketName()
		{
			return "friend_givevit_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			friendId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(friendId);
		}

		public int friendId;
	}

	// 好友一键送体力
	public static class friend_giveallvits_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_giveallvits_req() { }

		public friend_giveallvits_req(Set<Integer> friends)
		{
			this.friends = friends;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			friends = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(friends);
		}

		@Override
		public String getPacketName()
		{
			return "friend_giveallvits_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			friends = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(friends);
		}

		public Set<Integer> friends;
	}

	// 好友接受体力
	public static class friend_receivevit_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_receivevit_req() { }

		public friend_receivevit_req(Set<Integer> fids)
		{
			this.fids = fids;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fids = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(fids);
		}

		@Override
		public String getPacketName()
		{
			return "friend_receivevit_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			fids = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(fids);
		}

		public Set<Integer> fids;
	}

	// 同意添加好友
	public static class friend_agreeadd_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_agreeadd_req() { }

		public friend_agreeadd_req(int friendId)
		{
			this.friendId = friendId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			friendId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(friendId);
		}

		@Override
		public String getPacketName()
		{
			return "friend_agreeadd_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			friendId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(friendId);
		}

		public int friendId;
	}

	// 玩家更新心情
	public static class friend_changemsg_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_changemsg_req() { }

		public friend_changemsg_req(String msg)
		{
			this.msg = msg;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			msg = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(msg);
		}

		@Override
		public String getPacketName()
		{
			return "friend_changemsg_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			msg = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(msg);
		}

		public String msg;
	}

	// 玩家更改头像
	public static class friend_changehead_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_changehead_req() { }

		public friend_changehead_req(short headId)
		{
			this.headId = headId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			headId = is.popShort();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushShort(headId);
		}

		@Override
		public String getPacketName()
		{
			return "friend_changehead_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			headId = is.popShort();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushShort(headId);
		}

		public short headId;
	}

	// 获取好友宿敌
	public static class friend_enemy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "friend_enemy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 删除好友宿敌
	public static class friend_removeenemy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_removeenemy_req() { }

		public friend_removeenemy_req(int enemyId)
		{
			this.enemyId = enemyId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			enemyId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(enemyId);
		}

		@Override
		public String getPacketName()
		{
			return "friend_removeenemy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			enemyId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(enemyId);
		}

		public int enemyId;
	}

	// 设置好友关注度
	public static class friend_setfocus_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public friend_setfocus_req() { }

		public friend_setfocus_req(int friendId, int value)
		{
			this.friendId = friendId;
			this.value = value;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			friendId = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(friendId);
			os.pushInteger(value);
		}

		@Override
		public String getPacketName()
		{
			return "friend_setfocus_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			friendId = is.popInteger();
			value = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(friendId);
			os.pushInteger(value);
		}

		public int friendId;
		public int value;
	}

	// 送花
	public static class give_flower_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public give_flower_req() { }

		public give_flower_req(int rid, int count)
		{
			this.rid = rid;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "give_flower_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
			os.pushInteger(count);
		}

		public int rid;
		public int count;
	}

	// 获取赠送记录
	public static class get_flowerlog_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "get_flowerlog_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 获取接收列表
	public static class get_acceptlist_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public get_acceptlist_req() { }

		public get_acceptlist_req(int rid)
		{
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "get_acceptlist_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
		}

		public int rid;
	}

	// 拍卖行信息同步请求
	public static class auction_syncitems_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_syncitems_req() { }

		public auction_syncitems_req(int itemType, int classType, int rank, int level, 
		                             int order, int page, String name)
		{
			this.itemType = itemType;
			this.classType = classType;
			this.rank = rank;
			this.level = level;
			this.order = order;
			this.page = page;
			this.name = name;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemType = is.popInteger();
			classType = is.popInteger();
			rank = is.popInteger();
			level = is.popInteger();
			order = is.popInteger();
			page = is.popInteger();
			name = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemType);
			os.pushInteger(classType);
			os.pushInteger(rank);
			os.pushInteger(level);
			os.pushInteger(order);
			os.pushInteger(page);
			os.pushString(name);
		}

		@Override
		public String getPacketName()
		{
			return "auction_syncitems_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemType = is.popInteger();
			classType = is.popInteger();
			rank = is.popInteger();
			level = is.popInteger();
			order = is.popInteger();
			page = is.popInteger();
			name = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemType);
			os.pushInteger(classType);
			os.pushInteger(rank);
			os.pushInteger(level);
			os.pushInteger(order);
			os.pushInteger(page);
			os.pushString(name);
		}

		public int itemType;
		public int classType;
		public int rank;
		public int level;
		public int order;
		public int page;
		public String name;
	}

	// 拍卖行装备同步请求
	public static class auction_syncequips_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_syncequips_req() { }

		public auction_syncequips_req(int itemType, int classType, int rank, int level, 
		                              int order, int page, String name)
		{
			this.itemType = itemType;
			this.classType = classType;
			this.rank = rank;
			this.level = level;
			this.order = order;
			this.page = page;
			this.name = name;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemType = is.popInteger();
			classType = is.popInteger();
			rank = is.popInteger();
			level = is.popInteger();
			order = is.popInteger();
			page = is.popInteger();
			name = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemType);
			os.pushInteger(classType);
			os.pushInteger(rank);
			os.pushInteger(level);
			os.pushInteger(order);
			os.pushInteger(page);
			os.pushString(name);
		}

		@Override
		public String getPacketName()
		{
			return "auction_syncequips_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemType = is.popInteger();
			classType = is.popInteger();
			rank = is.popInteger();
			level = is.popInteger();
			order = is.popInteger();
			page = is.popInteger();
			name = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemType);
			os.pushInteger(classType);
			os.pushInteger(rank);
			os.pushInteger(level);
			os.pushInteger(order);
			os.pushInteger(page);
			os.pushString(name);
		}

		public int itemType;
		public int classType;
		public int rank;
		public int level;
		public int order;
		public int page;
		public String name;
	}

	// 同步自己寄售物品请求
	public static class auction_syncselfitems_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "auction_syncselfitems_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 上架道具物品请求
	public static class auction_putonitems_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_putonitems_req() { }

		public auction_putonitems_req(int id, int count, int price)
		{
			this.id = id;
			this.count = count;
			this.price = price;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
			price = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
			os.pushInteger(price);
		}

		@Override
		public String getPacketName()
		{
			return "auction_putonitems_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
			price = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
			os.pushInteger(price);
		}

		public int id;
		public int count;
		public int price;
	}

	// 上架装备请求
	public static class auction_putonequip_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_putonequip_req() { }

		public auction_putonequip_req(int id, String guid, int price)
		{
			this.id = id;
			this.guid = guid;
			this.price = price;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			guid = is.popString();
			price = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushString(guid);
			os.pushInteger(price);
		}

		@Override
		public String getPacketName()
		{
			return "auction_putonequip_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			guid = is.popString();
			price = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushString(guid);
			os.pushInteger(price);
		}

		public int id;
		public String guid;
		public int price;
	}

	// 物品下架请求
	public static class auction_putoffitems_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_putoffitems_req() { }

		public auction_putoffitems_req(int cid, int itemID, int count)
		{
			this.cid = cid;
			this.itemID = itemID;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cid = is.popInteger();
			itemID = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cid);
			os.pushInteger(itemID);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "auction_putoffitems_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cid = is.popInteger();
			itemID = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cid);
			os.pushInteger(itemID);
			os.pushInteger(count);
		}

		public int cid;
		public int itemID;
		public int count;
	}

	// 购买物品请求
	public static class auction_buyitems_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_buyitems_req() { }

		public auction_buyitems_req(int cid, int sellerID, DBConsignItems items)
		{
			this.cid = cid;
			this.sellerID = sellerID;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cid = is.popInteger();
			sellerID = is.popInteger();
			if( items == null )
				items = new DBConsignItems();
			is.pop(items);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cid);
			os.pushInteger(sellerID);
			os.push(items);
		}

		@Override
		public String getPacketName()
		{
			return "auction_buyitems_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cid = is.popInteger();
			sellerID = is.popInteger();
			items = is.pop(DBConsignItems.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cid);
			os.pushInteger(sellerID);
			os.push(items);
		}

		public int cid;
		public int sellerID;
		public DBConsignItems items;
	}

	// 拍卖行摊位扩展
	public static class auction_expand_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_expand_req() { }

		public auction_expand_req(int times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "auction_expand_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
		}

		public int times;
	}

	// 交易记录
	public static class auction_tradelog_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "auction_tradelog_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 获取道具价格列表
	public static class auction_itemprices_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public auction_itemprices_req() { }

		public auction_itemprices_req(int itemID)
		{
			this.itemID = itemID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemID);
		}

		@Override
		public String getPacketName()
		{
			return "auction_itemprices_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemID);
		}

		public int itemID;
	}

	// 同步江湖客栈信息
	public static class treasure_syncnpcs_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "treasure_syncnpcs_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 刷新某一个NPC信息
	public static class treasure_refreshnpc_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_refreshnpc_req() { }

		public treasure_refreshnpc_req(int npcID, int times)
		{
			this.npcID = npcID;
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcID = is.popInteger();
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(npcID);
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_refreshnpc_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcID = is.popInteger();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(npcID);
			os.pushInteger(times);
		}

		public int npcID;
		public int times;
	}

	// 购买藏宝图碎片
	public static class treasure_buypieces_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_buypieces_req() { }

		public treasure_buypieces_req(int npcID, int pieceID)
		{
			this.npcID = npcID;
			this.pieceID = pieceID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcID = is.popInteger();
			pieceID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(npcID);
			os.pushInteger(pieceID);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_buypieces_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcID = is.popInteger();
			pieceID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(npcID);
			os.pushInteger(pieceID);
		}

		public int npcID;
		public int pieceID;
	}

	// 领取NPC礼包
	public static class treasure_npcreward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_npcreward_req() { }

		public treasure_npcreward_req(int npcID)
		{
			this.npcID = npcID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(npcID);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_npcreward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(npcID);
		}

		public int npcID;
	}

	// 同步藏宝图信息
	public static class treasure_syncmap_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "treasure_syncmap_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 总体探索
	public static class treasure_totalsearch_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "treasure_totalsearch_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 探索情报点
	public static class treasure_search_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_search_req() { }

		public treasure_search_req(int pointIndex)
		{
			this.pointIndex = pointIndex;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pointIndex = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pointIndex);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_search_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pointIndex = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pointIndex);
		}

		public int pointIndex;
	}

	// 合成地图
	public static class treasure_makemap_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_makemap_req() { }

		public treasure_makemap_req(int pieceID)
		{
			this.pieceID = pieceID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pieceID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pieceID);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_makemap_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pieceID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pieceID);
		}

		public int pieceID;
	}

	// 领取藏宝图奖励
	public static class treasure_mapreward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "treasure_mapreward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 放弃藏宝图
	public static class treasure_quitmap_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "treasure_quitmap_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 藏品装裱
	public static class treasure_medalgrow_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public treasure_medalgrow_req() { }

		public treasure_medalgrow_req(int medalID, int type)
		{
			this.medalID = medalID;
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			medalID = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(medalID);
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "treasure_medalgrow_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			medalID = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(medalID);
			os.pushInteger(type);
		}

		public int medalID;
		public int type;
	}

	// 驯服坐骑
	public static class horse_tame_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_tame_req() { }

		public horse_tame_req(int hid)
		{
			this.hid = hid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hid);
		}

		@Override
		public String getPacketName()
		{
			return "horse_tame_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(hid);
		}

		public int hid;
	}

	// 坐骑出征
	public static class horse_use_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_use_req() { }

		public horse_use_req(int hid)
		{
			this.hid = hid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hid);
		}

		@Override
		public String getPacketName()
		{
			return "horse_use_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(hid);
		}

		public int hid;
	}

	// 坐骑升星
	public static class horse_upstar_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_upstar_req() { }

		public horse_upstar_req(int hid, int star)
		{
			this.hid = hid;
			this.star = star;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hid = is.popInteger();
			star = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hid);
			os.pushInteger(star);
		}

		@Override
		public String getPacketName()
		{
			return "horse_upstar_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hid = is.popInteger();
			star = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(hid);
			os.pushInteger(star);
		}

		public int hid;
		public int star;
	}

	// 坐骑洗练
	public static class horse_enhance_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_enhance_req() { }

		public horse_enhance_req(int hid, Set<Integer> locks, int isReplace)
		{
			this.hid = hid;
			this.locks = locks;
			this.isReplace = isReplace;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hid = is.popInteger();
			locks = is.popIntegerTreeSet();
			isReplace = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hid);
			os.pushIntegerSet(locks);
			os.pushInteger(isReplace);
		}

		@Override
		public String getPacketName()
		{
			return "horse_enhance_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hid = is.popInteger();
			locks = is.popIntegerTreeSet();
			isReplace = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(hid);
			os.pushIntegerSet(locks);
			os.pushInteger(isReplace);
		}

		public int hid;
		public Set<Integer> locks;
		public int isReplace;
	}

	// 坐骑洗练替换属性
	public static class horse_enhancesave_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "horse_enhancesave_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 更换幻化外形
	public static class horse_changeshow_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_changeshow_req() { }

		public horse_changeshow_req(int hid, int showID)
		{
			this.hid = hid;
			this.showID = showID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hid = is.popInteger();
			showID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hid);
			os.pushInteger(showID);
		}

		@Override
		public String getPacketName()
		{
			return "horse_changeshow_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hid = is.popInteger();
			showID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(hid);
			os.pushInteger(showID);
		}

		public int hid;
		public int showID;
	}

	// 激活幻化外形
	public static class horse_activateshow_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_activateshow_req() { }

		public horse_activateshow_req(int hid)
		{
			this.hid = hid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hid);
		}

		@Override
		public String getPacketName()
		{
			return "horse_activateshow_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(hid);
		}

		public int hid;
	}

	// 激活骑术
	public static class horse_learnskill_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_learnskill_req() { }

		public horse_learnskill_req(int skillID)
		{
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "horse_learnskill_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
		}

		public int skillID;
	}

	// 同步骑术等级
	public static class sync_horse_skillLevel_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_horse_skillLevel_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 升级骑术等级
	public static class horse_skill_up_level_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_skill_up_level_req() { }

		public horse_skill_up_level_req(int skillID)
		{
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "horse_skill_up_level_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
		}

		public int skillID;
	}

	// 设置骑术
	public static class horse_setskill_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_setskill_req() { }

		public horse_setskill_req(int hid, int position, int skillID)
		{
			this.hid = hid;
			this.position = position;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hid = is.popInteger();
			position = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hid);
			os.pushInteger(position);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "horse_setskill_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hid = is.popInteger();
			position = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(hid);
			os.pushInteger(position);
			os.pushInteger(skillID);
		}

		public int hid;
		public int position;
		public int skillID;
	}

	// 穿戴时装
	public static class fashion_upwear_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public fashion_upwear_req() { }

		public fashion_upwear_req(int fashionID)
		{
			this.fashionID = fashionID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			fashionID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(fashionID);
		}

		@Override
		public String getPacketName()
		{
			return "fashion_upwear_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			fashionID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(fashionID);
		}

		public int fashionID;
	}

	// 显示/隐藏
	public static class fashion_setshow_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public fashion_setshow_req() { }

		public fashion_setshow_req(int type, int isShow)
		{
			this.type = type;
			this.isShow = isShow;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			isShow = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(isShow);
		}

		@Override
		public String getPacketName()
		{
			return "fashion_setshow_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			isShow = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(isShow);
		}

		public int type;
		public int isShow;
	}

	// 龙印合成
	public static class seal_make_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public seal_make_req() { }

		public seal_make_req(int makeType)
		{
			this.makeType = makeType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			makeType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(makeType);
		}

		@Override
		public String getPacketName()
		{
			return "seal_make_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			makeType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(makeType);
		}

		public int makeType;
	}

	// 龙印升阶
	public static class seal_upgrade_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "seal_upgrade_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 龙印洗练
	public static class seal_enhance_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "seal_enhance_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 龙印储存
	public static class seal_save_enhance_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public seal_save_enhance_req() { }

		public seal_save_enhance_req(int isSave)
		{
			this.isSave = isSave;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			isSave = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(isSave);
		}

		@Override
		public String getPacketName()
		{
			return "seal_save_enhance_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			isSave = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(isSave);
		}

		public int isSave;
	}

	// 同步历练页签信息
	public static class expcoin_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "expcoin_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 提取历练
	public static class expcoin_extract_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "expcoin_extract_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步藏书页签信息
	public static class rarebook_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "rarebook_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 藏书存入
	public static class rarebook_push_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public rarebook_push_req() { }

		public rarebook_push_req(Map<Integer, Integer> items)
		{
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(items);
		}

		@Override
		public String getPacketName()
		{
			return "rarebook_push_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(items);
		}

		public Map<Integer, Integer> items;
	}

	// 藏书取出
	public static class rarebook_pop_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public rarebook_pop_req() { }

		public rarebook_pop_req(Map<Integer, Integer> books)
		{
			this.books = books;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			books = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(books);
		}

		@Override
		public String getPacketName()
		{
			return "rarebook_pop_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			books = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(books);
		}

		public Map<Integer, Integer> books;
	}

	// 藏书解锁
	public static class rarebook_unlock_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public rarebook_unlock_req() { }

		public rarebook_unlock_req(int bookID)
		{
			this.bookID = bookID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bookID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bookID);
		}

		@Override
		public String getPacketName()
		{
			return "rarebook_unlock_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bookID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bookID);
		}

		public int bookID;
	}

	// 藏书升级
	public static class rarebook_lvlup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public rarebook_lvlup_req() { }

		public rarebook_lvlup_req(int bookID)
		{
			this.bookID = bookID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			bookID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(bookID);
		}

		@Override
		public String getPacketName()
		{
			return "rarebook_lvlup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			bookID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(bookID);
		}

		public int bookID;
	}

	// 同步参悟页签信息
	public static class grasp_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "grasp_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 参悟
	public static class grasp_impl_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public grasp_impl_req() { }

		public grasp_impl_req(int graspID, int rid)
		{
			this.graspID = graspID;
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			graspID = is.popInteger();
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(graspID);
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "grasp_impl_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			graspID = is.popInteger();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(graspID);
			os.pushInteger(rid);
		}

		public int graspID;
		public int rid;
	}

	// 参悟CD时间重置
	public static class grasp_reset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "grasp_reset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 购买乾坤点
	public static class dmgtransfer_buypoint_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public dmgtransfer_buypoint_req() { }

		public dmgtransfer_buypoint_req(byte discount)
		{
			this.discount = discount;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			discount = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushByte(discount);
		}

		@Override
		public String getPacketName()
		{
			return "dmgtransfer_buypoint_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			discount = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushByte(discount);
		}

		public byte discount;
	}

	// 投入乾坤点
	public static class dmgtransfer_putpoint_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public dmgtransfer_putpoint_req() { }

		public dmgtransfer_putpoint_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "dmgtransfer_putpoint_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 乾坤升级
	public static class dmgtransfer_lvlup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public dmgtransfer_lvlup_req() { }

		public dmgtransfer_lvlup_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "dmgtransfer_lvlup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 重置
	public static class dmgtransfer_reset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "dmgtransfer_reset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 指引
	public static class lead_info_set implements Stream.IStreamable, SStream.IStrPacket
	{

		public lead_info_set() { }

		public lead_info_set(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "lead_info_set";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 强制剧情
	public static class lead_plot_set implements Stream.IStreamable, SStream.IStrPacket
	{

		public lead_plot_set() { }

		public lead_plot_set(int id, int count)
		{
			this.id = id;
			this.count = count;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(count);
		}

		@Override
		public String getPacketName()
		{
			return "lead_plot_set";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			count = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(count);
		}

		public int id;
		public int count;
	}

	// 同步用户调研信息
	public static class usersurvey_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "usersurvey_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 用户调研提交答案
	public static class usersurvey_submit_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public usersurvey_submit_req() { }

		public usersurvey_submit_req(int seq, Set<Integer> answer)
		{
			this.seq = seq;
			this.answer = answer;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
			answer = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
			os.pushIntegerSet(answer);
		}

		@Override
		public String getPacketName()
		{
			return "usersurvey_submit_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
			answer = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
			os.pushIntegerSet(answer);
		}

		public int seq;
		public Set<Integer> answer;
	}

	// 用户调研结束领取奖励
	public static class usersurvey_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "usersurvey_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步登陆有礼信息
	public static class cblogingift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "cblogingift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 登陆有礼领奖
	public static class cblogingift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public cblogingift_take_req() { }

		public cblogingift_take_req(int dayNum)
		{
			this.dayNum = dayNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayNum);
		}

		@Override
		public String getPacketName()
		{
			return "cblogingift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			dayNum = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(dayNum);
		}

		public int dayNum;
	}

	// 升级送VIP、钻石
	public static class cblvlupgift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "cblvlupgift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 升级送VIP、钻石(领奖)
	public static class cblvlupgift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public cblvlupgift_take_req() { }

		public cblvlupgift_take_req(int seq)
		{
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "cblvlupgift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
		}

		public int seq;
	}

	// 同步完善资料拿大奖信息
	public static class userdata_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "userdata_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 资料修改
	public static class userdata_modify_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public userdata_modify_req() { }

		public userdata_modify_req(String qq, String cellphone, byte isOldUser)
		{
			this.qq = qq;
			this.cellphone = cellphone;
			this.isOldUser = isOldUser;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			qq = is.popString();
			cellphone = is.popString();
			isOldUser = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(qq);
			os.pushString(cellphone);
			os.pushByte(isOldUser);
		}

		@Override
		public String getPacketName()
		{
			return "userdata_modify_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			qq = is.popString();
			cellphone = is.popString();
			isOldUser = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(qq);
			os.pushString(cellphone);
			os.pushByte(isOldUser);
		}

		public String qq;
		public String cellphone;
		public byte isOldUser;
	}

	// 完善资料领奖
	public static class userdata_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "userdata_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步封测倒计时信息
	public static class cbcountdowngift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "cbcountdowngift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 封测倒计时领奖
	public static class cbcountdowngift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public cbcountdowngift_take_req() { }

		public cbcountdowngift_take_req(int seq)
		{
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "cbcountdowngift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
		}

		public int seq;
	}

	// 同步限时领奖信息
	public static class ontimegift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "ontimegift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 限时领奖领取奖励
	public static class ontimegift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public ontimegift_take_req() { }

		public ontimegift_take_req(int dayNum)
		{
			this.dayNum = dayNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			dayNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(dayNum);
		}

		@Override
		public String getPacketName()
		{
			return "ontimegift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			dayNum = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(dayNum);
		}

		public int dayNum;
	}

	// 同步强化比拼信息
	public static class strengthengift_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "strengthengift_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 限时强化比拼奖励
	public static class strengthengift_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public strengthengift_take_req() { }

		public strengthengift_take_req(int strengthenNum)
		{
			this.strengthenNum = strengthenNum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			strengthenNum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(strengthenNum);
		}

		@Override
		public String getPacketName()
		{
			return "strengthengift_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			strengthenNum = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(strengthenNum);
		}

		public int strengthenNum;
	}

	// 同步官网调研信息
	public static class official_research_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "official_research_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 限时官网调研奖励
	public static class official_research_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "official_research_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 设置当前的永久称号
	public static class permanenttitle_set_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public permanenttitle_set_req() { }

		public permanenttitle_set_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "permanenttitle_set_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 设置当前的时效称号
	public static class timedtitle_set_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public timedtitle_set_req() { }

		public timedtitle_set_req(int id, int state)
		{
			this.id = id;
			this.state = state;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(state);
		}

		@Override
		public String getPacketName()
		{
			return "timedtitle_set_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			state = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(state);
		}

		public int id;
		public int state;
	}

	// 解锁新的称号位
	public static class titleslot_unlock_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public titleslot_unlock_req() { }

		public titleslot_unlock_req(int slotnum)
		{
			this.slotnum = slotnum;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			slotnum = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(slotnum);
		}

		@Override
		public String getPacketName()
		{
			return "titleslot_unlock_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			slotnum = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(slotnum);
		}

		public int slotnum;
	}

	// 支线任务接取
	public static class branch_task_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public branch_task_take_req() { }

		public branch_task_take_req(int groupId)
		{
			this.groupId = groupId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
		}

		@Override
		public String getPacketName()
		{
			return "branch_task_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			groupId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(groupId);
		}

		public int groupId;
	}

	// 支线任务放弃
	public static class branch_task_quit_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public branch_task_quit_req() { }

		public branch_task_quit_req(int groupId)
		{
			this.groupId = groupId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
		}

		@Override
		public String getPacketName()
		{
			return "branch_task_quit_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			groupId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(groupId);
		}

		public int groupId;
	}

	// 支线任务交付
	public static class branch_task_finish_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public branch_task_finish_req() { }

		public branch_task_finish_req(int groupId)
		{
			this.groupId = groupId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
		}

		@Override
		public String getPacketName()
		{
			return "branch_task_finish_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			groupId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(groupId);
		}

		public int groupId;
	}

	// 同步爬塔数据
	public static class sync_tower_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_tower_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步战绩记录
	public static class tower_record_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "tower_record_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 设置爬塔系统出战随从
	public static class tower_setpets_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_setpets_req() { }

		public tower_setpets_req(Set<Integer> pets)
		{
			this.pets = pets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(pets);
		}

		@Override
		public String getPacketName()
		{
			return "tower_setpets_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pets = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(pets);
		}

		public Set<Integer> pets;
	}

	// 开始战斗
	public static class tower_startfight_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_startfight_req() { }

		public tower_startfight_req(int groupId, int floor)
		{
			this.groupId = groupId;
			this.floor = floor;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
			floor = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
			os.pushInteger(floor);
		}

		@Override
		public String getPacketName()
		{
			return "tower_startfight_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			groupId = is.popInteger();
			floor = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(groupId);
			os.pushInteger(floor);
		}

		public int groupId;
		public int floor;
	}

	// 购买挑战次数
	public static class tower_buytimes_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_buytimes_req() { }

		public tower_buytimes_req(int times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "tower_buytimes_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
		}

		public int times;
	}

	// 爬塔副本扫荡
	public static class tower_sweep_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_sweep_req() { }

		public tower_sweep_req(int groupId, int floor)
		{
			this.groupId = groupId;
			this.floor = floor;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			groupId = is.popInteger();
			floor = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(groupId);
			os.pushInteger(floor);
		}

		@Override
		public String getPacketName()
		{
			return "tower_sweep_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			groupId = is.popInteger();
			floor = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(groupId);
			os.pushInteger(floor);
		}

		public int groupId;
		public int floor;
	}

	// 同步声望数据
	public static class sync_towerfame_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_towerfame_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 爬塔声望捐赠物品
	public static class tower_donate_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public tower_donate_req() { }

		public tower_donate_req(int group, int itemId)
		{
			this.group = group;
			this.itemId = itemId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			group = is.popInteger();
			itemId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(group);
			os.pushInteger(itemId);
		}

		@Override
		public String getPacketName()
		{
			return "tower_donate_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			group = is.popInteger();
			itemId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(group);
			os.pushInteger(itemId);
		}

		public int group;
		public int itemId;
	}

	// 爬塔领取声望奖励
	public static class take_towerfame_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public take_towerfame_req() { }

		public take_towerfame_req(int group, int seq)
		{
			this.group = group;
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			group = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(group);
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "take_towerfame_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			group = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(group);
			os.pushInteger(seq);
		}

		public int group;
		public int seq;
	}

	// 进入秘境
	public static class enter_secretmap_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "enter_secretmap_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 领取秘境任务奖励
	public static class take_secretreward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public take_secretreward_req() { }

		public take_secretreward_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "take_secretreward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 帮派运镖同步
	public static class sect_deliver_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派运镖刷新
	public static class sect_deliver_refresh_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_refresh_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派运镖投保
	public static class sect_deliver_protect_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_protect_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派运镖开始运镖
	public static class sect_deliver_begin_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_begin_req() { }

		public sect_deliver_begin_req(int routeId, int vehicleId)
		{
			this.routeId = routeId;
			this.vehicleId = vehicleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			routeId = is.popInteger();
			vehicleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(routeId);
			os.pushInteger(vehicleId);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_begin_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			routeId = is.popInteger();
			vehicleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(routeId);
			os.pushInteger(vehicleId);
		}

		public int routeId;
		public int vehicleId;
	}

	// 帮派运镖求援
	public static class sect_deliver_search_help_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_search_help_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派运镖响应求援
	public static class sect_deliver_on_help_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_on_help_req() { }

		public sect_deliver_on_help_req(int roleId, MapLocation targetLocation, int line)
		{
			this.roleId = roleId;
			this.targetLocation = targetLocation;
			this.line = line;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
			if( targetLocation == null )
				targetLocation = new MapLocation();
			is.pop(targetLocation);
			line = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
			os.push(targetLocation);
			os.pushInteger(line);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_on_help_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
			targetLocation = is.pop(MapLocation.class);
			line = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
			os.push(targetLocation);
			os.pushInteger(line);
		}

		public int roleId;
		public MapLocation targetLocation;
		public int line;
	}

	// 帮派运镖取消运镖
	public static class sect_deliver_cancel_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_cancel_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派运镖完成
	public static class sect_deliver_finish_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_finish_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派祝福同步
	public static class sect_deliver_sync_wish_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_sync_wish_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派祝福祝福
	public static class sect_deliver_add_wish_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_add_wish_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派祝福保存
	public static class sect_deliver_save_wish_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_save_wish_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 劫镖任务接取
	public static class sect_rob_task_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_rob_task_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 劫镖任务放弃
	public static class sect_rob_task_cancel_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_rob_task_cancel_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派运镖商城同步协议
	public static class sect_deliver_shopsync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_shopsync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 帮派运镖商城刷新协议
	public static class sect_deliver_shoprefresh_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_shoprefresh_req() { }

		public sect_deliver_shoprefresh_req(int times, int isSecondType)
		{
			this.times = times;
			this.isSecondType = isSecondType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
			isSecondType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
			os.pushInteger(isSecondType);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_shoprefresh_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
			isSecondType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
			os.pushInteger(isSecondType);
		}

		public int times;
		public int isSecondType;
	}

	// 帮派运镖商城买商品协议
	public static class sect_deliver_shopbuy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_deliver_shopbuy_req() { }

		public sect_deliver_shopbuy_req(int seq)
		{
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "sect_deliver_shopbuy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
		}

		public int seq;
	}

	// 同步工坊
	public static class produce_workshopsync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "produce_workshopsync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 使用卷轴获得新配方请求
	public static class produce_createnewrecipe_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_createnewrecipe_req() { }

		public produce_createnewrecipe_req(int reelID)
		{
			this.reelID = reelID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			reelID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(reelID);
		}

		@Override
		public String getPacketName()
		{
			return "produce_createnewrecipe_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			reelID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(reelID);
		}

		public int reelID;
	}

	// 制造请求
	public static class produce_produce_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_produce_req() { }

		public produce_produce_req(int recipeID)
		{
			this.recipeID = recipeID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			recipeID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(recipeID);
		}

		@Override
		public String getPacketName()
		{
			return "produce_produce_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			recipeID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(recipeID);
		}

		public int recipeID;
	}

	// 分解装备请求
	public static class produce_split_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_split_req() { }

		public produce_split_req(int equipid, String equipGuid)
		{
			this.equipid = equipid;
			this.equipGuid = equipGuid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			equipid = is.popInteger();
			equipGuid = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(equipid);
			os.pushString(equipGuid);
		}

		@Override
		public String getPacketName()
		{
			return "produce_split_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			equipid = is.popInteger();
			equipGuid = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(equipid);
			os.pushString(equipGuid);
		}

		public int equipid;
		public String equipGuid;
	}

	// 炼化请求
	public static class produce_fusion_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_fusion_req() { }

		public produce_fusion_req(List<DummyGoods> consumeItems)
		{
			this.consumeItems = consumeItems;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			consumeItems = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(consumeItems);
		}

		@Override
		public String getPacketName()
		{
			return "produce_fusion_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			consumeItems = is.popList(DummyGoods.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(consumeItems);
		}

		public List<DummyGoods> consumeItems;
	}

	// 分解能量购买请求
	public static class produce_splitspbuy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public produce_splitspbuy_req() { }

		public produce_splitspbuy_req(int times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "produce_splitspbuy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
		}

		public int times;
	}

	// 背包道具合并
	public static class bag_merge_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public bag_merge_req() { }

		public bag_merge_req(int itemId)
		{
			this.itemId = itemId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
		}

		@Override
		public String getPacketName()
		{
			return "bag_merge_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
		}

		public int itemId;
	}

	// 七日留存活动领取奖励
	public static class rmactivity_takereward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public rmactivity_takereward_req() { }

		public rmactivity_takereward_req(int id)
		{
			this.id = id;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
		}

		@Override
		public String getPacketName()
		{
			return "rmactivity_takereward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
		}

		public int id;
	}

	// 玩家改名(type 1:消耗非绑元宝 2：使用道具)
	public static class role_rename_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_rename_req() { }

		public role_rename_req(String newName, int type)
		{
			this.newName = newName;
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			newName = is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(newName);
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "role_rename_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			newName = is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(newName);
			os.pushInteger(type);
		}

		public String newName;
		public int type;
	}

	// 上马请求
	public static class horse_ride_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "horse_ride_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 下马请求
	public static class horse_unride_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "horse_unride_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 邀请骑乘协议
	public static class mulhorse_invite_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_invite_req() { }

		public mulhorse_invite_req(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_invite_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 接收到骑乘邀请后选择是否同意操作：(-10:离得太远， -11:战斗状态，-20:指引状态，-21:忙，0:拒绝， 1:同意)
	public static class mulhorse_invitehandle_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_invitehandle_req() { }

		public mulhorse_invitehandle_req(int inviter, int accept)
		{
			this.inviter = inviter;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			inviter = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(inviter);
			os.pushInteger(accept);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_invitehandle_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			inviter = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(inviter);
			os.pushInteger(accept);
		}

		public int inviter;
		public int accept;
	}

	// 申请多人骑乘
	public static class mulhorse_apply_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_apply_req() { }

		public mulhorse_apply_req(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_apply_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 接收到其他玩家骑乘申请后是否同意操作(-10:离得太远， -11:战斗状态，-20:指引状态，-21:忙，0:拒绝， 1:同意)
	public static class mulhorse_applyhandle_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_applyhandle_req() { }

		public mulhorse_applyhandle_req(int roleID, int accept)
		{
			this.roleID = roleID;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
			os.pushInteger(accept);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_applyhandle_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
			os.pushInteger(accept);
		}

		public int roleID;
		public int accept;
	}

	// 离开多人骑乘请求协议
	public static class mulhorse_leave_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_leave_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 剔除骑乘成员
	public static class mulhorse_kick_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mulhorse_kick_req() { }

		public mulhorse_kick_req(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "mulhorse_kick_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 相依相偎邀请
	public static class staywith_invite_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public staywith_invite_req() { }

		public staywith_invite_req(int roleID)
		{
			this.roleID = roleID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleID);
		}

		@Override
		public String getPacketName()
		{
			return "staywith_invite_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleID);
		}

		public int roleID;
	}

	// 接收到相依相偎邀请后选择是否同意操作：(-20:离得太远， -21:战斗状态，-30:指引状态，-31:忙，0:拒绝， 1:同意)
	public static class staywith_invitehandle_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public staywith_invitehandle_req() { }

		public staywith_invitehandle_req(int inviter, int accept)
		{
			this.inviter = inviter;
			this.accept = accept;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			inviter = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(inviter);
			os.pushInteger(accept);
		}

		@Override
		public String getPacketName()
		{
			return "staywith_invitehandle_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			inviter = is.popInteger();
			accept = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(inviter);
			os.pushInteger(accept);
		}

		public int inviter;
		public int accept;
	}

	// 取消相依相偎请求
	public static class staywith_leave_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "staywith_leave_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步留言板请求
	public static class sync_message_board_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_message_board_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 添加留言请求
	public static class add_message_board_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public add_message_board_req() { }

		public add_message_board_req(int side, int msgId, String content, int time, 
		                             byte anonymous, int isrewrite)
		{
			this.side = side;
			this.msgId = msgId;
			this.content = content;
			this.time = time;
			this.anonymous = anonymous;
			this.isrewrite = isrewrite;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			side = is.popInteger();
			msgId = is.popInteger();
			content = is.popString();
			time = is.popInteger();
			anonymous = is.popByte();
			isrewrite = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(side);
			os.pushInteger(msgId);
			os.pushString(content);
			os.pushInteger(time);
			os.pushByte(anonymous);
			os.pushInteger(isrewrite);
		}

		@Override
		public String getPacketName()
		{
			return "add_message_board_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			side = is.popInteger();
			msgId = is.popInteger();
			content = is.popString();
			time = is.popInteger();
			anonymous = is.popByte();
			isrewrite = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(side);
			os.pushInteger(msgId);
			os.pushString(content);
			os.pushInteger(time);
			os.pushByte(anonymous);
			os.pushInteger(isrewrite);
		}

		public int side;
		public int msgId;
		public String content;
		public int time;
		public byte anonymous;
		public int isrewrite;
	}

	// 评论留言请求
	public static class comment_message_board_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public comment_message_board_req() { }

		public comment_message_board_req(int side, int msgId, int comment, int sendtime)
		{
			this.side = side;
			this.msgId = msgId;
			this.comment = comment;
			this.sendtime = sendtime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			side = is.popInteger();
			msgId = is.popInteger();
			comment = is.popInteger();
			sendtime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(side);
			os.pushInteger(msgId);
			os.pushInteger(comment);
			os.pushInteger(sendtime);
		}

		@Override
		public String getPacketName()
		{
			return "comment_message_board_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			side = is.popInteger();
			msgId = is.popInteger();
			comment = is.popInteger();
			sendtime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(side);
			os.pushInteger(msgId);
			os.pushInteger(comment);
			os.pushInteger(sendtime);
		}

		public int side;
		public int msgId;
		public int comment;
		public int sendtime;
	}

	// 修改文本请求
	public static class change_message_board_content_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public change_message_board_content_req() { }

		public change_message_board_content_req(int side, int msgId, String content, int sendtime)
		{
			this.side = side;
			this.msgId = msgId;
			this.content = content;
			this.sendtime = sendtime;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			side = is.popInteger();
			msgId = is.popInteger();
			content = is.popString();
			sendtime = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(side);
			os.pushInteger(msgId);
			os.pushString(content);
			os.pushInteger(sendtime);
		}

		@Override
		public String getPacketName()
		{
			return "change_message_board_content_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			side = is.popInteger();
			msgId = is.popInteger();
			content = is.popString();
			sendtime = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(side);
			os.pushInteger(msgId);
			os.pushString(content);
			os.pushInteger(sendtime);
		}

		public int side;
		public int msgId;
		public String content;
		public int sendtime;
	}

	// 同步日程表请求
	public static class schedule_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "schedule_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 日程表奖励请求
	public static class schedule_mapreward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public schedule_mapreward_req() { }

		public schedule_mapreward_req(int sid)
		{
			this.sid = sid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			sid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(sid);
		}

		@Override
		public String getPacketName()
		{
			return "schedule_mapreward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			sid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(sid);
		}

		public int sid;
	}

	// 保存引导关进度请求
	public static class save_guide_mapcopy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public save_guide_mapcopy_req() { }

		public save_guide_mapcopy_req(int step)
		{
			this.step = step;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			step = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(step);
		}

		@Override
		public String getPacketName()
		{
			return "save_guide_mapcopy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			step = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(step);
		}

		public int step;
	}

	// 帮派邀请请求
	public static class sect_invite_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_invite_req() { }

		public sect_invite_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "sect_invite_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 帮派邀请响应请求
	public static class sect_invite_response_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_invite_response_req() { }

		public sect_invite_response_req(int inviteId, byte response)
		{
			this.inviteId = inviteId;
			this.response = response;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			inviteId = is.popInteger();
			response = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(inviteId);
			os.pushByte(response);
		}

		@Override
		public String getPacketName()
		{
			return "sect_invite_response_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			inviteId = is.popInteger();
			response = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(inviteId);
			os.pushByte(response);
		}

		public int inviteId;
		public byte response;
	}

	// 解锁内甲请求
	public static class unlock_armor_type_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public unlock_armor_type_req() { }

		public unlock_armor_type_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "unlock_armor_type_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 内甲升阶请求
	public static class armor_uprank_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public armor_uprank_req() { }

		public armor_uprank_req(int type, int nextRank)
		{
			this.type = type;
			this.nextRank = nextRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			nextRank = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(nextRank);
		}

		@Override
		public String getPacketName()
		{
			return "armor_uprank_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			nextRank = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(nextRank);
		}

		public int type;
		public int nextRank;
	}

	// 内甲升级天赋请求
	public static class armor_add_talent_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public armor_add_talent_req() { }

		public armor_add_talent_req(int type, int talentId)
		{
			this.type = type;
			this.talentId = talentId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			talentId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(talentId);
		}

		@Override
		public String getPacketName()
		{
			return "armor_add_talent_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			talentId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(talentId);
		}

		public int type;
		public int talentId;
	}

	// 内甲选择请求
	public static class armor_change_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public armor_change_req() { }

		public armor_change_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "armor_change_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 内甲升级请求
	public static class armor_up_level_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public armor_up_level_req() { }

		public armor_up_level_req(int type, Map<Integer, Integer> items)
		{
			this.type = type;
			this.items = items;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushIntegerIntegerMap(items);
		}

		@Override
		public String getPacketName()
		{
			return "armor_up_level_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			items = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushIntegerIntegerMap(items);
		}

		public int type;
		public Map<Integer, Integer> items;
	}

	// 符文存入请求
	public static class rune_push_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public rune_push_req() { }

		public rune_push_req(Map<Integer, Integer> runes)
		{
			this.runes = runes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			runes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(runes);
		}

		@Override
		public String getPacketName()
		{
			return "rune_push_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			runes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(runes);
		}

		public Map<Integer, Integer> runes;
	}

	// 符文提取请求
	public static class rune_pop_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public rune_pop_req() { }

		public rune_pop_req(Map<Integer, Integer> runes)
		{
			this.runes = runes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			runes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(runes);
		}

		@Override
		public String getPacketName()
		{
			return "rune_pop_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			runes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(runes);
		}

		public Map<Integer, Integer> runes;
	}

	// 重置天赋点请求
	public static class reset_talent_point_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public reset_talent_point_req() { }

		public reset_talent_point_req(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "reset_talent_point_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 重置天赋点请求
	public static class solt_group_unlock_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public solt_group_unlock_req() { }

		public solt_group_unlock_req(int type, int soltGroupIndex)
		{
			this.type = type;
			this.soltGroupIndex = soltGroupIndex;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			soltGroupIndex = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(soltGroupIndex);
		}

		@Override
		public String getPacketName()
		{
			return "solt_group_unlock_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			soltGroupIndex = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(soltGroupIndex);
		}

		public int type;
		public int soltGroupIndex;
	}

	// 符文镶嵌请求
	public static class solt_push_rune_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public solt_push_rune_req() { }

		public solt_push_rune_req(int type, int soltGroupIndex, int soltIndex, int runeId)
		{
			this.type = type;
			this.soltGroupIndex = soltGroupIndex;
			this.soltIndex = soltIndex;
			this.runeId = runeId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			soltGroupIndex = is.popInteger();
			soltIndex = is.popInteger();
			runeId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(soltGroupIndex);
			os.pushInteger(soltIndex);
			os.pushInteger(runeId);
		}

		@Override
		public String getPacketName()
		{
			return "solt_push_rune_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			soltGroupIndex = is.popInteger();
			soltIndex = is.popInteger();
			runeId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(soltGroupIndex);
			os.pushInteger(soltIndex);
			os.pushInteger(runeId);
		}

		public int type;
		public int soltGroupIndex;
		public int soltIndex;
		public int runeId;
	}

	// 符文之语镶嵌请求
	public static class lang_push_rune_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public lang_push_rune_req() { }

		public lang_push_rune_req(int type, int soltGroupIndex, int langId)
		{
			this.type = type;
			this.soltGroupIndex = soltGroupIndex;
			this.langId = langId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			soltGroupIndex = is.popInteger();
			langId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(soltGroupIndex);
			os.pushInteger(langId);
		}

		@Override
		public String getPacketName()
		{
			return "lang_push_rune_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			soltGroupIndex = is.popInteger();
			langId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(soltGroupIndex);
			os.pushInteger(langId);
		}

		public int type;
		public int soltGroupIndex;
		public int langId;
	}

	// 符文许愿请求
	public static class rune_wish_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public rune_wish_req() { }

		public rune_wish_req(Map<Integer, Integer> runes)
		{
			this.runes = runes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			runes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerIntegerMap(runes);
		}

		@Override
		public String getPacketName()
		{
			return "rune_wish_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			runes = is.popIntegerIntegerTreeMap();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerIntegerMap(runes);
		}

		public Map<Integer, Integer> runes;
	}

	// 存入仓库请求
	public static class put_in_warehouse_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public put_in_warehouse_req() { }

		public put_in_warehouse_req(int itemId, int itemCount, int warehouseType, String guid)
		{
			this.itemId = itemId;
			this.itemCount = itemCount;
			this.warehouseType = warehouseType;
			this.guid = guid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
			itemCount = is.popInteger();
			warehouseType = is.popInteger();
			guid = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
			os.pushInteger(itemCount);
			os.pushInteger(warehouseType);
			os.pushString(guid);
		}

		@Override
		public String getPacketName()
		{
			return "put_in_warehouse_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
			itemCount = is.popInteger();
			warehouseType = is.popInteger();
			guid = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
			os.pushInteger(itemCount);
			os.pushInteger(warehouseType);
			os.pushString(guid);
		}

		public int itemId;
		public int itemCount;
		public int warehouseType;
		public String guid;
	}

	// 取出物品请求
	public static class take_out_warehouse_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public take_out_warehouse_req() { }

		public take_out_warehouse_req(int itemId, int itemCount, int warehouseType, String guid)
		{
			this.itemId = itemId;
			this.itemCount = itemCount;
			this.warehouseType = warehouseType;
			this.guid = guid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
			itemCount = is.popInteger();
			warehouseType = is.popInteger();
			guid = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
			os.pushInteger(itemCount);
			os.pushInteger(warehouseType);
			os.pushString(guid);
		}

		@Override
		public String getPacketName()
		{
			return "take_out_warehouse_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
			itemCount = is.popInteger();
			warehouseType = is.popInteger();
			guid = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
			os.pushInteger(itemCount);
			os.pushInteger(warehouseType);
			os.pushString(guid);
		}

		public int itemId;
		public int itemCount;
		public int warehouseType;
		public String guid;
	}

	// 扩展仓库请求
	public static class expand_warehouse_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public expand_warehouse_req() { }

		public expand_warehouse_req(int times, int warehouseType)
		{
			this.times = times;
			this.warehouseType = warehouseType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
			warehouseType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
			os.pushInteger(warehouseType);
		}

		@Override
		public String getPacketName()
		{
			return "expand_warehouse_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
			warehouseType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
			os.pushInteger(warehouseType);
		}

		public int times;
		public int warehouseType;
	}

	// 同步角色私人仓库信息
	public static class sync_private_warehouse_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_private_warehouse_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步角色公共仓库信息
	public static class sync_public_warehouse_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_public_warehouse_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 求婚请求
	public static class propose_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public propose_req() { }

		public propose_req(int grade)
		{
			this.grade = grade;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			grade = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(grade);
		}

		@Override
		public String getPacketName()
		{
			return "propose_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			grade = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(grade);
		}

		public int grade;
	}

	// 求婚响应请求
	public static class propose_response_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public propose_response_req() { }

		public propose_response_req(int grade, byte response)
		{
			this.grade = grade;
			this.response = response;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			grade = is.popInteger();
			response = is.popByte();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(grade);
			os.pushByte(response);
		}

		@Override
		public String getPacketName()
		{
			return "propose_response_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			grade = is.popInteger();
			response = is.popByte();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(grade);
			os.pushByte(response);
		}

		public int grade;
		public byte response;
	}

	// 同步婚姻信息
	public static class marriage_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "marriage_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 离婚请求
	public static class divorce_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "divorce_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 姻缘技能升级
	public static class marriage_skill_levelup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public marriage_skill_levelup_req() { }

		public marriage_skill_levelup_req(int skillId, int levelupTimes)
		{
			this.skillId = skillId;
			this.levelupTimes = levelupTimes;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillId = is.popInteger();
			levelupTimes = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillId);
			os.pushInteger(levelupTimes);
		}

		@Override
		public String getPacketName()
		{
			return "marriage_skill_levelup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillId = is.popInteger();
			levelupTimes = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillId);
			os.pushInteger(levelupTimes);
		}

		public int skillId;
		public int levelupTimes;
	}

	// 传送至配偶请求
	public static class transform_to_partner_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "transform_to_partner_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 开始游街请求
	public static class marriage_start_parade_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "marriage_start_parade_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 开始宴席请求
	public static class marriage_start_banquet_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "marriage_start_banquet_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 物品交换请求
	public static class exchange_item_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public exchange_item_req() { }

		public exchange_item_req(int npcId, int exchangeId)
		{
			this.npcId = npcId;
			this.exchangeId = exchangeId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			npcId = is.popInteger();
			exchangeId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(npcId);
			os.pushInteger(exchangeId);
		}

		@Override
		public String getPacketName()
		{
			return "exchange_item_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			npcId = is.popInteger();
			exchangeId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(npcId);
			os.pushInteger(exchangeId);
		}

		public int npcId;
		public int exchangeId;
	}

	// 姻缘系列任务开启
	public static class mrgseriestask_open_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mrgseriestask_open_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 姻缘系列任务接取
	public static class mrgseriestask_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mrgseriestask_take_req() { }

		public mrgseriestask_take_req(int taskID)
		{
			this.taskID = taskID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskID);
		}

		@Override
		public String getPacketName()
		{
			return "mrgseriestask_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskID);
		}

		public int taskID;
	}

	// 姻缘系列任务领奖
	public static class mrgseriestask_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mrgseriestask_reward_req() { }

		public mrgseriestask_reward_req(int taskID)
		{
			this.taskID = taskID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskID);
		}

		@Override
		public String getPacketName()
		{
			return "mrgseriestask_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskID);
		}

		public int taskID;
	}

	// 姻缘环任务开启
	public static class mrglooptask_open_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mrglooptask_open_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 姻缘环任务接取
	public static class mrglooptask_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mrglooptask_take_req() { }

		public mrglooptask_take_req(int taskID)
		{
			this.taskID = taskID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskID);
		}

		@Override
		public String getPacketName()
		{
			return "mrglooptask_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskID);
		}

		public int taskID;
	}

	// 姻缘环任务领奖
	public static class mrglooptask_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public mrglooptask_reward_req() { }

		public mrglooptask_reward_req(int taskID)
		{
			this.taskID = taskID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			taskID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(taskID);
		}

		@Override
		public String getPacketName()
		{
			return "mrglooptask_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			taskID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(taskID);
		}

		public int taskID;
	}

	// 保存技能预设请求
	public static class save_skill_preset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public save_skill_preset_req() { }

		public save_skill_preset_req(int index, String name, List<Integer> skills, int diyskill, 
		                             int uniqueSkill)
		{
			this.index = index;
			this.name = name;
			this.skills = skills;
			this.diyskill = diyskill;
			this.uniqueSkill = uniqueSkill;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
			name = is.popString();
			skills = is.popIntegerList();
			diyskill = is.popInteger();
			uniqueSkill = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
			os.pushString(name);
			os.pushIntegerList(skills);
			os.pushInteger(diyskill);
			os.pushInteger(uniqueSkill);
		}

		@Override
		public String getPacketName()
		{
			return "save_skill_preset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			index = is.popInteger();
			name = is.popString();
			skills = is.popIntegerList();
			diyskill = is.popInteger();
			uniqueSkill = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(index);
			os.pushString(name);
			os.pushIntegerList(skills);
			os.pushInteger(diyskill);
			os.pushInteger(uniqueSkill);
		}

		public int index;
		public String name;
		public List<Integer> skills;
		public int diyskill;
		public int uniqueSkill;
	}

	// 保存技能预设请求
	public static class save_all_skill_preset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public save_all_skill_preset_req() { }

		public save_all_skill_preset_req(List<DBSkillPreset> skills)
		{
			this.skills = skills;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skills = is.popList(DBSkillPreset.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(skills);
		}

		@Override
		public String getPacketName()
		{
			return "save_all_skill_preset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skills = is.popList(DBSkillPreset.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(skills);
		}

		public List<DBSkillPreset> skills;
	}

	// 保存气功预设请求
	public static class save_spirits_preset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public save_spirits_preset_req() { }

		public save_spirits_preset_req(int index, String name, List<Integer> spirits)
		{
			this.index = index;
			this.name = name;
			this.spirits = spirits;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
			name = is.popString();
			spirits = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
			os.pushString(name);
			os.pushIntegerList(spirits);
		}

		@Override
		public String getPacketName()
		{
			return "save_spirits_preset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			index = is.popInteger();
			name = is.popString();
			spirits = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(index);
			os.pushString(name);
			os.pushIntegerList(spirits);
		}

		public int index;
		public String name;
		public List<Integer> spirits;
	}

	// 删除气功预设请求
	public static class delete_skill_preset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public delete_skill_preset_req() { }

		public delete_skill_preset_req(int index)
		{
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "delete_skill_preset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(index);
		}

		public int index;
	}

	// 删除气功预设请求
	public static class delete_spirits_preset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public delete_spirits_preset_req() { }

		public delete_spirits_preset_req(int index)
		{
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "delete_spirits_preset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(index);
		}

		public int index;
	}

	// 使用技能预设请求
	public static class change_skill_preset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public change_skill_preset_req() { }

		public change_skill_preset_req(int index)
		{
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "change_skill_preset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(index);
		}

		public int index;
	}

	// 使用气功预设请求
	public static class change_spirits_preset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public change_spirits_preset_req() { }

		public change_spirits_preset_req(int index)
		{
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "change_spirits_preset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(index);
		}

		public int index;
	}

	// 帮派团队本开启请求
	public static class sect_group_map_open_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_group_map_open_req() { }

		public sect_group_map_open_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "sect_group_map_open_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 帮派团队本进入请求
	public static class sect_group_map_enter_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sect_group_map_enter_req() { }

		public sect_group_map_enter_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "sect_group_map_enter_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 帮派团队本信息同步请求
	public static class sect_group_map_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sect_group_map_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 神兵技能升级请求
	public static class weapon_skill_level_up_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_skill_level_up_req() { }

		public weapon_skill_level_up_req(int weaponId, int skillIndex, int level)
		{
			this.weaponId = weaponId;
			this.skillIndex = skillIndex;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponId = is.popInteger();
			skillIndex = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponId);
			os.pushInteger(skillIndex);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_skill_level_up_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponId = is.popInteger();
			skillIndex = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponId);
			os.pushInteger(skillIndex);
			os.pushInteger(level);
		}

		public int weaponId;
		public int skillIndex;
		public int level;
	}

	// 神兵天赋升级请求
	public static class weapon_talent_level_up_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_talent_level_up_req() { }

		public weapon_talent_level_up_req(int weaponId, int talentIndex)
		{
			this.weaponId = weaponId;
			this.talentIndex = talentIndex;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponId = is.popInteger();
			talentIndex = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponId);
			os.pushInteger(talentIndex);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_talent_level_up_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponId = is.popInteger();
			talentIndex = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponId);
			os.pushInteger(talentIndex);
		}

		public int weaponId;
		public int talentIndex;
	}

	// 神兵天赋点购买请求
	public static class weapon_talent_point_buy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_talent_point_buy_req() { }

		public weapon_talent_point_buy_req(int weaponId)
		{
			this.weaponId = weaponId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponId);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_talent_point_buy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponId);
		}

		public int weaponId;
	}

	// 神兵天赋点重置请求
	public static class weapon_talent_point_reset_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public weapon_talent_point_reset_req() { }

		public weapon_talent_point_reset_req(int weaponId)
		{
			this.weaponId = weaponId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			weaponId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(weaponId);
		}

		@Override
		public String getPacketName()
		{
			return "weapon_talent_point_reset_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			weaponId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(weaponId);
		}

		public int weaponId;
	}

	// 发送礼物请求
	public static class send_gift_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public send_gift_req() { }

		public send_gift_req(int itemId, int itemNum, int roleId)
		{
			this.itemId = itemId;
			this.itemNum = itemNum;
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			itemId = is.popInteger();
			itemNum = is.popInteger();
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(itemId);
			os.pushInteger(itemNum);
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "send_gift_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			itemId = is.popInteger();
			itemNum = is.popInteger();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(itemId);
			os.pushInteger(itemNum);
			os.pushInteger(roleId);
		}

		public int itemId;
		public int itemNum;
		public int roleId;
	}

	// 打开地图同步旗帜信息
	public static class sync_big_map_flag_info_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_big_map_flag_info_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 随从技能升级请求
	public static class pet_skill_level_up_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_skill_level_up_req() { }

		public pet_skill_level_up_req(int petId, int skillIndex, int level)
		{
			this.petId = petId;
			this.skillIndex = skillIndex;
			this.level = level;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
			skillIndex = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
			os.pushInteger(skillIndex);
			os.pushInteger(level);
		}

		@Override
		public String getPacketName()
		{
			return "pet_skill_level_up_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
			skillIndex = is.popInteger();
			level = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
			os.pushInteger(skillIndex);
			os.pushInteger(level);
		}

		public int petId;
		public int skillIndex;
		public int level;
	}

	// 同步特权卡配置请求
	public static class sync_special_card_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_special_card_req() { }

		public sync_special_card_req(int cardType)
		{
			this.cardType = cardType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cardType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cardType);
		}

		@Override
		public String getPacketName()
		{
			return "sync_special_card_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cardType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cardType);
		}

		public int cardType;
	}

	// 领取特权卡奖励请求
	public static class take_special_card_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public take_special_card_reward_req() { }

		public take_special_card_reward_req(int cardType)
		{
			this.cardType = cardType;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cardType = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cardType);
		}

		@Override
		public String getPacketName()
		{
			return "take_special_card_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cardType = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cardType);
		}

		public int cardType;
	}

	// 领取每日体力奖励请求
	public static class sync_daily_vit_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_daily_vit_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 领取每日体力奖励请求
	public static class take_daily_vit_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public take_daily_vit_reward_req() { }

		public take_daily_vit_reward_req(int vitId)
		{
			this.vitId = vitId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			vitId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(vitId);
		}

		@Override
		public String getPacketName()
		{
			return "take_daily_vit_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			vitId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(vitId);
		}

		public int vitId;
	}

	// 开启洞察请求
	public static class try_open_insight_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "try_open_insight_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 开启寻仇请求
	public static class try_open_revenge_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "try_open_revenge_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步洞察请求
	public static class try_sync_insight_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "try_sync_insight_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步寻仇请求
	public static class try_sync_revenge_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "try_sync_revenge_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 传送至洞察目标请求
	public static class try_transform_insight_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public try_transform_insight_req() { }

		public try_transform_insight_req(int index)
		{
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "try_transform_insight_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(index);
		}

		public int index;
	}

	// 传送至寻仇目标请求
	public static class try_transform_revenge_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public try_transform_revenge_req() { }

		public try_transform_revenge_req(int index)
		{
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "try_transform_revenge_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(index);
		}

		public int index;
	}

	// 传家宝擦拭请求
	public static class heirloom_wipe_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public heirloom_wipe_req() { }

		public heirloom_wipe_req(int colorSeq)
		{
			this.colorSeq = colorSeq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			colorSeq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(colorSeq);
		}

		@Override
		public String getPacketName()
		{
			return "heirloom_wipe_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			colorSeq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(colorSeq);
		}

		public int colorSeq;
	}

	// 传家宝取出请求
	public static class heirloom_takeout_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "heirloom_takeout_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 购买离线精灵修炼点请求
	public static class buy_offline_func_point_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public buy_offline_func_point_req() { }

		public buy_offline_func_point_req(int seq)
		{
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "buy_offline_func_point_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
		}

		public int seq;
	}

	// 设置帮派QQ群请求
	public static class set_sect_qqgroup_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public set_sect_qqgroup_req() { }

		public set_sect_qqgroup_req(String qqgroup)
		{
			this.qqgroup = qqgroup;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			qqgroup = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushString(qqgroup);
		}

		@Override
		public String getPacketName()
		{
			return "set_sect_qqgroup_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			qqgroup = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushString(qqgroup);
		}

		public String qqgroup;
	}

	// 设置传家宝外观显示请求
	public static class set_heirloom_display_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public set_heirloom_display_req() { }

		public set_heirloom_display_req(int display)
		{
			this.display = display;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			display = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(display);
		}

		@Override
		public String getPacketName()
		{
			return "set_heirloom_display_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			display = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(display);
		}

		public int display;
	}

	// 武勋商城同步协议
	public static class feat_gambleshopsync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "feat_gambleshopsync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 武勋商城刷新协议
	public static class feat_gambleshoprefresh_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public feat_gambleshoprefresh_req() { }

		public feat_gambleshoprefresh_req(int times)
		{
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "feat_gambleshoprefresh_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(times);
		}

		public int times;
	}

	// 武勋商城买商品协议
	public static class feat_gambleshopbuy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public feat_gambleshopbuy_req() { }

		public feat_gambleshopbuy_req(int seq)
		{
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "feat_gambleshopbuy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(seq);
		}

		public int seq;
	}

	// 添加结婚预约协议
	public static class add_marriage_bespeak_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public add_marriage_bespeak_req() { }

		public add_marriage_bespeak_req(int line, int timeIndex)
		{
			this.line = line;
			this.timeIndex = timeIndex;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			line = is.popInteger();
			timeIndex = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(line);
			os.pushInteger(timeIndex);
		}

		@Override
		public String getPacketName()
		{
			return "add_marriage_bespeak_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			line = is.popInteger();
			timeIndex = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(line);
			os.pushInteger(timeIndex);
		}

		public int line;
		public int timeIndex;
	}

	// 同步结婚预约协议
	public static class sync_marriage_bespeak_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_marriage_bespeak_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 基础物品快速购买协议
	public static class base_dummygoods_quick_buy_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public base_dummygoods_quick_buy_req() { }

		public base_dummygoods_quick_buy_req(int buyItemId, int times)
		{
			this.buyItemId = buyItemId;
			this.times = times;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			buyItemId = is.popInteger();
			times = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(buyItemId);
			os.pushInteger(times);
		}

		@Override
		public String getPacketName()
		{
			return "base_dummygoods_quick_buy_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			buyItemId = is.popInteger();
			times = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(buyItemId);
			os.pushInteger(times);
		}

		public int buyItemId;
		public int times;
	}

	// 活动补做协议
	public static class activity_last_quick_done_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public activity_last_quick_done_req() { }

		public activity_last_quick_done_req(int mapId, int seq)
		{
			this.mapId = mapId;
			this.seq = seq;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
			os.pushInteger(seq);
		}

		@Override
		public String getPacketName()
		{
			return "activity_last_quick_done_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
			seq = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
			os.pushInteger(seq);
		}

		public int mapId;
		public int seq;
	}

	// 打开太玄碑文同步信息
	public static class stele_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "stele_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 参加活动
	public static class stele_join_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "stele_join_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 排行榜同步
	public static class stele_rank_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "stele_rank_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 传送到太玄碑文
	public static class stele_teleport_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public stele_teleport_req() { }

		public stele_teleport_req(int type, int index)
		{
			this.type = type;
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "stele_teleport_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
			os.pushInteger(index);
		}

		public int type;
		public int index;
	}

	// 添加黑名单
	public static class blacklist_add_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public blacklist_add_req() { }

		public blacklist_add_req(int rid)
		{
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "blacklist_add_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
		}

		public int rid;
	}

	// 删除黑名单
	public static class blacklist_del_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public blacklist_del_req() { }

		public blacklist_del_req(int rid)
		{
			this.rid = rid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			rid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(rid);
		}

		@Override
		public String getPacketName()
		{
			return "blacklist_del_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			rid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(rid);
		}

		public int rid;
	}

	// 同步黑名单
	public static class blacklist_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "blacklist_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步伏魔洞信息
	public static class demonhole_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "demonhole_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 参加伏魔洞
	public static class demonhole_join_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "demonhole_join_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 进入下一层或上一层
	public static class demonhole_changefloor_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public demonhole_changefloor_req() { }

		public demonhole_changefloor_req(int floor)
		{
			this.floor = floor;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			floor = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(floor);
		}

		@Override
		public String getPacketName()
		{
			return "demonhole_changefloor_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			floor = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(floor);
		}

		public int floor;
	}

	public static class demonhole_battle_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "demonhole_battle_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 开始进入正义之心副本请求
	public static class justicemap_start_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "justicemap_start_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 打开江湖告急同步信息
	public static class emergency_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "emergency_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 进入江湖告急副本
	public static class emergency_enter_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public emergency_enter_req() { }

		public emergency_enter_req(int activityId)
		{
			this.activityId = activityId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			activityId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(activityId);
		}

		@Override
		public String getPacketName()
		{
			return "emergency_enter_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			activityId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(activityId);
		}

		public int activityId;
	}

	// 排行榜同步
	public static class emergency_rank_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "emergency_rank_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 幸运星同步
	public static class lucklystar_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "lucklystar_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 幸运星赠送
	public static class lucklystar_gift_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public lucklystar_gift_req() { }

		public lucklystar_gift_req(int roleId)
		{
			this.roleId = roleId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roleId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(roleId);
		}

		@Override
		public String getPacketName()
		{
			return "lucklystar_gift_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roleId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(roleId);
		}

		public int roleId;
	}

	// 开始挑战
	public static class fightnpc_start_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "fightnpc_start_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 领取奖励
	public static class fightnpc_reward_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "fightnpc_reward_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 分包奖励领取同步协议
	public static class packetreward_sync_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "packetreward_sync_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 分包奖励领取协议
	public static class packetreward_take_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public packetreward_take_req() { }

		public packetreward_take_req(int packetIndex)
		{
			this.packetIndex = packetIndex;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			packetIndex = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(packetIndex);
		}

		@Override
		public String getPacketName()
		{
			return "packetreward_take_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			packetIndex = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(packetIndex);
		}

		public int packetIndex;
	}

	// 坐骑解锁洗练属性
	public static class horse_enhance_prop_unlock_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public horse_enhance_prop_unlock_req() { }

		public horse_enhance_prop_unlock_req(int hid, int index)
		{
			this.hid = hid;
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hid = is.popInteger();
			index = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hid);
			os.pushInteger(index);
		}

		@Override
		public String getPacketName()
		{
			return "horse_enhance_prop_unlock_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hid = is.popInteger();
			index = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(hid);
			os.pushInteger(index);
		}

		public int hid;
		public int index;
	}

	// 购买休闲宠物时间
	public static class buy_wizard_pet_time_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public buy_wizard_pet_time_req() { }

		public buy_wizard_pet_time_req(int petId)
		{
			this.petId = petId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
		}

		@Override
		public String getPacketName()
		{
			return "buy_wizard_pet_time_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
		}

		public int petId;
	}

	// 设置当前休闲宠物
	public static class set_cur_wizard_pet_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public set_cur_wizard_pet_req() { }

		public set_cur_wizard_pet_req(int petId)
		{
			this.petId = petId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			petId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(petId);
		}

		@Override
		public String getPacketName()
		{
			return "set_cur_wizard_pet_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			petId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(petId);
		}

		public int petId;
	}

	// 同步当前已解锁头像
	public static class sync_item_unlock_head_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "sync_item_unlock_head_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 宠物，神兵评价(themeType 1:佣兵 2:神兵)
	public static class socialmsg_send_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public socialmsg_send_req() { }

		public socialmsg_send_req(int serverId, String serverName, int themeType, int themeId, 
		                          String comment)
		{
			this.serverId = serverId;
			this.serverName = serverName;
			this.themeType = themeType;
			this.themeId = themeId;
			this.comment = comment;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			serverId = is.popInteger();
			serverName = is.popString();
			themeType = is.popInteger();
			themeId = is.popInteger();
			comment = is.popString();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(serverId);
			os.pushString(serverName);
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushString(comment);
		}

		@Override
		public String getPacketName()
		{
			return "socialmsg_send_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			serverId = is.popInteger();
			serverName = is.popString();
			themeType = is.popInteger();
			themeId = is.popInteger();
			comment = is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(serverId);
			os.pushString(serverName);
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushString(comment);
		}

		public int serverId;
		public String serverName;
		public int themeType;
		public int themeId;
		public String comment;
	}

	// 点赞(themeType 1:佣兵 2:神兵)
	public static class socialmsg_like_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public socialmsg_like_req() { }

		public socialmsg_like_req(int serverId, String serverName, int themeType, int themeId, 
		                          int commentId)
		{
			this.serverId = serverId;
			this.serverName = serverName;
			this.themeType = themeType;
			this.themeId = themeId;
			this.commentId = commentId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			serverId = is.popInteger();
			serverName = is.popString();
			themeType = is.popInteger();
			themeId = is.popInteger();
			commentId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(serverId);
			os.pushString(serverName);
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushInteger(commentId);
		}

		@Override
		public String getPacketName()
		{
			return "socialmsg_like_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			serverId = is.popInteger();
			serverName = is.popString();
			themeType = is.popInteger();
			themeId = is.popInteger();
			commentId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(serverId);
			os.pushString(serverName);
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushInteger(commentId);
		}

		public int serverId;
		public String serverName;
		public int themeType;
		public int themeId;
		public int commentId;
	}

	// 鄙视(themeType 1:佣兵 2:神兵)
	public static class socialmsg_dislike_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public socialmsg_dislike_req() { }

		public socialmsg_dislike_req(int serverId, String serverName, int themeType, int themeId, 
		                             int commentId)
		{
			this.serverId = serverId;
			this.serverName = serverName;
			this.themeType = themeType;
			this.themeId = themeId;
			this.commentId = commentId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			serverId = is.popInteger();
			serverName = is.popString();
			themeType = is.popInteger();
			themeId = is.popInteger();
			commentId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(serverId);
			os.pushString(serverName);
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushInteger(commentId);
		}

		@Override
		public String getPacketName()
		{
			return "socialmsg_dislike_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			serverId = is.popInteger();
			serverName = is.popString();
			themeType = is.popInteger();
			themeId = is.popInteger();
			commentId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(serverId);
			os.pushString(serverName);
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushInteger(commentId);
		}

		public int serverId;
		public String serverName;
		public int themeType;
		public int themeId;
		public int commentId;
	}

	// (tag 1:最新评论 2:点赞最多 3:鄙视最多      themeType 1:佣兵 2:神兵)
	public static class socialmsg_pageinfo_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public socialmsg_pageinfo_req() { }

		public socialmsg_pageinfo_req(int themeType, int themeId, int tag, int pageNo, 
		                              int len)
		{
			this.themeType = themeType;
			this.themeId = themeId;
			this.tag = tag;
			this.pageNo = pageNo;
			this.len = len;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			themeType = is.popInteger();
			themeId = is.popInteger();
			tag = is.popInteger();
			pageNo = is.popInteger();
			len = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushInteger(tag);
			os.pushInteger(pageNo);
			os.pushInteger(len);
		}

		@Override
		public String getPacketName()
		{
			return "socialmsg_pageinfo_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			themeType = is.popInteger();
			themeId = is.popInteger();
			tag = is.popInteger();
			pageNo = is.popInteger();
			len = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(themeType);
			os.pushInteger(themeId);
			os.pushInteger(tag);
			os.pushInteger(pageNo);
			os.pushInteger(len);
		}

		public int themeType;
		public int themeId;
		public int tag;
		public int pageNo;
		public int len;
	}

	// npc传送功能
	public static class npc_transfrom_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public npc_transfrom_req() { }

		public npc_transfrom_req(int transfromId)
		{
			this.transfromId = transfromId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			transfromId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(transfromId);
		}

		@Override
		public String getPacketName()
		{
			return "npc_transfrom_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			transfromId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(transfromId);
		}

		public int transfromId;
	}

	// 分享成功通知
	public static class share_success implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "share_success";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 物品解锁头像
	public static class unlock_head_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public unlock_head_req() { }

		public unlock_head_req(int headId)
		{
			this.headId = headId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			headId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(headId);
		}

		@Override
		public String getPacketName()
		{
			return "unlock_head_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			headId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(headId);
		}

		public int headId;
	}

	// 开始NPC副本
	public static class start_npc_map_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public start_npc_map_req() { }

		public start_npc_map_req(int mapId)
		{
			this.mapId = mapId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapId);
		}

		@Override
		public String getPacketName()
		{
			return "start_npc_map_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapId);
		}

		public int mapId;
	}

	// 参与NPC祈福
	public static class join_npc_pray_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public join_npc_pray_req() { }

		public join_npc_pray_req(int prayId, int dropId)
		{
			this.prayId = prayId;
			this.dropId = dropId;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			prayId = is.popInteger();
			dropId = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(prayId);
			os.pushInteger(dropId);
		}

		@Override
		public String getPacketName()
		{
			return "join_npc_pray_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			prayId = is.popInteger();
			dropId = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(prayId);
			os.pushInteger(dropId);
		}

		public int prayId;
		public int dropId;
	}

	// 解锁私人仓库
	public static class unlock_private_warehouse_req implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "unlock_private_warehouse_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 开始挑战
	public static class towerdefence_start_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public towerdefence_start_req() { }

		public towerdefence_start_req(int mapID)
		{
			this.mapID = mapID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapID);
		}

		@Override
		public String getPacketName()
		{
			return "towerdefence_start_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapID);
		}

		public int mapID;
	}

	// 翻牌抽奖
	public static class towerdefence_selectcard_req implements Stream.IStreamable, SStream.IStrPacket
	{

		public towerdefence_selectcard_req() { }

		public towerdefence_selectcard_req(int cardNo)
		{
			this.cardNo = cardNo;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cardNo = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cardNo);
		}

		@Override
		public String getPacketName()
		{
			return "towerdefence_selectcard_req";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cardNo = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cardNo);
		}

		public int cardNo;
	}

	// 计算延迟(客户端发起)
	public static class client_ping_start implements Stream.IStreamable, SStream.IStrPacket
	{

		public client_ping_start() { }

		public client_ping_start(TimeTick timeTick, int ping)
		{
			this.timeTick = timeTick;
			this.ping = ping;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
			ping = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(timeTick);
			os.pushInteger(ping);
		}

		@Override
		public String getPacketName()
		{
			return "client_ping_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			timeTick = is.pop(TimeTick.class);
			ping = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(timeTick);
			os.pushInteger(ping);
		}

		public TimeTick timeTick;
		public int ping;
	}

	// 客户端给服务器同步ping值
	public static class sync_server_ping implements Stream.IStreamable, SStream.IStrPacket
	{

		public sync_server_ping() { }

		public sync_server_ping(int ping)
		{
			this.ping = ping;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			ping = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(ping);
		}

		@Override
		public String getPacketName()
		{
			return "sync_server_ping";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			ping = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(ping);
		}

		public int ping;
	}

	// 怪物回到出生点
	public static class set_monster_birthpos implements Stream.IStreamable, SStream.IStrPacket
	{

		public set_monster_birthpos() { }

		public set_monster_birthpos(int mid)
		{
			this.mid = mid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mid);
		}

		@Override
		public String getPacketName()
		{
			return "set_monster_birthpos";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mid);
		}

		public int mid;
	}

	// 玩家上马
	public static class role_ride_horse implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_ride_horse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 玩家下马
	public static class role_unride_horse implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_unride_horse";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 客户端矫正服务器位置（玩家）
	public static class role_adjust_serverpos implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_adjust_serverpos() { }

		public role_adjust_serverpos(Vector3 pos)
		{
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(pos);
		}

		@Override
		public String getPacketName()
		{
			return "role_adjust_serverpos";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(pos);
		}

		public Vector3 pos;
	}

	// 客户端矫正服务器位置（佣兵）
	public static class pet_adjust_serverpos implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_adjust_serverpos() { }

		public pet_adjust_serverpos(int pid, Vector3 pos)
		{
			this.pid = pid;
			this.pos = pos;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pid = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(pid);
			os.push(pos);
		}

		@Override
		public String getPacketName()
		{
			return "pet_adjust_serverpos";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pid = is.popInteger();
			pos = is.pop(Vector3.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(pid);
			os.push(pos);
		}

		public int pid;
		public Vector3 pos;
	}

	// 玩家移动
	public static class role_move implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_move() { }

		public role_move(Vector3 pos, Vector3 target, int speed, Vector3F rotation, 
		                 TimeTick timeTick)
		{
			this.pos = pos;
			this.target = target;
			this.speed = speed;
			this.rotation = rotation;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( target == null )
				target = new Vector3();
			is.pop(target);
			speed = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(pos);
			os.push(target);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_move";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.pop(Vector3.class);
			target = is.pop(Vector3.class);
			speed = is.popInteger();
			rotation = is.pop(Vector3F.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(pos);
			os.push(target);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		public Vector3 pos;
		public Vector3 target;
		public int speed;
		public Vector3F rotation;
		public TimeTick timeTick;
	}

	// 佣兵移动
	public static class pet_move implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_move() { }

		public pet_move(int cfgid, Vector3 pos, Vector3 target, int speed, 
		                Vector3F rotation, TimeTick timeTick)
		{
			this.cfgid = cfgid;
			this.pos = pos;
			this.target = target;
			this.speed = speed;
			this.rotation = rotation;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cfgid = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( target == null )
				target = new Vector3();
			is.pop(target);
			speed = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cfgid);
			os.push(pos);
			os.push(target);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "pet_move";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cfgid = is.popInteger();
			pos = is.pop(Vector3.class);
			target = is.pop(Vector3.class);
			speed = is.popInteger();
			rotation = is.pop(Vector3F.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cfgid);
			os.push(pos);
			os.push(target);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		public int cfgid;
		public Vector3 pos;
		public Vector3 target;
		public int speed;
		public Vector3F rotation;
		public TimeTick timeTick;
	}

	// 镖车移动
	public static class escortcar_move implements Stream.IStreamable, SStream.IStrPacket
	{

		public escortcar_move() { }

		public escortcar_move(Vector3 pos, Vector3 target, int speed, Vector3F rotation, 
		                      TimeTick timeTick)
		{
			this.pos = pos;
			this.target = target;
			this.speed = speed;
			this.rotation = rotation;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( target == null )
				target = new Vector3();
			is.pop(target);
			speed = is.popInteger();
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(pos);
			os.push(target);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "escortcar_move";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.pop(Vector3.class);
			target = is.pop(Vector3.class);
			speed = is.popInteger();
			rotation = is.pop(Vector3F.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(pos);
			os.push(target);
			os.pushInteger(speed);
			os.push(rotation);
			os.push(timeTick);
		}

		public Vector3 pos;
		public Vector3 target;
		public int speed;
		public Vector3F rotation;
		public TimeTick timeTick;
	}

	// 玩家停止移动
	public static class role_stopmove implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_stopmove() { }

		public role_stopmove(Vector3 pos, TimeTick timeTick)
		{
			this.pos = pos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(pos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_stopmove";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(pos);
			os.push(timeTick);
		}

		public Vector3 pos;
		public TimeTick timeTick;
	}

	// 佣兵停止移动
	public static class pet_stopmove implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_stopmove() { }

		public pet_stopmove(int cfgid, Vector3 pos, TimeTick timeTick)
		{
			this.cfgid = cfgid;
			this.pos = pos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cfgid = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cfgid);
			os.push(pos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "pet_stopmove";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cfgid = is.popInteger();
			pos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cfgid);
			os.push(pos);
			os.push(timeTick);
		}

		public int cfgid;
		public Vector3 pos;
		public TimeTick timeTick;
	}

	// 镖车停止移动
	public static class escortcar_stopmove implements Stream.IStreamable, SStream.IStrPacket
	{

		public escortcar_stopmove() { }

		public escortcar_stopmove(Vector3 pos, TimeTick timeTick)
		{
			this.pos = pos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(pos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "escortcar_stopmove";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(pos);
			os.push(timeTick);
		}

		public Vector3 pos;
		public TimeTick timeTick;
	}

	// 查询周围玩家信息协议
	public static class query_roles_detail implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_roles_detail() { }

		public query_roles_detail(List<Integer> roles)
		{
			this.roles = roles;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			roles = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(roles);
		}

		@Override
		public String getPacketName()
		{
			return "query_roles_detail";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			roles = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(roles);
		}

		public List<Integer> roles;
	}

	// 查询周围陷阱信息
	public static class query_traps_detail implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_traps_detail() { }

		public query_traps_detail(List<Integer> traps)
		{
			this.traps = traps;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			traps = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerList(traps);
		}

		@Override
		public String getPacketName()
		{
			return "query_traps_detail";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			traps = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerList(traps);
		}

		public List<Integer> traps;
	}

	// 查询周围佣兵信息
	public static class query_pets_detail implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_pets_detail() { }

		public query_pets_detail(List<PetBase> pets)
		{
			this.pets = pets;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			pets = is.popList(PetBase.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushList(pets);
		}

		@Override
		public String getPacketName()
		{
			return "query_pets_detail";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			pets = is.popList(PetBase.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushList(pets);
		}

		public List<PetBase> pets;
	}

	// 查询势力战战报
	public static class query_forcewar_result implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "query_forcewar_result";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 查询势力战队友位置信息
	public static class query_forcewar_members_pos implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "query_forcewar_members_pos";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 玩家使用后续技能
	public static class role_usefollowskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_usefollowskill() { }

		public role_usefollowskill(int skillID, int seq, TimeTick timeTick)
		{
			this.skillID = skillID;
			this.seq = seq;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			seq = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.pushInteger(seq);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_usefollowskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			seq = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.pushInteger(seq);
			os.push(timeTick);
		}

		public int skillID;
		public int seq;
		public TimeTick timeTick;
	}

	// 玩家使用社交动作
	public static class role_socialaction implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_socialaction() { }

		public role_socialaction(int actionID)
		{
			this.actionID = actionID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			actionID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(actionID);
		}

		@Override
		public String getPacketName()
		{
			return "role_socialaction";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			actionID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(actionID);
		}

		public int actionID;
	}

	// 玩家打断技能
	public static class role_breakskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_breakskill() { }

		public role_breakskill(TimeTick timeTick)
		{
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_breakskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(timeTick);
		}

		public TimeTick timeTick;
	}

	// 玩家使用技能
	public static class role_useskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_useskill() { }

		public role_useskill(int skillID, Vector3 pos, Vector3F rotation, int targetID, 
		                     int targetType, int ownerID, TimeTick timeTick)
		{
			this.skillID = skillID;
			this.pos = pos;
			this.rotation = rotation;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_useskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			pos = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int skillID;
		public Vector3 pos;
		public Vector3F rotation;
		public int targetID;
		public int targetType;
		public int ownerID;
		public TimeTick timeTick;
	}

	// 玩家使用技能
	public static class role_usemapskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_usemapskill() { }

		public role_usemapskill(int skillID, Vector3 pos, Vector3F rotation, int targetID, 
		                        int targetType, int ownerID, TimeTick timeTick)
		{
			this.skillID = skillID;
			this.pos = pos;
			this.rotation = rotation;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_usemapskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			pos = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int skillID;
		public Vector3 pos;
		public Vector3F rotation;
		public int targetID;
		public int targetType;
		public int ownerID;
		public TimeTick timeTick;
	}

	public static class pet_useskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_useskill() { }

		public pet_useskill(int cfgid, int skillID, Vector3 pos, Vector3F rotation, 
		                    int targetID, int targetType, int ownerID, TimeTick timeTick)
		{
			this.cfgid = cfgid;
			this.skillID = skillID;
			this.pos = pos;
			this.rotation = rotation;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cfgid = is.popInteger();
			skillID = is.popInteger();
			if( pos == null )
				pos = new Vector3();
			is.pop(pos);
			if( rotation == null )
				rotation = new Vector3F();
			is.pop(rotation);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "pet_useskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cfgid = is.popInteger();
			skillID = is.popInteger();
			pos = is.pop(Vector3.class);
			rotation = is.pop(Vector3F.class);
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
			os.push(pos);
			os.push(rotation);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(timeTick);
		}

		public int cfgid;
		public int skillID;
		public Vector3 pos;
		public Vector3F rotation;
		public int targetID;
		public int targetType;
		public int ownerID;
		public TimeTick timeTick;
	}

	// 玩家技能结束(清除disattack)
	public static class role_endskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_endskill() { }

		public role_endskill(int skillID)
		{
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "role_endskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
		}

		public int skillID;
	}

	// 佣兵技能结束(清除disattack)
	public static class pet_endskill implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_endskill() { }

		public pet_endskill(int cfgid, int skillID)
		{
			this.cfgid = cfgid;
			this.skillID = skillID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cfgid = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
		}

		@Override
		public String getPacketName()
		{
			return "pet_endskill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cfgid = is.popInteger();
			skillID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
		}

		public int cfgid;
		public int skillID;
	}

	// 玩家技能结束(清除attack)
	public static class role_finishattack implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "role_finishattack";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 佣兵技能结束(清除attack)
	public static class pet_finishattack implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_finishattack() { }

		public pet_finishattack(int cfgid)
		{
			this.cfgid = cfgid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cfgid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cfgid);
		}

		@Override
		public String getPacketName()
		{
			return "pet_finishattack";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cfgid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cfgid);
		}

		public int cfgid;
	}

	// 玩家开始冲锋
	public static class role_rushstart implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_rushstart() { }

		public role_rushstart(int skillID, Vector3 endPos, TimeTick timeTick)
		{
			this.skillID = skillID;
			this.endPos = endPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			if( endPos == null )
				endPos = new Vector3();
			is.pop(endPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_rushstart";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			endPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		public int skillID;
		public Vector3 endPos;
		public TimeTick timeTick;
	}

	// 佣兵开始冲锋
	public static class pet_rushstart implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_rushstart() { }

		public pet_rushstart(int cfgid, int skillID, Vector3 endPos, TimeTick timeTick)
		{
			this.cfgid = cfgid;
			this.skillID = skillID;
			this.endPos = endPos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cfgid = is.popInteger();
			skillID = is.popInteger();
			if( endPos == null )
				endPos = new Vector3();
			is.pop(endPos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "pet_rushstart";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cfgid = is.popInteger();
			skillID = is.popInteger();
			endPos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cfgid);
			os.pushInteger(skillID);
			os.push(endPos);
			os.push(timeTick);
		}

		public int cfgid;
		public int skillID;
		public Vector3 endPos;
		public TimeTick timeTick;
	}

	// 取消采矿
	public static class mineral_quit implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "mineral_quit";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 陷阱点击
	public static class trap_click implements Stream.IStreamable, SStream.IStrPacket
	{

		public trap_click() { }

		public trap_click(int trapID)
		{
			this.trapID = trapID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			trapID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(trapID);
		}

		@Override
		public String getPacketName()
		{
			return "trap_click";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			trapID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(trapID);
		}

		public int trapID;
	}

	public static class role_shift_start implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_shift_start() { }

		public role_shift_start(int skillID, int targetID, int targetType, int ownerID, 
		                        Vector3 endpos, TimeTick timeTick)
		{
			this.skillID = skillID;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.endpos = endpos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( endpos == null )
				endpos = new Vector3();
			is.pop(endpos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(endpos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_shift_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			endpos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(endpos);
			os.push(timeTick);
		}

		public int skillID;
		public int targetID;
		public int targetType;
		public int ownerID;
		public Vector3 endpos;
		public TimeTick timeTick;
	}

	public static class pet_shift_start implements Stream.IStreamable, SStream.IStrPacket
	{

		public pet_shift_start() { }

		public pet_shift_start(int attackpid, int skillID, int targetID, int targetType, 
		                       int ownerID, Vector3 endpos, TimeTick timeTick)
		{
			this.attackpid = attackpid;
			this.skillID = skillID;
			this.targetID = targetID;
			this.targetType = targetType;
			this.ownerID = ownerID;
			this.endpos = endpos;
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			attackpid = is.popInteger();
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			if( endpos == null )
				endpos = new Vector3();
			is.pop(endpos);
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(attackpid);
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(endpos);
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "pet_shift_start";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			attackpid = is.popInteger();
			skillID = is.popInteger();
			targetID = is.popInteger();
			targetType = is.popInteger();
			ownerID = is.popInteger();
			endpos = is.pop(Vector3.class);
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(attackpid);
			os.pushInteger(skillID);
			os.pushInteger(targetID);
			os.pushInteger(targetType);
			os.pushInteger(ownerID);
			os.push(endpos);
			os.push(timeTick);
		}

		public int attackpid;
		public int skillID;
		public int targetID;
		public int targetType;
		public int ownerID;
		public Vector3 endpos;
		public TimeTick timeTick;
	}

	// 拾取掉落请求
	public static class role_pickup_drops implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_pickup_drops() { }

		public role_pickup_drops(Set<Integer> drops)
		{
			this.drops = drops;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			drops = is.popIntegerTreeSet();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushIntegerSet(drops);
		}

		@Override
		public String getPacketName()
		{
			return "role_pickup_drops";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			drops = is.popIntegerTreeSet();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushIntegerSet(drops);
		}

		public Set<Integer> drops;
	}

	// 拾取场景BUFF请求
	public static class role_pickup_mapbuff implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_pickup_mapbuff() { }

		public role_pickup_mapbuff(int mapBuffID)
		{
			this.mapBuffID = mapBuffID;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			mapBuffID = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(mapBuffID);
		}

		@Override
		public String getPacketName()
		{
			return "role_pickup_mapbuff";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			mapBuffID = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(mapBuffID);
		}

		public int mapBuffID;
	}

	// 激活神兵请求
	public static class role_motivate_weapon implements Stream.IStreamable, SStream.IStrPacket
	{

		public role_motivate_weapon() { }

		public role_motivate_weapon(TimeTick timeTick)
		{
			this.timeTick = timeTick;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			if( timeTick == null )
				timeTick = new TimeTick();
			is.pop(timeTick);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.push(timeTick);
		}

		@Override
		public String getPacketName()
		{
			return "role_motivate_weapon";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			timeTick = is.pop(TimeTick.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.push(timeTick);
		}

		public TimeTick timeTick;
	}

	// 同步单机副本杀怪进度
	public static class privatemap_kill implements Stream.IStreamable, SStream.IStrPacket
	{

		public privatemap_kill() { }

		public privatemap_kill(int spawnPointID, Vector3 position, int weaponID, Map<Integer, AttackDamageDetail> damageRank)
		{
			this.spawnPointID = spawnPointID;
			this.position = position;
			this.weaponID = weaponID;
			this.damageRank = damageRank;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spawnPointID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			weaponID = is.popInteger();
			damageRank = is.popIntegerTreeMap(AttackDamageDetail.class);
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spawnPointID);
			os.push(position);
			os.pushInteger(weaponID);
			os.pushIntegerMap(damageRank);
		}

		@Override
		public String getPacketName()
		{
			return "privatemap_kill";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			spawnPointID = is.popInteger();
			position = is.pop(Vector3.class);
			weaponID = is.popInteger();
			damageRank = is.popIntegerTreeMap(AttackDamageDetail.class);
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(spawnPointID);
			os.push(position);
			os.pushInteger(weaponID);
			os.pushIntegerMap(damageRank);
		}

		public int spawnPointID;
		public Vector3 position;
		public int weaponID;
		public Map<Integer, AttackDamageDetail> damageRank;
	}

	// 单机副本持续掉落
	public static class privatemap_damage_reward implements Stream.IStreamable, SStream.IStrPacket
	{

		public privatemap_damage_reward() { }

		public privatemap_damage_reward(int spawnPointID, Vector3 position, List<Integer> index)
		{
			this.spawnPointID = spawnPointID;
			this.position = position;
			this.index = index;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			spawnPointID = is.popInteger();
			if( position == null )
				position = new Vector3();
			is.pop(position);
			index = is.popIntegerList();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(spawnPointID);
			os.push(position);
			os.pushIntegerList(index);
		}

		@Override
		public String getPacketName()
		{
			return "privatemap_damage_reward";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			spawnPointID = is.popInteger();
			position = is.pop(Vector3.class);
			index = is.popIntegerList();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(spawnPointID);
			os.push(position);
			os.pushIntegerList(index);
		}

		public int spawnPointID;
		public Vector3 position;
		public List<Integer> index;
	}

	// 同步单机副本陷阱状态
	public static class privatemap_trap implements Stream.IStreamable, SStream.IStrPacket
	{

		public privatemap_trap() { }

		public privatemap_trap(int trapID, int trapState)
		{
			this.trapID = trapID;
			this.trapState = trapState;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			trapID = is.popInteger();
			trapState = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(trapID);
			os.pushInteger(trapState);
		}

		@Override
		public String getPacketName()
		{
			return "privatemap_trap";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			trapID = is.popInteger();
			trapState = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(trapID);
			os.pushInteger(trapState);
		}

		public int trapID;
		public int trapState;
	}

	// 单机本增加神兵熟练度
	public static class privatemap_weapon_master implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "privatemap_weapon_master";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步玩家单机副本血量
	public static class privatemap_role_updatehp implements Stream.IStreamable, SStream.IStrPacket
	{

		public privatemap_role_updatehp() { }

		public privatemap_role_updatehp(int hp)
		{
			this.hp = hp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			hp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(hp);
		}

		@Override
		public String getPacketName()
		{
			return "privatemap_role_updatehp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			hp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(hp);
		}

		public int hp;
	}

	// 同步佣兵单机副本血量
	public static class privatemap_pet_updatehp implements Stream.IStreamable, SStream.IStrPacket
	{

		public privatemap_pet_updatehp() { }

		public privatemap_pet_updatehp(int cfgID, int hp)
		{
			this.cfgID = cfgID;
			this.hp = hp;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			cfgID = is.popInteger();
			hp = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(cfgID);
			os.pushInteger(hp);
		}

		@Override
		public String getPacketName()
		{
			return "privatemap_pet_updatehp";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			cfgID = is.popInteger();
			hp = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(cfgID);
			os.pushInteger(hp);
		}

		public int cfgID;
		public int hp;
	}

	// 同步玩家单机副本装备耐久
	public static class privatemap_durability implements Stream.IStreamable, SStream.IStrPacket
	{

		public privatemap_durability() { }

		public privatemap_durability(int wid)
		{
			this.wid = wid;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			wid = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(wid);
		}

		@Override
		public String getPacketName()
		{
			return "privatemap_durability";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			wid = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(wid);
		}

		public int wid;
	}

	public static class query_entity_nearby implements Stream.IStreamable, SStream.IStrPacket
	{

		public query_entity_nearby() { }

		public query_entity_nearby(int id, int type)
		{
			this.id = id;
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			id = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(id);
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "query_entity_nearby";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			id = is.popInteger();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(id);
			os.pushInteger(type);
		}

		public int id;
		public int type;
	}

	public static class send_towerdefence_alarm implements Stream.IStreamable, SStream.IStrPacket
	{

		public send_towerdefence_alarm() { }

		public send_towerdefence_alarm(int type)
		{
			this.type = type;
		}

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
			type = is.popInteger();
		}

		@Override
		public void encode(Stream.AOStream os)
		{
			os.pushInteger(type);
		}

		@Override
		public String getPacketName()
		{
			return "send_towerdefence_alarm";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
			type = is.popInteger();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
			os.pushInteger(type);
		}

		public int type;
	}

	// 同步地图伤害排行
	public static class query_map_damage_rank implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "query_map_damage_rank";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	// 同步帮派团队本战况
	public static class query_sect_map_cur_info implements Stream.IStreamable, SStream.IStrPacket
	{

		@Override
		public void decode(Stream.AIStream is) throws Stream.EOFException, Stream.DecodeException
		{
		}

		@Override
		public void encode(Stream.AOStream os)
		{
		}

		@Override
		public String getPacketName()
		{
			return "query_sect_map_cur_info";
		}
		
		@Override
		public void decode(SStream.IStream is) throws SStream.EOFException, SStream.DecodeException
		{
			is.popString();
		}

		@Override
		public void encode(SStream.OStream os)
		{
			os.pushString(getPacketName());
		}

	}

	public static Class<?> getStrPacketClass(String name)
	{
		switch( name )
		{
		case "server_echo":
			return server_echo.class;
		case "server_info":
			return server_info.class;
		case "user_force_close":
			return user_force_close.class;
		case "user_role_list":
			return user_role_list.class;
		case "user_login_res":
			return user_login_res.class;
		case "role_logout_res":
			return role_logout_res.class;
		case "role_loginqueue_pos":
			return role_loginqueue_pos.class;
		case "game_sync":
			return game_sync.class;
		case "assert_ignore_list":
			return assert_ignore_list.class;
		case "role_base":
			return role_base.class;
		case "role_specialcards":
			return role_specialcards.class;
		case "role_bag":
			return role_bag.class;
		case "role_wear":
			return role_wear.class;
		case "role_suite":
			return role_suite.class;
		case "role_sealinfo":
			return role_sealinfo.class;
		case "role_skill":
			return role_skill.class;
		case "role_spirit":
			return role_spirit.class;
		case "role_weapon":
			return role_weapon.class;
		case "role_pet":
			return role_pet.class;
		case "role_task":
			return role_task.class;
		case "role_horseinfo":
			return role_horseinfo.class;
		case "role_treasure_info":
			return role_treasure_info.class;
		case "role_normal_mapcopy_log":
			return role_normal_mapcopy_log.class;
		case "role_activity_mapgroup_log":
			return role_activity_mapgroup_log.class;
		case "role_towerdefence_log":
			return role_towerdefence_log.class;
		case "role_arena_entertimes":
			return role_arena_entertimes.class;
		case "role_diyskill":
			return role_diyskill.class;
		case "role_sectinfo":
			return role_sectinfo.class;
		case "role_sectaura":
			return role_sectaura.class;
		case "role_secttask":
			return role_secttask.class;
		case "role_team":
			return role_team.class;
		case "role_mroom":
			return role_mroom.class;
		case "role_friends":
			return role_friends.class;
		case "role_msg":
			return role_msg.class;
		case "master_brief_sync":
			return master_brief_sync.class;
		case "master_apply_notice":
			return master_apply_notice.class;
		case "master_offer_notice":
			return master_offer_notice.class;
		case "master_accept_apply_notice":
			return master_accept_apply_notice.class;
		case "master_accept_offer_notice":
			return master_accept_offer_notice.class;
		case "master_apply_res":
			return master_apply_res.class;
		case "master_accept_offer_res":
			return master_accept_offer_res.class;
		case "master_offer_res":
			return master_offer_res.class;
		case "master_accept_apply_res":
			return master_accept_apply_res.class;
		case "master_betray_res":
			return master_betray_res.class;
		case "master_graduate_res":
			return master_graduate_res.class;
		case "master_agree_graduate_res":
			return master_agree_graduate_res.class;
		case "master_dismiss_res":
			return master_dismiss_res.class;
		case "master_get_announce_res":
			return master_get_announce_res.class;
		case "master_set_announce_res":
			return master_set_announce_res.class;
		case "master_del_announce_res":
			return master_del_announce_res.class;
		case "master_brief_info_notice":
			return master_brief_info_notice.class;
		case "master_info_res":
			return master_info_res.class;
		case "master_msg_list_res":
			return master_msg_list_res.class;
		case "master_remove_betray_msg_res":
			return master_remove_betray_msg_res.class;
		case "master_list_res":
			return master_list_res.class;
		case "master_list_apprentice_res":
			return master_list_apprentice_res.class;
		case "master_tasks_res":
			return master_tasks_res.class;
		case "master_shopsync_res":
			return master_shopsync_res.class;
		case "master_shoprefresh_res":
			return master_shoprefresh_res.class;
		case "master_shopbuy_res":
			return master_shopbuy_res.class;
		case "role_superarena":
			return role_superarena.class;
		case "role_forcewar":
			return role_forcewar.class;
		case "role_leadinfo":
			return role_leadinfo.class;
		case "role_leadplot":
			return role_leadplot.class;
		case "role_func_preview":
			return role_func_preview.class;
		case "role_treasureguide":
			return role_treasureguide.class;
		case "role_offlineexp":
			return role_offlineexp.class;
		case "role_expcoin":
			return role_expcoin.class;
		case "role_titles":
			return role_titles.class;
		case "role_revive_info":
			return role_revive_info.class;
		case "role_branch_task":
			return role_branch_task.class;
		case "role_climb_tower":
			return role_climb_tower.class;
		case "role_sect_deliver":
			return role_sect_deliver.class;
		case "role_add_robmoney":
			return role_add_robmoney.class;
		case "role_rob_flag":
			return role_rob_flag.class;
		case "role_escortcar_location":
			return role_escortcar_location.class;
		case "role_rmactivity":
			return role_rmactivity.class;
		case "speedup_level":
			return speedup_level.class;
		case "role_marriage_level":
			return role_marriage_level.class;
		case "role_change_map":
			return role_change_map.class;
		case "role_weapon_npc":
			return role_weapon_npc.class;
		case "role_new_msg":
			return role_new_msg.class;
		case "role_team_kill":
			return role_team_kill.class;
		case "role_add_diamond":
			return role_add_diamond.class;
		case "role_add_coin":
			return role_add_coin.class;
		case "role_add_sectcontribution":
			return role_add_sectcontribution.class;
		case "role_add_arenapoint":
			return role_add_arenapoint.class;
		case "role_add_superarenahonor":
			return role_add_superarenahonor.class;
		case "role_add_credit":
			return role_add_credit.class;
		case "role_add_equipenergy":
			return role_add_equipenergy.class;
		case "role_add_gemenergy":
			return role_add_gemenergy.class;
		case "role_add_bookinspiration":
			return role_add_bookinspiration.class;
		case "role_add_exp":
			return role_add_exp.class;
		case "role_add_expcoin":
			return role_add_expcoin.class;
		case "role_add_offline_func_point":
			return role_add_offline_func_point.class;
		case "role_add_vit":
			return role_add_vit.class;
		case "role_add_splitsp":
			return role_add_splitsp.class;
		case "role_add_charm":
			return role_add_charm.class;
		case "role_add_feat":
			return role_add_feat.class;
		case "role_add_item":
			return role_add_item.class;
		case "role_add_items":
			return role_add_items.class;
		case "pet_add_exploit":
			return pet_add_exploit.class;
		case "role_title_update":
			return role_title_update.class;
		case "role_hppool_used":
			return role_hppool_used.class;
		case "role_day_refresh":
			return role_day_refresh.class;
		case "sect_aura_update":
			return sect_aura_update.class;
		case "role_add_ore":
			return role_add_ore.class;
		case "role_show_power":
			return role_show_power.class;
		case "role_show_timeoffset":
			return role_show_timeoffset.class;
		case "role_notice":
			return role_notice.class;
		case "role_betaactivity_notice":
			return role_betaactivity_notice.class;
		case "role_firstpay":
			return role_firstpay.class;
		case "role_new_pet_task":
			return role_new_pet_task.class;
		case "role_secret_task":
			return role_secret_task.class;
		case "sect_applications_number":
			return sect_applications_number.class;
		case "messageboard_day_comment_time":
			return messageboard_day_comment_time.class;
		case "msg_send_res":
			return msg_send_res.class;
		case "role_chat_banned":
			return role_chat_banned.class;
		case "role_chat_room":
			return role_chat_room.class;
		case "waypoint_enter_res":
			return waypoint_enter_res.class;
		case "wrongpos_leave_res":
			return wrongpos_leave_res.class;
		case "worldline_sync_res":
			return worldline_sync_res.class;
		case "worldline_change_res":
			return worldline_change_res.class;
		case "query_robot_res":
			return query_robot_res.class;
		case "query_rolebrief_res":
			return query_rolebrief_res.class;
		case "query_rolefeature_res":
			return query_rolefeature_res.class;
		case "query_petoverviews_res":
			return query_petoverviews_res.class;
		case "query_weaponoverviews_res":
			return query_weaponoverviews_res.class;
		case "role_revive_insitu_res":
			return role_revive_insitu_res.class;
		case "role_revive_other_res":
			return role_revive_other_res.class;
		case "role_revive_safe_res":
			return role_revive_safe_res.class;
		case "role_transform_res":
			return role_transform_res.class;
		case "checkin_sync_res":
			return checkin_sync_res.class;
		case "checkin_take_res":
			return checkin_take_res.class;
		case "mall_sync_res":
			return mall_sync_res.class;
		case "mall_buy_res":
			return mall_buy_res.class;
		case "benefit_sync_res":
			return benefit_sync_res.class;
		case "payactivity_sync_res":
			return payactivity_sync_res.class;
		case "firstpaygift_sync_res":
			return firstpaygift_sync_res.class;
		case "firstpaygift_take_res":
			return firstpaygift_take_res.class;
		case "dailypaygift_sync_res":
			return dailypaygift_sync_res.class;
		case "dailypaygift_take_res":
			return dailypaygift_take_res.class;
		case "lastpaygift_sync_res":
			return lastpaygift_sync_res.class;
		case "lastpaygift_take_res":
			return lastpaygift_take_res.class;
		case "activitychallengegift_sync_res":
			return activitychallengegift_sync_res.class;
		case "activitychallengegift_take_res":
			return activitychallengegift_take_res.class;
		case "upgradepurchase_sync_res":
			return upgradepurchase_sync_res.class;
		case "upgradepurchase_buy_res":
			return upgradepurchase_buy_res.class;
		case "paygift_sync_res":
			return paygift_sync_res.class;
		case "paygift_take_res":
			return paygift_take_res.class;
		case "consumegift_sync_res":
			return consumegift_sync_res.class;
		case "consumegift_take_res":
			return consumegift_take_res.class;
		case "upgradegift_sync_res":
			return upgradegift_sync_res.class;
		case "upgradegift_take_res":
			return upgradegift_take_res.class;
		case "investmentfund_sync_res":
			return investmentfund_sync_res.class;
		case "investmentfund_buy_res":
			return investmentfund_buy_res.class;
		case "investmentfund_take_res":
			return investmentfund_take_res.class;
		case "growthfund_sync_res":
			return growthfund_sync_res.class;
		case "growthfund_buy_res":
			return growthfund_buy_res.class;
		case "growthfund_take_res":
			return growthfund_take_res.class;
		case "doubledrop_sync_res":
			return doubledrop_sync_res.class;
		case "extradrop_sync_res":
			return extradrop_sync_res.class;
		case "exchangegift_sync_res":
			return exchangegift_sync_res.class;
		case "exchangegift_take_res":
			return exchangegift_take_res.class;
		case "logingift_sync_res":
			return logingift_sync_res.class;
		case "logingift_take_res":
			return logingift_take_res.class;
		case "giftpackage_sync_res":
			return giftpackage_sync_res.class;
		case "giftpackage_take_res":
			return giftpackage_take_res.class;
		case "pbtcashback_sync_res":
			return pbtcashback_sync_res.class;
		case "pbtcashback_take_res":
			return pbtcashback_take_res.class;
		case "payrank_sync_res":
			return payrank_sync_res.class;
		case "groupbuy_sync_res":
			return groupbuy_sync_res.class;
		case "groupbuy_buy_res":
			return groupbuy_buy_res.class;
		case "flashsale_sync_res":
			return flashsale_sync_res.class;
		case "flashsale_buy_res":
			return flashsale_buy_res.class;
		case "luckyroll_sync_res":
			return luckyroll_sync_res.class;
		case "luckyroll_play_res":
			return luckyroll_play_res.class;
		case "directpurchase_sync_res":
			return directpurchase_sync_res.class;
		case "directpurchase_take_res":
			return directpurchase_take_res.class;
		case "onearmbandit_sync_res":
			return onearmbandit_sync_res.class;
		case "onearmbandit_take_res":
			return onearmbandit_take_res.class;
		case "adver_sync_res":
			return adver_sync_res.class;
		case "mapcopy_leave_res":
			return mapcopy_leave_res.class;
		case "role_mapcopy_timesync":
			return role_mapcopy_timesync.class;
		case "role_mapcopy_cantake_drop":
			return role_mapcopy_cantake_drop.class;
		case "normalmap_start_res":
			return normalmap_start_res.class;
		case "activitymap_start_res":
			return activitymap_start_res.class;
		case "role_commonmap_start":
			return role_commonmap_start.class;
		case "role_commonmap_end":
			return role_commonmap_end.class;
		case "role_activitymap_sync":
			return role_activitymap_sync.class;
		case "role_commonmap_result":
			return role_commonmap_result.class;
		case "role_commonmap_autocard":
			return role_commonmap_autocard.class;
		case "commonmap_selectcard_res":
			return commonmap_selectcard_res.class;
		case "normalmap_buytimes_res":
			return normalmap_buytimes_res.class;
		case "activitymap_buytimes_res":
			return activitymap_buytimes_res.class;
		case "privatemap_sweep_res":
			return privatemap_sweep_res.class;
		case "activity_sweep_res":
			return activity_sweep_res.class;
		case "mail_syncsys_res":
			return mail_syncsys_res.class;
		case "mail_synctmp_res":
			return mail_synctmp_res.class;
		case "mail_read_res":
			return mail_read_res.class;
		case "mail_readsys_res":
			return mail_readsys_res.class;
		case "mail_readtmp_res":
			return mail_readtmp_res.class;
		case "mail_take_res":
			return mail_take_res.class;
		case "mail_takesys_res":
			return mail_takesys_res.class;
		case "mail_taketmp_res":
			return mail_taketmp_res.class;
		case "mail_del_res":
			return mail_del_res.class;
		case "mail_delsys_res":
			return mail_delsys_res.class;
		case "mail_deltmp_res":
			return mail_deltmp_res.class;
		case "mail_takeallsys_res":
			return mail_takeallsys_res.class;
		case "mail_takealltmp_res":
			return mail_takealltmp_res.class;
		case "role_tempmail_full":
			return role_tempmail_full.class;
		case "rollnotice_sync":
			return rollnotice_sync.class;
		case "rollnotice_detail":
			return rollnotice_detail.class;
		case "rank_sync_res":
			return rank_sync_res.class;
		case "sectrank_sync_res":
			return sectrank_sync_res.class;
		case "rank_get_res":
			return rank_get_res.class;
		case "sectrank_get_res":
			return sectrank_get_res.class;
		case "rank_self_res":
			return rank_self_res.class;
		case "sectrank_self_res":
			return sectrank_self_res.class;
		case "buy_coin_res":
			return buy_coin_res.class;
		case "buy_vit_res":
			return buy_vit_res.class;
		case "role_pay_notice":
			return role_pay_notice.class;
		case "user_vip_sync":
			return user_vip_sync.class;
		case "pay_sync_res":
			return pay_sync_res.class;
		case "pay_asgod_res":
			return pay_asgod_res.class;
		case "vip_take_res":
			return vip_take_res.class;
		case "bag_expand_res":
			return bag_expand_res.class;
		case "bag_sellequip_res":
			return bag_sellequip_res.class;
		case "bag_sellitem_res":
			return bag_sellitem_res.class;
		case "bag_sellgem_res":
			return bag_sellgem_res.class;
		case "bag_sellbook_res":
			return bag_sellbook_res.class;
		case "bag_batchsellequips_res":
			return bag_batchsellequips_res.class;
		case "bag_batchsellitems_res":
			return bag_batchsellitems_res.class;
		case "bag_batchsellgems_res":
			return bag_batchsellgems_res.class;
		case "bag_batchsellbooks_res":
			return bag_batchsellbooks_res.class;
		case "bag_useitemgift_res":
			return bag_useitemgift_res.class;
		case "bag_useitemcoin_res":
			return bag_useitemcoin_res.class;
		case "bag_useitemdiamond_res":
			return bag_useitemdiamond_res.class;
		case "bag_useitemexp_res":
			return bag_useitemexp_res.class;
		case "bag_useitemhp_res":
			return bag_useitemhp_res.class;
		case "bag_useitemhppool_res":
			return bag_useitemhppool_res.class;
		case "bag_useitemchest_res":
			return bag_useitemchest_res.class;
		case "bag_useitemequipenergy_res":
			return bag_useitemequipenergy_res.class;
		case "bag_useitemgemenergy_res":
			return bag_useitemgemenergy_res.class;
		case "bag_useiteminspiration_res":
			return bag_useiteminspiration_res.class;
		case "bag_useitemvit_res":
			return bag_useitemvit_res.class;
		case "bag_useitemfashion_res":
			return bag_useitemfashion_res.class;
		case "bag_useitemexpcoinpool_res":
			return bag_useitemexpcoinpool_res.class;
		case "bag_usemonthlycard_res":
			return bag_usemonthlycard_res.class;
		case "bag_usevipcard_res":
			return bag_usevipcard_res.class;
		case "bag_useitemfeat_res":
			return bag_useitemfeat_res.class;
		case "bag_useitemskill_res":
			return bag_useitemskill_res.class;
		case "bag_useitemletter_res":
			return bag_useitemletter_res.class;
		case "bag_useitemevil_res":
			return bag_useitemevil_res.class;
		case "bag_piececompose_res":
			return bag_piececompose_res.class;
		case "bag_useitempropstrength_res":
			return bag_useitempropstrength_res.class;
		case "bag_useitemofflinefuncpoint_res":
			return bag_useitemofflinefuncpoint_res.class;
		case "bag_useitemtitle_res":
			return bag_useitemtitle_res.class;
		case "bag_useitemuskill_res":
			return bag_useitemuskill_res.class;
		case "bag_useitemhead_res":
			return bag_useitemhead_res.class;
		case "equip_upwear_res":
			return equip_upwear_res.class;
		case "equip_downwear_res":
			return equip_downwear_res.class;
		case "equip_levelup_res":
			return equip_levelup_res.class;
		case "equip_batchlevelup_res":
			return equip_batchlevelup_res.class;
		case "equip_starup_res":
			return equip_starup_res.class;
		case "equip_repair_res":
			return equip_repair_res.class;
		case "equip_autoupwear_res":
			return equip_autoupwear_res.class;
		case "gem_levelup_res":
			return gem_levelup_res.class;
		case "gem_inlay_res":
			return gem_inlay_res.class;
		case "gem_unlay_res":
			return gem_unlay_res.class;
		case "equip_refine_res":
			return equip_refine_res.class;
		case "legend_sync_res":
			return legend_sync_res.class;
		case "legend_make_res":
			return legend_make_res.class;
		case "legend_quit_res":
			return legend_quit_res.class;
		case "legend_save_res":
			return legend_save_res.class;
		case "skill_select_res":
			return skill_select_res.class;
		case "skill_levelup_res":
			return skill_levelup_res.class;
		case "skill_enhance_res":
			return skill_enhance_res.class;
		case "skill_unlock_res":
			return skill_unlock_res.class;
		case "uniqueskill_set_res":
			return uniqueskill_set_res.class;
		case "spirit_learn_res":
			return spirit_learn_res.class;
		case "spirit_levelup_res":
			return spirit_levelup_res.class;
		case "spirit_install_res":
			return spirit_install_res.class;
		case "spirit_uninstall_res":
			return spirit_uninstall_res.class;
		case "weapon_make_res":
			return weapon_make_res.class;
		case "weapon_levelup_res":
			return weapon_levelup_res.class;
		case "weapon_buylevel_res":
			return weapon_buylevel_res.class;
		case "weapon_starup_res":
			return weapon_starup_res.class;
		case "weapon_select_res":
			return weapon_select_res.class;
		case "weapon_sync_res":
			return weapon_sync_res.class;
		case "weapon_uskill_open_res":
			return weapon_uskill_open_res.class;
		case "weapon_setform_res":
			return weapon_setform_res.class;
		case "weaponmap_start_res":
			return weaponmap_start_res.class;
		case "pet_sync_res":
			return pet_sync_res.class;
		case "pet_make_res":
			return pet_make_res.class;
		case "pet_transform_res":
			return pet_transform_res.class;
		case "pet_levelup_res":
			return pet_levelup_res.class;
		case "pet_buylevel_res":
			return pet_buylevel_res.class;
		case "pet_starup_res":
			return pet_starup_res.class;
		case "pet_breakskillvlup_res":
			return pet_breakskillvlup_res.class;
		case "pet_worldmapset_res":
			return pet_worldmapset_res.class;
		case "pet_privatemapset_res":
			return pet_privatemapset_res.class;
		case "pet_sectmapset_res":
			return pet_sectmapset_res.class;
		case "pet_activitymapset_res":
			return pet_activitymapset_res.class;
		case "lifetaskmap_start_res":
			return lifetaskmap_start_res.class;
		case "petspirit_lvlup_res":
			return petspirit_lvlup_res.class;
		case "petspirit_learn_res":
			return petspirit_learn_res.class;
		case "petspirit_replace_res":
			return petspirit_replace_res.class;
		case "dtask_sync_res":
			return dtask_sync_res.class;
		case "dtask_take_res":
			return dtask_take_res.class;
		case "chtask_sync_res":
			return chtask_sync_res.class;
		case "chtask_take_res":
			return chtask_take_res.class;
		case "fame_sync_res":
			return fame_sync_res.class;
		case "fame_upgrade_res":
			return fame_upgrade_res.class;
		case "fame_take_res":
			return fame_take_res.class;
		case "onlinegift_sync_res":
			return onlinegift_sync_res.class;
		case "onlinegift_take_res":
			return onlinegift_take_res.class;
		case "offlineexp_take_res":
			return offlineexp_take_res.class;
		case "quizgift_sync_res":
			return quizgift_sync_res.class;
		case "quizgift_qrank_res":
			return quizgift_qrank_res.class;
		case "quizgift_answer_res":
			return quizgift_answer_res.class;
		case "sync_luckywheel_res":
			return sync_luckywheel_res.class;
		case "luckywheel_ondraw_res":
			return luckywheel_ondraw_res.class;
		case "luckywheel_buydrawtimes_res":
			return luckywheel_buydrawtimes_res.class;
		case "play_firework_res":
			return play_firework_res.class;
		case "notify_play_firework":
			return notify_play_firework.class;
		case "redenvelope_snatch_res":
			return redenvelope_snatch_res.class;
		case "redenvelope_notice":
			return redenvelope_notice.class;
		case "mtask_take_res":
			return mtask_take_res.class;
		case "mtask_quit_res":
			return mtask_quit_res.class;
		case "mtask_reward_res":
			return mtask_reward_res.class;
		case "wtask_reward_res":
			return wtask_reward_res.class;
		case "ptask_reward_res":
			return ptask_reward_res.class;
		case "petlifetask_take_res":
			return petlifetask_take_res.class;
		case "petlifetask_reward_res":
			return petlifetask_reward_res.class;
		case "task_useitem_res":
			return task_useitem_res.class;
		case "task_submititem_res":
			return task_submititem_res.class;
		case "pettask_submititem_res":
			return pettask_submititem_res.class;
		case "petlifetask_submititem_res":
			return petlifetask_submititem_res.class;
		case "task_dialog_res":
			return task_dialog_res.class;
		case "task_conveynpc_res":
			return task_conveynpc_res.class;
		case "task_conveyitem_res":
			return task_conveyitem_res.class;
		case "task_answer_res":
			return task_answer_res.class;
		case "task_randquestion_res":
			return task_randquestion_res.class;
		case "role_mine_res":
			return role_mine_res.class;
		case "set_attackmode_res":
			return set_attackmode_res.class;
		case "team_sync":
			return team_sync.class;
		case "team_join":
			return team_join.class;
		case "team_leave":
			return team_leave.class;
		case "team_kick":
			return team_kick.class;
		case "team_dissolve":
			return team_dissolve.class;
		case "team_change_leader":
			return team_change_leader.class;
		case "team_member_profile":
			return team_member_profile.class;
		case "team_member_hp":
			return team_member_hp.class;
		case "team_member_position":
			return team_member_position.class;
		case "team_member_connection":
			return team_member_connection.class;
		case "team_role_query_res":
			return team_role_query_res.class;
		case "team_invite_res":
			return team_invite_res.class;
		case "team_invite_forward":
			return team_invite_forward.class;
		case "team_invitedby_res":
			return team_invitedby_res.class;
		case "team_invite_refuse":
			return team_invite_refuse.class;
		case "team_invite_busy":
			return team_invite_busy.class;
		case "team_invite_lead":
			return team_invite_lead.class;
		case "team_apply_res":
			return team_apply_res.class;
		case "team_apply_forward":
			return team_apply_forward.class;
		case "team_appliedby_res":
			return team_appliedby_res.class;
		case "team_apply_refuse":
			return team_apply_refuse.class;
		case "team_leave_res":
			return team_leave_res.class;
		case "team_kick_res":
			return team_kick_res.class;
		case "team_dissolve_res":
			return team_dissolve_res.class;
		case "team_change_leader_res":
			return team_change_leader_res.class;
		case "team_self_res":
			return team_self_res.class;
		case "team_mapt_res":
			return team_mapt_res.class;
		case "team_mapr_res":
			return team_mapr_res.class;
		case "mroom_sync":
			return mroom_sync.class;
		case "mroom_join":
			return mroom_join.class;
		case "mroom_leave":
			return mroom_leave.class;
		case "mroom_kick":
			return mroom_kick.class;
		case "mroom_change_leader":
			return mroom_change_leader.class;
		case "mroom_member_connection":
			return mroom_member_connection.class;
		case "mroom_create_res":
			return mroom_create_res.class;
		case "mroom_enter_res":
			return mroom_enter_res.class;
		case "mroom_qenter_res":
			return mroom_qenter_res.class;
		case "mroom_invite_res":
			return mroom_invite_res.class;
		case "mroom_invite_forward":
			return mroom_invite_forward.class;
		case "mroom_invitedby_res":
			return mroom_invitedby_res.class;
		case "mroom_invite_refuse":
			return mroom_invite_refuse.class;
		case "mroom_invite_busy":
			return mroom_invite_busy.class;
		case "mroom_invite_fail":
			return mroom_invite_fail.class;
		case "mroom_leave_res":
			return mroom_leave_res.class;
		case "mroom_kick_res":
			return mroom_kick_res.class;
		case "mroom_change_leader_res":
			return mroom_change_leader_res.class;
		case "mroom_self_res":
			return mroom_self_res.class;
		case "mroom_mapr_res":
			return mroom_mapr_res.class;
		case "mroom_query_res":
			return mroom_query_res.class;
		case "sect_notice_application":
			return sect_notice_application.class;
		case "sect_notice_worship":
			return sect_notice_worship.class;
		case "sect_notice_banquet":
			return sect_notice_banquet.class;
		case "sect_notice_tasks":
			return sect_notice_tasks.class;
		case "sect_notice_sharedtaskreward":
			return sect_notice_sharedtaskreward.class;
		case "sect_sync_res":
			return sect_sync_res.class;
		case "sect_create_res":
			return sect_create_res.class;
		case "sect_queryapplied_res":
			return sect_queryapplied_res.class;
		case "sect_list_res":
			return sect_list_res.class;
		case "sect_query_res":
			return sect_query_res.class;
		case "sect_searchbyid_res":
			return sect_searchbyid_res.class;
		case "sect_searchbyname_res":
			return sect_searchbyname_res.class;
		case "sect_apply_res":
			return sect_apply_res.class;
		case "sect_qapply_res":
			return sect_qapply_res.class;
		case "sect_members_res":
			return sect_members_res.class;
		case "sect_applications_res":
			return sect_applications_res.class;
		case "sect_history_res":
			return sect_history_res.class;
		case "sect_appliedby_res":
			return sect_appliedby_res.class;
		case "sect_appliedbyall_res":
			return sect_appliedbyall_res.class;
		case "sect_kick_res":
			return sect_kick_res.class;
		case "sect_leave_res":
			return sect_leave_res.class;
		case "sect_disband_res":
			return sect_disband_res.class;
		case "sect_appoint_res":
			return sect_appoint_res.class;
		case "sect_changecreed_res":
			return sect_changecreed_res.class;
		case "sect_changename_res":
			return sect_changename_res.class;
		case "sect_changeicon_res":
			return sect_changeicon_res.class;
		case "sect_joinlvl_res":
			return sect_joinlvl_res.class;
		case "sect_sendemail_res":
			return sect_sendemail_res.class;
		case "sect_upgrade_res":
			return sect_upgrade_res.class;
		case "sect_accelerate_res":
			return sect_accelerate_res.class;
		case "sect_auraexpadd_res":
			return sect_auraexpadd_res.class;
		case "sect_aurasync_res":
			return sect_aurasync_res.class;
		case "sect_worship_res":
			return sect_worship_res.class;
		case "sect_syncworshipreward_res":
			return sect_syncworshipreward_res.class;
		case "sect_takeworshipreward_res":
			return sect_takeworshipreward_res.class;
		case "sect_openbanquet_res":
			return sect_openbanquet_res.class;
		case "sect_listbanquet_res":
			return sect_listbanquet_res.class;
		case "sect_joinbanquet_res":
			return sect_joinbanquet_res.class;
		case "sect_shopsync_res":
			return sect_shopsync_res.class;
		case "sect_shoprefresh_res":
			return sect_shoprefresh_res.class;
		case "sect_shopbuy_res":
			return sect_shopbuy_res.class;
		case "role_sectmap_start":
			return role_sectmap_start.class;
		case "role_sectmap_end":
			return role_sectmap_end.class;
		case "role_sectmap_result":
			return role_sectmap_result.class;
		case "sectmap_start_res":
			return sectmap_start_res.class;
		case "sectmap_status_res":
			return sectmap_status_res.class;
		case "sectmap_query_res":
			return sectmap_query_res.class;
		case "sectmap_open_res":
			return sectmap_open_res.class;
		case "sectmap_rewards_res":
			return sectmap_rewards_res.class;
		case "sectmap_apply_res":
			return sectmap_apply_res.class;
		case "sectmap_allocation_res":
			return sectmap_allocation_res.class;
		case "sectmap_damage_res":
			return sectmap_damage_res.class;
		case "sectmap_sync_res":
			return sectmap_sync_res.class;
		case "sect_task_sync_res":
			return sect_task_sync_res.class;
		case "sect_share_task_sync_start":
			return sect_share_task_sync_start.class;
		case "sect_share_task_sync_info":
			return sect_share_task_sync_info.class;
		case "sect_share_task_sync_end":
			return sect_share_task_sync_end.class;
		case "sect_share_task_sync_res":
			return sect_share_task_sync_res.class;
		case "sect_finish_task_sync_res":
			return sect_finish_task_sync_res.class;
		case "sect_task_receive_res":
			return sect_task_receive_res.class;
		case "sect_task_cancel_res":
			return sect_task_cancel_res.class;
		case "sect_task_finish_res":
			return sect_task_finish_res.class;
		case "sect_task_issuance_res":
			return sect_task_issuance_res.class;
		case "sect_task_reset_res":
			return sect_task_reset_res.class;
		case "sect_task_done_rewards_res":
			return sect_task_done_rewards_res.class;
		case "diyskill_sync_res":
			return diyskill_sync_res.class;
		case "diyskill_create_res":
			return diyskill_create_res.class;
		case "diyskill_save_res":
			return diyskill_save_res.class;
		case "diyskill_discard_res":
			return diyskill_discard_res.class;
		case "diyskill_selectuse_res":
			return diyskill_selectuse_res.class;
		case "diyskill_canceluse_res":
			return diyskill_canceluse_res.class;
		case "diyskill_unlock_res":
			return diyskill_unlock_res.class;
		case "diyskill_buytimes_res":
			return diyskill_buytimes_res.class;
		case "diyskill_share_res":
			return diyskill_share_res.class;
		case "diyskill_cancelshare_res":
			return diyskill_cancelshare_res.class;
		case "diyskill_borrow_res":
			return diyskill_borrow_res.class;
		case "diyskill_flaunt_res":
			return diyskill_flaunt_res.class;
		case "diyskill_shareaward_res":
			return diyskill_shareaward_res.class;
		case "sect_push_application_res":
			return sect_push_application_res.class;
		case "suite_buy_res":
			return suite_buy_res.class;
		case "store_buy_res":
			return store_buy_res.class;
		case "teleport_npc_res":
			return teleport_npc_res.class;
		case "teleport_monster_res":
			return teleport_monster_res.class;
		case "teleport_mineral_res":
			return teleport_mineral_res.class;
		case "arena_attacked":
			return arena_attacked.class;
		case "arena_sync_res":
			return arena_sync_res.class;
		case "arena_setpets_res":
			return arena_setpets_res.class;
		case "arena_ranks_res":
			return arena_ranks_res.class;
		case "arena_refresh_res":
			return arena_refresh_res.class;
		case "arena_defencepets_res":
			return arena_defencepets_res.class;
		case "arena_resetcool_res":
			return arena_resetcool_res.class;
		case "arena_buytimes_res":
			return arena_buytimes_res.class;
		case "arena_shopsync_res":
			return arena_shopsync_res.class;
		case "arena_shoprefresh_res":
			return arena_shoprefresh_res.class;
		case "arena_shopbuy_res":
			return arena_shopbuy_res.class;
		case "role_arenamap_start":
			return role_arenamap_start.class;
		case "role_arenamap_end":
			return role_arenamap_end.class;
		case "role_arena_result":
			return role_arena_result.class;
		case "arena_startattack_res":
			return arena_startattack_res.class;
		case "arena_log_res":
			return arena_log_res.class;
		case "arena_scoresync_res":
			return arena_scoresync_res.class;
		case "arena_takescore_res":
			return arena_takescore_res.class;
		case "arena_hidedefence_res":
			return arena_hidedefence_res.class;
		case "superarena_sync_res":
			return superarena_sync_res.class;
		case "superarena_setpets_res":
			return superarena_setpets_res.class;
		case "superarena_singlejoin_res":
			return superarena_singlejoin_res.class;
		case "superarena_teamjoin_res":
			return superarena_teamjoin_res.class;
		case "superarena_startmatch":
			return superarena_startmatch.class;
		case "superarena_join":
			return superarena_join.class;
		case "superarena_quit_res":
			return superarena_quit_res.class;
		case "superarena_shopsync_res":
			return superarena_shopsync_res.class;
		case "superarena_shoprefresh_res":
			return superarena_shoprefresh_res.class;
		case "superarena_shopbuy_res":
			return superarena_shopbuy_res.class;
		case "role_superarenamap_start":
			return role_superarenamap_start.class;
		case "role_superarenamap_end":
			return role_superarenamap_end.class;
		case "role_superarena_result":
			return role_superarena_result.class;
		case "aroom_create_res":
			return aroom_create_res.class;
		case "aroom_invite_res":
			return aroom_invite_res.class;
		case "aroom_invite_forward":
			return aroom_invite_forward.class;
		case "aroom_invitedby_res":
			return aroom_invitedby_res.class;
		case "aroom_leave_res":
			return aroom_leave_res.class;
		case "aroom_invite_refuse":
			return aroom_invite_refuse.class;
		case "aroom_invite_busy":
			return aroom_invite_busy.class;
		case "aroom_kick_res":
			return aroom_kick_res.class;
		case "aroom_change_leader_res":
			return aroom_change_leader_res.class;
		case "aroom_self_res":
			return aroom_self_res.class;
		case "aroom_mapr_res":
			return aroom_mapr_res.class;
		case "aroom_sync":
			return aroom_sync.class;
		case "aroom_join":
			return aroom_join.class;
		case "aroom_leave":
			return aroom_leave.class;
		case "aroom_kick":
			return aroom_kick.class;
		case "aroom_change_leader":
			return aroom_change_leader.class;
		case "aroom_member_overview":
			return aroom_member_overview.class;
		case "aroom_member_connection":
			return aroom_member_connection.class;
		case "superarena_weekrank_res":
			return superarena_weekrank_res.class;
		case "superarena_dayrank_res":
			return superarena_dayrank_res.class;
		case "bwarena_sync_res":
			return bwarena_sync_res.class;
		case "bwarena_setpet_res":
			return bwarena_setpet_res.class;
		case "bwarena_refresh_res":
			return bwarena_refresh_res.class;
		case "bwarena_buytimes_res":
			return bwarena_buytimes_res.class;
		case "bwarena_startattack_res":
			return bwarena_startattack_res.class;
		case "bwarena_takescore_res":
			return bwarena_takescore_res.class;
		case "bwarena_log_res":
			return bwarena_log_res.class;
		case "bwarena_ranks_res":
			return bwarena_ranks_res.class;
		case "role_bwarenamap_start":
			return role_bwarenamap_start.class;
		case "role_bwarenamap_end":
			return role_bwarenamap_end.class;
		case "role_bwarena_result":
			return role_bwarena_result.class;
		case "forcewar_sync_res":
			return forcewar_sync_res.class;
		case "forcewar_join_res":
			return forcewar_join_res.class;
		case "forcewar_quit_res":
			return forcewar_quit_res.class;
		case "forcewar_startmatch":
			return forcewar_startmatch.class;
		case "forcewar_match":
			return forcewar_match.class;
		case "forcewar_other_quit":
			return forcewar_other_quit.class;
		case "role_forcewarmap_start":
			return role_forcewarmap_start.class;
		case "role_forcewarmap_end":
			return role_forcewarmap_end.class;
		case "role_forcewar_result":
			return role_forcewar_result.class;
		case "froom_create_res":
			return froom_create_res.class;
		case "froom_invite_res":
			return froom_invite_res.class;
		case "froom_invite_forward":
			return froom_invite_forward.class;
		case "froom_invitedby_res":
			return froom_invitedby_res.class;
		case "froom_leave_res":
			return froom_leave_res.class;
		case "froom_invite_refuse":
			return froom_invite_refuse.class;
		case "froom_invite_busy":
			return froom_invite_busy.class;
		case "froom_kick_res":
			return froom_kick_res.class;
		case "froom_change_leader_res":
			return froom_change_leader_res.class;
		case "froom_mapr_res":
			return froom_mapr_res.class;
		case "froom_sync":
			return froom_sync.class;
		case "froom_join":
			return froom_join.class;
		case "froom_leave":
			return froom_leave.class;
		case "froom_kick":
			return froom_kick.class;
		case "froom_change_leader":
			return froom_change_leader.class;
		case "froom_member_overview":
			return froom_member_overview.class;
		case "froom_members_overview":
			return froom_members_overview.class;
		case "froom_member_connection":
			return froom_member_connection.class;
		case "bosses_sync_res":
			return bosses_sync_res.class;
		case "walktoboss_res":
			return walktoboss_res.class;
		case "transtoboss_res":
			return transtoboss_res.class;
		case "reset_transtime_res":
			return reset_transtime_res.class;
		case "boss_reward_res":
			return boss_reward_res.class;
		case "friend_sync_res":
			return friend_sync_res.class;
		case "friend_pluslist_res":
			return friend_pluslist_res.class;
		case "friend_recommend_res":
			return friend_recommend_res.class;
		case "friend_add_res":
			return friend_add_res.class;
		case "friend_search_res":
			return friend_search_res.class;
		case "friend_delete_res":
			return friend_delete_res.class;
		case "friend_givevit_res":
			return friend_givevit_res.class;
		case "friend_giveallvits_res":
			return friend_giveallvits_res.class;
		case "friend_receivevit_res":
			return friend_receivevit_res.class;
		case "friend_agreeadd_res":
			return friend_agreeadd_res.class;
		case "friend_add_push":
			return friend_add_push.class;
		case "friend_changemsg_res":
			return friend_changemsg_res.class;
		case "friend_changehead_res":
			return friend_changehead_res.class;
		case "friend_enemy_res":
			return friend_enemy_res.class;
		case "friend_removeenemy_res":
			return friend_removeenemy_res.class;
		case "friend_setfocus_res":
			return friend_setfocus_res.class;
		case "give_flower_res":
			return give_flower_res.class;
		case "get_flowerlog_res":
			return get_flowerlog_res.class;
		case "get_acceptlist_res":
			return get_acceptlist_res.class;
		case "auction_syncitems_res":
			return auction_syncitems_res.class;
		case "auction_syncselfitems_res":
			return auction_syncselfitems_res.class;
		case "auction_putonitems_res":
			return auction_putonitems_res.class;
		case "auction_putonequip_res":
			return auction_putonequip_res.class;
		case "auction_putoffitems_res":
			return auction_putoffitems_res.class;
		case "auction_buyitems_res":
			return auction_buyitems_res.class;
		case "auction_expand_res":
			return auction_expand_res.class;
		case "auction_tradelog_res":
			return auction_tradelog_res.class;
		case "auction_itemprices_res":
			return auction_itemprices_res.class;
		case "treasure_syncnpcs_res":
			return treasure_syncnpcs_res.class;
		case "treasure_refreshnpc_res":
			return treasure_refreshnpc_res.class;
		case "treasure_buypieces_res":
			return treasure_buypieces_res.class;
		case "treasure_npcreward_res":
			return treasure_npcreward_res.class;
		case "treasure_syncmap_res":
			return treasure_syncmap_res.class;
		case "treasure_makemap_res":
			return treasure_makemap_res.class;
		case "treasure_totalsearch_res":
			return treasure_totalsearch_res.class;
		case "treasure_search_res":
			return treasure_search_res.class;
		case "treasure_mapreward_res":
			return treasure_mapreward_res.class;
		case "treasure_quitmap_res":
			return treasure_quitmap_res.class;
		case "treasure_medalgrow_res":
			return treasure_medalgrow_res.class;
		case "horse_tame_res":
			return horse_tame_res.class;
		case "horse_use_res":
			return horse_use_res.class;
		case "horse_upstar_res":
			return horse_upstar_res.class;
		case "horse_enhance_res":
			return horse_enhance_res.class;
		case "horse_enhancesave_res":
			return horse_enhancesave_res.class;
		case "horse_changeshow_res":
			return horse_changeshow_res.class;
		case "horse_activateshow_res":
			return horse_activateshow_res.class;
		case "horse_learnskill_res":
			return horse_learnskill_res.class;
		case "sync_horse_skillLevel_res":
			return sync_horse_skillLevel_res.class;
		case "horse_skill_up_level_res":
			return horse_skill_up_level_res.class;
		case "horse_setskill_res":
			return horse_setskill_res.class;
		case "fashion_upwear_res":
			return fashion_upwear_res.class;
		case "fashion_setshow_res":
			return fashion_setshow_res.class;
		case "role_curfashions":
			return role_curfashions.class;
		case "seal_make_res":
			return seal_make_res.class;
		case "seal_upgrade_res":
			return seal_upgrade_res.class;
		case "seal_enhance_res":
			return seal_enhance_res.class;
		case "seal_save_enhance_res":
			return seal_save_enhance_res.class;
		case "expcoin_sync_res":
			return expcoin_sync_res.class;
		case "expcoin_extract_res":
			return expcoin_extract_res.class;
		case "rarebook_sync_res":
			return rarebook_sync_res.class;
		case "rarebook_push_res":
			return rarebook_push_res.class;
		case "rarebook_pop_res":
			return rarebook_pop_res.class;
		case "rarebook_unlock_res":
			return rarebook_unlock_res.class;
		case "rarebook_lvlup_res":
			return rarebook_lvlup_res.class;
		case "grasp_sync_res":
			return grasp_sync_res.class;
		case "grasp_dayforture_refresh":
			return grasp_dayforture_refresh.class;
		case "grasp_impl_res":
			return grasp_impl_res.class;
		case "grasp_reset_res":
			return grasp_reset_res.class;
		case "dmgtransfer_buypoint_res":
			return dmgtransfer_buypoint_res.class;
		case "dmgtransfer_putpoint_res":
			return dmgtransfer_putpoint_res.class;
		case "dmgtransfer_lvlup_res":
			return dmgtransfer_lvlup_res.class;
		case "dmgtransfer_reset_res":
			return dmgtransfer_reset_res.class;
		case "usersurvey_sync_res":
			return usersurvey_sync_res.class;
		case "usersurvey_submit_res":
			return usersurvey_submit_res.class;
		case "usersurvey_reward_res":
			return usersurvey_reward_res.class;
		case "cblogingift_sync_res":
			return cblogingift_sync_res.class;
		case "cblogingift_take_res":
			return cblogingift_take_res.class;
		case "cblvlupgift_sync_res":
			return cblvlupgift_sync_res.class;
		case "cblvlupgift_take_res":
			return cblvlupgift_take_res.class;
		case "userdata_sync_res":
			return userdata_sync_res.class;
		case "userdata_modify_res":
			return userdata_modify_res.class;
		case "userdata_reward_res":
			return userdata_reward_res.class;
		case "cbcountdowngift_sync_res":
			return cbcountdowngift_sync_res.class;
		case "cbcountdowngift_take_res":
			return cbcountdowngift_take_res.class;
		case "ontimegift_sync_res":
			return ontimegift_sync_res.class;
		case "ontimegift_take_res":
			return ontimegift_take_res.class;
		case "strengthengift_sync_res":
			return strengthengift_sync_res.class;
		case "strengthengift_take_res":
			return strengthengift_take_res.class;
		case "official_research_sync_res":
			return official_research_sync_res.class;
		case "official_research_take_res":
			return official_research_take_res.class;
		case "role_tempvip":
			return role_tempvip.class;
		case "permanenttitle_set_res":
			return permanenttitle_set_res.class;
		case "timedtitle_set_res":
			return timedtitle_set_res.class;
		case "titleslot_unlock_res":
			return titleslot_unlock_res.class;
		case "branch_task_take_res":
			return branch_task_take_res.class;
		case "branch_task_quit_res":
			return branch_task_quit_res.class;
		case "branch_task_finish_res":
			return branch_task_finish_res.class;
		case "sync_tower_res":
			return sync_tower_res.class;
		case "tower_record_res":
			return tower_record_res.class;
		case "tower_setpets_res":
			return tower_setpets_res.class;
		case "tower_startfight_res":
			return tower_startfight_res.class;
		case "role_towermap_sync":
			return role_towermap_sync.class;
		case "tower_buytimes_res":
			return tower_buytimes_res.class;
		case "tower_sweep_res":
			return tower_sweep_res.class;
		case "sync_towerfame_res":
			return sync_towerfame_res.class;
		case "tower_donate_res":
			return tower_donate_res.class;
		case "take_towerfame_res":
			return take_towerfame_res.class;
		case "enter_secretmap_res":
			return enter_secretmap_res.class;
		case "take_secretreward_res":
			return take_secretreward_res.class;
		case "sect_deliver_sync_res":
			return sect_deliver_sync_res.class;
		case "sect_deliver_refresh_res":
			return sect_deliver_refresh_res.class;
		case "sect_deliver_protect_res":
			return sect_deliver_protect_res.class;
		case "sect_deliver_begin_res":
			return sect_deliver_begin_res.class;
		case "sect_deliver_search_help_res":
			return sect_deliver_search_help_res.class;
		case "sect_deliver_on_help_res":
			return sect_deliver_on_help_res.class;
		case "sect_deliver_cancel_res":
			return sect_deliver_cancel_res.class;
		case "sect_deliver_finish_res":
			return sect_deliver_finish_res.class;
		case "sect_deliver_sync_wish_res":
			return sect_deliver_sync_wish_res.class;
		case "sect_deliver_add_wish_res":
			return sect_deliver_add_wish_res.class;
		case "sect_deliver_save_wish_res":
			return sect_deliver_save_wish_res.class;
		case "sect_deliver_help_push":
			return sect_deliver_help_push.class;
		case "sect_rob_task_take_res":
			return sect_rob_task_take_res.class;
		case "sect_rob_task_cancel_res":
			return sect_rob_task_cancel_res.class;
		case "sect_rob_flag":
			return sect_rob_flag.class;
		case "sect_rob_finish":
			return sect_rob_finish.class;
		case "destory_own_car":
			return destory_own_car.class;
		case "sect_deliver_shopsync_res":
			return sect_deliver_shopsync_res.class;
		case "sect_deliver_shoprefresh_res":
			return sect_deliver_shoprefresh_res.class;
		case "sect_deliver_shopbuy_res":
			return sect_deliver_shopbuy_res.class;
		case "produce_workshopsync_res":
			return produce_workshopsync_res.class;
		case "produce_createnewrecipe_res":
			return produce_createnewrecipe_res.class;
		case "produce_produce_res":
			return produce_produce_res.class;
		case "produce_split_res":
			return produce_split_res.class;
		case "produce_fusion_res":
			return produce_fusion_res.class;
		case "produce_splitspbuy_res":
			return produce_splitspbuy_res.class;
		case "bag_merge_res":
			return bag_merge_res.class;
		case "rmactivity_takereward_res":
			return rmactivity_takereward_res.class;
		case "role_rename_res":
			return role_rename_res.class;
		case "horse_ride_res":
			return horse_ride_res.class;
		case "horse_unride_res":
			return horse_unride_res.class;
		case "mulhorse_invite_res":
			return mulhorse_invite_res.class;
		case "mulhorse_invite_forward":
			return mulhorse_invite_forward.class;
		case "mulhorse_invitehandle_res":
			return mulhorse_invitehandle_res.class;
		case "mulhorse_invite_result":
			return mulhorse_invite_result.class;
		case "mulhorse_apply_res":
			return mulhorse_apply_res.class;
		case "mulhorse_apply_forward":
			return mulhorse_apply_forward.class;
		case "mulhorse_applyhandle_res":
			return mulhorse_applyhandle_res.class;
		case "mulhorse_apply_result":
			return mulhorse_apply_result.class;
		case "mulhorse_leave_res":
			return mulhorse_leave_res.class;
		case "mulhorse_kick_res":
			return mulhorse_kick_res.class;
		case "mulhorse_join":
			return mulhorse_join.class;
		case "mulhorse_leave":
			return mulhorse_leave.class;
		case "mulhorse_kick":
			return mulhorse_kick.class;
		case "staywith_invite_res":
			return staywith_invite_res.class;
		case "staywith_invite_forward":
			return staywith_invite_forward.class;
		case "staywith_invitehandle_res":
			return staywith_invitehandle_res.class;
		case "staywith_invite_result":
			return staywith_invite_result.class;
		case "staywith_join":
			return staywith_join.class;
		case "staywith_dissolve":
			return staywith_dissolve.class;
		case "staywith_leave_res":
			return staywith_leave_res.class;
		case "sync_message_board_res":
			return sync_message_board_res.class;
		case "add_message_board_res":
			return add_message_board_res.class;
		case "comment_message_board_res":
			return comment_message_board_res.class;
		case "change_message_board_content_res":
			return change_message_board_content_res.class;
		case "schedule_sync_res":
			return schedule_sync_res.class;
		case "schedule_mapreward_res":
			return schedule_mapreward_res.class;
		case "role_schedule_info":
			return role_schedule_info.class;
		case "role_touch_boss":
			return role_touch_boss.class;
		case "save_guide_mapcopy_res":
			return save_guide_mapcopy_res.class;
		case "sync_guide_mapcopy_step":
			return sync_guide_mapcopy_step.class;
		case "sect_invite_res":
			return sect_invite_res.class;
		case "sect_invite_response_res":
			return sect_invite_response_res.class;
		case "role_sect_invite":
			return role_sect_invite.class;
		case "role_refuse_sect_invite":
			return role_refuse_sect_invite.class;
		case "sect_invite_busy":
			return sect_invite_busy.class;
		case "role_armor_info":
			return role_armor_info.class;
		case "unlock_armor_type_res":
			return unlock_armor_type_res.class;
		case "armor_uprank_res":
			return armor_uprank_res.class;
		case "armor_add_talent_res":
			return armor_add_talent_res.class;
		case "armor_change_res":
			return armor_change_res.class;
		case "armor_up_level_res":
			return armor_up_level_res.class;
		case "rune_push_res":
			return rune_push_res.class;
		case "rune_pop_res":
			return rune_pop_res.class;
		case "reset_talent_point_res":
			return reset_talent_point_res.class;
		case "solt_group_unlock_res":
			return solt_group_unlock_res.class;
		case "solt_push_rune_res":
			return solt_push_rune_res.class;
		case "lang_push_rune_res":
			return lang_push_rune_res.class;
		case "rune_wish_res":
			return rune_wish_res.class;
		case "put_in_warehouse_res":
			return put_in_warehouse_res.class;
		case "take_out_warehouse_res":
			return take_out_warehouse_res.class;
		case "expand_warehouse_res":
			return expand_warehouse_res.class;
		case "sync_private_warehouse_res":
			return sync_private_warehouse_res.class;
		case "sync_public_warehouse_res":
			return sync_public_warehouse_res.class;
		case "propose_push":
			return propose_push.class;
		case "propose_res":
			return propose_res.class;
		case "propose_response_res":
			return propose_response_res.class;
		case "role_propose_response":
			return role_propose_response.class;
		case "marriage_sync_res":
			return marriage_sync_res.class;
		case "login_marriage_info":
			return login_marriage_info.class;
		case "divorce_res":
			return divorce_res.class;
		case "marriage_skill_levelup_res":
			return marriage_skill_levelup_res.class;
		case "transform_to_partner_res":
			return transform_to_partner_res.class;
		case "marriage_start_parade_res":
			return marriage_start_parade_res.class;
		case "marriage_start_banquet_res":
			return marriage_start_banquet_res.class;
		case "exchange_item_res":
			return exchange_item_res.class;
		case "exchange_item_times":
			return exchange_item_times.class;
		case "mrgseriestask_open_res":
			return mrgseriestask_open_res.class;
		case "mrgseriestask_take_res":
			return mrgseriestask_take_res.class;
		case "mrgseriestask_reward_res":
			return mrgseriestask_reward_res.class;
		case "role_mrgseriestask_open":
			return role_mrgseriestask_open.class;
		case "role_mrgseriestask_take":
			return role_mrgseriestask_take.class;
		case "role_mrgseriestask_reward":
			return role_mrgseriestask_reward.class;
		case "role_mrgseriestask_update":
			return role_mrgseriestask_update.class;
		case "mrglooptask_open_res":
			return mrglooptask_open_res.class;
		case "mrglooptask_take_res":
			return mrglooptask_take_res.class;
		case "mrglooptask_reward_res":
			return mrglooptask_reward_res.class;
		case "role_mrglooptask_open":
			return role_mrglooptask_open.class;
		case "role_mrglooptask_take":
			return role_mrglooptask_take.class;
		case "role_mrglooptask_reward":
			return role_mrglooptask_reward.class;
		case "role_mrglooptask_update":
			return role_mrglooptask_update.class;
		case "role_mrgtask":
			return role_mrgtask.class;
		case "save_skill_preset_res":
			return save_skill_preset_res.class;
		case "save_all_skill_preset_res":
			return save_all_skill_preset_res.class;
		case "save_spirits_preset_res":
			return save_spirits_preset_res.class;
		case "delete_skill_preset_res":
			return delete_skill_preset_res.class;
		case "delete_spirits_preset_res":
			return delete_spirits_preset_res.class;
		case "change_skill_preset_res":
			return change_skill_preset_res.class;
		case "change_spirits_preset_res":
			return change_spirits_preset_res.class;
		case "role_skill_preset":
			return role_skill_preset.class;
		case "sect_group_map_open_res":
			return sect_group_map_open_res.class;
		case "sect_group_map_enter_res":
			return sect_group_map_enter_res.class;
		case "sect_group_map_sync_res":
			return sect_group_map_sync_res.class;
		case "sect_group_map_end":
			return sect_group_map_end.class;
		case "weapon_skill_level_up_res":
			return weapon_skill_level_up_res.class;
		case "weapon_talent_level_up_res":
			return weapon_talent_level_up_res.class;
		case "weapon_talent_point_buy_res":
			return weapon_talent_point_buy_res.class;
		case "weapon_talent_point_reset_res":
			return weapon_talent_point_reset_res.class;
		case "send_gift_res":
			return send_gift_res.class;
		case "sync_big_map_flag_info_res":
			return sync_big_map_flag_info_res.class;
		case "map_flag_info":
			return map_flag_info.class;
		case "map_flag_sect_change":
			return map_flag_sect_change.class;
		case "role_item_props":
			return role_item_props.class;
		case "role_life_use":
			return role_life_use.class;
		case "pet_skill_level_up_res":
			return pet_skill_level_up_res.class;
		case "sync_special_card_res":
			return sync_special_card_res.class;
		case "take_special_card_reward_res":
			return take_special_card_reward_res.class;
		case "sync_daily_vit_reward_res":
			return sync_daily_vit_reward_res.class;
		case "take_daily_vit_reward_res":
			return take_daily_vit_reward_res.class;
		case "role_weapon_master":
			return role_weapon_master.class;
		case "role_activity_map_cur_process":
			return role_activity_map_cur_process.class;
		case "role_fame_level":
			return role_fame_level.class;
		case "try_open_insight_res":
			return try_open_insight_res.class;
		case "try_open_revenge_res":
			return try_open_revenge_res.class;
		case "try_sync_insight_res":
			return try_sync_insight_res.class;
		case "try_sync_revenge_res":
			return try_sync_revenge_res.class;
		case "try_transform_insight_res":
			return try_transform_insight_res.class;
		case "try_transform_revenge_res":
			return try_transform_revenge_res.class;
		case "heirloom_wipe_res":
			return heirloom_wipe_res.class;
		case "heirloom_takeout_res":
			return heirloom_takeout_res.class;
		case "role_heirloom_info":
			return role_heirloom_info.class;
		case "buy_offline_func_point_res":
			return buy_offline_func_point_res.class;
		case "role_offline_wizard":
			return role_offline_wizard.class;
		case "set_sect_qqgroup_res":
			return set_sect_qqgroup_res.class;
		case "role_level_exp":
			return role_level_exp.class;
		case "set_heirloom_display_res":
			return set_heirloom_display_res.class;
		case "feat_gambleshopsync_res":
			return feat_gambleshopsync_res.class;
		case "feat_gambleshoprefresh_res":
			return feat_gambleshoprefresh_res.class;
		case "feat_gambleshopbuy_res":
			return feat_gambleshopbuy_res.class;
		case "add_marriage_bespeak_res":
			return add_marriage_bespeak_res.class;
		case "sync_marriage_bespeak_res":
			return sync_marriage_bespeak_res.class;
		case "role_marriage_bespeak_time":
			return role_marriage_bespeak_time.class;
		case "role_marriage_here":
			return role_marriage_here.class;
		case "role_marriage_partner_name":
			return role_marriage_partner_name.class;
		case "role_survey_notice":
			return role_survey_notice.class;
		case "base_dummygoods_quick_buy_res":
			return base_dummygoods_quick_buy_res.class;
		case "role_marriage_step":
			return role_marriage_step.class;
		case "sect_history_broadcast":
			return sect_history_broadcast.class;
		case "activity_last_quick_done_res":
			return activity_last_quick_done_res.class;
		case "role_activity_last":
			return role_activity_last.class;
		case "stele_sync_res":
			return stele_sync_res.class;
		case "stele_join_res":
			return stele_join_res.class;
		case "stele_rank_res":
			return stele_rank_res.class;
		case "stele_teleport_res":
			return stele_teleport_res.class;
		case "role_stele":
			return role_stele.class;
		case "role_stele_card":
			return role_stele_card.class;
		case "blacklist_add_res":
			return blacklist_add_res.class;
		case "blacklist_del_res":
			return blacklist_del_res.class;
		case "blacklist_sync_res":
			return blacklist_sync_res.class;
		case "role_blacklist":
			return role_blacklist.class;
		case "demonhole_sync_res":
			return demonhole_sync_res.class;
		case "demonhole_join_res":
			return demonhole_join_res.class;
		case "demonhole_changefloor_res":
			return demonhole_changefloor_res.class;
		case "demonhole_battle_res":
			return demonhole_battle_res.class;
		case "role_demonhole_start":
			return role_demonhole_start.class;
		case "role_demonhole_end":
			return role_demonhole_end.class;
		case "role_demonholemap_sync":
			return role_demonholemap_sync.class;
		case "role_demonhole_result":
			return role_demonhole_result.class;
		case "justicemap_start_res":
			return justicemap_start_res.class;
		case "justicemap_day_enter_time":
			return justicemap_day_enter_time.class;
		case "emergency_sync_res":
			return emergency_sync_res.class;
		case "emergency_enter_res":
			return emergency_enter_res.class;
		case "emergency_rank_res":
			return emergency_rank_res.class;
		case "sync_prestige_num":
			return sync_prestige_num.class;
		case "role_emergency_map_end":
			return role_emergency_map_end.class;
		case "lucklystar_sync_res":
			return lucklystar_sync_res.class;
		case "lucklystar_gift_res":
			return lucklystar_gift_res.class;
		case "lucklystar_push":
			return lucklystar_push.class;
		case "recv_lucnlystar_by_role":
			return recv_lucnlystar_by_role.class;
		case "fightnpc_start_res":
			return fightnpc_start_res.class;
		case "fightnpc_reward_res":
			return fightnpc_reward_res.class;
		case "role_fightnpc":
			return role_fightnpc.class;
		case "role_fightnpcmap_start":
			return role_fightnpcmap_start.class;
		case "role_fightnpcmap_end":
			return role_fightnpcmap_end.class;
		case "role_fightnpcmap_result":
			return role_fightnpcmap_result.class;
		case "packetreward_sync_res":
			return packetreward_sync_res.class;
		case "packetreward_take_res":
			return packetreward_take_res.class;
		case "horse_enhance_prop_unlock_res":
			return horse_enhance_prop_unlock_res.class;
		case "role_cur_wizard_pet":
			return role_cur_wizard_pet.class;
		case "buy_wizard_pet_time_res":
			return buy_wizard_pet_time_res.class;
		case "set_cur_wizard_pet_res":
			return set_cur_wizard_pet_res.class;
		case "sync_item_unlock_head_res":
			return sync_item_unlock_head_res.class;
		case "socialmsg_send_res":
			return socialmsg_send_res.class;
		case "socialmsg_like_res":
			return socialmsg_like_res.class;
		case "socialmsg_dislike_res":
			return socialmsg_dislike_res.class;
		case "socialmsg_pageinfo_res":
			return socialmsg_pageinfo_res.class;
		case "npc_transfrom_res":
			return npc_transfrom_res.class;
		case "unlock_head_res":
			return unlock_head_res.class;
		case "towerdefence_start_res":
			return towerdefence_start_res.class;
		case "towerdefence_selectcard_res":
			return towerdefence_selectcard_res.class;
		case "role_towerdefence_autocard":
			return role_towerdefence_autocard.class;
		case "role_towerdefence_start":
			return role_towerdefence_start.class;
		case "role_towerdefence_end":
			return role_towerdefence_end.class;
		case "role_towerdefence_result":
			return role_towerdefence_result.class;
		case "role_towerdefence_info":
			return role_towerdefence_info.class;
		case "start_npc_map_res":
			return start_npc_map_res.class;
		case "role_day_npc_map_times":
			return role_day_npc_map_times.class;
		case "join_npc_pray_res":
			return join_npc_pray_res.class;
		case "role_day_npc_pray_times":
			return role_day_npc_pray_times.class;
		case "unlock_private_warehouse_res":
			return unlock_private_warehouse_res.class;
		case "role_show_props":
			return role_show_props.class;
		case "role_map_welcome_start":
			return role_map_welcome_start.class;
		case "role_map_welcome":
			return role_map_welcome.class;
		case "role_skills_cooldown":
			return role_skills_cooldown.class;
		case "role_spawn_point":
			return role_spawn_point.class;
		case "role_weaponlefttime":
			return role_weaponlefttime.class;
		case "role_curridehorse":
			return role_curridehorse.class;
		case "role_taskalter":
			return role_taskalter.class;
		case "role_petalter":
			return role_petalter.class;
		case "role_armor":
			return role_armor.class;
		case "role_escortcar":
			return role_escortcar.class;
		case "role_weddingcar":
			return role_weddingcar.class;
		case "role_weddingcar_destory":
			return role_weddingcar_destory.class;
		case "role_update_timetick":
			return role_update_timetick.class;
		case "client_ping_end":
			return client_ping_end.class;
		case "role_ghost":
			return role_ghost.class;
		case "nearby_upwear_fashion":
			return nearby_upwear_fashion.class;
		case "nearby_set_fashionshow":
			return nearby_set_fashionshow.class;
		case "nearby_role_updatetitle":
			return nearby_role_updatetitle.class;
		case "nearby_role_alterstate":
			return nearby_role_alterstate.class;
		case "nearby_ride_horse":
			return nearby_ride_horse.class;
		case "nearby_unride_horse":
			return nearby_unride_horse.class;
		case "nearby_role_endskill":
			return nearby_role_endskill.class;
		case "nearby_role_finishattack":
			return nearby_role_finishattack.class;
		case "nearby_pet_endskill":
			return nearby_pet_endskill.class;
		case "nearby_pet_finishattack":
			return nearby_pet_finishattack.class;
		case "nearby_monster_endskill":
			return nearby_monster_endskill.class;
		case "nearby_monster_finishattack":
			return nearby_monster_finishattack.class;
		case "nearby_blur_endskill":
			return nearby_blur_endskill.class;
		case "nearby_blur_finishattack":
			return nearby_blur_finishattack.class;
		case "nearby_skillentity_endskill":
			return nearby_skillentity_endskill.class;
		case "nearby_role_breakskill":
			return nearby_role_breakskill.class;
		case "nearby_pet_breakskill":
			return nearby_pet_breakskill.class;
		case "nearby_monster_breakskill":
			return nearby_monster_breakskill.class;
		case "nearby_blur_breakskill":
			return nearby_blur_breakskill.class;
		case "nearby_role_change_target":
			return nearby_role_change_target.class;
		case "nearby_role_change_rotation":
			return nearby_role_change_rotation.class;
		case "role_adjust_pos":
			return role_adjust_pos.class;
		case "pet_adjust_pos":
			return pet_adjust_pos.class;
		case "monster_adjust_pos":
			return monster_adjust_pos.class;
		case "nearby_enter_roles":
			return nearby_enter_roles.class;
		case "nearby_enter_pets":
			return nearby_enter_pets.class;
		case "nearby_enter_traps":
			return nearby_enter_traps.class;
		case "nearby_enter_escortcars":
			return nearby_enter_escortcars.class;
		case "nearby_enter_monsters":
			return nearby_enter_monsters.class;
		case "nearby_enter_blurs":
			return nearby_enter_blurs.class;
		case "nearby_enter_skillentitys":
			return nearby_enter_skillentitys.class;
		case "nearby_enter_npcs":
			return nearby_enter_npcs.class;
		case "nearby_enter_weddingcars":
			return nearby_enter_weddingcars.class;
		case "nearby_enter_minerals":
			return nearby_enter_minerals.class;
		case "nearby_enter_waypoints":
			return nearby_enter_waypoints.class;
		case "nearby_enter_mapbuffs":
			return nearby_enter_mapbuffs.class;
		case "nearby_enter_role":
			return nearby_enter_role.class;
		case "nearby_enter_pet":
			return nearby_enter_pet.class;
		case "nearby_spawn_monster":
			return nearby_spawn_monster.class;
		case "nearby_enter_monster":
			return nearby_enter_monster.class;
		case "nearby_enter_trap":
			return nearby_enter_trap.class;
		case "nearby_enter_npc":
			return nearby_enter_npc.class;
		case "nearby_enter_mineral":
			return nearby_enter_mineral.class;
		case "nearby_enter_waypoint":
			return nearby_enter_waypoint.class;
		case "nearby_enter_mapbuff":
			return nearby_enter_mapbuff.class;
		case "nearby_enter_skillentity":
			return nearby_enter_skillentity.class;
		case "nearby_enter_blur":
			return nearby_enter_blur.class;
		case "nearby_leave_roles":
			return nearby_leave_roles.class;
		case "nearby_leave_monsters":
			return nearby_leave_monsters.class;
		case "nearby_leave_traps":
			return nearby_leave_traps.class;
		case "nearby_leave_pets":
			return nearby_leave_pets.class;
		case "nearby_leave_escortcars":
			return nearby_leave_escortcars.class;
		case "nearby_leave_npcs":
			return nearby_leave_npcs.class;
		case "nearby_leave_weddingcars":
			return nearby_leave_weddingcars.class;
		case "nearby_leave_minerals":
			return nearby_leave_minerals.class;
		case "nearby_leave_waypoints":
			return nearby_leave_waypoints.class;
		case "nearby_leave_mapbuffs":
			return nearby_leave_mapbuffs.class;
		case "nearby_leave_skillentitys":
			return nearby_leave_skillentitys.class;
		case "nearby_leave_blurs":
			return nearby_leave_blurs.class;
		case "nearby_leave_role":
			return nearby_leave_role.class;
		case "nearby_leave_monster":
			return nearby_leave_monster.class;
		case "nearby_leave_trap":
			return nearby_leave_trap.class;
		case "nearby_leave_pet":
			return nearby_leave_pet.class;
		case "nearby_leave_npc":
			return nearby_leave_npc.class;
		case "nearby_leave_mineral":
			return nearby_leave_mineral.class;
		case "nearby_leave_waypoint":
			return nearby_leave_waypoint.class;
		case "nearby_leave_mapbuff":
			return nearby_leave_mapbuff.class;
		case "nearby_leave_skillentity":
			return nearby_leave_skillentity.class;
		case "nearby_leave_blur":
			return nearby_leave_blur.class;
		case "nearby_role_resetposition":
			return nearby_role_resetposition.class;
		case "nearby_role_updateposition":
			return nearby_role_updateposition.class;
		case "nearby_move_role":
			return nearby_move_role.class;
		case "nearby_pet_resetposition":
			return nearby_pet_resetposition.class;
		case "nearby_pet_updateposition":
			return nearby_pet_updateposition.class;
		case "nearby_move_pet":
			return nearby_move_pet.class;
		case "nearby_move_escortcar":
			return nearby_move_escortcar.class;
		case "nearby_move_monster":
			return nearby_move_monster.class;
		case "nearby_move_blur":
			return nearby_move_blur.class;
		case "nearby_move_skillentity":
			return nearby_move_skillentity.class;
		case "nearby_move_weddingcar":
			return nearby_move_weddingcar.class;
		case "nearby_stopmove_role":
			return nearby_stopmove_role.class;
		case "nearby_stopmove_pet":
			return nearby_stopmove_pet.class;
		case "nearby_stopmove_monster":
			return nearby_stopmove_monster.class;
		case "nearby_stopmove_escortcar":
			return nearby_stopmove_escortcar.class;
		case "nearby_stopmove_blur":
			return nearby_stopmove_blur.class;
		case "nearby_stopmove_skillentity":
			return nearby_stopmove_skillentity.class;
		case "nearby_stopmove_weddingcar":
			return nearby_stopmove_weddingcar.class;
		case "nearby_role_usefollowskill":
			return nearby_role_usefollowskill.class;
		case "nearby_role_socialaction":
			return nearby_role_socialaction.class;
		case "nearby_role_useskill":
			return nearby_role_useskill.class;
		case "nearby_role_usediyskill":
			return nearby_role_usediyskill.class;
		case "nearby_pet_useskill":
			return nearby_pet_useskill.class;
		case "nearby_monster_useskill":
			return nearby_monster_useskill.class;
		case "nearby_trap_useskill":
			return nearby_trap_useskill.class;
		case "nearby_blur_useskill":
			return nearby_blur_useskill.class;
		case "nearby_role_usechildskill":
			return nearby_role_usechildskill.class;
		case "nearby_pet_usechildskill":
			return nearby_pet_usechildskill.class;
		case "nearby_monster_usechildskill":
			return nearby_monster_usechildskill.class;
		case "nearby_blur_usechildskill":
			return nearby_blur_usechildskill.class;
		case "nearby_skillentity_usechildskill":
			return nearby_skillentity_usechildskill.class;
		case "nearby_role_usetrigskill":
			return nearby_role_usetrigskill.class;
		case "nearby_pet_usetrigskill":
			return nearby_pet_usetrigskill.class;
		case "nearby_monster_usetrigskill":
			return nearby_monster_usetrigskill.class;
		case "nearby_blur_usetrigskill":
			return nearby_blur_usetrigskill.class;
		case "nearby_first_blood":
			return nearby_first_blood.class;
		case "nearby_role_kill":
			return nearby_role_kill.class;
		case "nearby_processdamage_end":
			return nearby_processdamage_end.class;
		case "nearby_role_ondamage":
			return nearby_role_ondamage.class;
		case "nearby_pet_ondamage":
			return nearby_pet_ondamage.class;
		case "nearby_escortcar_ondamage":
			return nearby_escortcar_ondamage.class;
		case "nearby_monster_ondamage":
			return nearby_monster_ondamage.class;
		case "nearby_blur_ondamage":
			return nearby_blur_ondamage.class;
		case "nearby_role_addbuff":
			return nearby_role_addbuff.class;
		case "nearby_monster_addbuff":
			return nearby_monster_addbuff.class;
		case "nearby_pet_addbuff":
			return nearby_pet_addbuff.class;
		case "nearby_escortcar_addbuff":
			return nearby_escortcar_addbuff.class;
		case "nearby_blur_addbuff":
			return nearby_blur_addbuff.class;
		case "nearby_role_removebuff":
			return nearby_role_removebuff.class;
		case "nearby_monster_removebuff":
			return nearby_monster_removebuff.class;
		case "nearby_escortcar_removebuff":
			return nearby_escortcar_removebuff.class;
		case "nearby_pet_removebuff":
			return nearby_pet_removebuff.class;
		case "nearby_blur_removebuff":
			return nearby_blur_removebuff.class;
		case "nearby_role_dispelbuff":
			return nearby_role_dispelbuff.class;
		case "nearby_monster_dispelbuff":
			return nearby_monster_dispelbuff.class;
		case "nearby_pet_dispelbuff":
			return nearby_pet_dispelbuff.class;
		case "nearby_role_reduce":
			return nearby_role_reduce.class;
		case "nearby_pet_reduce":
			return nearby_pet_reduce.class;
		case "nearby_monster_reduce":
			return nearby_monster_reduce.class;
		case "nearby_role_buffdamage":
			return nearby_role_buffdamage.class;
		case "nearby_monster_buffdamage":
			return nearby_monster_buffdamage.class;
		case "nearby_escortcar_buffdamage":
			return nearby_escortcar_buffdamage.class;
		case "nearby_pet_buffdamage":
			return nearby_pet_buffdamage.class;
		case "nearby_blur_buffdamage":
			return nearby_blur_buffdamage.class;
		case "nearby_role_updatehp":
			return nearby_role_updatehp.class;
		case "nearby_monster_updatehp":
			return nearby_monster_updatehp.class;
		case "nearby_pet_updatehp":
			return nearby_pet_updatehp.class;
		case "nearby_blur_updatehp":
			return nearby_blur_updatehp.class;
		case "nearby_escortcar_updatehp":
			return nearby_escortcar_updatehp.class;
		case "nearby_escortcar_updatesocial":
			return nearby_escortcar_updatesocial.class;
		case "nearby_escortcar_updatestate":
			return nearby_escortcar_updatestate.class;
		case "nearby_escortcar_robbed":
			return nearby_escortcar_robbed.class;
		case "nearby_role_dead":
			return nearby_role_dead.class;
		case "nearby_pet_dead":
			return nearby_pet_dead.class;
		case "nearby_monster_dead":
			return nearby_monster_dead.class;
		case "nearby_blur_dead":
			return nearby_blur_dead.class;
		case "nearby_role_rushstart":
			return nearby_role_rushstart.class;
		case "nearby_pet_rushstart":
			return nearby_pet_rushstart.class;
		case "nearby_monster_rushstart":
			return nearby_monster_rushstart.class;
		case "nearby_monster_rushend":
			return nearby_monster_rushend.class;
		case "nearby_blur_rushstart":
			return nearby_blur_rushstart.class;
		case "nearby_blur_rushend":
			return nearby_blur_rushend.class;
		case "nearby_role_lvlup":
			return nearby_role_lvlup.class;
		case "nearby_role_updatepart":
			return nearby_role_updatepart.class;
		case "nearby_role_updatemaxhp":
			return nearby_role_updatemaxhp.class;
		case "nearby_role_carbehavior":
			return nearby_role_carbehavior.class;
		case "nearby_pet_updatemaxhp":
			return nearby_pet_updatemaxhp.class;
		case "nearby_escortcar_updatemaxhp":
			return nearby_escortcar_updatemaxhp.class;
		case "nearby_role_revive":
			return nearby_role_revive.class;
		case "nearby_pet_revive":
			return nearby_pet_revive.class;
		case "nearby_trap_changestate":
			return nearby_trap_changestate.class;
		case "nearby_role_updateequip":
			return nearby_role_updateequip.class;
		case "nearby_role_removeequip":
			return nearby_role_removeequip.class;
		case "nearby_role_motivateweapon":
			return nearby_role_motivateweapon.class;
		case "nearby_role_motivateend":
			return nearby_role_motivateend.class;
		case "nearby_role_mineralstart":
			return nearby_role_mineralstart.class;
		case "nearby_role_mineralend":
			return nearby_role_mineralend.class;
		case "nearby_mineral_updatestate":
			return nearby_mineral_updatestate.class;
		case "nearby_role_mineralbreak":
			return nearby_role_mineralbreak.class;
		case "nearby_shiftend_role":
			return nearby_shiftend_role.class;
		case "nearby_shiftend_pet":
			return nearby_shiftend_pet.class;
		case "nearby_shiftend_monster":
			return nearby_shiftend_monster.class;
		case "nearby_shiftend_blur":
			return nearby_shiftend_blur.class;
		case "nearby_addataunt_role":
			return nearby_addataunt_role.class;
		case "nearby_addataunt_pet":
			return nearby_addataunt_pet.class;
		case "nearby_addataunt_monster":
			return nearby_addataunt_monster.class;
		case "nearby_addataunt_blur":
			return nearby_addataunt_blur.class;
		case "nearby_addspa_monster":
			return nearby_addspa_monster.class;
		case "nearby_update_sectbrief":
			return nearby_update_sectbrief.class;
		case "nearby_role_addstate":
			return nearby_role_addstate.class;
		case "nearby_role_removestate":
			return nearby_role_removestate.class;
		case "role_addstate":
			return role_addstate.class;
		case "role_removestate":
			return role_removestate.class;
		case "pet_addstate":
			return pet_addstate.class;
		case "pet_removestate":
			return pet_removestate.class;
		case "role_revive":
			return role_revive.class;
		case "role_summon_pet":
			return role_summon_pet.class;
		case "role_unsummon_pet":
			return role_unsummon_pet.class;
		case "role_revive_pet":
			return role_revive_pet.class;
		case "pet_reset_position":
			return pet_reset_position.class;
		case "nearby_call_pet":
			return nearby_call_pet.class;
		case "nearby_dissolve_pet":
			return nearby_dissolve_pet.class;
		case "role_sync_durability":
			return role_sync_durability.class;
		case "role_sync_sp":
			return role_sync_sp.class;
		case "role_sync_bufffightSP":
			return role_sync_bufffightSP.class;
		case "role_sync_fightSP":
			return role_sync_fightSP.class;
		case "pet_sync_sp":
			return pet_sync_sp.class;
		case "motivate_state":
			return motivate_state.class;
		case "roles_detail":
			return roles_detail.class;
		case "traps_detail":
			return traps_detail.class;
		case "pets_detail":
			return pets_detail.class;
		case "drop_delete":
			return drop_delete.class;
		case "role_pickup_add":
			return role_pickup_add.class;
		case "role_sync_drops":
			return role_sync_drops.class;
		case "role_sync_alldrops":
			return role_sync_alldrops.class;
		case "role_mapbuff_add":
			return role_mapbuff_add.class;
		case "drop_mapbuff":
			return drop_mapbuff.class;
		case "privatemap_sync_progress":
			return privatemap_sync_progress.class;
		case "superarena_info":
			return superarena_info.class;
		case "update_curspawnarea":
			return update_curspawnarea.class;
		case "role_trig_skill":
			return role_trig_skill.class;
		case "pet_trig_skill":
			return pet_trig_skill.class;
		case "role_update_pkvalue":
			return role_update_pkvalue.class;
		case "nearby_update_pkinfo":
			return nearby_update_pkinfo.class;
		case "role_reset_skill":
			return role_reset_skill.class;
		case "pet_reset_skill":
			return pet_reset_skill.class;
		case "role_quickcool_skill":
			return role_quickcool_skill.class;
		case "pet_quickcool_skill":
			return pet_quickcool_skill.class;
		case "role_forcewar_score":
			return role_forcewar_score.class;
		case "forcewar_members_position":
			return forcewar_members_position.class;
		case "role_forcewar_statues":
			return role_forcewar_statues.class;
		case "roles_forcewaroverview":
			return roles_forcewaroverview.class;
		case "role_forcewar_kill":
			return role_forcewar_kill.class;
		case "role_forcewar_assist":
			return role_forcewar_assist.class;
		case "nearby_forcewar_statues":
			return nearby_forcewar_statues.class;
		case "nearby_forcewar_campscore":
			return nearby_forcewar_campscore.class;
		case "forcewar_first_blood":
			return forcewar_first_blood.class;
		case "nearby_forcewar_kill":
			return nearby_forcewar_kill.class;
		case "nearby_role_rename":
			return nearby_role_rename.class;
		case "role_mulhorse":
			return role_mulhorse.class;
		case "role_leave_mulhorse":
			return role_leave_mulhorse.class;
		case "role_update_mulhorse":
			return role_update_mulhorse.class;
		case "nearby_update_mulhorse":
			return nearby_update_mulhorse.class;
		case "role_staywith":
			return role_staywith.class;
		case "role_dissolve_staywith":
			return role_dissolve_staywith.class;
		case "nearby_role_staywith":
			return nearby_role_staywith.class;
		case "nearby_dissolve_staywith":
			return nearby_dissolve_staywith.class;
		case "boss_damage_rank":
			return boss_damage_rank.class;
		case "boss_damage_close":
			return boss_damage_close.class;
		case "nearby_role_updatearmor":
			return nearby_role_updatearmor.class;
		case "role_armorfreeze_update":
			return role_armorfreeze_update.class;
		case "role_armorval_update":
			return role_armorval_update.class;
		case "role_armorweak_update":
			return role_armorweak_update.class;
		case "nearby_role_armorweak":
			return nearby_role_armorweak.class;
		case "superarena_race_result":
			return superarena_race_result.class;
		case "superarena_race_results":
			return superarena_race_results.class;
		case "sect_group_map_sync_info":
			return sect_group_map_sync_info.class;
		case "enter_sect_group_map":
			return enter_sect_group_map.class;
		case "role_double_drop":
			return role_double_drop.class;
		case "world_boss_pop":
			return world_boss_pop.class;
		case "entity_nearby":
			return entity_nearby.class;
		case "nearby_role_updateheirloom":
			return nearby_role_updateheirloom.class;
		case "nearby_role_updatewizardpet":
			return nearby_role_updatewizardpet.class;
		case "map_copy_damage_rank":
			return map_copy_damage_rank.class;
		case "receive_towerdefence_alarm":
			return receive_towerdefence_alarm.class;
		case "towerdefence_npc_pop":
			return towerdefence_npc_pop.class;
		case "towerdefence_spawn_monsters":
			return towerdefence_spawn_monsters.class;
		case "towerdefence_npc_info":
			return towerdefence_npc_info.class;
		case "towerdefence_npc_dead":
			return towerdefence_npc_dead.class;
		case "sync_role_forcetype":
			return sync_role_forcetype.class;
		case "sync_role_mapskill":
			return sync_role_mapskill.class;
		case "role_usemapskill_ok":
			return role_usemapskill_ok.class;
		case "client_ping":
			return client_ping.class;
		case "keep_alive":
			return keep_alive.class;
		case "user_login_req":
			return user_login_req.class;
		case "role_logout_req":
			return role_logout_req.class;
		case "query_loginqueue_pos":
			return query_loginqueue_pos.class;
		case "cancel_loginqueue":
			return cancel_loginqueue.class;
		case "role_sync_map":
			return role_sync_map.class;
		case "msg_send_req":
			return msg_send_req.class;
		case "master_apply_req":
			return master_apply_req.class;
		case "master_offer_req":
			return master_offer_req.class;
		case "master_accept_offer_req":
			return master_accept_offer_req.class;
		case "master_accept_apply_req":
			return master_accept_apply_req.class;
		case "master_betray_req":
			return master_betray_req.class;
		case "master_graduate_req":
			return master_graduate_req.class;
		case "master_agree_graduate_req":
			return master_agree_graduate_req.class;
		case "master_dismiss_req":
			return master_dismiss_req.class;
		case "master_get_announce_req":
			return master_get_announce_req.class;
		case "master_set_announce_req":
			return master_set_announce_req.class;
		case "master_del_announce_req":
			return master_del_announce_req.class;
		case "master_info_req":
			return master_info_req.class;
		case "master_msg_list_req":
			return master_msg_list_req.class;
		case "master_remove_betray_msg_req":
			return master_remove_betray_msg_req.class;
		case "master_list_req":
			return master_list_req.class;
		case "master_list_apprentice_req":
			return master_list_apprentice_req.class;
		case "master_tasks_req":
			return master_tasks_req.class;
		case "master_shopsync_req":
			return master_shopsync_req.class;
		case "master_shoprefresh_req":
			return master_shoprefresh_req.class;
		case "master_shopbuy_req":
			return master_shopbuy_req.class;
		case "role_enter_map":
			return role_enter_map.class;
		case "waypoint_enter_req":
			return waypoint_enter_req.class;
		case "wrongpos_leave_req":
			return wrongpos_leave_req.class;
		case "worldline_sync_req":
			return worldline_sync_req.class;
		case "worldline_change_req":
			return worldline_change_req.class;
		case "query_rolebrief_req":
			return query_rolebrief_req.class;
		case "query_robot_req":
			return query_robot_req.class;
		case "query_rolefeature_req":
			return query_rolefeature_req.class;
		case "query_petoverviews_req":
			return query_petoverviews_req.class;
		case "query_weaponoverviews_req":
			return query_weaponoverviews_req.class;
		case "role_revive_insitu_req":
			return role_revive_insitu_req.class;
		case "role_revive_other_req":
			return role_revive_other_req.class;
		case "role_revive_safe_req":
			return role_revive_safe_req.class;
		case "role_transform_req":
			return role_transform_req.class;
		case "checkin_sync_req":
			return checkin_sync_req.class;
		case "checkin_take_req":
			return checkin_take_req.class;
		case "mall_sync_req":
			return mall_sync_req.class;
		case "mall_buy_req":
			return mall_buy_req.class;
		case "benefit_sync_req":
			return benefit_sync_req.class;
		case "payactivity_sync_req":
			return payactivity_sync_req.class;
		case "firstpaygift_sync_req":
			return firstpaygift_sync_req.class;
		case "firstpaygift_take_req":
			return firstpaygift_take_req.class;
		case "dailypaygift_sync_req":
			return dailypaygift_sync_req.class;
		case "dailypaygift_take_req":
			return dailypaygift_take_req.class;
		case "lastpaygift_sync_req":
			return lastpaygift_sync_req.class;
		case "lastpaygift_take_req":
			return lastpaygift_take_req.class;
		case "activitychallengegift_sync_req":
			return activitychallengegift_sync_req.class;
		case "activitychallengegift_take_req":
			return activitychallengegift_take_req.class;
		case "upgradepurchase_sync_req":
			return upgradepurchase_sync_req.class;
		case "upgradepurchase_buy_req":
			return upgradepurchase_buy_req.class;
		case "paygift_sync_req":
			return paygift_sync_req.class;
		case "paygift_take_req":
			return paygift_take_req.class;
		case "consumegift_sync_req":
			return consumegift_sync_req.class;
		case "consumegift_take_req":
			return consumegift_take_req.class;
		case "upgradegift_sync_req":
			return upgradegift_sync_req.class;
		case "upgradegift_take_req":
			return upgradegift_take_req.class;
		case "investmentfund_sync_req":
			return investmentfund_sync_req.class;
		case "investmentfund_buy_req":
			return investmentfund_buy_req.class;
		case "investmentfund_take_req":
			return investmentfund_take_req.class;
		case "growthfund_sync_req":
			return growthfund_sync_req.class;
		case "growthfund_buy_req":
			return growthfund_buy_req.class;
		case "growthfund_take_req":
			return growthfund_take_req.class;
		case "doubledrop_sync_req":
			return doubledrop_sync_req.class;
		case "extradrop_sync_req":
			return extradrop_sync_req.class;
		case "exchangegift_sync_req":
			return exchangegift_sync_req.class;
		case "exchangegift_take_req":
			return exchangegift_take_req.class;
		case "logingift_sync_req":
			return logingift_sync_req.class;
		case "logingift_take_req":
			return logingift_take_req.class;
		case "giftpackage_sync_req":
			return giftpackage_sync_req.class;
		case "giftpackage_take_req":
			return giftpackage_take_req.class;
		case "pbtcashback_sync_req":
			return pbtcashback_sync_req.class;
		case "pbtcashback_take_req":
			return pbtcashback_take_req.class;
		case "payrank_sync_req":
			return payrank_sync_req.class;
		case "groupbuy_sync_req":
			return groupbuy_sync_req.class;
		case "groupbuy_buy_req":
			return groupbuy_buy_req.class;
		case "flashsale_sync_req":
			return flashsale_sync_req.class;
		case "flashsale_buy_req":
			return flashsale_buy_req.class;
		case "luckyroll_sync_req":
			return luckyroll_sync_req.class;
		case "luckyroll_play_req":
			return luckyroll_play_req.class;
		case "directpurchase_sync_req":
			return directpurchase_sync_req.class;
		case "directpurchase_take_req":
			return directpurchase_take_req.class;
		case "onearmbandit_sync_req":
			return onearmbandit_sync_req.class;
		case "onearmbandit_take_req":
			return onearmbandit_take_req.class;
		case "adver_sync_req":
			return adver_sync_req.class;
		case "mapcopy_leave_req":
			return mapcopy_leave_req.class;
		case "normalmap_start_req":
			return normalmap_start_req.class;
		case "activitymap_start_req":
			return activitymap_start_req.class;
		case "commonmap_selectcard_req":
			return commonmap_selectcard_req.class;
		case "normalmap_buytimes_req":
			return normalmap_buytimes_req.class;
		case "activitymap_buytimes_req":
			return activitymap_buytimes_req.class;
		case "privatemap_sweep_req":
			return privatemap_sweep_req.class;
		case "activity_sweep_req":
			return activity_sweep_req.class;
		case "mail_syncsys_req":
			return mail_syncsys_req.class;
		case "mail_synctmp_req":
			return mail_synctmp_req.class;
		case "mail_read_req":
			return mail_read_req.class;
		case "mail_readsys_req":
			return mail_readsys_req.class;
		case "mail_readtmp_req":
			return mail_readtmp_req.class;
		case "mail_take_req":
			return mail_take_req.class;
		case "mail_takesys_req":
			return mail_takesys_req.class;
		case "mail_taketmp_req":
			return mail_taketmp_req.class;
		case "mail_del_req":
			return mail_del_req.class;
		case "mail_delsys_req":
			return mail_delsys_req.class;
		case "mail_deltmp_req":
			return mail_deltmp_req.class;
		case "mail_takeallsys_req":
			return mail_takeallsys_req.class;
		case "mail_takealltmp_req":
			return mail_takealltmp_req.class;
		case "rollnotice_query":
			return rollnotice_query.class;
		case "rank_sync_req":
			return rank_sync_req.class;
		case "sectrank_sync_req":
			return sectrank_sync_req.class;
		case "rank_get_req":
			return rank_get_req.class;
		case "sectrank_get_req":
			return sectrank_get_req.class;
		case "rank_self_req":
			return rank_self_req.class;
		case "sectrank_self_req":
			return sectrank_self_req.class;
		case "buy_coin_req":
			return buy_coin_req.class;
		case "buy_vit_req":
			return buy_vit_req.class;
		case "pay_sync_req":
			return pay_sync_req.class;
		case "pay_asgod_req":
			return pay_asgod_req.class;
		case "vip_take_req":
			return vip_take_req.class;
		case "bag_expand_req":
			return bag_expand_req.class;
		case "bag_sellequip_req":
			return bag_sellequip_req.class;
		case "bag_sellitem_req":
			return bag_sellitem_req.class;
		case "bag_sellgem_req":
			return bag_sellgem_req.class;
		case "bag_sellbook_req":
			return bag_sellbook_req.class;
		case "bag_batchsellequips_req":
			return bag_batchsellequips_req.class;
		case "bag_batchsellitems_req":
			return bag_batchsellitems_req.class;
		case "bag_batchsellgems_req":
			return bag_batchsellgems_req.class;
		case "bag_batchsellbooks_req":
			return bag_batchsellbooks_req.class;
		case "bag_useitemgift_req":
			return bag_useitemgift_req.class;
		case "bag_useitemcoin_req":
			return bag_useitemcoin_req.class;
		case "bag_useitemdiamond_req":
			return bag_useitemdiamond_req.class;
		case "bag_useitemexp_req":
			return bag_useitemexp_req.class;
		case "bag_useitemhp_req":
			return bag_useitemhp_req.class;
		case "bag_useitemhppool_req":
			return bag_useitemhppool_req.class;
		case "bag_useitemchest_req":
			return bag_useitemchest_req.class;
		case "bag_useitemequipenergy_req":
			return bag_useitemequipenergy_req.class;
		case "bag_useitemgemenergy_req":
			return bag_useitemgemenergy_req.class;
		case "bag_useiteminspiration_req":
			return bag_useiteminspiration_req.class;
		case "bag_useitemvit_req":
			return bag_useitemvit_req.class;
		case "bag_useitemfashion_req":
			return bag_useitemfashion_req.class;
		case "bag_useitemexpcoinpool_req":
			return bag_useitemexpcoinpool_req.class;
		case "bag_usemonthlycard_req":
			return bag_usemonthlycard_req.class;
		case "bag_usevipcard_req":
			return bag_usevipcard_req.class;
		case "bag_useitemfeat_req":
			return bag_useitemfeat_req.class;
		case "bag_useitemskill_req":
			return bag_useitemskill_req.class;
		case "bag_useitemletter_req":
			return bag_useitemletter_req.class;
		case "bag_useitemevil_req":
			return bag_useitemevil_req.class;
		case "bag_piececompose_req":
			return bag_piececompose_req.class;
		case "bag_useitempropstrength_req":
			return bag_useitempropstrength_req.class;
		case "bag_useitemofflinefuncpoint_req":
			return bag_useitemofflinefuncpoint_req.class;
		case "bag_useitemtitle_req":
			return bag_useitemtitle_req.class;
		case "bag_useitemuskill_req":
			return bag_useitemuskill_req.class;
		case "bag_useitemhead_req":
			return bag_useitemhead_req.class;
		case "equip_upwear_req":
			return equip_upwear_req.class;
		case "equip_downwear_req":
			return equip_downwear_req.class;
		case "equip_levelup_req":
			return equip_levelup_req.class;
		case "equip_batchlevelup_req":
			return equip_batchlevelup_req.class;
		case "equip_starup_req":
			return equip_starup_req.class;
		case "equip_repair_req":
			return equip_repair_req.class;
		case "equip_autoupwear_req":
			return equip_autoupwear_req.class;
		case "gem_levelup_req":
			return gem_levelup_req.class;
		case "gem_inlay_req":
			return gem_inlay_req.class;
		case "gem_unlay_req":
			return gem_unlay_req.class;
		case "equip_refine_req":
			return equip_refine_req.class;
		case "legend_sync_req":
			return legend_sync_req.class;
		case "legend_make_req":
			return legend_make_req.class;
		case "legend_quit_req":
			return legend_quit_req.class;
		case "legend_save_req":
			return legend_save_req.class;
		case "skill_select_req":
			return skill_select_req.class;
		case "skill_levelup_req":
			return skill_levelup_req.class;
		case "skill_enhance_req":
			return skill_enhance_req.class;
		case "skill_unlock_req":
			return skill_unlock_req.class;
		case "uniqueskill_set_req":
			return uniqueskill_set_req.class;
		case "spirit_learn_req":
			return spirit_learn_req.class;
		case "spirit_levelup_req":
			return spirit_levelup_req.class;
		case "spirit_install_req":
			return spirit_install_req.class;
		case "spirit_uninstall_req":
			return spirit_uninstall_req.class;
		case "weapon_make_req":
			return weapon_make_req.class;
		case "weapon_levelup_req":
			return weapon_levelup_req.class;
		case "weapon_buylevel_req":
			return weapon_buylevel_req.class;
		case "weapon_starup_req":
			return weapon_starup_req.class;
		case "weapon_select_req":
			return weapon_select_req.class;
		case "weapon_sync_req":
			return weapon_sync_req.class;
		case "weapon_uskill_open_req":
			return weapon_uskill_open_req.class;
		case "weapon_setform_req":
			return weapon_setform_req.class;
		case "weaponmap_start_req":
			return weaponmap_start_req.class;
		case "pet_sync_req":
			return pet_sync_req.class;
		case "pet_make_req":
			return pet_make_req.class;
		case "pet_transform_req":
			return pet_transform_req.class;
		case "pet_levelup_req":
			return pet_levelup_req.class;
		case "pet_buylevel_req":
			return pet_buylevel_req.class;
		case "pet_starup_req":
			return pet_starup_req.class;
		case "pet_breakskillvlup_req":
			return pet_breakskillvlup_req.class;
		case "pet_worldmapset_req":
			return pet_worldmapset_req.class;
		case "pet_privatemapset_req":
			return pet_privatemapset_req.class;
		case "pet_sectmapset_req":
			return pet_sectmapset_req.class;
		case "pet_activitymapset_req":
			return pet_activitymapset_req.class;
		case "lifetaskmap_start_req":
			return lifetaskmap_start_req.class;
		case "petspirit_lvlup_req":
			return petspirit_lvlup_req.class;
		case "petspirit_learn_req":
			return petspirit_learn_req.class;
		case "petspirit_replace_req":
			return petspirit_replace_req.class;
		case "dtask_sync_req":
			return dtask_sync_req.class;
		case "dtask_take_req":
			return dtask_take_req.class;
		case "chtask_sync_req":
			return chtask_sync_req.class;
		case "chtask_take_req":
			return chtask_take_req.class;
		case "fame_sync_req":
			return fame_sync_req.class;
		case "fame_upgrade_req":
			return fame_upgrade_req.class;
		case "fame_take_req":
			return fame_take_req.class;
		case "onlinegift_sync_req":
			return onlinegift_sync_req.class;
		case "onlinegift_take_req":
			return onlinegift_take_req.class;
		case "offlineexp_take_req":
			return offlineexp_take_req.class;
		case "quizgift_sync_req":
			return quizgift_sync_req.class;
		case "quizgift_qrank_req":
			return quizgift_qrank_req.class;
		case "quizgift_answer_req":
			return quizgift_answer_req.class;
		case "sync_luckywheel_req":
			return sync_luckywheel_req.class;
		case "luckywheel_ondraw_req":
			return luckywheel_ondraw_req.class;
		case "luckywheel_buydrawtimes_req":
			return luckywheel_buydrawtimes_req.class;
		case "play_firework_req":
			return play_firework_req.class;
		case "redenvelope_snatch_req":
			return redenvelope_snatch_req.class;
		case "mtask_take_req":
			return mtask_take_req.class;
		case "mtask_quit_req":
			return mtask_quit_req.class;
		case "mtask_reward_req":
			return mtask_reward_req.class;
		case "wtask_reward_req":
			return wtask_reward_req.class;
		case "ptask_reward_req":
			return ptask_reward_req.class;
		case "petlifetask_take_req":
			return petlifetask_take_req.class;
		case "petlifetask_reward_req":
			return petlifetask_reward_req.class;
		case "task_useitem_req":
			return task_useitem_req.class;
		case "task_submititem_req":
			return task_submititem_req.class;
		case "pettask_submititem_req":
			return pettask_submititem_req.class;
		case "petlifetask_submititem_req":
			return petlifetask_submititem_req.class;
		case "task_dialog_req":
			return task_dialog_req.class;
		case "task_conveynpc_req":
			return task_conveynpc_req.class;
		case "task_conveyitem_req":
			return task_conveyitem_req.class;
		case "task_answer_req":
			return task_answer_req.class;
		case "task_randquestion_req":
			return task_randquestion_req.class;
		case "pet_revive_req":
			return pet_revive_req.class;
		case "role_mine_req":
			return role_mine_req.class;
		case "set_attackmode_req":
			return set_attackmode_req.class;
		case "team_query_member":
			return team_query_member.class;
		case "team_invite_req":
			return team_invite_req.class;
		case "team_invitedby_req":
			return team_invitedby_req.class;
		case "team_apply_req":
			return team_apply_req.class;
		case "team_appliedby_req":
			return team_appliedby_req.class;
		case "team_leave_req":
			return team_leave_req.class;
		case "team_kick_req":
			return team_kick_req.class;
		case "team_dissolve_req":
			return team_dissolve_req.class;
		case "team_change_leader_req":
			return team_change_leader_req.class;
		case "team_role_query_req":
			return team_role_query_req.class;
		case "team_self_req":
			return team_self_req.class;
		case "team_mapt_req":
			return team_mapt_req.class;
		case "team_mapr_req":
			return team_mapr_req.class;
		case "mroom_create_req":
			return mroom_create_req.class;
		case "mroom_enter_req":
			return mroom_enter_req.class;
		case "mroom_qenter_req":
			return mroom_qenter_req.class;
		case "mroom_invite_req":
			return mroom_invite_req.class;
		case "mroom_invitedby_req":
			return mroom_invitedby_req.class;
		case "mroom_leave_req":
			return mroom_leave_req.class;
		case "mroom_kick_req":
			return mroom_kick_req.class;
		case "mroom_change_leader_req":
			return mroom_change_leader_req.class;
		case "mroom_self_req":
			return mroom_self_req.class;
		case "mroom_mapr_req":
			return mroom_mapr_req.class;
		case "mroom_query_req":
			return mroom_query_req.class;
		case "sect_sync_req":
			return sect_sync_req.class;
		case "sect_create_req":
			return sect_create_req.class;
		case "sect_queryapplied_req":
			return sect_queryapplied_req.class;
		case "sect_list_req":
			return sect_list_req.class;
		case "sect_query_req":
			return sect_query_req.class;
		case "sect_searchbyid_req":
			return sect_searchbyid_req.class;
		case "sect_searchbyname_req":
			return sect_searchbyname_req.class;
		case "sect_apply_req":
			return sect_apply_req.class;
		case "sect_qapply_req":
			return sect_qapply_req.class;
		case "sect_members_req":
			return sect_members_req.class;
		case "sect_applications_req":
			return sect_applications_req.class;
		case "sect_history_req":
			return sect_history_req.class;
		case "sect_appliedby_req":
			return sect_appliedby_req.class;
		case "sect_appliedbyall_req":
			return sect_appliedbyall_req.class;
		case "sect_appoint_req":
			return sect_appoint_req.class;
		case "sect_kick_req":
			return sect_kick_req.class;
		case "sect_leave_req":
			return sect_leave_req.class;
		case "sect_disband_req":
			return sect_disband_req.class;
		case "sect_changecreed_req":
			return sect_changecreed_req.class;
		case "sect_changename_req":
			return sect_changename_req.class;
		case "sect_changeicon_req":
			return sect_changeicon_req.class;
		case "sect_joinlvl_req":
			return sect_joinlvl_req.class;
		case "sect_sendemail_req":
			return sect_sendemail_req.class;
		case "sect_upgrade_req":
			return sect_upgrade_req.class;
		case "sect_accelerate_req":
			return sect_accelerate_req.class;
		case "sect_aurasync_req":
			return sect_aurasync_req.class;
		case "sect_auraexpadd_req":
			return sect_auraexpadd_req.class;
		case "sect_worship_req":
			return sect_worship_req.class;
		case "sect_syncworshipreward_req":
			return sect_syncworshipreward_req.class;
		case "sect_takeworshipreward_req":
			return sect_takeworshipreward_req.class;
		case "sect_openbanquet_req":
			return sect_openbanquet_req.class;
		case "sect_listbanquet_req":
			return sect_listbanquet_req.class;
		case "sect_joinbanquet_req":
			return sect_joinbanquet_req.class;
		case "sect_shopsync_req":
			return sect_shopsync_req.class;
		case "sect_shoprefresh_req":
			return sect_shoprefresh_req.class;
		case "sect_shopbuy_req":
			return sect_shopbuy_req.class;
		case "sectmap_start_req":
			return sectmap_start_req.class;
		case "sectmap_status_req":
			return sectmap_status_req.class;
		case "sectmap_query_req":
			return sectmap_query_req.class;
		case "sectmap_open_req":
			return sectmap_open_req.class;
		case "sectmap_rewards_req":
			return sectmap_rewards_req.class;
		case "sectmap_apply_req":
			return sectmap_apply_req.class;
		case "sectmap_allocation_req":
			return sectmap_allocation_req.class;
		case "sectmap_damage_req":
			return sectmap_damage_req.class;
		case "sectmap_sync_req":
			return sectmap_sync_req.class;
		case "sect_task_sync_req":
			return sect_task_sync_req.class;
		case "sect_share_task_sync_req":
			return sect_share_task_sync_req.class;
		case "sect_finish_task_sync_req":
			return sect_finish_task_sync_req.class;
		case "sect_task_receive_req":
			return sect_task_receive_req.class;
		case "sect_task_cancel_req":
			return sect_task_cancel_req.class;
		case "sect_task_finish_req":
			return sect_task_finish_req.class;
		case "sect_task_issuance_req":
			return sect_task_issuance_req.class;
		case "sect_task_reset_req":
			return sect_task_reset_req.class;
		case "sect_task_done_rewards_req":
			return sect_task_done_rewards_req.class;
		case "diyskill_sync_req":
			return diyskill_sync_req.class;
		case "diyskill_create_req":
			return diyskill_create_req.class;
		case "diyskill_save_req":
			return diyskill_save_req.class;
		case "diyskill_discard_req":
			return diyskill_discard_req.class;
		case "diyskill_selectuse_req":
			return diyskill_selectuse_req.class;
		case "diyskill_canceluse_req":
			return diyskill_canceluse_req.class;
		case "diyskill_unlock_req":
			return diyskill_unlock_req.class;
		case "diyskill_buytimes_req":
			return diyskill_buytimes_req.class;
		case "diyskill_share_req":
			return diyskill_share_req.class;
		case "diyskill_cancelshare_req":
			return diyskill_cancelshare_req.class;
		case "diyskill_borrow_req":
			return diyskill_borrow_req.class;
		case "diyskill_flaunt_req":
			return diyskill_flaunt_req.class;
		case "diyskill_shareaward_req":
			return diyskill_shareaward_req.class;
		case "sync_pet_can_use_pool":
			return sync_pet_can_use_pool.class;
		case "sect_push_application_req":
			return sect_push_application_req.class;
		case "suite_buy_req":
			return suite_buy_req.class;
		case "store_buy_req":
			return store_buy_req.class;
		case "teleport_npc_req":
			return teleport_npc_req.class;
		case "teleport_monster_req":
			return teleport_monster_req.class;
		case "teleport_mineral_req":
			return teleport_mineral_req.class;
		case "arena_sync_req":
			return arena_sync_req.class;
		case "arena_setpets_req":
			return arena_setpets_req.class;
		case "arena_ranks_req":
			return arena_ranks_req.class;
		case "arena_refresh_req":
			return arena_refresh_req.class;
		case "arena_defencepets_req":
			return arena_defencepets_req.class;
		case "arena_resetcool_req":
			return arena_resetcool_req.class;
		case "arena_buytimes_req":
			return arena_buytimes_req.class;
		case "arena_shopsync_req":
			return arena_shopsync_req.class;
		case "arena_shoprefresh_req":
			return arena_shoprefresh_req.class;
		case "arena_shopbuy_req":
			return arena_shopbuy_req.class;
		case "arena_startattack_req":
			return arena_startattack_req.class;
		case "arena_log_req":
			return arena_log_req.class;
		case "arena_scoresync_req":
			return arena_scoresync_req.class;
		case "arena_takescore_req":
			return arena_takescore_req.class;
		case "arena_hidedefence_req":
			return arena_hidedefence_req.class;
		case "superarena_sync_req":
			return superarena_sync_req.class;
		case "superarena_setpets_req":
			return superarena_setpets_req.class;
		case "superarena_singlejoin_req":
			return superarena_singlejoin_req.class;
		case "superarena_teamjoin_req":
			return superarena_teamjoin_req.class;
		case "superarena_quit_req":
			return superarena_quit_req.class;
		case "superarena_shopsync_req":
			return superarena_shopsync_req.class;
		case "superarena_shoprefresh_req":
			return superarena_shoprefresh_req.class;
		case "superarena_shopbuy_req":
			return superarena_shopbuy_req.class;
		case "aroom_create_req":
			return aroom_create_req.class;
		case "aroom_invite_req":
			return aroom_invite_req.class;
		case "aroom_invitedby_req":
			return aroom_invitedby_req.class;
		case "aroom_leave_req":
			return aroom_leave_req.class;
		case "aroom_kick_req":
			return aroom_kick_req.class;
		case "aroom_change_leader_req":
			return aroom_change_leader_req.class;
		case "aroom_self_req":
			return aroom_self_req.class;
		case "aroom_query_member":
			return aroom_query_member.class;
		case "aroom_mapr_req":
			return aroom_mapr_req.class;
		case "superarena_weekrank_req":
			return superarena_weekrank_req.class;
		case "superarena_dayrank_req":
			return superarena_dayrank_req.class;
		case "bwarena_sync_req":
			return bwarena_sync_req.class;
		case "bwarena_setpet_req":
			return bwarena_setpet_req.class;
		case "bwarena_refresh_req":
			return bwarena_refresh_req.class;
		case "bwarena_buytimes_req":
			return bwarena_buytimes_req.class;
		case "bwarena_startattack_req":
			return bwarena_startattack_req.class;
		case "bwarena_takescore_req":
			return bwarena_takescore_req.class;
		case "bwarena_log_req":
			return bwarena_log_req.class;
		case "bwarena_ranks_req":
			return bwarena_ranks_req.class;
		case "forcewar_sync_req":
			return forcewar_sync_req.class;
		case "forcewar_join_req":
			return forcewar_join_req.class;
		case "forcewar_quit_req":
			return forcewar_quit_req.class;
		case "froom_create_req":
			return froom_create_req.class;
		case "froom_invite_req":
			return froom_invite_req.class;
		case "froom_invitedby_req":
			return froom_invitedby_req.class;
		case "froom_leave_req":
			return froom_leave_req.class;
		case "froom_kick_req":
			return froom_kick_req.class;
		case "froom_change_leader_req":
			return froom_change_leader_req.class;
		case "froom_query_member":
			return froom_query_member.class;
		case "froom_query_members":
			return froom_query_members.class;
		case "froom_mapr_req":
			return froom_mapr_req.class;
		case "bosses_sync_req":
			return bosses_sync_req.class;
		case "walktoboss_req":
			return walktoboss_req.class;
		case "transtoboss_req":
			return transtoboss_req.class;
		case "reset_transtime_req":
			return reset_transtime_req.class;
		case "boss_reward_req":
			return boss_reward_req.class;
		case "friend_sync_req":
			return friend_sync_req.class;
		case "friend_pluslist_req":
			return friend_pluslist_req.class;
		case "friend_recommend_req":
			return friend_recommend_req.class;
		case "friend_add_req":
			return friend_add_req.class;
		case "friend_search_req":
			return friend_search_req.class;
		case "friend_delete_req":
			return friend_delete_req.class;
		case "friend_givevit_req":
			return friend_givevit_req.class;
		case "friend_giveallvits_req":
			return friend_giveallvits_req.class;
		case "friend_receivevit_req":
			return friend_receivevit_req.class;
		case "friend_agreeadd_req":
			return friend_agreeadd_req.class;
		case "friend_changemsg_req":
			return friend_changemsg_req.class;
		case "friend_changehead_req":
			return friend_changehead_req.class;
		case "friend_enemy_req":
			return friend_enemy_req.class;
		case "friend_removeenemy_req":
			return friend_removeenemy_req.class;
		case "friend_setfocus_req":
			return friend_setfocus_req.class;
		case "give_flower_req":
			return give_flower_req.class;
		case "get_flowerlog_req":
			return get_flowerlog_req.class;
		case "get_acceptlist_req":
			return get_acceptlist_req.class;
		case "auction_syncitems_req":
			return auction_syncitems_req.class;
		case "auction_syncequips_req":
			return auction_syncequips_req.class;
		case "auction_syncselfitems_req":
			return auction_syncselfitems_req.class;
		case "auction_putonitems_req":
			return auction_putonitems_req.class;
		case "auction_putonequip_req":
			return auction_putonequip_req.class;
		case "auction_putoffitems_req":
			return auction_putoffitems_req.class;
		case "auction_buyitems_req":
			return auction_buyitems_req.class;
		case "auction_expand_req":
			return auction_expand_req.class;
		case "auction_tradelog_req":
			return auction_tradelog_req.class;
		case "auction_itemprices_req":
			return auction_itemprices_req.class;
		case "treasure_syncnpcs_req":
			return treasure_syncnpcs_req.class;
		case "treasure_refreshnpc_req":
			return treasure_refreshnpc_req.class;
		case "treasure_buypieces_req":
			return treasure_buypieces_req.class;
		case "treasure_npcreward_req":
			return treasure_npcreward_req.class;
		case "treasure_syncmap_req":
			return treasure_syncmap_req.class;
		case "treasure_totalsearch_req":
			return treasure_totalsearch_req.class;
		case "treasure_search_req":
			return treasure_search_req.class;
		case "treasure_makemap_req":
			return treasure_makemap_req.class;
		case "treasure_mapreward_req":
			return treasure_mapreward_req.class;
		case "treasure_quitmap_req":
			return treasure_quitmap_req.class;
		case "treasure_medalgrow_req":
			return treasure_medalgrow_req.class;
		case "horse_tame_req":
			return horse_tame_req.class;
		case "horse_use_req":
			return horse_use_req.class;
		case "horse_upstar_req":
			return horse_upstar_req.class;
		case "horse_enhance_req":
			return horse_enhance_req.class;
		case "horse_enhancesave_req":
			return horse_enhancesave_req.class;
		case "horse_changeshow_req":
			return horse_changeshow_req.class;
		case "horse_activateshow_req":
			return horse_activateshow_req.class;
		case "horse_learnskill_req":
			return horse_learnskill_req.class;
		case "sync_horse_skillLevel_req":
			return sync_horse_skillLevel_req.class;
		case "horse_skill_up_level_req":
			return horse_skill_up_level_req.class;
		case "horse_setskill_req":
			return horse_setskill_req.class;
		case "fashion_upwear_req":
			return fashion_upwear_req.class;
		case "fashion_setshow_req":
			return fashion_setshow_req.class;
		case "seal_make_req":
			return seal_make_req.class;
		case "seal_upgrade_req":
			return seal_upgrade_req.class;
		case "seal_enhance_req":
			return seal_enhance_req.class;
		case "seal_save_enhance_req":
			return seal_save_enhance_req.class;
		case "expcoin_sync_req":
			return expcoin_sync_req.class;
		case "expcoin_extract_req":
			return expcoin_extract_req.class;
		case "rarebook_sync_req":
			return rarebook_sync_req.class;
		case "rarebook_push_req":
			return rarebook_push_req.class;
		case "rarebook_pop_req":
			return rarebook_pop_req.class;
		case "rarebook_unlock_req":
			return rarebook_unlock_req.class;
		case "rarebook_lvlup_req":
			return rarebook_lvlup_req.class;
		case "grasp_sync_req":
			return grasp_sync_req.class;
		case "grasp_impl_req":
			return grasp_impl_req.class;
		case "grasp_reset_req":
			return grasp_reset_req.class;
		case "dmgtransfer_buypoint_req":
			return dmgtransfer_buypoint_req.class;
		case "dmgtransfer_putpoint_req":
			return dmgtransfer_putpoint_req.class;
		case "dmgtransfer_lvlup_req":
			return dmgtransfer_lvlup_req.class;
		case "dmgtransfer_reset_req":
			return dmgtransfer_reset_req.class;
		case "lead_info_set":
			return lead_info_set.class;
		case "lead_plot_set":
			return lead_plot_set.class;
		case "usersurvey_sync_req":
			return usersurvey_sync_req.class;
		case "usersurvey_submit_req":
			return usersurvey_submit_req.class;
		case "usersurvey_reward_req":
			return usersurvey_reward_req.class;
		case "cblogingift_sync_req":
			return cblogingift_sync_req.class;
		case "cblogingift_take_req":
			return cblogingift_take_req.class;
		case "cblvlupgift_sync_req":
			return cblvlupgift_sync_req.class;
		case "cblvlupgift_take_req":
			return cblvlupgift_take_req.class;
		case "userdata_sync_req":
			return userdata_sync_req.class;
		case "userdata_modify_req":
			return userdata_modify_req.class;
		case "userdata_reward_req":
			return userdata_reward_req.class;
		case "cbcountdowngift_sync_req":
			return cbcountdowngift_sync_req.class;
		case "cbcountdowngift_take_req":
			return cbcountdowngift_take_req.class;
		case "ontimegift_sync_req":
			return ontimegift_sync_req.class;
		case "ontimegift_take_req":
			return ontimegift_take_req.class;
		case "strengthengift_sync_req":
			return strengthengift_sync_req.class;
		case "strengthengift_take_req":
			return strengthengift_take_req.class;
		case "official_research_sync_req":
			return official_research_sync_req.class;
		case "official_research_take_req":
			return official_research_take_req.class;
		case "permanenttitle_set_req":
			return permanenttitle_set_req.class;
		case "timedtitle_set_req":
			return timedtitle_set_req.class;
		case "titleslot_unlock_req":
			return titleslot_unlock_req.class;
		case "branch_task_take_req":
			return branch_task_take_req.class;
		case "branch_task_quit_req":
			return branch_task_quit_req.class;
		case "branch_task_finish_req":
			return branch_task_finish_req.class;
		case "sync_tower_req":
			return sync_tower_req.class;
		case "tower_record_req":
			return tower_record_req.class;
		case "tower_setpets_req":
			return tower_setpets_req.class;
		case "tower_startfight_req":
			return tower_startfight_req.class;
		case "tower_buytimes_req":
			return tower_buytimes_req.class;
		case "tower_sweep_req":
			return tower_sweep_req.class;
		case "sync_towerfame_req":
			return sync_towerfame_req.class;
		case "tower_donate_req":
			return tower_donate_req.class;
		case "take_towerfame_req":
			return take_towerfame_req.class;
		case "enter_secretmap_req":
			return enter_secretmap_req.class;
		case "take_secretreward_req":
			return take_secretreward_req.class;
		case "sect_deliver_sync_req":
			return sect_deliver_sync_req.class;
		case "sect_deliver_refresh_req":
			return sect_deliver_refresh_req.class;
		case "sect_deliver_protect_req":
			return sect_deliver_protect_req.class;
		case "sect_deliver_begin_req":
			return sect_deliver_begin_req.class;
		case "sect_deliver_search_help_req":
			return sect_deliver_search_help_req.class;
		case "sect_deliver_on_help_req":
			return sect_deliver_on_help_req.class;
		case "sect_deliver_cancel_req":
			return sect_deliver_cancel_req.class;
		case "sect_deliver_finish_req":
			return sect_deliver_finish_req.class;
		case "sect_deliver_sync_wish_req":
			return sect_deliver_sync_wish_req.class;
		case "sect_deliver_add_wish_req":
			return sect_deliver_add_wish_req.class;
		case "sect_deliver_save_wish_req":
			return sect_deliver_save_wish_req.class;
		case "sect_rob_task_take_req":
			return sect_rob_task_take_req.class;
		case "sect_rob_task_cancel_req":
			return sect_rob_task_cancel_req.class;
		case "sect_deliver_shopsync_req":
			return sect_deliver_shopsync_req.class;
		case "sect_deliver_shoprefresh_req":
			return sect_deliver_shoprefresh_req.class;
		case "sect_deliver_shopbuy_req":
			return sect_deliver_shopbuy_req.class;
		case "produce_workshopsync_req":
			return produce_workshopsync_req.class;
		case "produce_createnewrecipe_req":
			return produce_createnewrecipe_req.class;
		case "produce_produce_req":
			return produce_produce_req.class;
		case "produce_split_req":
			return produce_split_req.class;
		case "produce_fusion_req":
			return produce_fusion_req.class;
		case "produce_splitspbuy_req":
			return produce_splitspbuy_req.class;
		case "bag_merge_req":
			return bag_merge_req.class;
		case "rmactivity_takereward_req":
			return rmactivity_takereward_req.class;
		case "role_rename_req":
			return role_rename_req.class;
		case "horse_ride_req":
			return horse_ride_req.class;
		case "horse_unride_req":
			return horse_unride_req.class;
		case "mulhorse_invite_req":
			return mulhorse_invite_req.class;
		case "mulhorse_invitehandle_req":
			return mulhorse_invitehandle_req.class;
		case "mulhorse_apply_req":
			return mulhorse_apply_req.class;
		case "mulhorse_applyhandle_req":
			return mulhorse_applyhandle_req.class;
		case "mulhorse_leave_req":
			return mulhorse_leave_req.class;
		case "mulhorse_kick_req":
			return mulhorse_kick_req.class;
		case "staywith_invite_req":
			return staywith_invite_req.class;
		case "staywith_invitehandle_req":
			return staywith_invitehandle_req.class;
		case "staywith_leave_req":
			return staywith_leave_req.class;
		case "sync_message_board_req":
			return sync_message_board_req.class;
		case "add_message_board_req":
			return add_message_board_req.class;
		case "comment_message_board_req":
			return comment_message_board_req.class;
		case "change_message_board_content_req":
			return change_message_board_content_req.class;
		case "schedule_sync_req":
			return schedule_sync_req.class;
		case "schedule_mapreward_req":
			return schedule_mapreward_req.class;
		case "save_guide_mapcopy_req":
			return save_guide_mapcopy_req.class;
		case "sect_invite_req":
			return sect_invite_req.class;
		case "sect_invite_response_req":
			return sect_invite_response_req.class;
		case "unlock_armor_type_req":
			return unlock_armor_type_req.class;
		case "armor_uprank_req":
			return armor_uprank_req.class;
		case "armor_add_talent_req":
			return armor_add_talent_req.class;
		case "armor_change_req":
			return armor_change_req.class;
		case "armor_up_level_req":
			return armor_up_level_req.class;
		case "rune_push_req":
			return rune_push_req.class;
		case "rune_pop_req":
			return rune_pop_req.class;
		case "reset_talent_point_req":
			return reset_talent_point_req.class;
		case "solt_group_unlock_req":
			return solt_group_unlock_req.class;
		case "solt_push_rune_req":
			return solt_push_rune_req.class;
		case "lang_push_rune_req":
			return lang_push_rune_req.class;
		case "rune_wish_req":
			return rune_wish_req.class;
		case "put_in_warehouse_req":
			return put_in_warehouse_req.class;
		case "take_out_warehouse_req":
			return take_out_warehouse_req.class;
		case "expand_warehouse_req":
			return expand_warehouse_req.class;
		case "sync_private_warehouse_req":
			return sync_private_warehouse_req.class;
		case "sync_public_warehouse_req":
			return sync_public_warehouse_req.class;
		case "propose_req":
			return propose_req.class;
		case "propose_response_req":
			return propose_response_req.class;
		case "marriage_sync_req":
			return marriage_sync_req.class;
		case "divorce_req":
			return divorce_req.class;
		case "marriage_skill_levelup_req":
			return marriage_skill_levelup_req.class;
		case "transform_to_partner_req":
			return transform_to_partner_req.class;
		case "marriage_start_parade_req":
			return marriage_start_parade_req.class;
		case "marriage_start_banquet_req":
			return marriage_start_banquet_req.class;
		case "exchange_item_req":
			return exchange_item_req.class;
		case "mrgseriestask_open_req":
			return mrgseriestask_open_req.class;
		case "mrgseriestask_take_req":
			return mrgseriestask_take_req.class;
		case "mrgseriestask_reward_req":
			return mrgseriestask_reward_req.class;
		case "mrglooptask_open_req":
			return mrglooptask_open_req.class;
		case "mrglooptask_take_req":
			return mrglooptask_take_req.class;
		case "mrglooptask_reward_req":
			return mrglooptask_reward_req.class;
		case "save_skill_preset_req":
			return save_skill_preset_req.class;
		case "save_all_skill_preset_req":
			return save_all_skill_preset_req.class;
		case "save_spirits_preset_req":
			return save_spirits_preset_req.class;
		case "delete_skill_preset_req":
			return delete_skill_preset_req.class;
		case "delete_spirits_preset_req":
			return delete_spirits_preset_req.class;
		case "change_skill_preset_req":
			return change_skill_preset_req.class;
		case "change_spirits_preset_req":
			return change_spirits_preset_req.class;
		case "sect_group_map_open_req":
			return sect_group_map_open_req.class;
		case "sect_group_map_enter_req":
			return sect_group_map_enter_req.class;
		case "sect_group_map_sync_req":
			return sect_group_map_sync_req.class;
		case "weapon_skill_level_up_req":
			return weapon_skill_level_up_req.class;
		case "weapon_talent_level_up_req":
			return weapon_talent_level_up_req.class;
		case "weapon_talent_point_buy_req":
			return weapon_talent_point_buy_req.class;
		case "weapon_talent_point_reset_req":
			return weapon_talent_point_reset_req.class;
		case "send_gift_req":
			return send_gift_req.class;
		case "sync_big_map_flag_info_req":
			return sync_big_map_flag_info_req.class;
		case "pet_skill_level_up_req":
			return pet_skill_level_up_req.class;
		case "sync_special_card_req":
			return sync_special_card_req.class;
		case "take_special_card_reward_req":
			return take_special_card_reward_req.class;
		case "sync_daily_vit_reward_req":
			return sync_daily_vit_reward_req.class;
		case "take_daily_vit_reward_req":
			return take_daily_vit_reward_req.class;
		case "try_open_insight_req":
			return try_open_insight_req.class;
		case "try_open_revenge_req":
			return try_open_revenge_req.class;
		case "try_sync_insight_req":
			return try_sync_insight_req.class;
		case "try_sync_revenge_req":
			return try_sync_revenge_req.class;
		case "try_transform_insight_req":
			return try_transform_insight_req.class;
		case "try_transform_revenge_req":
			return try_transform_revenge_req.class;
		case "heirloom_wipe_req":
			return heirloom_wipe_req.class;
		case "heirloom_takeout_req":
			return heirloom_takeout_req.class;
		case "buy_offline_func_point_req":
			return buy_offline_func_point_req.class;
		case "set_sect_qqgroup_req":
			return set_sect_qqgroup_req.class;
		case "set_heirloom_display_req":
			return set_heirloom_display_req.class;
		case "feat_gambleshopsync_req":
			return feat_gambleshopsync_req.class;
		case "feat_gambleshoprefresh_req":
			return feat_gambleshoprefresh_req.class;
		case "feat_gambleshopbuy_req":
			return feat_gambleshopbuy_req.class;
		case "add_marriage_bespeak_req":
			return add_marriage_bespeak_req.class;
		case "sync_marriage_bespeak_req":
			return sync_marriage_bespeak_req.class;
		case "base_dummygoods_quick_buy_req":
			return base_dummygoods_quick_buy_req.class;
		case "activity_last_quick_done_req":
			return activity_last_quick_done_req.class;
		case "stele_sync_req":
			return stele_sync_req.class;
		case "stele_join_req":
			return stele_join_req.class;
		case "stele_rank_req":
			return stele_rank_req.class;
		case "stele_teleport_req":
			return stele_teleport_req.class;
		case "blacklist_add_req":
			return blacklist_add_req.class;
		case "blacklist_del_req":
			return blacklist_del_req.class;
		case "blacklist_sync_req":
			return blacklist_sync_req.class;
		case "demonhole_sync_req":
			return demonhole_sync_req.class;
		case "demonhole_join_req":
			return demonhole_join_req.class;
		case "demonhole_changefloor_req":
			return demonhole_changefloor_req.class;
		case "demonhole_battle_req":
			return demonhole_battle_req.class;
		case "justicemap_start_req":
			return justicemap_start_req.class;
		case "emergency_sync_req":
			return emergency_sync_req.class;
		case "emergency_enter_req":
			return emergency_enter_req.class;
		case "emergency_rank_req":
			return emergency_rank_req.class;
		case "lucklystar_sync_req":
			return lucklystar_sync_req.class;
		case "lucklystar_gift_req":
			return lucklystar_gift_req.class;
		case "fightnpc_start_req":
			return fightnpc_start_req.class;
		case "fightnpc_reward_req":
			return fightnpc_reward_req.class;
		case "packetreward_sync_req":
			return packetreward_sync_req.class;
		case "packetreward_take_req":
			return packetreward_take_req.class;
		case "horse_enhance_prop_unlock_req":
			return horse_enhance_prop_unlock_req.class;
		case "buy_wizard_pet_time_req":
			return buy_wizard_pet_time_req.class;
		case "set_cur_wizard_pet_req":
			return set_cur_wizard_pet_req.class;
		case "sync_item_unlock_head_req":
			return sync_item_unlock_head_req.class;
		case "socialmsg_send_req":
			return socialmsg_send_req.class;
		case "socialmsg_like_req":
			return socialmsg_like_req.class;
		case "socialmsg_dislike_req":
			return socialmsg_dislike_req.class;
		case "socialmsg_pageinfo_req":
			return socialmsg_pageinfo_req.class;
		case "npc_transfrom_req":
			return npc_transfrom_req.class;
		case "share_success":
			return share_success.class;
		case "unlock_head_req":
			return unlock_head_req.class;
		case "start_npc_map_req":
			return start_npc_map_req.class;
		case "join_npc_pray_req":
			return join_npc_pray_req.class;
		case "unlock_private_warehouse_req":
			return unlock_private_warehouse_req.class;
		case "towerdefence_start_req":
			return towerdefence_start_req.class;
		case "towerdefence_selectcard_req":
			return towerdefence_selectcard_req.class;
		case "client_ping_start":
			return client_ping_start.class;
		case "sync_server_ping":
			return sync_server_ping.class;
		case "set_monster_birthpos":
			return set_monster_birthpos.class;
		case "role_ride_horse":
			return role_ride_horse.class;
		case "role_unride_horse":
			return role_unride_horse.class;
		case "role_adjust_serverpos":
			return role_adjust_serverpos.class;
		case "pet_adjust_serverpos":
			return pet_adjust_serverpos.class;
		case "role_move":
			return role_move.class;
		case "pet_move":
			return pet_move.class;
		case "escortcar_move":
			return escortcar_move.class;
		case "role_stopmove":
			return role_stopmove.class;
		case "pet_stopmove":
			return pet_stopmove.class;
		case "escortcar_stopmove":
			return escortcar_stopmove.class;
		case "query_roles_detail":
			return query_roles_detail.class;
		case "query_traps_detail":
			return query_traps_detail.class;
		case "query_pets_detail":
			return query_pets_detail.class;
		case "query_forcewar_result":
			return query_forcewar_result.class;
		case "query_forcewar_members_pos":
			return query_forcewar_members_pos.class;
		case "role_usefollowskill":
			return role_usefollowskill.class;
		case "role_socialaction":
			return role_socialaction.class;
		case "role_breakskill":
			return role_breakskill.class;
		case "role_useskill":
			return role_useskill.class;
		case "role_usemapskill":
			return role_usemapskill.class;
		case "pet_useskill":
			return pet_useskill.class;
		case "role_endskill":
			return role_endskill.class;
		case "pet_endskill":
			return pet_endskill.class;
		case "role_finishattack":
			return role_finishattack.class;
		case "pet_finishattack":
			return pet_finishattack.class;
		case "role_rushstart":
			return role_rushstart.class;
		case "pet_rushstart":
			return pet_rushstart.class;
		case "mineral_quit":
			return mineral_quit.class;
		case "trap_click":
			return trap_click.class;
		case "role_shift_start":
			return role_shift_start.class;
		case "pet_shift_start":
			return pet_shift_start.class;
		case "role_pickup_drops":
			return role_pickup_drops.class;
		case "role_pickup_mapbuff":
			return role_pickup_mapbuff.class;
		case "role_motivate_weapon":
			return role_motivate_weapon.class;
		case "privatemap_kill":
			return privatemap_kill.class;
		case "privatemap_damage_reward":
			return privatemap_damage_reward.class;
		case "privatemap_trap":
			return privatemap_trap.class;
		case "privatemap_weapon_master":
			return privatemap_weapon_master.class;
		case "privatemap_role_updatehp":
			return privatemap_role_updatehp.class;
		case "privatemap_pet_updatehp":
			return privatemap_pet_updatehp.class;
		case "privatemap_durability":
			return privatemap_durability.class;
		case "query_entity_nearby":
			return query_entity_nearby.class;
		case "send_towerdefence_alarm":
			return send_towerdefence_alarm.class;
		case "query_map_damage_rank":
			return query_map_damage_rank.class;
		case "query_sect_map_cur_info":
			return query_sect_map_cur_info.class;
		default:
			break;
		}
		return null;
	}
	public static String getStrPacketChannel(String name)
	{
		switch( name )
		{
		case "server_echo":
			return "S2C";
		case "server_info":
			return "S2C";
		case "user_force_close":
			return "S2C";
		case "user_role_list":
			return "S2C";
		case "user_login_res":
			return "S2C";
		case "role_logout_res":
			return "S2C";
		case "role_loginqueue_pos":
			return "S2C";
		case "game_sync":
			return "S2C";
		case "assert_ignore_list":
			return "S2C";
		case "role_base":
			return "S2C";
		case "role_specialcards":
			return "S2C";
		case "role_bag":
			return "S2C";
		case "role_wear":
			return "S2C";
		case "role_suite":
			return "S2C";
		case "role_sealinfo":
			return "S2C";
		case "role_skill":
			return "S2C";
		case "role_spirit":
			return "S2C";
		case "role_weapon":
			return "S2C";
		case "role_pet":
			return "S2C";
		case "role_task":
			return "S2C";
		case "role_horseinfo":
			return "S2C";
		case "role_treasure_info":
			return "S2C";
		case "role_normal_mapcopy_log":
			return "S2C";
		case "role_activity_mapgroup_log":
			return "S2C";
		case "role_towerdefence_log":
			return "S2C";
		case "role_arena_entertimes":
			return "S2C";
		case "role_diyskill":
			return "S2C";
		case "role_sectinfo":
			return "S2C";
		case "role_sectaura":
			return "S2C";
		case "role_secttask":
			return "S2C";
		case "role_team":
			return "S2C";
		case "role_mroom":
			return "S2C";
		case "role_friends":
			return "S2C";
		case "role_msg":
			return "S2C";
		case "master_brief_sync":
			return "S2C";
		case "master_apply_notice":
			return "S2C";
		case "master_offer_notice":
			return "S2C";
		case "master_accept_apply_notice":
			return "S2C";
		case "master_accept_offer_notice":
			return "S2C";
		case "master_apply_res":
			return "S2C";
		case "master_accept_offer_res":
			return "S2C";
		case "master_offer_res":
			return "S2C";
		case "master_accept_apply_res":
			return "S2C";
		case "master_betray_res":
			return "S2C";
		case "master_graduate_res":
			return "S2C";
		case "master_agree_graduate_res":
			return "S2C";
		case "master_dismiss_res":
			return "S2C";
		case "master_get_announce_res":
			return "S2C";
		case "master_set_announce_res":
			return "S2C";
		case "master_del_announce_res":
			return "S2C";
		case "master_brief_info_notice":
			return "S2C";
		case "master_info_res":
			return "S2C";
		case "master_msg_list_res":
			return "S2C";
		case "master_remove_betray_msg_res":
			return "S2C";
		case "master_list_res":
			return "S2C";
		case "master_list_apprentice_res":
			return "S2C";
		case "master_tasks_res":
			return "S2C";
		case "master_shopsync_res":
			return "S2C";
		case "master_shoprefresh_res":
			return "S2C";
		case "master_shopbuy_res":
			return "S2C";
		case "role_superarena":
			return "S2C";
		case "role_forcewar":
			return "S2C";
		case "role_leadinfo":
			return "S2C";
		case "role_leadplot":
			return "S2C";
		case "role_func_preview":
			return "S2C";
		case "role_treasureguide":
			return "S2C";
		case "role_offlineexp":
			return "S2C";
		case "role_expcoin":
			return "S2C";
		case "role_titles":
			return "S2C";
		case "role_revive_info":
			return "S2C";
		case "role_branch_task":
			return "S2C";
		case "role_climb_tower":
			return "S2C";
		case "role_sect_deliver":
			return "S2C";
		case "role_add_robmoney":
			return "S2C";
		case "role_rob_flag":
			return "S2C";
		case "role_escortcar_location":
			return "S2C";
		case "role_rmactivity":
			return "S2C";
		case "speedup_level":
			return "S2C";
		case "role_marriage_level":
			return "S2C";
		case "role_change_map":
			return "S2C";
		case "role_weapon_npc":
			return "S2C";
		case "role_new_msg":
			return "S2C";
		case "role_team_kill":
			return "S2C";
		case "role_add_diamond":
			return "S2C";
		case "role_add_coin":
			return "S2C";
		case "role_add_sectcontribution":
			return "S2C";
		case "role_add_arenapoint":
			return "S2C";
		case "role_add_superarenahonor":
			return "S2C";
		case "role_add_credit":
			return "S2C";
		case "role_add_equipenergy":
			return "S2C";
		case "role_add_gemenergy":
			return "S2C";
		case "role_add_bookinspiration":
			return "S2C";
		case "role_add_exp":
			return "S2C";
		case "role_add_expcoin":
			return "S2C";
		case "role_add_offline_func_point":
			return "S2C";
		case "role_add_vit":
			return "S2C";
		case "role_add_splitsp":
			return "S2C";
		case "role_add_charm":
			return "S2C";
		case "role_add_feat":
			return "S2C";
		case "role_add_item":
			return "S2C";
		case "role_add_items":
			return "S2C";
		case "pet_add_exploit":
			return "S2C";
		case "role_title_update":
			return "S2C";
		case "role_hppool_used":
			return "S2C";
		case "role_day_refresh":
			return "S2C";
		case "sect_aura_update":
			return "S2C";
		case "role_add_ore":
			return "S2C";
		case "role_show_power":
			return "S2C";
		case "role_show_timeoffset":
			return "S2C";
		case "role_notice":
			return "S2C";
		case "role_betaactivity_notice":
			return "S2C";
		case "role_firstpay":
			return "S2C";
		case "role_new_pet_task":
			return "S2C";
		case "role_secret_task":
			return "S2C";
		case "sect_applications_number":
			return "S2C";
		case "messageboard_day_comment_time":
			return "S2C";
		case "msg_send_res":
			return "S2C";
		case "role_chat_banned":
			return "S2C";
		case "role_chat_room":
			return "S2C";
		case "waypoint_enter_res":
			return "S2C";
		case "wrongpos_leave_res":
			return "S2C";
		case "worldline_sync_res":
			return "S2C";
		case "worldline_change_res":
			return "S2C";
		case "query_robot_res":
			return "S2C";
		case "query_rolebrief_res":
			return "S2C";
		case "query_rolefeature_res":
			return "S2C";
		case "query_petoverviews_res":
			return "S2C";
		case "query_weaponoverviews_res":
			return "S2C";
		case "role_revive_insitu_res":
			return "S2C";
		case "role_revive_other_res":
			return "S2C";
		case "role_revive_safe_res":
			return "S2C";
		case "role_transform_res":
			return "S2C";
		case "checkin_sync_res":
			return "S2C";
		case "checkin_take_res":
			return "S2C";
		case "mall_sync_res":
			return "S2C";
		case "mall_buy_res":
			return "S2C";
		case "benefit_sync_res":
			return "S2C";
		case "payactivity_sync_res":
			return "S2C";
		case "firstpaygift_sync_res":
			return "S2C";
		case "firstpaygift_take_res":
			return "S2C";
		case "dailypaygift_sync_res":
			return "S2C";
		case "dailypaygift_take_res":
			return "S2C";
		case "lastpaygift_sync_res":
			return "S2C";
		case "lastpaygift_take_res":
			return "S2C";
		case "activitychallengegift_sync_res":
			return "S2C";
		case "activitychallengegift_take_res":
			return "S2C";
		case "upgradepurchase_sync_res":
			return "S2C";
		case "upgradepurchase_buy_res":
			return "S2C";
		case "paygift_sync_res":
			return "S2C";
		case "paygift_take_res":
			return "S2C";
		case "consumegift_sync_res":
			return "S2C";
		case "consumegift_take_res":
			return "S2C";
		case "upgradegift_sync_res":
			return "S2C";
		case "upgradegift_take_res":
			return "S2C";
		case "investmentfund_sync_res":
			return "S2C";
		case "investmentfund_buy_res":
			return "S2C";
		case "investmentfund_take_res":
			return "S2C";
		case "growthfund_sync_res":
			return "S2C";
		case "growthfund_buy_res":
			return "S2C";
		case "growthfund_take_res":
			return "S2C";
		case "doubledrop_sync_res":
			return "S2C";
		case "extradrop_sync_res":
			return "S2C";
		case "exchangegift_sync_res":
			return "S2C";
		case "exchangegift_take_res":
			return "S2C";
		case "logingift_sync_res":
			return "S2C";
		case "logingift_take_res":
			return "S2C";
		case "giftpackage_sync_res":
			return "S2C";
		case "giftpackage_take_res":
			return "S2C";
		case "pbtcashback_sync_res":
			return "S2C";
		case "pbtcashback_take_res":
			return "S2C";
		case "payrank_sync_res":
			return "S2C";
		case "groupbuy_sync_res":
			return "S2C";
		case "groupbuy_buy_res":
			return "S2C";
		case "flashsale_sync_res":
			return "S2C";
		case "flashsale_buy_res":
			return "S2C";
		case "luckyroll_sync_res":
			return "S2C";
		case "luckyroll_play_res":
			return "S2C";
		case "directpurchase_sync_res":
			return "S2C";
		case "directpurchase_take_res":
			return "S2C";
		case "onearmbandit_sync_res":
			return "S2C";
		case "onearmbandit_take_res":
			return "S2C";
		case "adver_sync_res":
			return "S2C";
		case "mapcopy_leave_res":
			return "S2C";
		case "role_mapcopy_timesync":
			return "S2C";
		case "role_mapcopy_cantake_drop":
			return "S2C";
		case "normalmap_start_res":
			return "S2C";
		case "activitymap_start_res":
			return "S2C";
		case "role_commonmap_start":
			return "S2C";
		case "role_commonmap_end":
			return "S2C";
		case "role_activitymap_sync":
			return "S2C";
		case "role_commonmap_result":
			return "S2C";
		case "role_commonmap_autocard":
			return "S2C";
		case "commonmap_selectcard_res":
			return "S2C";
		case "normalmap_buytimes_res":
			return "S2C";
		case "activitymap_buytimes_res":
			return "S2C";
		case "privatemap_sweep_res":
			return "S2C";
		case "activity_sweep_res":
			return "S2C";
		case "mail_syncsys_res":
			return "S2C";
		case "mail_synctmp_res":
			return "S2C";
		case "mail_read_res":
			return "S2C";
		case "mail_readsys_res":
			return "S2C";
		case "mail_readtmp_res":
			return "S2C";
		case "mail_take_res":
			return "S2C";
		case "mail_takesys_res":
			return "S2C";
		case "mail_taketmp_res":
			return "S2C";
		case "mail_del_res":
			return "S2C";
		case "mail_delsys_res":
			return "S2C";
		case "mail_deltmp_res":
			return "S2C";
		case "mail_takeallsys_res":
			return "S2C";
		case "mail_takealltmp_res":
			return "S2C";
		case "role_tempmail_full":
			return "S2C";
		case "rollnotice_sync":
			return "S2C";
		case "rollnotice_detail":
			return "S2C";
		case "rank_sync_res":
			return "S2C";
		case "sectrank_sync_res":
			return "S2C";
		case "rank_get_res":
			return "S2C";
		case "sectrank_get_res":
			return "S2C";
		case "rank_self_res":
			return "S2C";
		case "sectrank_self_res":
			return "S2C";
		case "buy_coin_res":
			return "S2C";
		case "buy_vit_res":
			return "S2C";
		case "role_pay_notice":
			return "S2C";
		case "user_vip_sync":
			return "S2C";
		case "pay_sync_res":
			return "S2C";
		case "pay_asgod_res":
			return "S2C";
		case "vip_take_res":
			return "S2C";
		case "bag_expand_res":
			return "S2C";
		case "bag_sellequip_res":
			return "S2C";
		case "bag_sellitem_res":
			return "S2C";
		case "bag_sellgem_res":
			return "S2C";
		case "bag_sellbook_res":
			return "S2C";
		case "bag_batchsellequips_res":
			return "S2C";
		case "bag_batchsellitems_res":
			return "S2C";
		case "bag_batchsellgems_res":
			return "S2C";
		case "bag_batchsellbooks_res":
			return "S2C";
		case "bag_useitemgift_res":
			return "S2C";
		case "bag_useitemcoin_res":
			return "S2C";
		case "bag_useitemdiamond_res":
			return "S2C";
		case "bag_useitemexp_res":
			return "S2C";
		case "bag_useitemhp_res":
			return "S2C";
		case "bag_useitemhppool_res":
			return "S2C";
		case "bag_useitemchest_res":
			return "S2C";
		case "bag_useitemequipenergy_res":
			return "S2C";
		case "bag_useitemgemenergy_res":
			return "S2C";
		case "bag_useiteminspiration_res":
			return "S2C";
		case "bag_useitemvit_res":
			return "S2C";
		case "bag_useitemfashion_res":
			return "S2C";
		case "bag_useitemexpcoinpool_res":
			return "S2C";
		case "bag_usemonthlycard_res":
			return "S2C";
		case "bag_usevipcard_res":
			return "S2C";
		case "bag_useitemfeat_res":
			return "S2C";
		case "bag_useitemskill_res":
			return "S2C";
		case "bag_useitemletter_res":
			return "S2C";
		case "bag_useitemevil_res":
			return "S2C";
		case "bag_piececompose_res":
			return "S2C";
		case "bag_useitempropstrength_res":
			return "S2C";
		case "bag_useitemofflinefuncpoint_res":
			return "S2C";
		case "bag_useitemtitle_res":
			return "S2C";
		case "bag_useitemuskill_res":
			return "S2C";
		case "bag_useitemhead_res":
			return "S2C";
		case "equip_upwear_res":
			return "S2C";
		case "equip_downwear_res":
			return "S2C";
		case "equip_levelup_res":
			return "S2C";
		case "equip_batchlevelup_res":
			return "S2C";
		case "equip_starup_res":
			return "S2C";
		case "equip_repair_res":
			return "S2C";
		case "equip_autoupwear_res":
			return "S2C";
		case "gem_levelup_res":
			return "S2C";
		case "gem_inlay_res":
			return "S2C";
		case "gem_unlay_res":
			return "S2C";
		case "equip_refine_res":
			return "S2C";
		case "legend_sync_res":
			return "S2C";
		case "legend_make_res":
			return "S2C";
		case "legend_quit_res":
			return "S2C";
		case "legend_save_res":
			return "S2C";
		case "skill_select_res":
			return "S2C";
		case "skill_levelup_res":
			return "S2C";
		case "skill_enhance_res":
			return "S2C";
		case "skill_unlock_res":
			return "S2C";
		case "uniqueskill_set_res":
			return "S2C";
		case "spirit_learn_res":
			return "S2C";
		case "spirit_levelup_res":
			return "S2C";
		case "spirit_install_res":
			return "S2C";
		case "spirit_uninstall_res":
			return "S2C";
		case "weapon_make_res":
			return "S2C";
		case "weapon_levelup_res":
			return "S2C";
		case "weapon_buylevel_res":
			return "S2C";
		case "weapon_starup_res":
			return "S2C";
		case "weapon_select_res":
			return "S2C";
		case "weapon_sync_res":
			return "S2C";
		case "weapon_uskill_open_res":
			return "S2C";
		case "weapon_setform_res":
			return "S2C";
		case "weaponmap_start_res":
			return "S2C";
		case "pet_sync_res":
			return "S2C";
		case "pet_make_res":
			return "S2C";
		case "pet_transform_res":
			return "S2C";
		case "pet_levelup_res":
			return "S2C";
		case "pet_buylevel_res":
			return "S2C";
		case "pet_starup_res":
			return "S2C";
		case "pet_breakskillvlup_res":
			return "S2C";
		case "pet_worldmapset_res":
			return "S2C";
		case "pet_privatemapset_res":
			return "S2C";
		case "pet_sectmapset_res":
			return "S2C";
		case "pet_activitymapset_res":
			return "S2C";
		case "lifetaskmap_start_res":
			return "S2C";
		case "petspirit_lvlup_res":
			return "S2C";
		case "petspirit_learn_res":
			return "S2C";
		case "petspirit_replace_res":
			return "S2C";
		case "dtask_sync_res":
			return "S2C";
		case "dtask_take_res":
			return "S2C";
		case "chtask_sync_res":
			return "S2C";
		case "chtask_take_res":
			return "S2C";
		case "fame_sync_res":
			return "S2C";
		case "fame_upgrade_res":
			return "S2C";
		case "fame_take_res":
			return "S2C";
		case "onlinegift_sync_res":
			return "S2C";
		case "onlinegift_take_res":
			return "S2C";
		case "offlineexp_take_res":
			return "S2C";
		case "quizgift_sync_res":
			return "S2C";
		case "quizgift_qrank_res":
			return "S2C";
		case "quizgift_answer_res":
			return "S2C";
		case "sync_luckywheel_res":
			return "S2C";
		case "luckywheel_ondraw_res":
			return "S2C";
		case "luckywheel_buydrawtimes_res":
			return "S2C";
		case "play_firework_res":
			return "S2C";
		case "notify_play_firework":
			return "S2C";
		case "redenvelope_snatch_res":
			return "S2C";
		case "redenvelope_notice":
			return "S2C";
		case "mtask_take_res":
			return "S2C";
		case "mtask_quit_res":
			return "S2C";
		case "mtask_reward_res":
			return "S2C";
		case "wtask_reward_res":
			return "S2C";
		case "ptask_reward_res":
			return "S2C";
		case "petlifetask_take_res":
			return "S2C";
		case "petlifetask_reward_res":
			return "S2C";
		case "task_useitem_res":
			return "S2C";
		case "task_submititem_res":
			return "S2C";
		case "pettask_submititem_res":
			return "S2C";
		case "petlifetask_submititem_res":
			return "S2C";
		case "task_dialog_res":
			return "S2C";
		case "task_conveynpc_res":
			return "S2C";
		case "task_conveyitem_res":
			return "S2C";
		case "task_answer_res":
			return "S2C";
		case "task_randquestion_res":
			return "S2C";
		case "role_mine_res":
			return "S2C";
		case "set_attackmode_res":
			return "S2C";
		case "team_sync":
			return "S2C";
		case "team_join":
			return "S2C";
		case "team_leave":
			return "S2C";
		case "team_kick":
			return "S2C";
		case "team_dissolve":
			return "S2C";
		case "team_change_leader":
			return "S2C";
		case "team_member_profile":
			return "S2C";
		case "team_member_hp":
			return "S2C";
		case "team_member_position":
			return "S2C";
		case "team_member_connection":
			return "S2C";
		case "team_role_query_res":
			return "S2C";
		case "team_invite_res":
			return "S2C";
		case "team_invite_forward":
			return "S2C";
		case "team_invitedby_res":
			return "S2C";
		case "team_invite_refuse":
			return "S2C";
		case "team_invite_busy":
			return "S2C";
		case "team_invite_lead":
			return "S2C";
		case "team_apply_res":
			return "S2C";
		case "team_apply_forward":
			return "S2C";
		case "team_appliedby_res":
			return "S2C";
		case "team_apply_refuse":
			return "S2C";
		case "team_leave_res":
			return "S2C";
		case "team_kick_res":
			return "S2C";
		case "team_dissolve_res":
			return "S2C";
		case "team_change_leader_res":
			return "S2C";
		case "team_self_res":
			return "S2C";
		case "team_mapt_res":
			return "S2C";
		case "team_mapr_res":
			return "S2C";
		case "mroom_sync":
			return "S2C";
		case "mroom_join":
			return "S2C";
		case "mroom_leave":
			return "S2C";
		case "mroom_kick":
			return "S2C";
		case "mroom_change_leader":
			return "S2C";
		case "mroom_member_connection":
			return "S2C";
		case "mroom_create_res":
			return "S2C";
		case "mroom_enter_res":
			return "S2C";
		case "mroom_qenter_res":
			return "S2C";
		case "mroom_invite_res":
			return "S2C";
		case "mroom_invite_forward":
			return "S2C";
		case "mroom_invitedby_res":
			return "S2C";
		case "mroom_invite_refuse":
			return "S2C";
		case "mroom_invite_busy":
			return "S2C";
		case "mroom_invite_fail":
			return "S2C";
		case "mroom_leave_res":
			return "S2C";
		case "mroom_kick_res":
			return "S2C";
		case "mroom_change_leader_res":
			return "S2C";
		case "mroom_self_res":
			return "S2C";
		case "mroom_mapr_res":
			return "S2C";
		case "mroom_query_res":
			return "S2C";
		case "sect_notice_application":
			return "S2C";
		case "sect_notice_worship":
			return "S2C";
		case "sect_notice_banquet":
			return "S2C";
		case "sect_notice_tasks":
			return "S2C";
		case "sect_notice_sharedtaskreward":
			return "S2C";
		case "sect_sync_res":
			return "S2C";
		case "sect_create_res":
			return "S2C";
		case "sect_queryapplied_res":
			return "S2C";
		case "sect_list_res":
			return "S2C";
		case "sect_query_res":
			return "S2C";
		case "sect_searchbyid_res":
			return "S2C";
		case "sect_searchbyname_res":
			return "S2C";
		case "sect_apply_res":
			return "S2C";
		case "sect_qapply_res":
			return "S2C";
		case "sect_members_res":
			return "S2C";
		case "sect_applications_res":
			return "S2C";
		case "sect_history_res":
			return "S2C";
		case "sect_appliedby_res":
			return "S2C";
		case "sect_appliedbyall_res":
			return "S2C";
		case "sect_kick_res":
			return "S2C";
		case "sect_leave_res":
			return "S2C";
		case "sect_disband_res":
			return "S2C";
		case "sect_appoint_res":
			return "S2C";
		case "sect_changecreed_res":
			return "S2C";
		case "sect_changename_res":
			return "S2C";
		case "sect_changeicon_res":
			return "S2C";
		case "sect_joinlvl_res":
			return "S2C";
		case "sect_sendemail_res":
			return "S2C";
		case "sect_upgrade_res":
			return "S2C";
		case "sect_accelerate_res":
			return "S2C";
		case "sect_auraexpadd_res":
			return "S2C";
		case "sect_aurasync_res":
			return "S2C";
		case "sect_worship_res":
			return "S2C";
		case "sect_syncworshipreward_res":
			return "S2C";
		case "sect_takeworshipreward_res":
			return "S2C";
		case "sect_openbanquet_res":
			return "S2C";
		case "sect_listbanquet_res":
			return "S2C";
		case "sect_joinbanquet_res":
			return "S2C";
		case "sect_shopsync_res":
			return "S2C";
		case "sect_shoprefresh_res":
			return "S2C";
		case "sect_shopbuy_res":
			return "S2C";
		case "role_sectmap_start":
			return "S2C";
		case "role_sectmap_end":
			return "S2C";
		case "role_sectmap_result":
			return "S2C";
		case "sectmap_start_res":
			return "S2C";
		case "sectmap_status_res":
			return "S2C";
		case "sectmap_query_res":
			return "S2C";
		case "sectmap_open_res":
			return "S2C";
		case "sectmap_rewards_res":
			return "S2C";
		case "sectmap_apply_res":
			return "S2C";
		case "sectmap_allocation_res":
			return "S2C";
		case "sectmap_damage_res":
			return "S2C";
		case "sectmap_sync_res":
			return "S2C";
		case "sect_task_sync_res":
			return "S2C";
		case "sect_share_task_sync_start":
			return "S2C";
		case "sect_share_task_sync_info":
			return "S2C";
		case "sect_share_task_sync_end":
			return "S2C";
		case "sect_share_task_sync_res":
			return "S2C";
		case "sect_finish_task_sync_res":
			return "S2C";
		case "sect_task_receive_res":
			return "S2C";
		case "sect_task_cancel_res":
			return "S2C";
		case "sect_task_finish_res":
			return "S2C";
		case "sect_task_issuance_res":
			return "S2C";
		case "sect_task_reset_res":
			return "S2C";
		case "sect_task_done_rewards_res":
			return "S2C";
		case "diyskill_sync_res":
			return "S2C";
		case "diyskill_create_res":
			return "S2C";
		case "diyskill_save_res":
			return "S2C";
		case "diyskill_discard_res":
			return "S2C";
		case "diyskill_selectuse_res":
			return "S2C";
		case "diyskill_canceluse_res":
			return "S2C";
		case "diyskill_unlock_res":
			return "S2C";
		case "diyskill_buytimes_res":
			return "S2C";
		case "diyskill_share_res":
			return "S2C";
		case "diyskill_cancelshare_res":
			return "S2C";
		case "diyskill_borrow_res":
			return "S2C";
		case "diyskill_flaunt_res":
			return "S2C";
		case "diyskill_shareaward_res":
			return "S2C";
		case "sect_push_application_res":
			return "S2C";
		case "suite_buy_res":
			return "S2C";
		case "store_buy_res":
			return "S2C";
		case "teleport_npc_res":
			return "S2C";
		case "teleport_monster_res":
			return "S2C";
		case "teleport_mineral_res":
			return "S2C";
		case "arena_attacked":
			return "S2C";
		case "arena_sync_res":
			return "S2C";
		case "arena_setpets_res":
			return "S2C";
		case "arena_ranks_res":
			return "S2C";
		case "arena_refresh_res":
			return "S2C";
		case "arena_defencepets_res":
			return "S2C";
		case "arena_resetcool_res":
			return "S2C";
		case "arena_buytimes_res":
			return "S2C";
		case "arena_shopsync_res":
			return "S2C";
		case "arena_shoprefresh_res":
			return "S2C";
		case "arena_shopbuy_res":
			return "S2C";
		case "role_arenamap_start":
			return "S2C";
		case "role_arenamap_end":
			return "S2C";
		case "role_arena_result":
			return "S2C";
		case "arena_startattack_res":
			return "S2C";
		case "arena_log_res":
			return "S2C";
		case "arena_scoresync_res":
			return "S2C";
		case "arena_takescore_res":
			return "S2C";
		case "arena_hidedefence_res":
			return "S2C";
		case "superarena_sync_res":
			return "S2C";
		case "superarena_setpets_res":
			return "S2C";
		case "superarena_singlejoin_res":
			return "S2C";
		case "superarena_teamjoin_res":
			return "S2C";
		case "superarena_startmatch":
			return "S2C";
		case "superarena_join":
			return "S2C";
		case "superarena_quit_res":
			return "S2C";
		case "superarena_shopsync_res":
			return "S2C";
		case "superarena_shoprefresh_res":
			return "S2C";
		case "superarena_shopbuy_res":
			return "S2C";
		case "role_superarenamap_start":
			return "S2C";
		case "role_superarenamap_end":
			return "S2C";
		case "role_superarena_result":
			return "S2C";
		case "aroom_create_res":
			return "S2C";
		case "aroom_invite_res":
			return "S2C";
		case "aroom_invite_forward":
			return "S2C";
		case "aroom_invitedby_res":
			return "S2C";
		case "aroom_leave_res":
			return "S2C";
		case "aroom_invite_refuse":
			return "S2C";
		case "aroom_invite_busy":
			return "S2C";
		case "aroom_kick_res":
			return "S2C";
		case "aroom_change_leader_res":
			return "S2C";
		case "aroom_self_res":
			return "S2C";
		case "aroom_mapr_res":
			return "S2C";
		case "aroom_sync":
			return "S2C";
		case "aroom_join":
			return "S2C";
		case "aroom_leave":
			return "S2C";
		case "aroom_kick":
			return "S2C";
		case "aroom_change_leader":
			return "S2C";
		case "aroom_member_overview":
			return "S2C";
		case "aroom_member_connection":
			return "S2C";
		case "superarena_weekrank_res":
			return "S2C";
		case "superarena_dayrank_res":
			return "S2C";
		case "bwarena_sync_res":
			return "S2C";
		case "bwarena_setpet_res":
			return "S2C";
		case "bwarena_refresh_res":
			return "S2C";
		case "bwarena_buytimes_res":
			return "S2C";
		case "bwarena_startattack_res":
			return "S2C";
		case "bwarena_takescore_res":
			return "S2C";
		case "bwarena_log_res":
			return "S2C";
		case "bwarena_ranks_res":
			return "S2C";
		case "role_bwarenamap_start":
			return "S2C";
		case "role_bwarenamap_end":
			return "S2C";
		case "role_bwarena_result":
			return "S2C";
		case "forcewar_sync_res":
			return "S2C";
		case "forcewar_join_res":
			return "S2C";
		case "forcewar_quit_res":
			return "S2C";
		case "forcewar_startmatch":
			return "S2C";
		case "forcewar_match":
			return "S2C";
		case "forcewar_other_quit":
			return "S2C";
		case "role_forcewarmap_start":
			return "S2C";
		case "role_forcewarmap_end":
			return "S2C";
		case "role_forcewar_result":
			return "S2C";
		case "froom_create_res":
			return "S2C";
		case "froom_invite_res":
			return "S2C";
		case "froom_invite_forward":
			return "S2C";
		case "froom_invitedby_res":
			return "S2C";
		case "froom_leave_res":
			return "S2C";
		case "froom_invite_refuse":
			return "S2C";
		case "froom_invite_busy":
			return "S2C";
		case "froom_kick_res":
			return "S2C";
		case "froom_change_leader_res":
			return "S2C";
		case "froom_mapr_res":
			return "S2C";
		case "froom_sync":
			return "S2C";
		case "froom_join":
			return "S2C";
		case "froom_leave":
			return "S2C";
		case "froom_kick":
			return "S2C";
		case "froom_change_leader":
			return "S2C";
		case "froom_member_overview":
			return "S2C";
		case "froom_members_overview":
			return "S2C";
		case "froom_member_connection":
			return "S2C";
		case "bosses_sync_res":
			return "S2C";
		case "walktoboss_res":
			return "S2C";
		case "transtoboss_res":
			return "S2C";
		case "reset_transtime_res":
			return "S2C";
		case "boss_reward_res":
			return "S2C";
		case "friend_sync_res":
			return "S2C";
		case "friend_pluslist_res":
			return "S2C";
		case "friend_recommend_res":
			return "S2C";
		case "friend_add_res":
			return "S2C";
		case "friend_search_res":
			return "S2C";
		case "friend_delete_res":
			return "S2C";
		case "friend_givevit_res":
			return "S2C";
		case "friend_giveallvits_res":
			return "S2C";
		case "friend_receivevit_res":
			return "S2C";
		case "friend_agreeadd_res":
			return "S2C";
		case "friend_add_push":
			return "S2C";
		case "friend_changemsg_res":
			return "S2C";
		case "friend_changehead_res":
			return "S2C";
		case "friend_enemy_res":
			return "S2C";
		case "friend_removeenemy_res":
			return "S2C";
		case "friend_setfocus_res":
			return "S2C";
		case "give_flower_res":
			return "S2C";
		case "get_flowerlog_res":
			return "S2C";
		case "get_acceptlist_res":
			return "S2C";
		case "auction_syncitems_res":
			return "S2C";
		case "auction_syncselfitems_res":
			return "S2C";
		case "auction_putonitems_res":
			return "S2C";
		case "auction_putonequip_res":
			return "S2C";
		case "auction_putoffitems_res":
			return "S2C";
		case "auction_buyitems_res":
			return "S2C";
		case "auction_expand_res":
			return "S2C";
		case "auction_tradelog_res":
			return "S2C";
		case "auction_itemprices_res":
			return "S2C";
		case "treasure_syncnpcs_res":
			return "S2C";
		case "treasure_refreshnpc_res":
			return "S2C";
		case "treasure_buypieces_res":
			return "S2C";
		case "treasure_npcreward_res":
			return "S2C";
		case "treasure_syncmap_res":
			return "S2C";
		case "treasure_makemap_res":
			return "S2C";
		case "treasure_totalsearch_res":
			return "S2C";
		case "treasure_search_res":
			return "S2C";
		case "treasure_mapreward_res":
			return "S2C";
		case "treasure_quitmap_res":
			return "S2C";
		case "treasure_medalgrow_res":
			return "S2C";
		case "horse_tame_res":
			return "S2C";
		case "horse_use_res":
			return "S2C";
		case "horse_upstar_res":
			return "S2C";
		case "horse_enhance_res":
			return "S2C";
		case "horse_enhancesave_res":
			return "S2C";
		case "horse_changeshow_res":
			return "S2C";
		case "horse_activateshow_res":
			return "S2C";
		case "horse_learnskill_res":
			return "S2C";
		case "sync_horse_skillLevel_res":
			return "S2C";
		case "horse_skill_up_level_res":
			return "S2C";
		case "horse_setskill_res":
			return "S2C";
		case "fashion_upwear_res":
			return "S2C";
		case "fashion_setshow_res":
			return "S2C";
		case "role_curfashions":
			return "S2C";
		case "seal_make_res":
			return "S2C";
		case "seal_upgrade_res":
			return "S2C";
		case "seal_enhance_res":
			return "S2C";
		case "seal_save_enhance_res":
			return "S2C";
		case "expcoin_sync_res":
			return "S2C";
		case "expcoin_extract_res":
			return "S2C";
		case "rarebook_sync_res":
			return "S2C";
		case "rarebook_push_res":
			return "S2C";
		case "rarebook_pop_res":
			return "S2C";
		case "rarebook_unlock_res":
			return "S2C";
		case "rarebook_lvlup_res":
			return "S2C";
		case "grasp_sync_res":
			return "S2C";
		case "grasp_dayforture_refresh":
			return "S2C";
		case "grasp_impl_res":
			return "S2C";
		case "grasp_reset_res":
			return "S2C";
		case "dmgtransfer_buypoint_res":
			return "S2C";
		case "dmgtransfer_putpoint_res":
			return "S2C";
		case "dmgtransfer_lvlup_res":
			return "S2C";
		case "dmgtransfer_reset_res":
			return "S2C";
		case "usersurvey_sync_res":
			return "S2C";
		case "usersurvey_submit_res":
			return "S2C";
		case "usersurvey_reward_res":
			return "S2C";
		case "cblogingift_sync_res":
			return "S2C";
		case "cblogingift_take_res":
			return "S2C";
		case "cblvlupgift_sync_res":
			return "S2C";
		case "cblvlupgift_take_res":
			return "S2C";
		case "userdata_sync_res":
			return "S2C";
		case "userdata_modify_res":
			return "S2C";
		case "userdata_reward_res":
			return "S2C";
		case "cbcountdowngift_sync_res":
			return "S2C";
		case "cbcountdowngift_take_res":
			return "S2C";
		case "ontimegift_sync_res":
			return "S2C";
		case "ontimegift_take_res":
			return "S2C";
		case "strengthengift_sync_res":
			return "S2C";
		case "strengthengift_take_res":
			return "S2C";
		case "official_research_sync_res":
			return "S2C";
		case "official_research_take_res":
			return "S2C";
		case "role_tempvip":
			return "S2C";
		case "permanenttitle_set_res":
			return "S2C";
		case "timedtitle_set_res":
			return "S2C";
		case "titleslot_unlock_res":
			return "S2C";
		case "branch_task_take_res":
			return "S2C";
		case "branch_task_quit_res":
			return "S2C";
		case "branch_task_finish_res":
			return "S2C";
		case "sync_tower_res":
			return "S2C";
		case "tower_record_res":
			return "S2C";
		case "tower_setpets_res":
			return "S2C";
		case "tower_startfight_res":
			return "S2C";
		case "role_towermap_sync":
			return "S2C";
		case "tower_buytimes_res":
			return "S2C";
		case "tower_sweep_res":
			return "S2C";
		case "sync_towerfame_res":
			return "S2C";
		case "tower_donate_res":
			return "S2C";
		case "take_towerfame_res":
			return "S2C";
		case "enter_secretmap_res":
			return "S2C";
		case "take_secretreward_res":
			return "S2C";
		case "sect_deliver_sync_res":
			return "S2C";
		case "sect_deliver_refresh_res":
			return "S2C";
		case "sect_deliver_protect_res":
			return "S2C";
		case "sect_deliver_begin_res":
			return "S2C";
		case "sect_deliver_search_help_res":
			return "S2C";
		case "sect_deliver_on_help_res":
			return "S2C";
		case "sect_deliver_cancel_res":
			return "S2C";
		case "sect_deliver_finish_res":
			return "S2C";
		case "sect_deliver_sync_wish_res":
			return "S2C";
		case "sect_deliver_add_wish_res":
			return "S2C";
		case "sect_deliver_save_wish_res":
			return "S2C";
		case "sect_deliver_help_push":
			return "S2C";
		case "sect_rob_task_take_res":
			return "S2C";
		case "sect_rob_task_cancel_res":
			return "S2C";
		case "sect_rob_flag":
			return "S2C";
		case "sect_rob_finish":
			return "S2C";
		case "destory_own_car":
			return "S2C";
		case "sect_deliver_shopsync_res":
			return "S2C";
		case "sect_deliver_shoprefresh_res":
			return "S2C";
		case "sect_deliver_shopbuy_res":
			return "S2C";
		case "produce_workshopsync_res":
			return "S2C";
		case "produce_createnewrecipe_res":
			return "S2C";
		case "produce_produce_res":
			return "S2C";
		case "produce_split_res":
			return "S2C";
		case "produce_fusion_res":
			return "S2C";
		case "produce_splitspbuy_res":
			return "S2C";
		case "bag_merge_res":
			return "S2C";
		case "rmactivity_takereward_res":
			return "S2C";
		case "role_rename_res":
			return "S2C";
		case "horse_ride_res":
			return "S2C";
		case "horse_unride_res":
			return "S2C";
		case "mulhorse_invite_res":
			return "S2C";
		case "mulhorse_invite_forward":
			return "S2C";
		case "mulhorse_invitehandle_res":
			return "S2C";
		case "mulhorse_invite_result":
			return "S2C";
		case "mulhorse_apply_res":
			return "S2C";
		case "mulhorse_apply_forward":
			return "S2C";
		case "mulhorse_applyhandle_res":
			return "S2C";
		case "mulhorse_apply_result":
			return "S2C";
		case "mulhorse_leave_res":
			return "S2C";
		case "mulhorse_kick_res":
			return "S2C";
		case "mulhorse_join":
			return "S2C";
		case "mulhorse_leave":
			return "S2C";
		case "mulhorse_kick":
			return "S2C";
		case "staywith_invite_res":
			return "S2C";
		case "staywith_invite_forward":
			return "S2C";
		case "staywith_invitehandle_res":
			return "S2C";
		case "staywith_invite_result":
			return "S2C";
		case "staywith_join":
			return "S2C";
		case "staywith_dissolve":
			return "S2C";
		case "staywith_leave_res":
			return "S2C";
		case "sync_message_board_res":
			return "S2C";
		case "add_message_board_res":
			return "S2C";
		case "comment_message_board_res":
			return "S2C";
		case "change_message_board_content_res":
			return "S2C";
		case "schedule_sync_res":
			return "S2C";
		case "schedule_mapreward_res":
			return "S2C";
		case "role_schedule_info":
			return "S2C";
		case "role_touch_boss":
			return "S2C";
		case "save_guide_mapcopy_res":
			return "S2C";
		case "sync_guide_mapcopy_step":
			return "S2C";
		case "sect_invite_res":
			return "S2C";
		case "sect_invite_response_res":
			return "S2C";
		case "role_sect_invite":
			return "S2C";
		case "role_refuse_sect_invite":
			return "S2C";
		case "sect_invite_busy":
			return "S2C";
		case "role_armor_info":
			return "S2C";
		case "unlock_armor_type_res":
			return "S2C";
		case "armor_uprank_res":
			return "S2C";
		case "armor_add_talent_res":
			return "S2C";
		case "armor_change_res":
			return "S2C";
		case "armor_up_level_res":
			return "S2C";
		case "rune_push_res":
			return "S2C";
		case "rune_pop_res":
			return "S2C";
		case "reset_talent_point_res":
			return "S2C";
		case "solt_group_unlock_res":
			return "S2C";
		case "solt_push_rune_res":
			return "S2C";
		case "lang_push_rune_res":
			return "S2C";
		case "rune_wish_res":
			return "S2C";
		case "put_in_warehouse_res":
			return "S2C";
		case "take_out_warehouse_res":
			return "S2C";
		case "expand_warehouse_res":
			return "S2C";
		case "sync_private_warehouse_res":
			return "S2C";
		case "sync_public_warehouse_res":
			return "S2C";
		case "propose_push":
			return "S2C";
		case "propose_res":
			return "S2C";
		case "propose_response_res":
			return "S2C";
		case "role_propose_response":
			return "S2C";
		case "marriage_sync_res":
			return "S2C";
		case "login_marriage_info":
			return "S2C";
		case "divorce_res":
			return "S2C";
		case "marriage_skill_levelup_res":
			return "S2C";
		case "transform_to_partner_res":
			return "S2C";
		case "marriage_start_parade_res":
			return "S2C";
		case "marriage_start_banquet_res":
			return "S2C";
		case "exchange_item_res":
			return "S2C";
		case "exchange_item_times":
			return "S2C";
		case "mrgseriestask_open_res":
			return "S2C";
		case "mrgseriestask_take_res":
			return "S2C";
		case "mrgseriestask_reward_res":
			return "S2C";
		case "role_mrgseriestask_open":
			return "S2C";
		case "role_mrgseriestask_take":
			return "S2C";
		case "role_mrgseriestask_reward":
			return "S2C";
		case "role_mrgseriestask_update":
			return "S2C";
		case "mrglooptask_open_res":
			return "S2C";
		case "mrglooptask_take_res":
			return "S2C";
		case "mrglooptask_reward_res":
			return "S2C";
		case "role_mrglooptask_open":
			return "S2C";
		case "role_mrglooptask_take":
			return "S2C";
		case "role_mrglooptask_reward":
			return "S2C";
		case "role_mrglooptask_update":
			return "S2C";
		case "role_mrgtask":
			return "S2C";
		case "save_skill_preset_res":
			return "S2C";
		case "save_all_skill_preset_res":
			return "S2C";
		case "save_spirits_preset_res":
			return "S2C";
		case "delete_skill_preset_res":
			return "S2C";
		case "delete_spirits_preset_res":
			return "S2C";
		case "change_skill_preset_res":
			return "S2C";
		case "change_spirits_preset_res":
			return "S2C";
		case "role_skill_preset":
			return "S2C";
		case "sect_group_map_open_res":
			return "S2C";
		case "sect_group_map_enter_res":
			return "S2C";
		case "sect_group_map_sync_res":
			return "S2C";
		case "sect_group_map_end":
			return "S2C";
		case "weapon_skill_level_up_res":
			return "S2C";
		case "weapon_talent_level_up_res":
			return "S2C";
		case "weapon_talent_point_buy_res":
			return "S2C";
		case "weapon_talent_point_reset_res":
			return "S2C";
		case "send_gift_res":
			return "S2C";
		case "sync_big_map_flag_info_res":
			return "S2C";
		case "map_flag_info":
			return "S2C";
		case "map_flag_sect_change":
			return "S2C";
		case "role_item_props":
			return "S2C";
		case "role_life_use":
			return "S2C";
		case "pet_skill_level_up_res":
			return "S2C";
		case "sync_special_card_res":
			return "S2C";
		case "take_special_card_reward_res":
			return "S2C";
		case "sync_daily_vit_reward_res":
			return "S2C";
		case "take_daily_vit_reward_res":
			return "S2C";
		case "role_weapon_master":
			return "S2C";
		case "role_activity_map_cur_process":
			return "S2C";
		case "role_fame_level":
			return "S2C";
		case "try_open_insight_res":
			return "S2C";
		case "try_open_revenge_res":
			return "S2C";
		case "try_sync_insight_res":
			return "S2C";
		case "try_sync_revenge_res":
			return "S2C";
		case "try_transform_insight_res":
			return "S2C";
		case "try_transform_revenge_res":
			return "S2C";
		case "heirloom_wipe_res":
			return "S2C";
		case "heirloom_takeout_res":
			return "S2C";
		case "role_heirloom_info":
			return "S2C";
		case "buy_offline_func_point_res":
			return "S2C";
		case "role_offline_wizard":
			return "S2C";
		case "set_sect_qqgroup_res":
			return "S2C";
		case "role_level_exp":
			return "S2C";
		case "set_heirloom_display_res":
			return "S2C";
		case "feat_gambleshopsync_res":
			return "S2C";
		case "feat_gambleshoprefresh_res":
			return "S2C";
		case "feat_gambleshopbuy_res":
			return "S2C";
		case "add_marriage_bespeak_res":
			return "S2C";
		case "sync_marriage_bespeak_res":
			return "S2C";
		case "role_marriage_bespeak_time":
			return "S2C";
		case "role_marriage_here":
			return "S2C";
		case "role_marriage_partner_name":
			return "S2C";
		case "role_survey_notice":
			return "S2C";
		case "base_dummygoods_quick_buy_res":
			return "S2C";
		case "role_marriage_step":
			return "S2C";
		case "sect_history_broadcast":
			return "S2C";
		case "activity_last_quick_done_res":
			return "S2C";
		case "role_activity_last":
			return "S2C";
		case "stele_sync_res":
			return "S2C";
		case "stele_join_res":
			return "S2C";
		case "stele_rank_res":
			return "S2C";
		case "stele_teleport_res":
			return "S2C";
		case "role_stele":
			return "S2C";
		case "role_stele_card":
			return "S2C";
		case "blacklist_add_res":
			return "S2C";
		case "blacklist_del_res":
			return "S2C";
		case "blacklist_sync_res":
			return "S2C";
		case "role_blacklist":
			return "S2C";
		case "demonhole_sync_res":
			return "S2C";
		case "demonhole_join_res":
			return "S2C";
		case "demonhole_changefloor_res":
			return "S2C";
		case "demonhole_battle_res":
			return "S2C";
		case "role_demonhole_start":
			return "S2C";
		case "role_demonhole_end":
			return "S2C";
		case "role_demonholemap_sync":
			return "S2C";
		case "role_demonhole_result":
			return "S2C";
		case "justicemap_start_res":
			return "S2C";
		case "justicemap_day_enter_time":
			return "S2C";
		case "emergency_sync_res":
			return "S2C";
		case "emergency_enter_res":
			return "S2C";
		case "emergency_rank_res":
			return "S2C";
		case "sync_prestige_num":
			return "S2C";
		case "role_emergency_map_end":
			return "S2C";
		case "lucklystar_sync_res":
			return "S2C";
		case "lucklystar_gift_res":
			return "S2C";
		case "lucklystar_push":
			return "S2C";
		case "recv_lucnlystar_by_role":
			return "S2C";
		case "fightnpc_start_res":
			return "S2C";
		case "fightnpc_reward_res":
			return "S2C";
		case "role_fightnpc":
			return "S2C";
		case "role_fightnpcmap_start":
			return "S2C";
		case "role_fightnpcmap_end":
			return "S2C";
		case "role_fightnpcmap_result":
			return "S2C";
		case "packetreward_sync_res":
			return "S2C";
		case "packetreward_take_res":
			return "S2C";
		case "horse_enhance_prop_unlock_res":
			return "S2C";
		case "role_cur_wizard_pet":
			return "S2C";
		case "buy_wizard_pet_time_res":
			return "S2C";
		case "set_cur_wizard_pet_res":
			return "S2C";
		case "sync_item_unlock_head_res":
			return "S2C";
		case "socialmsg_send_res":
			return "S2C";
		case "socialmsg_like_res":
			return "S2C";
		case "socialmsg_dislike_res":
			return "S2C";
		case "socialmsg_pageinfo_res":
			return "S2C";
		case "npc_transfrom_res":
			return "S2C";
		case "unlock_head_res":
			return "S2C";
		case "towerdefence_start_res":
			return "S2C";
		case "towerdefence_selectcard_res":
			return "S2C";
		case "role_towerdefence_autocard":
			return "S2C";
		case "role_towerdefence_start":
			return "S2C";
		case "role_towerdefence_end":
			return "S2C";
		case "role_towerdefence_result":
			return "S2C";
		case "role_towerdefence_info":
			return "S2C";
		case "start_npc_map_res":
			return "S2C";
		case "role_day_npc_map_times":
			return "S2C";
		case "join_npc_pray_res":
			return "S2C";
		case "role_day_npc_pray_times":
			return "S2C";
		case "unlock_private_warehouse_res":
			return "S2C";
		case "role_show_props":
			return "S2C";
		case "role_map_welcome_start":
			return "S2C";
		case "role_map_welcome":
			return "S2C";
		case "role_skills_cooldown":
			return "S2C";
		case "role_spawn_point":
			return "S2C";
		case "role_weaponlefttime":
			return "S2C";
		case "role_curridehorse":
			return "S2C";
		case "role_taskalter":
			return "S2C";
		case "role_petalter":
			return "S2C";
		case "role_armor":
			return "S2C";
		case "role_escortcar":
			return "S2C";
		case "role_weddingcar":
			return "S2C";
		case "role_weddingcar_destory":
			return "S2C";
		case "role_update_timetick":
			return "S2C";
		case "client_ping_end":
			return "S2C";
		case "role_ghost":
			return "S2C";
		case "nearby_upwear_fashion":
			return "S2C";
		case "nearby_set_fashionshow":
			return "S2C";
		case "nearby_role_updatetitle":
			return "S2C";
		case "nearby_role_alterstate":
			return "S2C";
		case "nearby_ride_horse":
			return "S2C";
		case "nearby_unride_horse":
			return "S2C";
		case "nearby_role_endskill":
			return "S2C";
		case "nearby_role_finishattack":
			return "S2C";
		case "nearby_pet_endskill":
			return "S2C";
		case "nearby_pet_finishattack":
			return "S2C";
		case "nearby_monster_endskill":
			return "S2C";
		case "nearby_monster_finishattack":
			return "S2C";
		case "nearby_blur_endskill":
			return "S2C";
		case "nearby_blur_finishattack":
			return "S2C";
		case "nearby_skillentity_endskill":
			return "S2C";
		case "nearby_role_breakskill":
			return "S2C";
		case "nearby_pet_breakskill":
			return "S2C";
		case "nearby_monster_breakskill":
			return "S2C";
		case "nearby_blur_breakskill":
			return "S2C";
		case "nearby_role_change_target":
			return "S2C";
		case "nearby_role_change_rotation":
			return "S2C";
		case "role_adjust_pos":
			return "S2C";
		case "pet_adjust_pos":
			return "S2C";
		case "monster_adjust_pos":
			return "S2C";
		case "nearby_enter_roles":
			return "S2C";
		case "nearby_enter_pets":
			return "S2C";
		case "nearby_enter_traps":
			return "S2C";
		case "nearby_enter_escortcars":
			return "S2C";
		case "nearby_enter_monsters":
			return "S2C";
		case "nearby_enter_blurs":
			return "S2C";
		case "nearby_enter_skillentitys":
			return "S2C";
		case "nearby_enter_npcs":
			return "S2C";
		case "nearby_enter_weddingcars":
			return "S2C";
		case "nearby_enter_minerals":
			return "S2C";
		case "nearby_enter_waypoints":
			return "S2C";
		case "nearby_enter_mapbuffs":
			return "S2C";
		case "nearby_enter_role":
			return "S2C";
		case "nearby_enter_pet":
			return "S2C";
		case "nearby_spawn_monster":
			return "S2C";
		case "nearby_enter_monster":
			return "S2C";
		case "nearby_enter_trap":
			return "S2C";
		case "nearby_enter_npc":
			return "S2C";
		case "nearby_enter_mineral":
			return "S2C";
		case "nearby_enter_waypoint":
			return "S2C";
		case "nearby_enter_mapbuff":
			return "S2C";
		case "nearby_enter_skillentity":
			return "S2C";
		case "nearby_enter_blur":
			return "S2C";
		case "nearby_leave_roles":
			return "S2C";
		case "nearby_leave_monsters":
			return "S2C";
		case "nearby_leave_traps":
			return "S2C";
		case "nearby_leave_pets":
			return "S2C";
		case "nearby_leave_escortcars":
			return "S2C";
		case "nearby_leave_npcs":
			return "S2C";
		case "nearby_leave_weddingcars":
			return "S2C";
		case "nearby_leave_minerals":
			return "S2C";
		case "nearby_leave_waypoints":
			return "S2C";
		case "nearby_leave_mapbuffs":
			return "S2C";
		case "nearby_leave_skillentitys":
			return "S2C";
		case "nearby_leave_blurs":
			return "S2C";
		case "nearby_leave_role":
			return "S2C";
		case "nearby_leave_monster":
			return "S2C";
		case "nearby_leave_trap":
			return "S2C";
		case "nearby_leave_pet":
			return "S2C";
		case "nearby_leave_npc":
			return "S2C";
		case "nearby_leave_mineral":
			return "S2C";
		case "nearby_leave_waypoint":
			return "S2C";
		case "nearby_leave_mapbuff":
			return "S2C";
		case "nearby_leave_skillentity":
			return "S2C";
		case "nearby_leave_blur":
			return "S2C";
		case "nearby_role_resetposition":
			return "S2C";
		case "nearby_role_updateposition":
			return "S2C";
		case "nearby_move_role":
			return "S2C";
		case "nearby_pet_resetposition":
			return "S2C";
		case "nearby_pet_updateposition":
			return "S2C";
		case "nearby_move_pet":
			return "S2C";
		case "nearby_move_escortcar":
			return "S2C";
		case "nearby_move_monster":
			return "S2C";
		case "nearby_move_blur":
			return "S2C";
		case "nearby_move_skillentity":
			return "S2C";
		case "nearby_move_weddingcar":
			return "S2C";
		case "nearby_stopmove_role":
			return "S2C";
		case "nearby_stopmove_pet":
			return "S2C";
		case "nearby_stopmove_monster":
			return "S2C";
		case "nearby_stopmove_escortcar":
			return "S2C";
		case "nearby_stopmove_blur":
			return "S2C";
		case "nearby_stopmove_skillentity":
			return "S2C";
		case "nearby_stopmove_weddingcar":
			return "S2C";
		case "nearby_role_usefollowskill":
			return "S2C";
		case "nearby_role_socialaction":
			return "S2C";
		case "nearby_role_useskill":
			return "S2C";
		case "nearby_role_usediyskill":
			return "S2C";
		case "nearby_pet_useskill":
			return "S2C";
		case "nearby_monster_useskill":
			return "S2C";
		case "nearby_trap_useskill":
			return "S2C";
		case "nearby_blur_useskill":
			return "S2C";
		case "nearby_role_usechildskill":
			return "S2C";
		case "nearby_pet_usechildskill":
			return "S2C";
		case "nearby_monster_usechildskill":
			return "S2C";
		case "nearby_blur_usechildskill":
			return "S2C";
		case "nearby_skillentity_usechildskill":
			return "S2C";
		case "nearby_role_usetrigskill":
			return "S2C";
		case "nearby_pet_usetrigskill":
			return "S2C";
		case "nearby_monster_usetrigskill":
			return "S2C";
		case "nearby_blur_usetrigskill":
			return "S2C";
		case "nearby_first_blood":
			return "S2C";
		case "nearby_role_kill":
			return "S2C";
		case "nearby_processdamage_end":
			return "S2C";
		case "nearby_role_ondamage":
			return "S2C";
		case "nearby_pet_ondamage":
			return "S2C";
		case "nearby_escortcar_ondamage":
			return "S2C";
		case "nearby_monster_ondamage":
			return "S2C";
		case "nearby_blur_ondamage":
			return "S2C";
		case "nearby_role_addbuff":
			return "S2C";
		case "nearby_monster_addbuff":
			return "S2C";
		case "nearby_pet_addbuff":
			return "S2C";
		case "nearby_escortcar_addbuff":
			return "S2C";
		case "nearby_blur_addbuff":
			return "S2C";
		case "nearby_role_removebuff":
			return "S2C";
		case "nearby_monster_removebuff":
			return "S2C";
		case "nearby_escortcar_removebuff":
			return "S2C";
		case "nearby_pet_removebuff":
			return "S2C";
		case "nearby_blur_removebuff":
			return "S2C";
		case "nearby_role_dispelbuff":
			return "S2C";
		case "nearby_monster_dispelbuff":
			return "S2C";
		case "nearby_pet_dispelbuff":
			return "S2C";
		case "nearby_role_reduce":
			return "S2C";
		case "nearby_pet_reduce":
			return "S2C";
		case "nearby_monster_reduce":
			return "S2C";
		case "nearby_role_buffdamage":
			return "S2C";
		case "nearby_monster_buffdamage":
			return "S2C";
		case "nearby_escortcar_buffdamage":
			return "S2C";
		case "nearby_pet_buffdamage":
			return "S2C";
		case "nearby_blur_buffdamage":
			return "S2C";
		case "nearby_role_updatehp":
			return "S2C";
		case "nearby_monster_updatehp":
			return "S2C";
		case "nearby_pet_updatehp":
			return "S2C";
		case "nearby_blur_updatehp":
			return "S2C";
		case "nearby_escortcar_updatehp":
			return "S2C";
		case "nearby_escortcar_updatesocial":
			return "S2C";
		case "nearby_escortcar_updatestate":
			return "S2C";
		case "nearby_escortcar_robbed":
			return "S2C";
		case "nearby_role_dead":
			return "S2C";
		case "nearby_pet_dead":
			return "S2C";
		case "nearby_monster_dead":
			return "S2C";
		case "nearby_blur_dead":
			return "S2C";
		case "nearby_role_rushstart":
			return "S2C";
		case "nearby_pet_rushstart":
			return "S2C";
		case "nearby_monster_rushstart":
			return "S2C";
		case "nearby_monster_rushend":
			return "S2C";
		case "nearby_blur_rushstart":
			return "S2C";
		case "nearby_blur_rushend":
			return "S2C";
		case "nearby_role_lvlup":
			return "S2C";
		case "nearby_role_updatepart":
			return "S2C";
		case "nearby_role_updatemaxhp":
			return "S2C";
		case "nearby_role_carbehavior":
			return "S2C";
		case "nearby_pet_updatemaxhp":
			return "S2C";
		case "nearby_escortcar_updatemaxhp":
			return "S2C";
		case "nearby_role_revive":
			return "S2C";
		case "nearby_pet_revive":
			return "S2C";
		case "nearby_trap_changestate":
			return "S2C";
		case "nearby_role_updateequip":
			return "S2C";
		case "nearby_role_removeequip":
			return "S2C";
		case "nearby_role_motivateweapon":
			return "S2C";
		case "nearby_role_motivateend":
			return "S2C";
		case "nearby_role_mineralstart":
			return "S2C";
		case "nearby_role_mineralend":
			return "S2C";
		case "nearby_mineral_updatestate":
			return "S2C";
		case "nearby_role_mineralbreak":
			return "S2C";
		case "nearby_shiftend_role":
			return "S2C";
		case "nearby_shiftend_pet":
			return "S2C";
		case "nearby_shiftend_monster":
			return "S2C";
		case "nearby_shiftend_blur":
			return "S2C";
		case "nearby_addataunt_role":
			return "S2C";
		case "nearby_addataunt_pet":
			return "S2C";
		case "nearby_addataunt_monster":
			return "S2C";
		case "nearby_addataunt_blur":
			return "S2C";
		case "nearby_addspa_monster":
			return "S2C";
		case "nearby_update_sectbrief":
			return "S2C";
		case "nearby_role_addstate":
			return "S2C";
		case "nearby_role_removestate":
			return "S2C";
		case "role_addstate":
			return "S2C";
		case "role_removestate":
			return "S2C";
		case "pet_addstate":
			return "S2C";
		case "pet_removestate":
			return "S2C";
		case "role_revive":
			return "S2C";
		case "role_summon_pet":
			return "S2C";
		case "role_unsummon_pet":
			return "S2C";
		case "role_revive_pet":
			return "S2C";
		case "pet_reset_position":
			return "S2C";
		case "nearby_call_pet":
			return "S2C";
		case "nearby_dissolve_pet":
			return "S2C";
		case "role_sync_durability":
			return "S2C";
		case "role_sync_sp":
			return "S2C";
		case "role_sync_bufffightSP":
			return "S2C";
		case "role_sync_fightSP":
			return "S2C";
		case "pet_sync_sp":
			return "S2C";
		case "motivate_state":
			return "S2C";
		case "roles_detail":
			return "S2C";
		case "traps_detail":
			return "S2C";
		case "pets_detail":
			return "S2C";
		case "drop_delete":
			return "S2C";
		case "role_pickup_add":
			return "S2C";
		case "role_sync_drops":
			return "S2C";
		case "role_sync_alldrops":
			return "S2C";
		case "role_mapbuff_add":
			return "S2C";
		case "drop_mapbuff":
			return "S2C";
		case "privatemap_sync_progress":
			return "S2C";
		case "superarena_info":
			return "S2C";
		case "update_curspawnarea":
			return "S2C";
		case "role_trig_skill":
			return "S2C";
		case "pet_trig_skill":
			return "S2C";
		case "role_update_pkvalue":
			return "S2C";
		case "nearby_update_pkinfo":
			return "S2C";
		case "role_reset_skill":
			return "S2C";
		case "pet_reset_skill":
			return "S2C";
		case "role_quickcool_skill":
			return "S2C";
		case "pet_quickcool_skill":
			return "S2C";
		case "role_forcewar_score":
			return "S2C";
		case "forcewar_members_position":
			return "S2C";
		case "role_forcewar_statues":
			return "S2C";
		case "roles_forcewaroverview":
			return "S2C";
		case "role_forcewar_kill":
			return "S2C";
		case "role_forcewar_assist":
			return "S2C";
		case "nearby_forcewar_statues":
			return "S2C";
		case "nearby_forcewar_campscore":
			return "S2C";
		case "forcewar_first_blood":
			return "S2C";
		case "nearby_forcewar_kill":
			return "S2C";
		case "nearby_role_rename":
			return "S2C";
		case "role_mulhorse":
			return "S2C";
		case "role_leave_mulhorse":
			return "S2C";
		case "role_update_mulhorse":
			return "S2C";
		case "nearby_update_mulhorse":
			return "S2C";
		case "role_staywith":
			return "S2C";
		case "role_dissolve_staywith":
			return "S2C";
		case "nearby_role_staywith":
			return "S2C";
		case "nearby_dissolve_staywith":
			return "S2C";
		case "boss_damage_rank":
			return "S2C";
		case "boss_damage_close":
			return "S2C";
		case "nearby_role_updatearmor":
			return "S2C";
		case "role_armorfreeze_update":
			return "S2C";
		case "role_armorval_update":
			return "S2C";
		case "role_armorweak_update":
			return "S2C";
		case "nearby_role_armorweak":
			return "S2C";
		case "superarena_race_result":
			return "S2C";
		case "superarena_race_results":
			return "S2C";
		case "sect_group_map_sync_info":
			return "S2C";
		case "enter_sect_group_map":
			return "S2C";
		case "role_double_drop":
			return "S2C";
		case "world_boss_pop":
			return "S2C";
		case "entity_nearby":
			return "S2C";
		case "nearby_role_updateheirloom":
			return "S2C";
		case "nearby_role_updatewizardpet":
			return "S2C";
		case "map_copy_damage_rank":
			return "S2C";
		case "receive_towerdefence_alarm":
			return "S2C";
		case "towerdefence_npc_pop":
			return "S2C";
		case "towerdefence_spawn_monsters":
			return "S2C";
		case "towerdefence_npc_info":
			return "S2C";
		case "towerdefence_npc_dead":
			return "S2C";
		case "sync_role_forcetype":
			return "S2C";
		case "sync_role_mapskill":
			return "S2C";
		case "role_usemapskill_ok":
			return "S2C";
		case "client_ping":
			return "C2S";
		case "keep_alive":
			return "C2S";
		case "user_login_req":
			return "C2S";
		case "role_logout_req":
			return "C2S";
		case "query_loginqueue_pos":
			return "C2S";
		case "cancel_loginqueue":
			return "C2S";
		case "role_sync_map":
			return "C2S";
		case "msg_send_req":
			return "C2S";
		case "master_apply_req":
			return "C2S";
		case "master_offer_req":
			return "C2S";
		case "master_accept_offer_req":
			return "C2S";
		case "master_accept_apply_req":
			return "C2S";
		case "master_betray_req":
			return "C2S";
		case "master_graduate_req":
			return "C2S";
		case "master_agree_graduate_req":
			return "C2S";
		case "master_dismiss_req":
			return "C2S";
		case "master_get_announce_req":
			return "C2S";
		case "master_set_announce_req":
			return "C2S";
		case "master_del_announce_req":
			return "C2S";
		case "master_info_req":
			return "C2S";
		case "master_msg_list_req":
			return "C2S";
		case "master_remove_betray_msg_req":
			return "C2S";
		case "master_list_req":
			return "C2S";
		case "master_list_apprentice_req":
			return "C2S";
		case "master_tasks_req":
			return "C2S";
		case "master_shopsync_req":
			return "C2S";
		case "master_shoprefresh_req":
			return "C2S";
		case "master_shopbuy_req":
			return "C2S";
		case "role_enter_map":
			return "C2S";
		case "waypoint_enter_req":
			return "C2S";
		case "wrongpos_leave_req":
			return "C2S";
		case "worldline_sync_req":
			return "C2S";
		case "worldline_change_req":
			return "C2S";
		case "query_rolebrief_req":
			return "C2S";
		case "query_robot_req":
			return "C2S";
		case "query_rolefeature_req":
			return "C2S";
		case "query_petoverviews_req":
			return "C2S";
		case "query_weaponoverviews_req":
			return "C2S";
		case "role_revive_insitu_req":
			return "C2S";
		case "role_revive_other_req":
			return "C2S";
		case "role_revive_safe_req":
			return "C2S";
		case "role_transform_req":
			return "C2S";
		case "checkin_sync_req":
			return "C2S";
		case "checkin_take_req":
			return "C2S";
		case "mall_sync_req":
			return "C2S";
		case "mall_buy_req":
			return "C2S";
		case "benefit_sync_req":
			return "C2S";
		case "payactivity_sync_req":
			return "C2S";
		case "firstpaygift_sync_req":
			return "C2S";
		case "firstpaygift_take_req":
			return "C2S";
		case "dailypaygift_sync_req":
			return "C2S";
		case "dailypaygift_take_req":
			return "C2S";
		case "lastpaygift_sync_req":
			return "C2S";
		case "lastpaygift_take_req":
			return "C2S";
		case "activitychallengegift_sync_req":
			return "C2S";
		case "activitychallengegift_take_req":
			return "C2S";
		case "upgradepurchase_sync_req":
			return "C2S";
		case "upgradepurchase_buy_req":
			return "C2S";
		case "paygift_sync_req":
			return "C2S";
		case "paygift_take_req":
			return "C2S";
		case "consumegift_sync_req":
			return "C2S";
		case "consumegift_take_req":
			return "C2S";
		case "upgradegift_sync_req":
			return "C2S";
		case "upgradegift_take_req":
			return "C2S";
		case "investmentfund_sync_req":
			return "C2S";
		case "investmentfund_buy_req":
			return "C2S";
		case "investmentfund_take_req":
			return "C2S";
		case "growthfund_sync_req":
			return "C2S";
		case "growthfund_buy_req":
			return "C2S";
		case "growthfund_take_req":
			return "C2S";
		case "doubledrop_sync_req":
			return "C2S";
		case "extradrop_sync_req":
			return "C2S";
		case "exchangegift_sync_req":
			return "C2S";
		case "exchangegift_take_req":
			return "C2S";
		case "logingift_sync_req":
			return "C2S";
		case "logingift_take_req":
			return "C2S";
		case "giftpackage_sync_req":
			return "C2S";
		case "giftpackage_take_req":
			return "C2S";
		case "pbtcashback_sync_req":
			return "C2S";
		case "pbtcashback_take_req":
			return "C2S";
		case "payrank_sync_req":
			return "C2S";
		case "groupbuy_sync_req":
			return "C2S";
		case "groupbuy_buy_req":
			return "C2S";
		case "flashsale_sync_req":
			return "C2S";
		case "flashsale_buy_req":
			return "C2S";
		case "luckyroll_sync_req":
			return "C2S";
		case "luckyroll_play_req":
			return "C2S";
		case "directpurchase_sync_req":
			return "C2S";
		case "directpurchase_take_req":
			return "C2S";
		case "onearmbandit_sync_req":
			return "C2S";
		case "onearmbandit_take_req":
			return "C2S";
		case "adver_sync_req":
			return "C2S";
		case "mapcopy_leave_req":
			return "C2S";
		case "normalmap_start_req":
			return "C2S";
		case "activitymap_start_req":
			return "C2S";
		case "commonmap_selectcard_req":
			return "C2S";
		case "normalmap_buytimes_req":
			return "C2S";
		case "activitymap_buytimes_req":
			return "C2S";
		case "privatemap_sweep_req":
			return "C2S";
		case "activity_sweep_req":
			return "C2S";
		case "mail_syncsys_req":
			return "C2S";
		case "mail_synctmp_req":
			return "C2S";
		case "mail_read_req":
			return "C2S";
		case "mail_readsys_req":
			return "C2S";
		case "mail_readtmp_req":
			return "C2S";
		case "mail_take_req":
			return "C2S";
		case "mail_takesys_req":
			return "C2S";
		case "mail_taketmp_req":
			return "C2S";
		case "mail_del_req":
			return "C2S";
		case "mail_delsys_req":
			return "C2S";
		case "mail_deltmp_req":
			return "C2S";
		case "mail_takeallsys_req":
			return "C2S";
		case "mail_takealltmp_req":
			return "C2S";
		case "rollnotice_query":
			return "C2S";
		case "rank_sync_req":
			return "C2S";
		case "sectrank_sync_req":
			return "C2S";
		case "rank_get_req":
			return "C2S";
		case "sectrank_get_req":
			return "C2S";
		case "rank_self_req":
			return "C2S";
		case "sectrank_self_req":
			return "C2S";
		case "buy_coin_req":
			return "C2S";
		case "buy_vit_req":
			return "C2S";
		case "pay_sync_req":
			return "C2S";
		case "pay_asgod_req":
			return "C2S";
		case "vip_take_req":
			return "C2S";
		case "bag_expand_req":
			return "C2S";
		case "bag_sellequip_req":
			return "C2S";
		case "bag_sellitem_req":
			return "C2S";
		case "bag_sellgem_req":
			return "C2S";
		case "bag_sellbook_req":
			return "C2S";
		case "bag_batchsellequips_req":
			return "C2S";
		case "bag_batchsellitems_req":
			return "C2S";
		case "bag_batchsellgems_req":
			return "C2S";
		case "bag_batchsellbooks_req":
			return "C2S";
		case "bag_useitemgift_req":
			return "C2S";
		case "bag_useitemcoin_req":
			return "C2S";
		case "bag_useitemdiamond_req":
			return "C2S";
		case "bag_useitemexp_req":
			return "C2S";
		case "bag_useitemhp_req":
			return "C2S";
		case "bag_useitemhppool_req":
			return "C2S";
		case "bag_useitemchest_req":
			return "C2S";
		case "bag_useitemequipenergy_req":
			return "C2S";
		case "bag_useitemgemenergy_req":
			return "C2S";
		case "bag_useiteminspiration_req":
			return "C2S";
		case "bag_useitemvit_req":
			return "C2S";
		case "bag_useitemfashion_req":
			return "C2S";
		case "bag_useitemexpcoinpool_req":
			return "C2S";
		case "bag_usemonthlycard_req":
			return "C2S";
		case "bag_usevipcard_req":
			return "C2S";
		case "bag_useitemfeat_req":
			return "C2S";
		case "bag_useitemskill_req":
			return "C2S";
		case "bag_useitemletter_req":
			return "C2S";
		case "bag_useitemevil_req":
			return "C2S";
		case "bag_piececompose_req":
			return "C2S";
		case "bag_useitempropstrength_req":
			return "C2S";
		case "bag_useitemofflinefuncpoint_req":
			return "C2S";
		case "bag_useitemtitle_req":
			return "C2S";
		case "bag_useitemuskill_req":
			return "C2S";
		case "bag_useitemhead_req":
			return "C2S";
		case "equip_upwear_req":
			return "C2S";
		case "equip_downwear_req":
			return "C2S";
		case "equip_levelup_req":
			return "C2S";
		case "equip_batchlevelup_req":
			return "C2S";
		case "equip_starup_req":
			return "C2S";
		case "equip_repair_req":
			return "C2S";
		case "equip_autoupwear_req":
			return "C2S";
		case "gem_levelup_req":
			return "C2S";
		case "gem_inlay_req":
			return "C2S";
		case "gem_unlay_req":
			return "C2S";
		case "equip_refine_req":
			return "C2S";
		case "legend_sync_req":
			return "C2S";
		case "legend_make_req":
			return "C2S";
		case "legend_quit_req":
			return "C2S";
		case "legend_save_req":
			return "C2S";
		case "skill_select_req":
			return "C2S";
		case "skill_levelup_req":
			return "C2S";
		case "skill_enhance_req":
			return "C2S";
		case "skill_unlock_req":
			return "C2S";
		case "uniqueskill_set_req":
			return "C2S";
		case "spirit_learn_req":
			return "C2S";
		case "spirit_levelup_req":
			return "C2S";
		case "spirit_install_req":
			return "C2S";
		case "spirit_uninstall_req":
			return "C2S";
		case "weapon_make_req":
			return "C2S";
		case "weapon_levelup_req":
			return "C2S";
		case "weapon_buylevel_req":
			return "C2S";
		case "weapon_starup_req":
			return "C2S";
		case "weapon_select_req":
			return "C2S";
		case "weapon_sync_req":
			return "C2S";
		case "weapon_uskill_open_req":
			return "C2S";
		case "weapon_setform_req":
			return "C2S";
		case "weaponmap_start_req":
			return "C2S";
		case "pet_sync_req":
			return "C2S";
		case "pet_make_req":
			return "C2S";
		case "pet_transform_req":
			return "C2S";
		case "pet_levelup_req":
			return "C2S";
		case "pet_buylevel_req":
			return "C2S";
		case "pet_starup_req":
			return "C2S";
		case "pet_breakskillvlup_req":
			return "C2S";
		case "pet_worldmapset_req":
			return "C2S";
		case "pet_privatemapset_req":
			return "C2S";
		case "pet_sectmapset_req":
			return "C2S";
		case "pet_activitymapset_req":
			return "C2S";
		case "lifetaskmap_start_req":
			return "C2S";
		case "petspirit_lvlup_req":
			return "C2S";
		case "petspirit_learn_req":
			return "C2S";
		case "petspirit_replace_req":
			return "C2S";
		case "dtask_sync_req":
			return "C2S";
		case "dtask_take_req":
			return "C2S";
		case "chtask_sync_req":
			return "C2S";
		case "chtask_take_req":
			return "C2S";
		case "fame_sync_req":
			return "C2S";
		case "fame_upgrade_req":
			return "C2S";
		case "fame_take_req":
			return "C2S";
		case "onlinegift_sync_req":
			return "C2S";
		case "onlinegift_take_req":
			return "C2S";
		case "offlineexp_take_req":
			return "C2S";
		case "quizgift_sync_req":
			return "C2S";
		case "quizgift_qrank_req":
			return "C2S";
		case "quizgift_answer_req":
			return "C2S";
		case "sync_luckywheel_req":
			return "C2S";
		case "luckywheel_ondraw_req":
			return "C2S";
		case "luckywheel_buydrawtimes_req":
			return "C2S";
		case "play_firework_req":
			return "C2S";
		case "redenvelope_snatch_req":
			return "C2S";
		case "mtask_take_req":
			return "C2S";
		case "mtask_quit_req":
			return "C2S";
		case "mtask_reward_req":
			return "C2S";
		case "wtask_reward_req":
			return "C2S";
		case "ptask_reward_req":
			return "C2S";
		case "petlifetask_take_req":
			return "C2S";
		case "petlifetask_reward_req":
			return "C2S";
		case "task_useitem_req":
			return "C2S";
		case "task_submititem_req":
			return "C2S";
		case "pettask_submititem_req":
			return "C2S";
		case "petlifetask_submititem_req":
			return "C2S";
		case "task_dialog_req":
			return "C2S";
		case "task_conveynpc_req":
			return "C2S";
		case "task_conveyitem_req":
			return "C2S";
		case "task_answer_req":
			return "C2S";
		case "task_randquestion_req":
			return "C2S";
		case "pet_revive_req":
			return "C2S";
		case "role_mine_req":
			return "C2S";
		case "set_attackmode_req":
			return "C2S";
		case "team_query_member":
			return "C2S";
		case "team_invite_req":
			return "C2S";
		case "team_invitedby_req":
			return "C2S";
		case "team_apply_req":
			return "C2S";
		case "team_appliedby_req":
			return "C2S";
		case "team_leave_req":
			return "C2S";
		case "team_kick_req":
			return "C2S";
		case "team_dissolve_req":
			return "C2S";
		case "team_change_leader_req":
			return "C2S";
		case "team_role_query_req":
			return "C2S";
		case "team_self_req":
			return "C2S";
		case "team_mapt_req":
			return "C2S";
		case "team_mapr_req":
			return "C2S";
		case "mroom_create_req":
			return "C2S";
		case "mroom_enter_req":
			return "C2S";
		case "mroom_qenter_req":
			return "C2S";
		case "mroom_invite_req":
			return "C2S";
		case "mroom_invitedby_req":
			return "C2S";
		case "mroom_leave_req":
			return "C2S";
		case "mroom_kick_req":
			return "C2S";
		case "mroom_change_leader_req":
			return "C2S";
		case "mroom_self_req":
			return "C2S";
		case "mroom_mapr_req":
			return "C2S";
		case "mroom_query_req":
			return "C2S";
		case "sect_sync_req":
			return "C2S";
		case "sect_create_req":
			return "C2S";
		case "sect_queryapplied_req":
			return "C2S";
		case "sect_list_req":
			return "C2S";
		case "sect_query_req":
			return "C2S";
		case "sect_searchbyid_req":
			return "C2S";
		case "sect_searchbyname_req":
			return "C2S";
		case "sect_apply_req":
			return "C2S";
		case "sect_qapply_req":
			return "C2S";
		case "sect_members_req":
			return "C2S";
		case "sect_applications_req":
			return "C2S";
		case "sect_history_req":
			return "C2S";
		case "sect_appliedby_req":
			return "C2S";
		case "sect_appliedbyall_req":
			return "C2S";
		case "sect_appoint_req":
			return "C2S";
		case "sect_kick_req":
			return "C2S";
		case "sect_leave_req":
			return "C2S";
		case "sect_disband_req":
			return "C2S";
		case "sect_changecreed_req":
			return "C2S";
		case "sect_changename_req":
			return "C2S";
		case "sect_changeicon_req":
			return "C2S";
		case "sect_joinlvl_req":
			return "C2S";
		case "sect_sendemail_req":
			return "C2S";
		case "sect_upgrade_req":
			return "C2S";
		case "sect_accelerate_req":
			return "C2S";
		case "sect_aurasync_req":
			return "C2S";
		case "sect_auraexpadd_req":
			return "C2S";
		case "sect_worship_req":
			return "C2S";
		case "sect_syncworshipreward_req":
			return "C2S";
		case "sect_takeworshipreward_req":
			return "C2S";
		case "sect_openbanquet_req":
			return "C2S";
		case "sect_listbanquet_req":
			return "C2S";
		case "sect_joinbanquet_req":
			return "C2S";
		case "sect_shopsync_req":
			return "C2S";
		case "sect_shoprefresh_req":
			return "C2S";
		case "sect_shopbuy_req":
			return "C2S";
		case "sectmap_start_req":
			return "C2S";
		case "sectmap_status_req":
			return "C2S";
		case "sectmap_query_req":
			return "C2S";
		case "sectmap_open_req":
			return "C2S";
		case "sectmap_rewards_req":
			return "C2S";
		case "sectmap_apply_req":
			return "C2S";
		case "sectmap_allocation_req":
			return "C2S";
		case "sectmap_damage_req":
			return "C2S";
		case "sectmap_sync_req":
			return "C2S";
		case "sect_task_sync_req":
			return "C2S";
		case "sect_share_task_sync_req":
			return "C2S";
		case "sect_finish_task_sync_req":
			return "C2S";
		case "sect_task_receive_req":
			return "C2S";
		case "sect_task_cancel_req":
			return "C2S";
		case "sect_task_finish_req":
			return "C2S";
		case "sect_task_issuance_req":
			return "C2S";
		case "sect_task_reset_req":
			return "C2S";
		case "sect_task_done_rewards_req":
			return "C2S";
		case "diyskill_sync_req":
			return "C2S";
		case "diyskill_create_req":
			return "C2S";
		case "diyskill_save_req":
			return "C2S";
		case "diyskill_discard_req":
			return "C2S";
		case "diyskill_selectuse_req":
			return "C2S";
		case "diyskill_canceluse_req":
			return "C2S";
		case "diyskill_unlock_req":
			return "C2S";
		case "diyskill_buytimes_req":
			return "C2S";
		case "diyskill_share_req":
			return "C2S";
		case "diyskill_cancelshare_req":
			return "C2S";
		case "diyskill_borrow_req":
			return "C2S";
		case "diyskill_flaunt_req":
			return "C2S";
		case "diyskill_shareaward_req":
			return "C2S";
		case "sync_pet_can_use_pool":
			return "C2S";
		case "sect_push_application_req":
			return "C2S";
		case "suite_buy_req":
			return "C2S";
		case "store_buy_req":
			return "C2S";
		case "teleport_npc_req":
			return "C2S";
		case "teleport_monster_req":
			return "C2S";
		case "teleport_mineral_req":
			return "C2S";
		case "arena_sync_req":
			return "C2S";
		case "arena_setpets_req":
			return "C2S";
		case "arena_ranks_req":
			return "C2S";
		case "arena_refresh_req":
			return "C2S";
		case "arena_defencepets_req":
			return "C2S";
		case "arena_resetcool_req":
			return "C2S";
		case "arena_buytimes_req":
			return "C2S";
		case "arena_shopsync_req":
			return "C2S";
		case "arena_shoprefresh_req":
			return "C2S";
		case "arena_shopbuy_req":
			return "C2S";
		case "arena_startattack_req":
			return "C2S";
		case "arena_log_req":
			return "C2S";
		case "arena_scoresync_req":
			return "C2S";
		case "arena_takescore_req":
			return "C2S";
		case "arena_hidedefence_req":
			return "C2S";
		case "superarena_sync_req":
			return "C2S";
		case "superarena_setpets_req":
			return "C2S";
		case "superarena_singlejoin_req":
			return "C2S";
		case "superarena_teamjoin_req":
			return "C2S";
		case "superarena_quit_req":
			return "C2S";
		case "superarena_shopsync_req":
			return "C2S";
		case "superarena_shoprefresh_req":
			return "C2S";
		case "superarena_shopbuy_req":
			return "C2S";
		case "aroom_create_req":
			return "C2S";
		case "aroom_invite_req":
			return "C2S";
		case "aroom_invitedby_req":
			return "C2S";
		case "aroom_leave_req":
			return "C2S";
		case "aroom_kick_req":
			return "C2S";
		case "aroom_change_leader_req":
			return "C2S";
		case "aroom_self_req":
			return "C2S";
		case "aroom_query_member":
			return "C2S";
		case "aroom_mapr_req":
			return "C2S";
		case "superarena_weekrank_req":
			return "C2S";
		case "superarena_dayrank_req":
			return "C2S";
		case "bwarena_sync_req":
			return "C2S";
		case "bwarena_setpet_req":
			return "C2S";
		case "bwarena_refresh_req":
			return "C2S";
		case "bwarena_buytimes_req":
			return "C2S";
		case "bwarena_startattack_req":
			return "C2S";
		case "bwarena_takescore_req":
			return "C2S";
		case "bwarena_log_req":
			return "C2S";
		case "bwarena_ranks_req":
			return "C2S";
		case "forcewar_sync_req":
			return "C2S";
		case "forcewar_join_req":
			return "C2S";
		case "forcewar_quit_req":
			return "C2S";
		case "froom_create_req":
			return "C2S";
		case "froom_invite_req":
			return "C2S";
		case "froom_invitedby_req":
			return "C2S";
		case "froom_leave_req":
			return "C2S";
		case "froom_kick_req":
			return "C2S";
		case "froom_change_leader_req":
			return "C2S";
		case "froom_query_member":
			return "C2S";
		case "froom_query_members":
			return "C2S";
		case "froom_mapr_req":
			return "C2S";
		case "bosses_sync_req":
			return "C2S";
		case "walktoboss_req":
			return "C2S";
		case "transtoboss_req":
			return "C2S";
		case "reset_transtime_req":
			return "C2S";
		case "boss_reward_req":
			return "C2S";
		case "friend_sync_req":
			return "C2S";
		case "friend_pluslist_req":
			return "C2S";
		case "friend_recommend_req":
			return "C2S";
		case "friend_add_req":
			return "C2S";
		case "friend_search_req":
			return "C2S";
		case "friend_delete_req":
			return "C2S";
		case "friend_givevit_req":
			return "C2S";
		case "friend_giveallvits_req":
			return "C2S";
		case "friend_receivevit_req":
			return "C2S";
		case "friend_agreeadd_req":
			return "C2S";
		case "friend_changemsg_req":
			return "C2S";
		case "friend_changehead_req":
			return "C2S";
		case "friend_enemy_req":
			return "C2S";
		case "friend_removeenemy_req":
			return "C2S";
		case "friend_setfocus_req":
			return "C2S";
		case "give_flower_req":
			return "C2S";
		case "get_flowerlog_req":
			return "C2S";
		case "get_acceptlist_req":
			return "C2S";
		case "auction_syncitems_req":
			return "C2S";
		case "auction_syncequips_req":
			return "C2S";
		case "auction_syncselfitems_req":
			return "C2S";
		case "auction_putonitems_req":
			return "C2S";
		case "auction_putonequip_req":
			return "C2S";
		case "auction_putoffitems_req":
			return "C2S";
		case "auction_buyitems_req":
			return "C2S";
		case "auction_expand_req":
			return "C2S";
		case "auction_tradelog_req":
			return "C2S";
		case "auction_itemprices_req":
			return "C2S";
		case "treasure_syncnpcs_req":
			return "C2S";
		case "treasure_refreshnpc_req":
			return "C2S";
		case "treasure_buypieces_req":
			return "C2S";
		case "treasure_npcreward_req":
			return "C2S";
		case "treasure_syncmap_req":
			return "C2S";
		case "treasure_totalsearch_req":
			return "C2S";
		case "treasure_search_req":
			return "C2S";
		case "treasure_makemap_req":
			return "C2S";
		case "treasure_mapreward_req":
			return "C2S";
		case "treasure_quitmap_req":
			return "C2S";
		case "treasure_medalgrow_req":
			return "C2S";
		case "horse_tame_req":
			return "C2S";
		case "horse_use_req":
			return "C2S";
		case "horse_upstar_req":
			return "C2S";
		case "horse_enhance_req":
			return "C2S";
		case "horse_enhancesave_req":
			return "C2S";
		case "horse_changeshow_req":
			return "C2S";
		case "horse_activateshow_req":
			return "C2S";
		case "horse_learnskill_req":
			return "C2S";
		case "sync_horse_skillLevel_req":
			return "C2S";
		case "horse_skill_up_level_req":
			return "C2S";
		case "horse_setskill_req":
			return "C2S";
		case "fashion_upwear_req":
			return "C2S";
		case "fashion_setshow_req":
			return "C2S";
		case "seal_make_req":
			return "C2S";
		case "seal_upgrade_req":
			return "C2S";
		case "seal_enhance_req":
			return "C2S";
		case "seal_save_enhance_req":
			return "C2S";
		case "expcoin_sync_req":
			return "C2S";
		case "expcoin_extract_req":
			return "C2S";
		case "rarebook_sync_req":
			return "C2S";
		case "rarebook_push_req":
			return "C2S";
		case "rarebook_pop_req":
			return "C2S";
		case "rarebook_unlock_req":
			return "C2S";
		case "rarebook_lvlup_req":
			return "C2S";
		case "grasp_sync_req":
			return "C2S";
		case "grasp_impl_req":
			return "C2S";
		case "grasp_reset_req":
			return "C2S";
		case "dmgtransfer_buypoint_req":
			return "C2S";
		case "dmgtransfer_putpoint_req":
			return "C2S";
		case "dmgtransfer_lvlup_req":
			return "C2S";
		case "dmgtransfer_reset_req":
			return "C2S";
		case "lead_info_set":
			return "C2S";
		case "lead_plot_set":
			return "C2S";
		case "usersurvey_sync_req":
			return "C2S";
		case "usersurvey_submit_req":
			return "C2S";
		case "usersurvey_reward_req":
			return "C2S";
		case "cblogingift_sync_req":
			return "C2S";
		case "cblogingift_take_req":
			return "C2S";
		case "cblvlupgift_sync_req":
			return "C2S";
		case "cblvlupgift_take_req":
			return "C2S";
		case "userdata_sync_req":
			return "C2S";
		case "userdata_modify_req":
			return "C2S";
		case "userdata_reward_req":
			return "C2S";
		case "cbcountdowngift_sync_req":
			return "C2S";
		case "cbcountdowngift_take_req":
			return "C2S";
		case "ontimegift_sync_req":
			return "C2S";
		case "ontimegift_take_req":
			return "C2S";
		case "strengthengift_sync_req":
			return "C2S";
		case "strengthengift_take_req":
			return "C2S";
		case "official_research_sync_req":
			return "C2S";
		case "official_research_take_req":
			return "C2S";
		case "permanenttitle_set_req":
			return "C2S";
		case "timedtitle_set_req":
			return "C2S";
		case "titleslot_unlock_req":
			return "C2S";
		case "branch_task_take_req":
			return "C2S";
		case "branch_task_quit_req":
			return "C2S";
		case "branch_task_finish_req":
			return "C2S";
		case "sync_tower_req":
			return "C2S";
		case "tower_record_req":
			return "C2S";
		case "tower_setpets_req":
			return "C2S";
		case "tower_startfight_req":
			return "C2S";
		case "tower_buytimes_req":
			return "C2S";
		case "tower_sweep_req":
			return "C2S";
		case "sync_towerfame_req":
			return "C2S";
		case "tower_donate_req":
			return "C2S";
		case "take_towerfame_req":
			return "C2S";
		case "enter_secretmap_req":
			return "C2S";
		case "take_secretreward_req":
			return "C2S";
		case "sect_deliver_sync_req":
			return "C2S";
		case "sect_deliver_refresh_req":
			return "C2S";
		case "sect_deliver_protect_req":
			return "C2S";
		case "sect_deliver_begin_req":
			return "C2S";
		case "sect_deliver_search_help_req":
			return "C2S";
		case "sect_deliver_on_help_req":
			return "C2S";
		case "sect_deliver_cancel_req":
			return "C2S";
		case "sect_deliver_finish_req":
			return "C2S";
		case "sect_deliver_sync_wish_req":
			return "C2S";
		case "sect_deliver_add_wish_req":
			return "C2S";
		case "sect_deliver_save_wish_req":
			return "C2S";
		case "sect_rob_task_take_req":
			return "C2S";
		case "sect_rob_task_cancel_req":
			return "C2S";
		case "sect_deliver_shopsync_req":
			return "C2S";
		case "sect_deliver_shoprefresh_req":
			return "C2S";
		case "sect_deliver_shopbuy_req":
			return "C2S";
		case "produce_workshopsync_req":
			return "C2S";
		case "produce_createnewrecipe_req":
			return "C2S";
		case "produce_produce_req":
			return "C2S";
		case "produce_split_req":
			return "C2S";
		case "produce_fusion_req":
			return "C2S";
		case "produce_splitspbuy_req":
			return "C2S";
		case "bag_merge_req":
			return "C2S";
		case "rmactivity_takereward_req":
			return "C2S";
		case "role_rename_req":
			return "C2S";
		case "horse_ride_req":
			return "C2S";
		case "horse_unride_req":
			return "C2S";
		case "mulhorse_invite_req":
			return "C2S";
		case "mulhorse_invitehandle_req":
			return "C2S";
		case "mulhorse_apply_req":
			return "C2S";
		case "mulhorse_applyhandle_req":
			return "C2S";
		case "mulhorse_leave_req":
			return "C2S";
		case "mulhorse_kick_req":
			return "C2S";
		case "staywith_invite_req":
			return "C2S";
		case "staywith_invitehandle_req":
			return "C2S";
		case "staywith_leave_req":
			return "C2S";
		case "sync_message_board_req":
			return "C2S";
		case "add_message_board_req":
			return "C2S";
		case "comment_message_board_req":
			return "C2S";
		case "change_message_board_content_req":
			return "C2S";
		case "schedule_sync_req":
			return "C2S";
		case "schedule_mapreward_req":
			return "C2S";
		case "save_guide_mapcopy_req":
			return "C2S";
		case "sect_invite_req":
			return "C2S";
		case "sect_invite_response_req":
			return "C2S";
		case "unlock_armor_type_req":
			return "C2S";
		case "armor_uprank_req":
			return "C2S";
		case "armor_add_talent_req":
			return "C2S";
		case "armor_change_req":
			return "C2S";
		case "armor_up_level_req":
			return "C2S";
		case "rune_push_req":
			return "C2S";
		case "rune_pop_req":
			return "C2S";
		case "reset_talent_point_req":
			return "C2S";
		case "solt_group_unlock_req":
			return "C2S";
		case "solt_push_rune_req":
			return "C2S";
		case "lang_push_rune_req":
			return "C2S";
		case "rune_wish_req":
			return "C2S";
		case "put_in_warehouse_req":
			return "C2S";
		case "take_out_warehouse_req":
			return "C2S";
		case "expand_warehouse_req":
			return "C2S";
		case "sync_private_warehouse_req":
			return "C2S";
		case "sync_public_warehouse_req":
			return "C2S";
		case "propose_req":
			return "C2S";
		case "propose_response_req":
			return "C2S";
		case "marriage_sync_req":
			return "C2S";
		case "divorce_req":
			return "C2S";
		case "marriage_skill_levelup_req":
			return "C2S";
		case "transform_to_partner_req":
			return "C2S";
		case "marriage_start_parade_req":
			return "C2S";
		case "marriage_start_banquet_req":
			return "C2S";
		case "exchange_item_req":
			return "C2S";
		case "mrgseriestask_open_req":
			return "C2S";
		case "mrgseriestask_take_req":
			return "C2S";
		case "mrgseriestask_reward_req":
			return "C2S";
		case "mrglooptask_open_req":
			return "C2S";
		case "mrglooptask_take_req":
			return "C2S";
		case "mrglooptask_reward_req":
			return "C2S";
		case "save_skill_preset_req":
			return "C2S";
		case "save_all_skill_preset_req":
			return "C2S";
		case "save_spirits_preset_req":
			return "C2S";
		case "delete_skill_preset_req":
			return "C2S";
		case "delete_spirits_preset_req":
			return "C2S";
		case "change_skill_preset_req":
			return "C2S";
		case "change_spirits_preset_req":
			return "C2S";
		case "sect_group_map_open_req":
			return "C2S";
		case "sect_group_map_enter_req":
			return "C2S";
		case "sect_group_map_sync_req":
			return "C2S";
		case "weapon_skill_level_up_req":
			return "C2S";
		case "weapon_talent_level_up_req":
			return "C2S";
		case "weapon_talent_point_buy_req":
			return "C2S";
		case "weapon_talent_point_reset_req":
			return "C2S";
		case "send_gift_req":
			return "C2S";
		case "sync_big_map_flag_info_req":
			return "C2S";
		case "pet_skill_level_up_req":
			return "C2S";
		case "sync_special_card_req":
			return "C2S";
		case "take_special_card_reward_req":
			return "C2S";
		case "sync_daily_vit_reward_req":
			return "C2S";
		case "take_daily_vit_reward_req":
			return "C2S";
		case "try_open_insight_req":
			return "C2S";
		case "try_open_revenge_req":
			return "C2S";
		case "try_sync_insight_req":
			return "C2S";
		case "try_sync_revenge_req":
			return "C2S";
		case "try_transform_insight_req":
			return "C2S";
		case "try_transform_revenge_req":
			return "C2S";
		case "heirloom_wipe_req":
			return "C2S";
		case "heirloom_takeout_req":
			return "C2S";
		case "buy_offline_func_point_req":
			return "C2S";
		case "set_sect_qqgroup_req":
			return "C2S";
		case "set_heirloom_display_req":
			return "C2S";
		case "feat_gambleshopsync_req":
			return "C2S";
		case "feat_gambleshoprefresh_req":
			return "C2S";
		case "feat_gambleshopbuy_req":
			return "C2S";
		case "add_marriage_bespeak_req":
			return "C2S";
		case "sync_marriage_bespeak_req":
			return "C2S";
		case "base_dummygoods_quick_buy_req":
			return "C2S";
		case "activity_last_quick_done_req":
			return "C2S";
		case "stele_sync_req":
			return "C2S";
		case "stele_join_req":
			return "C2S";
		case "stele_rank_req":
			return "C2S";
		case "stele_teleport_req":
			return "C2S";
		case "blacklist_add_req":
			return "C2S";
		case "blacklist_del_req":
			return "C2S";
		case "blacklist_sync_req":
			return "C2S";
		case "demonhole_sync_req":
			return "C2S";
		case "demonhole_join_req":
			return "C2S";
		case "demonhole_changefloor_req":
			return "C2S";
		case "demonhole_battle_req":
			return "C2S";
		case "justicemap_start_req":
			return "C2S";
		case "emergency_sync_req":
			return "C2S";
		case "emergency_enter_req":
			return "C2S";
		case "emergency_rank_req":
			return "C2S";
		case "lucklystar_sync_req":
			return "C2S";
		case "lucklystar_gift_req":
			return "C2S";
		case "fightnpc_start_req":
			return "C2S";
		case "fightnpc_reward_req":
			return "C2S";
		case "packetreward_sync_req":
			return "C2S";
		case "packetreward_take_req":
			return "C2S";
		case "horse_enhance_prop_unlock_req":
			return "C2S";
		case "buy_wizard_pet_time_req":
			return "C2S";
		case "set_cur_wizard_pet_req":
			return "C2S";
		case "sync_item_unlock_head_req":
			return "C2S";
		case "socialmsg_send_req":
			return "C2S";
		case "socialmsg_like_req":
			return "C2S";
		case "socialmsg_dislike_req":
			return "C2S";
		case "socialmsg_pageinfo_req":
			return "C2S";
		case "npc_transfrom_req":
			return "C2S";
		case "share_success":
			return "C2S";
		case "unlock_head_req":
			return "C2S";
		case "start_npc_map_req":
			return "C2S";
		case "join_npc_pray_req":
			return "C2S";
		case "unlock_private_warehouse_req":
			return "C2S";
		case "towerdefence_start_req":
			return "C2S";
		case "towerdefence_selectcard_req":
			return "C2S";
		case "client_ping_start":
			return "C2M";
		case "sync_server_ping":
			return "C2M";
		case "set_monster_birthpos":
			return "C2M";
		case "role_ride_horse":
			return "C2M";
		case "role_unride_horse":
			return "C2M";
		case "role_adjust_serverpos":
			return "C2M";
		case "pet_adjust_serverpos":
			return "C2M";
		case "role_move":
			return "C2M";
		case "pet_move":
			return "C2M";
		case "escortcar_move":
			return "C2M";
		case "role_stopmove":
			return "C2M";
		case "pet_stopmove":
			return "C2M";
		case "escortcar_stopmove":
			return "C2M";
		case "query_roles_detail":
			return "C2M";
		case "query_traps_detail":
			return "C2M";
		case "query_pets_detail":
			return "C2M";
		case "query_forcewar_result":
			return "C2M";
		case "query_forcewar_members_pos":
			return "C2M";
		case "role_usefollowskill":
			return "C2M";
		case "role_socialaction":
			return "C2M";
		case "role_breakskill":
			return "C2M";
		case "role_useskill":
			return "C2M";
		case "role_usemapskill":
			return "C2M";
		case "pet_useskill":
			return "C2M";
		case "role_endskill":
			return "C2M";
		case "pet_endskill":
			return "C2M";
		case "role_finishattack":
			return "C2M";
		case "pet_finishattack":
			return "C2M";
		case "role_rushstart":
			return "C2M";
		case "pet_rushstart":
			return "C2M";
		case "mineral_quit":
			return "C2M";
		case "trap_click":
			return "C2M";
		case "role_shift_start":
			return "C2M";
		case "pet_shift_start":
			return "C2M";
		case "role_pickup_drops":
			return "C2M";
		case "role_pickup_mapbuff":
			return "C2M";
		case "role_motivate_weapon":
			return "C2M";
		case "privatemap_kill":
			return "C2M";
		case "privatemap_damage_reward":
			return "C2M";
		case "privatemap_trap":
			return "C2M";
		case "privatemap_weapon_master":
			return "C2M";
		case "privatemap_role_updatehp":
			return "C2M";
		case "privatemap_pet_updatehp":
			return "C2M";
		case "privatemap_durability":
			return "C2M";
		case "query_entity_nearby":
			return "C2M";
		case "send_towerdefence_alarm":
			return "C2M";
		case "query_map_damage_rank":
			return "C2M";
		case "query_sect_map_cur_info":
			return "C2M";
		default:
			break;
		}
		return null;
	}

}
